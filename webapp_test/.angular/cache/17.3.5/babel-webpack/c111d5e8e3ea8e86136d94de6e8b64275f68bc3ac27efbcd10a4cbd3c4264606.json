{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { Subject, takeUntil, tap } from 'rxjs';\nimport { PcvPredictionSelectionBatchComponent } from '../pcv-prediction-selection-batch/pcv-prediction-selection-batch.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@rds/angular-components\";\nfunction PcvPredictionTabComponent_Conditional_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 3)(1, \"rds-chip-list\")(2, \"rds-chip\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelement(4, \"rds-divider\");\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(ctx_r0.selection.batchId);\n  }\n}\nexport class PcvPredictionTabComponent {\n  constructor(dialogService) {\n    this.dialogService = dialogService;\n    this.updateSelection = new EventEmitter();\n    this.destroy$ = new Subject();\n    this.batchesLoading = true;\n  }\n  get model() {\n    return this.selection?.model || null;\n  }\n  ngOnInit() {\n    this.batchesObservable.pipe(takeUntil(this.destroy$), tap(batches => this._batches = batches), tap(() => this.batchesLoading = false)).subscribe();\n  }\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  openBatchesModal() {\n    const dialogRef = this.dialogService.open(PcvPredictionSelectionBatchComponent, {\n      data: {\n        selectedBatchId: this.selection.batchId || null,\n        batches: this._batches\n      },\n      size: 'xl'\n    });\n    dialogRef.afterClosed().subscribe(selectedBatchId => {\n      if (!!selectedBatchId) {\n        this.updateSelection.emit({\n          ...this.selection,\n          batchId: selectedBatchId\n        });\n      }\n      if (selectedBatchId === null) {\n        this.updateSelection.emit({\n          ...this.selection,\n          batchId: null\n        });\n      }\n    });\n  }\n  updateModel(event) {\n    this.updateSelection.emit({\n      ...this.selection,\n      model: event.value\n    });\n  }\n  static #_ = this.ɵfac = function PcvPredictionTabComponent_Factory(t) {\n    return new (t || PcvPredictionTabComponent)(i0.ɵɵdirectiveInject(i1.RdsDialogService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PcvPredictionTabComponent,\n    selectors: [[\"app-pcv-prediction-tab\"]],\n    inputs: {\n      batchesObservable: \"batchesObservable\",\n      selection: \"selection\"\n    },\n    outputs: {\n      updateSelection: \"updateSelection\"\n    },\n    decls: 10,\n    vars: 8,\n    consts: [[1, \"selection-section\"], [\"rds-primary-button\", \"\", 3, \"click\", \"disabled\"], [\"icon\", \"factor_parallelism\", \"namespace\", \"filled\"], [1, \"chip-list\"]],\n    template: function PcvPredictionTabComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"rds-control-label\");\n        i0.ɵɵtext(2);\n        i0.ɵɵpipe(3, \"translate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 1);\n        i0.ɵɵlistener(\"click\", function PcvPredictionTabComponent_Template_button_click_4_listener() {\n          return ctx.openBatchesModal();\n        });\n        i0.ɵɵelement(5, \"rds-icon\", 2);\n        i0.ɵɵtext(6);\n        i0.ɵɵpipe(7, \"translate\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(8, \"rds-divider\");\n        i0.ɵɵtemplate(9, PcvPredictionTabComponent_Conditional_9_Template, 5, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(3, 4, \"pcv-prediction.select-batch-label\"));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.batchesLoading);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(7, 6, \"pcv-prediction.select-batch-button\"), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵconditional(9, !!ctx.selection.batchId ? 9 : -1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%]   .selection-section[_ngcontent-%COMP%] {\\n  padding: 10px 0;\\n}\\n[_nghost-%COMP%]   .selection-section[_ngcontent-%COMP%]   .rds-button[_ngcontent-%COMP%] {\\n  margin-left: 10px;\\n}\\n[_nghost-%COMP%]   .chip-list[_ngcontent-%COMP%] {\\n  padding: 10px 0;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wY3YtcHJlZGljdGlvbi9wY3YtcHJlZGljdGlvbi10YWIvcGN2LXByZWRpY3Rpb24tdGFiLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJO0VBQ0ksZUFBQTtBQUFSO0FBQ1E7RUFDSSxpQkFBQTtBQUNaO0FBRUk7RUFDSSxlQUFBO0FBQVIiLCJzb3VyY2VzQ29udGVudCI6WyI6aG9zdCB7XG4gICAgLnNlbGVjdGlvbi1zZWN0aW9uIHtcbiAgICAgICAgcGFkZGluZzogMTBweCAwO1xuICAgICAgICAucmRzLWJ1dHRvbiB7XG4gICAgICAgICAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICAgICAgfVxuICAgIH1cbiAgICAuY2hpcC1saXN0IHtcbiAgICAgICAgcGFkZGluZzogMTBweCAwO1xuICAgIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","Subject","takeUntil","tap","PcvPredictionSelectionBatchComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","selection","batchId","PcvPredictionTabComponent","constructor","dialogService","updateSelection","destroy$","batchesLoading","model","ngOnInit","batchesObservable","pipe","batches","_batches","subscribe","ngOnDestroy","next","complete","openBatchesModal","dialogRef","open","data","selectedBatchId","size","afterClosed","emit","updateModel","event","value","_","ɵɵdirectiveInject","i1","RdsDialogService","_2","selectors","inputs","outputs","decls","vars","consts","template","PcvPredictionTabComponent_Template","rf","ctx","ɵɵlistener","PcvPredictionTabComponent_Template_button_click_4_listener","ɵɵtemplate","PcvPredictionTabComponent_Conditional_9_Template","ɵɵpipeBind1","ɵɵproperty","ɵɵtextInterpolate1","ɵɵconditional"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-prediction/pcv-prediction-tab/pcv-prediction-tab.component.ts","/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-prediction/pcv-prediction-tab/pcv-prediction-tab.component.html"],"sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { IBatch, IModelType, ISelectionPhase } from '../../../../types/pcv-prediction';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\nimport { RdsDialogRef, RdsDialogService } from '@rds/angular-components';\nimport { PcvPredictionSelectionBatchComponent } from '../pcv-prediction-selection-batch/pcv-prediction-selection-batch.component';\nimport { RdsRadioChangedEvent } from '@rds/angular-components/lib/radio-button/radio-button-changed-event';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-pcv-prediction-tab',\n  templateUrl: './pcv-prediction-tab.component.html',\n  styleUrl: './pcv-prediction-tab.component.scss'\n})\nexport class PcvPredictionTabComponent implements OnInit, OnDestroy {\n\n  @Input({ required: true }) batchesObservable!: Observable<IBatch[]>;\n\n  @Input({ required: true }) selection!: ISelectionPhase;\n\n  @Output() updateSelection: EventEmitter<ISelectionPhase> = new EventEmitter();\n\n  private _batches!: IBatch[];\n\n  private destroy$: Subject<void> = new Subject();\n\n  public batchesLoading: boolean = true;\n\n  constructor(private dialogService: RdsDialogService) {\n\n  }\n\n  get model() {\n    return this.selection?.model || null;\n  }\n\n  ngOnInit() {\n    this.batchesObservable.pipe(\n      takeUntil(this.destroy$),\n      tap((batches: IBatch[]) => this._batches = batches),\n      tap(() => this.batchesLoading = false)\n    ).subscribe();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  public openBatchesModal(): void {\n    const dialogRef: RdsDialogRef<PcvPredictionSelectionBatchComponent> = this.dialogService.open(PcvPredictionSelectionBatchComponent, { \n      data: {\n        selectedBatchId: this.selection.batchId || null,\n        batches: this._batches\n      },\n      size: 'xl'\n    });\n    dialogRef.afterClosed().subscribe((selectedBatchId: string | null | undefined) => {\n      if (!!selectedBatchId) {\n        this.updateSelection.emit({\n          ...this.selection,\n          batchId: selectedBatchId\n        });\n      }\n      if (selectedBatchId === null) {\n        this.updateSelection.emit({\n          ...this.selection,\n          batchId: null\n        });\n      }\n    });\n  }\n\n  public updateModel(event: RdsRadioChangedEvent<any>): void {\n    this.updateSelection.emit({\n      ...this.selection,\n      model: event.value\n    });\n  }\n}\n","<div class=\"selection-section\">\n    <rds-control-label>{{ 'pcv-prediction.select-batch-label' | translate }}</rds-control-label>\n    <button rds-primary-button [disabled]=\"batchesLoading\" (click)=\"openBatchesModal()\">\n        <rds-icon icon=\"factor_parallelism\" namespace=\"filled\"></rds-icon>\n        {{ 'pcv-prediction.select-batch-button' | translate }}\n    </button>\n</div>\n<rds-divider></rds-divider>\n@if (!!selection.batchId) {\n    <div class=\"chip-list\">\n        <rds-chip-list>\n            <rds-chip>{{ selection.batchId }}</rds-chip>\n        </rds-chip-list>\n    </div>\n    <rds-divider></rds-divider>\n}\n<!--rds-radio-group class=\"d-flex flex-row\" (buttonChanged)=\"updateModel($event)\">\n    <rds-radio-button value=\"initial-model\" [checked]=\"model === 'initial-model'\">initial-model</rds-radio-button>\n    <rds-radio-button value=\"later-model\" [checked]=\"model === 'later-model'\">later-model</rds-radio-button>\n    <rds-radio-button value=\"both-models\" [checked]=\"model === 'both-models'\">both-models</rds-radio-button>\n</rds-radio-group>-->"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}