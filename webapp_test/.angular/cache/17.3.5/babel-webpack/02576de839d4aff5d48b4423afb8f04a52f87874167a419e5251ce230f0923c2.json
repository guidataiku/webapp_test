{"ast":null,"code":"import { EMPTY, catchError, delay, finalize, of, retry, share, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PcvPredictionService {\n  constructor(http) {\n    this.http = http;\n  }\n  getBatches(data, productId, phaseId) {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('batches') && data[phaseId].batches.loading === false && data[phaseId].batches.data) {\n      return of(data[phaseId].batches.data);\n    }\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('batches') && data[phaseId].batches.loading === true && data[phaseId].batches.request) {\n      return data[phaseId].batches.request;\n    }\n    if (data.hasOwnProperty(phaseId) === false) {\n      data[phaseId] = {};\n    }\n    data[phaseId]['batches'] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get(`api/pcv-model-insights/${productId}/${phaseId}/batches`).pipe(retry(2), delay(2000), tap(loadedData => {\n        data[phaseId].batches = {\n          ...data[phaseId].batches,\n          loading: false,\n          error: false,\n          data: loadedData\n        };\n      }), catchError(error => {\n        data[phaseId].batches = {\n          ...data[phaseId].batches,\n          loading: false,\n          data: null,\n          error: true\n        };\n        return EMPTY;\n      }), share(), finalize(() => {\n        data[phaseId].batches = {\n          ...data[phaseId].batches,\n          request: null\n        };\n      }))\n    };\n    return data[phaseId].batches.request;\n  }\n  static #_ = this.ɵfac = function PcvPredictionService_Factory(t) {\n    return new (t || PcvPredictionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PcvPredictionService,\n    factory: PcvPredictionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EMPTY","catchError","delay","finalize","of","retry","share","tap","PcvPredictionService","constructor","http","getBatches","data","productId","phaseId","hasOwnProperty","batches","loading","request","error","get","pipe","loadedData","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/services/pcv-prediction.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { IData, IBatch } from '../../types/pcv-prediction';\nimport { EMPTY, Observable, catchError, delay, finalize, of, retry, share, tap } from 'rxjs';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PcvPredictionService {\n\n  constructor(private http: HttpClient) { }\n\n  public getBatches(data: IData, productId: string, phaseId: string): Observable<any> {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('batches') && data[phaseId].batches.loading === false && data[phaseId].batches.data) {\n      return of(data[phaseId].batches.data as any[]);\n    }\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('batches') && data[phaseId].batches.loading === true && data[phaseId].batches.request) {\n      return data[phaseId].batches.request;\n    }\n    if (data.hasOwnProperty(phaseId) === false) {\n      (data[phaseId] as any) = {};\n    }\n    data[phaseId]['batches'] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get<any>(`api/pcv-model-insights/${productId}/${phaseId}/batches`)\n        .pipe(\n          retry(2),\n          delay(2000),\n          tap((loadedData: IBatch[]) => {\n            data[phaseId].batches = {\n              ...data[phaseId].batches,\n              loading: false,\n              error: false,\n              data: loadedData as any\n            };\n          }),\n          catchError((error: HttpErrorResponse) => {\n            data[phaseId].batches = {\n              ...data[phaseId].batches,\n              loading: false,\n              data: null,\n              error: true\n            };\n            return EMPTY;\n          }),\n          share(),\n          finalize(() => {\n            data[phaseId].batches = {\n              ...data[phaseId].batches,\n              request: null\n            } as any\n          })\n        )\n    };\n    return data[phaseId].batches.request;\n  }\n}\n"],"mappings":"AAEA,SAASA,KAAK,EAAcC,UAAU,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEC,GAAG,QAAQ,MAAM;;;AAM5F,OAAM,MAAOC,oBAAoB;EAE/BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAEjCC,UAAUA,CAACC,IAAW,EAAEC,SAAiB,EAAEC,OAAe;IAC/D,IAAIF,IAAI,CAACG,cAAc,CAACD,OAAO,CAAC,IAAIF,IAAI,CAACE,OAAO,CAAC,CAACC,cAAc,CAAC,SAAS,CAAC,IAAIH,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACC,OAAO,KAAK,KAAK,IAAIL,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACJ,IAAI,EAAE;MACpJ,OAAOR,EAAE,CAACQ,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACJ,IAAa,CAAC;IAChD;IACA,IAAIA,IAAI,CAACG,cAAc,CAACD,OAAO,CAAC,IAAIF,IAAI,CAACE,OAAO,CAAC,CAACC,cAAc,CAAC,SAAS,CAAC,IAAIH,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACC,OAAO,KAAK,IAAI,IAAIL,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACE,OAAO,EAAE;MACtJ,OAAON,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACE,OAAO;IACtC;IACA,IAAIN,IAAI,CAACG,cAAc,CAACD,OAAO,CAAC,KAAK,KAAK,EAAE;MACzCF,IAAI,CAACE,OAAO,CAAS,GAAG,EAAE;IAC7B;IACAF,IAAI,CAACE,OAAO,CAAC,CAAC,SAAS,CAAC,GAAG;MACzBG,OAAO,EAAE,IAAI;MACbL,IAAI,EAAE,IAAI;MACVO,KAAK,EAAE,KAAK;MACZD,OAAO,EAAE,IAAI,CAACR,IAAI,CAACU,GAAG,CAAM,0BAA0BP,SAAS,IAAIC,OAAO,UAAU,CAAC,CAClFO,IAAI,CACHhB,KAAK,CAAC,CAAC,CAAC,EACRH,KAAK,CAAC,IAAI,CAAC,EACXK,GAAG,CAAEe,UAAoB,IAAI;QAC3BV,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,GAAG;UACtB,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO;UACxBC,OAAO,EAAE,KAAK;UACdE,KAAK,EAAE,KAAK;UACZP,IAAI,EAAEU;SACP;MACH,CAAC,CAAC,EACFrB,UAAU,CAAEkB,KAAwB,IAAI;QACtCP,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,GAAG;UACtB,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO;UACxBC,OAAO,EAAE,KAAK;UACdL,IAAI,EAAE,IAAI;UACVO,KAAK,EAAE;SACR;QACD,OAAOnB,KAAK;MACd,CAAC,CAAC,EACFM,KAAK,EAAE,EACPH,QAAQ,CAAC,MAAK;QACZS,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,GAAG;UACtB,GAAGJ,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO;UACxBE,OAAO,EAAE;SACH;MACV,CAAC,CAAC;KAEP;IACD,OAAON,IAAI,CAACE,OAAO,CAAC,CAACE,OAAO,CAACE,OAAO;EACtC;EAAC,QAAAK,CAAA,G;qBAjDUf,oBAAoB,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAApBpB,oBAAoB;IAAAqB,OAAA,EAApBrB,oBAAoB,CAAAsB,IAAA;IAAAC,UAAA,EAFnB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}