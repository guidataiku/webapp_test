{"ast":null,"code":"import { isDevMode } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class ApiInterceptor {\n  constructor() {\n    this.apiUrl = this.getApiUrl();\n  }\n  intercept(request, next) {\n    if (request.url.includes('api/') === false) {\n      return next.handle(request);\n    }\n    const modifiedRequest = request.clone({\n      url: `${this.apiUrl}${request.url}`\n    });\n    return next.handle(modifiedRequest);\n  }\n  getApiUrl() {\n    if (!isDevMode()) {\n      // @ts-ignore \n      const getWebappBackendUrlFn = window['getWebAppBackendUrl'] || parent[\"getWebAppBackendUrl\"];\n      if (typeof getWebappBackendUrlFn === 'function') {\n        return getWebappBackendUrlFn('');\n      }\n    }\n    return process.env[\"API_DEV_URL\"] || '/';\n  }\n  static #_ = this.ɵfac = function ApiInterceptor_Factory(t) {\n    return new (t || ApiInterceptor)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiInterceptor,\n    factory: ApiInterceptor.ɵfac\n  });\n}","map":{"version":3,"names":["isDevMode","ApiInterceptor","constructor","apiUrl","getApiUrl","intercept","request","next","url","includes","handle","modifiedRequest","clone","getWebappBackendUrlFn","window","parent","process","env","_","_2","factory","ɵfac"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/api.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { isDevMode } from '@angular/core';\n\n@Injectable()\nexport class ApiInterceptor implements HttpInterceptor {\n  private apiUrl: string;\n\n  constructor() {\n    this.apiUrl = this.getApiUrl();\n  }\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    if (request.url.includes('api/') === false) {\n      return next.handle(request);\n    }\n    const modifiedRequest = request.clone({\n      url: `${this.apiUrl}${request.url}`\n    });\n    return next.handle(modifiedRequest);\n  }\n\n  private getApiUrl(): string {\n\n    if (!isDevMode()) {\n\n      // @ts-ignore \n      const getWebappBackendUrlFn = window['getWebAppBackendUrl'] || parent[\"getWebAppBackendUrl\"];\n      if (typeof getWebappBackendUrlFn === 'function') {\n        return getWebappBackendUrlFn('');\n      }\n    }\n    return process.env[\"API_DEV_URL\"] || '/';\n  }\n}\n"],"mappings":"AAQA,SAASA,SAAS,QAAQ,eAAe;;AAGzC,OAAM,MAAOC,cAAc;EAGzBC,YAAA;IACE,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,SAAS,EAAE;EAChC;EAEAC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD,IAAID,OAAO,CAACE,GAAG,CAACC,QAAQ,CAAC,MAAM,CAAC,KAAK,KAAK,EAAE;MAC1C,OAAOF,IAAI,CAACG,MAAM,CAACJ,OAAO,CAAC;IAC7B;IACA,MAAMK,eAAe,GAAGL,OAAO,CAACM,KAAK,CAAC;MACpCJ,GAAG,EAAE,GAAG,IAAI,CAACL,MAAM,GAAGG,OAAO,CAACE,GAAG;KAClC,CAAC;IACF,OAAOD,IAAI,CAACG,MAAM,CAACC,eAAe,CAAC;EACrC;EAEQP,SAASA,CAAA;IAEf,IAAI,CAACJ,SAAS,EAAE,EAAE;MAEhB;MACA,MAAMa,qBAAqB,GAAGC,MAAM,CAAC,qBAAqB,CAAC,IAAIC,MAAM,CAAC,qBAAqB,CAAC;MAC5F,IAAI,OAAOF,qBAAqB,KAAK,UAAU,EAAE;QAC/C,OAAOA,qBAAqB,CAAC,EAAE,CAAC;MAClC;IACF;IACA,OAAOG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC,IAAI,GAAG;EAC1C;EAAC,QAAAC,CAAA,G;qBA5BUjB,cAAc;EAAA;EAAA,QAAAkB,EAAA,G;WAAdlB,cAAc;IAAAmB,OAAA,EAAdnB,cAAc,CAAAoB;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}