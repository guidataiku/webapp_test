{"ast":null,"code":"import { Subject, takeUntil, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/services/pcv-prediction.service\";\nconst _forTrack0 = ($index, $item) => $item.phaseId;\nfunction PcvPredictionComponent_Defer_0_For_2_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"span\", 3);\n    i0.ɵɵlistener(\"click\", function PcvPredictionComponent_Defer_0_For_2_ng_template_1_Template_span_click_0_listener() {\n      i0.ɵɵrestoreView(_r1);\n      const phase_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.selectPhaseByPhaseId(phase_r2.phaseId));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const phase_r2 = i0.ɵɵnextContext().$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(phase_r2.title);\n  }\n}\nfunction PcvPredictionComponent_Defer_0_For_2_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-pcv-prediction-tab\", 4);\n    i0.ɵɵlistener(\"updateSelection\", function PcvPredictionComponent_Defer_0_For_2_Conditional_2_Template_app_pcv_prediction_tab_updateSelection_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const phase_r2 = i0.ɵɵnextContext().$implicit;\n      const ctx_r2 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r2.updateSelection(phase_r2.phaseId, $event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const phase_r2 = i0.ɵɵnextContext().$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"batchesObservable\", ctx_r2.getBatchesObservable(phase_r2.phaseId))(\"selection\", ctx_r2.getSelectionByPhase(phase_r2.phaseId));\n  }\n}\nfunction PcvPredictionComponent_Defer_0_For_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"rds-tab\", 0);\n    i0.ɵɵtemplate(1, PcvPredictionComponent_Defer_0_For_2_ng_template_1_Template, 2, 1, \"ng-template\", 1)(2, PcvPredictionComponent_Defer_0_For_2_Conditional_2_Template, 1, 2, \"app-pcv-prediction-tab\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const phase_r2 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"active\", phase_r2.phaseId === ctx_r2.activePhaseId)(\"disabled\", phase_r2.disabled);\n    i0.ɵɵadvance(2);\n    i0.ɵɵconditional(2, phase_r2.phaseId === ctx_r2.activePhaseId ? 2 : -1);\n  }\n}\nfunction PcvPredictionComponent_Defer_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"rds-tabs\");\n    i0.ɵɵrepeaterCreate(1, PcvPredictionComponent_Defer_0_For_2_Template, 3, 3, \"rds-tab\", 0, _forTrack0);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(ctx_r2.phases);\n  }\n}\nfunction PcvPredictionComponent_DeferPlaceholder_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"rds-progress-bar\");\n  }\n}\nexport class PcvPredictionComponent {\n  get product() {\n    return this.route.snapshot.params['product'];\n  }\n  get phases() {\n    if (this._phases?.length > 0) {\n      return this._phases;\n    }\n    return null;\n  }\n  get activePhaseId() {\n    if (!!this._activePhaseId) {\n      return this._activePhaseId;\n    }\n    if (!!this._phases) {\n      return this.phases.find(phase => phase.disabled === false).phaseId;\n    }\n    return null;\n  }\n  constructor(http, route, pcvPredictionService) {\n    this.http = http;\n    this.route = route;\n    this.pcvPredictionService = pcvPredictionService;\n    this.PHASES_ENDPOINT = `api/pcv-model-insights/${this.product}/phases`;\n    this.destroy$ = new Subject();\n    this._selection = {};\n    this._data = {};\n    this.loadPhases();\n  }\n  ngAfterViewInit() {}\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n  loadPhases() {\n    this.http.get(this.PHASES_ENDPOINT).pipe(takeUntil(this.destroy$), tap(phases => this._phases = phases)).subscribe();\n  }\n  selectPhaseByPhaseId(phaseId) {\n    this._activePhaseId = phaseId;\n  }\n  updateSelection(phaseId, selection) {\n    this._selection[phaseId] = selection;\n  }\n  getSelectionByPhase(phaseId) {\n    if (this._selection.hasOwnProperty(phaseId)) {\n      return this._selection[phaseId];\n    }\n    return {\n      batchId: null,\n      model: null\n    };\n  }\n  getBatchesObservable(phaseId) {\n    return this.pcvPredictionService.getBatches(this._data, this.product, phaseId);\n  }\n  static #_ = this.ɵfac = function PcvPredictionComponent_Factory(t) {\n    return new (t || PcvPredictionComponent)(i0.ɵɵdirectiveInject(i1.HttpClient), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.PcvPredictionService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PcvPredictionComponent,\n    selectors: [[\"app-pcv-prediction\"]],\n    decls: 4,\n    vars: 1,\n    consts: [[3, \"active\", \"disabled\"], [\"rds-tab-label\", \"\"], [3, \"batchesObservable\", \"selection\"], [3, \"click\"], [3, \"updateSelection\", \"batchesObservable\", \"selection\"]],\n    template: function PcvPredictionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PcvPredictionComponent_Defer_0_Template, 3, 0)(1, PcvPredictionComponent_DeferPlaceholder_1_Template, 1, 0);\n        i0.ɵɵdefer(2, 0, null, null, 1);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵdeferWhen(ctx.phases);\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["Subject","takeUntil","tap","i0","ɵɵelementStart","ɵɵlistener","PcvPredictionComponent_Defer_0_For_2_ng_template_1_Template_span_click_0_listener","ɵɵrestoreView","_r1","phase_r2","ɵɵnextContext","$implicit","ctx_r2","ɵɵresetView","selectPhaseByPhaseId","phaseId","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","title","PcvPredictionComponent_Defer_0_For_2_Conditional_2_Template_app_pcv_prediction_tab_updateSelection_0_listener","$event","_r4","updateSelection","ɵɵproperty","getBatchesObservable","getSelectionByPhase","ɵɵtemplate","PcvPredictionComponent_Defer_0_For_2_ng_template_1_Template","PcvPredictionComponent_Defer_0_For_2_Conditional_2_Template","activePhaseId","disabled","ɵɵconditional","ɵɵrepeaterCreate","PcvPredictionComponent_Defer_0_For_2_Template","_forTrack0","ɵɵrepeater","phases","ɵɵelement","PcvPredictionComponent","product","route","snapshot","params","_phases","length","_activePhaseId","find","phase","constructor","http","pcvPredictionService","PHASES_ENDPOINT","destroy$","_selection","_data","loadPhases","ngAfterViewInit","ngOnDestroy","next","complete","get","pipe","subscribe","selection","hasOwnProperty","batchId","model","getBatches","_","ɵɵdirectiveInject","i1","HttpClient","i2","ActivatedRoute","i3","PcvPredictionService","_2","selectors","decls","vars","consts","template","PcvPredictionComponent_Template","rf","ctx","PcvPredictionComponent_Defer_0_Template","PcvPredictionComponent_DeferPlaceholder_1_Template","ɵɵdefer","ɵɵdeferWhen"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-prediction/pcv-prediction/pcv-prediction.component.ts","/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-prediction/pcv-prediction/pcv-prediction.component.html"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { AfterViewInit, Component, OnDestroy } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { IBatch, IData, IPhaseItem, ISelection, ISelectionPhase } from '../../../../types/pcv-prediction';\nimport { Observable, Subject, takeUntil, tap } from 'rxjs';\nimport { PcvPredictionService } from 'src/app/services/pcv-prediction.service';\n\n@Component({\n  selector: 'app-pcv-prediction',\n  templateUrl: './pcv-prediction.component.html',\n  styleUrl: './pcv-prediction.component.scss'\n})\nexport class PcvPredictionComponent implements OnDestroy, AfterViewInit {\n\n  readonly PHASES_ENDPOINT = `api/pcv-model-insights/${this.product}/phases`;\n\n  private destroy$: Subject<void> = new Subject();\n\n  private _phases!: IPhaseItem[];\n\n  private _activePhaseId!: string;\n\n  private _selection: ISelection = {};\n\n  private _data: IData = {};\n\n  get product(): string {\n    return this.route.snapshot.params['product'];\n  }\n\n  get phases(): IPhaseItem[] | null {\n    if (this._phases?.length > 0) {\n      return this._phases;\n    }\n    return null;\n  }\n\n  get activePhaseId(): string | null {\n    if (!!this._activePhaseId) {\n      return this._activePhaseId;\n    }\n    if (!!this._phases) {\n      return (this.phases as IPhaseItem[]).find((phase: IPhaseItem) => phase.disabled === false)!.phaseId;\n    }\n    return null;\n  }\n\n  constructor(private http: HttpClient, private route: ActivatedRoute, private pcvPredictionService: PcvPredictionService) {\n    this.loadPhases();\n  }\n\n  ngAfterViewInit(): void {\n\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private loadPhases(): void {\n    this.http.get<IPhaseItem[]>(this.PHASES_ENDPOINT).pipe(\n      takeUntil(this.destroy$),\n      tap((phases: IPhaseItem[]) => this._phases = phases)\n    ).subscribe();\n  }\n\n  public selectPhaseByPhaseId(phaseId: string) {\n    this._activePhaseId = phaseId;\n  }\n\n  public updateSelection(phaseId: string, selection: ISelectionPhase): void {\n    this._selection[phaseId] = selection;\n  }\n\n  public getSelectionByPhase(phaseId: string): ISelectionPhase {\n    if (this._selection.hasOwnProperty(phaseId)) {\n      return this._selection[phaseId];\n    }\n    return {\n      batchId: null,\n      model: null\n    };\n  }\n\n\n  public getBatchesObservable(phaseId: string): Observable<IBatch[]> {\n    return this.pcvPredictionService.getBatches(this._data, this.product, phaseId);\n  }\n}\n","@defer (when phases) {\n    <rds-tabs>\n        @for (phase of phases; track phase.phaseId; let idx = $index) {\n            <rds-tab [active]=\"phase.phaseId === activePhaseId\" [disabled]=\"phase.disabled\">\n                <ng-template rds-tab-label><span (click)=\"selectPhaseByPhaseId(phase.phaseId)\">{{ phase.title }}</span></ng-template>\n                @if (phase.phaseId === activePhaseId) {\n                    <app-pcv-prediction-tab\n                        [batchesObservable]=\"getBatchesObservable(phase.phaseId)\"\n                        [selection]=\"getSelectionByPhase(phase.phaseId)\"\n                        (updateSelection)=\"updateSelection(phase.phaseId, $event)\"\n                    ></app-pcv-prediction-tab>\n                }\n            </rds-tab>\n        }\n    </rds-tabs>\n} @placeholder {\n    <rds-progress-bar></rds-progress-bar>\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}