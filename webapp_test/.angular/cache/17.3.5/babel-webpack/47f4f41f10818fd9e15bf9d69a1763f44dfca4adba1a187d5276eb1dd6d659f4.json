{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { environment } from '@environment';\nimport { BehaviorSubject, filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst langIndex = 1;\nexport class ChapterService {\n  constructor(router) {\n    this.router = router;\n    this.chapter = environment.defaultChapter;\n    this.chapter$ = new BehaviorSubject(this.chapter);\n    this.router.events.pipe(filter(e => e instanceof NavigationEnd)).subscribe(event => this.updateChapter(event));\n  }\n  updateChapter(event) {\n    const urlSegments = event.urlAfterRedirects.split('/');\n    urlSegments.shift();\n    if (environment.availableChapters.includes(urlSegments[langIndex]) === false) {\n      urlSegments[langIndex] = environment.defaultChapter;\n      this.router.navigate(['/', ...urlSegments]);\n    } else {\n      if (urlSegments[langIndex] !== this.chapter) {\n        this.chapter = urlSegments[langIndex];\n        this.chapter$.next(this.chapter);\n      }\n    }\n  }\n  changeChapter(chapter, url) {\n    const path = ['/', ...url.map((segment, index) => index === langIndex ? chapter : segment.path)];\n    this.router.navigate(path);\n  }\n  getCurrentChapter() {\n    return this.chapter;\n  }\n  getChapterChange() {\n    return this.chapter$.asObservable();\n  }\n  static #_ = this.ɵfac = function ChapterService_Factory(t) {\n    return new (t || ChapterService)(i0.ɵɵinject(i1.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChapterService,\n    factory: ChapterService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["NavigationEnd","environment","BehaviorSubject","filter","langIndex","ChapterService","constructor","router","chapter","defaultChapter","chapter$","events","pipe","e","subscribe","event","updateChapter","urlSegments","urlAfterRedirects","split","shift","availableChapters","includes","navigate","next","changeChapter","url","path","map","segment","index","getCurrentChapter","getChapterChange","asObservable","_","i0","ɵɵinject","i1","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/services/chapter.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router, UrlSegment } from '@angular/router';\nimport { environment } from '@environment';\nimport { BehaviorSubject, filter, Observable } from 'rxjs';\n\nconst langIndex: number = 1;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChapterService {\n\n  private chapter: string = environment.defaultChapter;\n\n  private chapter$: BehaviorSubject<string> = new BehaviorSubject<string>(this.chapter);\n\n  constructor(private router: Router) {\n    this.router.events.pipe(\n      filter((e): e is NavigationEnd => e instanceof NavigationEnd)\n    ).subscribe((event: NavigationEnd) => this.updateChapter(event))\n      \n  }\n\n  private updateChapter(event: NavigationEnd): void {\n    const urlSegments: string[] = event.urlAfterRedirects.split('/');\n    urlSegments.shift();\n    if (environment.availableChapters.includes(urlSegments[langIndex]) === false) {\n      urlSegments[langIndex] = environment.defaultChapter;\n      this.router.navigate(['/', ...urlSegments]);\n    } else {\n      if (urlSegments[langIndex] !== this.chapter) {\n        this.chapter = urlSegments[langIndex];\n        this.chapter$.next(this.chapter);\n      }\n    }\n  }\n\n  public changeChapter(chapter: string, url: UrlSegment[]) {\n    const path: string[] = ['/', ...url.map((segment: UrlSegment, index: number) => index === langIndex ? chapter : segment.path)];\n    this.router.navigate(path);\n  }\n\n  public getCurrentChapter(): string {\n    return this.chapter;\n  }\n\n  public getChapterChange(): Observable<string> {\n    return this.chapter$.asObservable();\n  }\n}\n"],"mappings":"AACA,SAASA,aAAa,QAA4B,iBAAiB;AACnE,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,eAAe,EAAEC,MAAM,QAAoB,MAAM;;;AAE1D,MAAMC,SAAS,GAAW,CAAC;AAK3B,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;IAJlB,KAAAC,OAAO,GAAWP,WAAW,CAACQ,cAAc;IAE5C,KAAAC,QAAQ,GAA4B,IAAIR,eAAe,CAAS,IAAI,CAACM,OAAO,CAAC;IAGnF,IAAI,CAACD,MAAM,CAACI,MAAM,CAACC,IAAI,CACrBT,MAAM,CAAEU,CAAC,IAAyBA,CAAC,YAAYb,aAAa,CAAC,CAC9D,CAACc,SAAS,CAAEC,KAAoB,IAAK,IAAI,CAACC,aAAa,CAACD,KAAK,CAAC,CAAC;EAElE;EAEQC,aAAaA,CAACD,KAAoB;IACxC,MAAME,WAAW,GAAaF,KAAK,CAACG,iBAAiB,CAACC,KAAK,CAAC,GAAG,CAAC;IAChEF,WAAW,CAACG,KAAK,EAAE;IACnB,IAAInB,WAAW,CAACoB,iBAAiB,CAACC,QAAQ,CAACL,WAAW,CAACb,SAAS,CAAC,CAAC,KAAK,KAAK,EAAE;MAC5Ea,WAAW,CAACb,SAAS,CAAC,GAAGH,WAAW,CAACQ,cAAc;MACnD,IAAI,CAACF,MAAM,CAACgB,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAGN,WAAW,CAAC,CAAC;IAC7C,CAAC,MAAM;MACL,IAAIA,WAAW,CAACb,SAAS,CAAC,KAAK,IAAI,CAACI,OAAO,EAAE;QAC3C,IAAI,CAACA,OAAO,GAAGS,WAAW,CAACb,SAAS,CAAC;QACrC,IAAI,CAACM,QAAQ,CAACc,IAAI,CAAC,IAAI,CAAChB,OAAO,CAAC;MAClC;IACF;EACF;EAEOiB,aAAaA,CAACjB,OAAe,EAAEkB,GAAiB;IACrD,MAAMC,IAAI,GAAa,CAAC,GAAG,EAAE,GAAGD,GAAG,CAACE,GAAG,CAAC,CAACC,OAAmB,EAAEC,KAAa,KAAKA,KAAK,KAAK1B,SAAS,GAAGI,OAAO,GAAGqB,OAAO,CAACF,IAAI,CAAC,CAAC;IAC9H,IAAI,CAACpB,MAAM,CAACgB,QAAQ,CAACI,IAAI,CAAC;EAC5B;EAEOI,iBAAiBA,CAAA;IACtB,OAAO,IAAI,CAACvB,OAAO;EACrB;EAEOwB,gBAAgBA,CAAA;IACrB,OAAO,IAAI,CAACtB,QAAQ,CAACuB,YAAY,EAAE;EACrC;EAAC,QAAAC,CAAA,G;qBAtCU7B,cAAc,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAdlC,cAAc;IAAAmC,OAAA,EAAdnC,cAAc,CAAAoC,IAAA;IAAAC,UAAA,EAFb;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}