{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"plot\"];\nfunction PcvParameterChartComponent_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"rds-progress-bar\");\n  }\n}\nexport class PcvParameterChartComponent {\n  constructor() {\n    this._afterViewInit = false;\n    this.loading = true;\n    this.defaultColorList = ['#1f77b4',\n    // muted blue\n    '#ff7f0e',\n    // safety orange\n    '#2ca02c',\n    // cooked asparagus green\n    '#d62728',\n    // brick red\n    '#9467bd',\n    // muted purple\n    '#8c564b',\n    // chestnut brown\n    '#e377c2',\n    // raspberry yogurt pink\n    '#7f7f7f',\n    // middle gray\n    '#bcbd22',\n    // curry yellow-green\n    '#17becf' // blue-teal\n    ];\n    this._layout = () => {\n      return {\n        title: {\n          text: '<b>' + this.parameter + '</b>',\n          font: {\n            size: 18\n          },\n          xref: 'container',\n          x: 0\n        },\n        xaxis: {\n          title: {\n            text: this.parameter\n          },\n          showline: true,\n          showgrid: false,\n          range: [_.min(this.x) || 0, _.max(this.x) || 0]\n        },\n        yaxis: {\n          title: {\n            text: 'Density',\n            standoff: 25\n          },\n          showline: true,\n          dtick: 200,\n          showgrid: true,\n          griddash: 'dash',\n          gridcolor: '#ccc',\n          range: [_.min(this.y) || 0, _.max(this.y) || 0]\n        },\n        hovermode: 'x',\n        hoverdistance: 1\n      };\n    };\n    this._traces = () => [{\n      x: this.x,\n      y: this.y,\n      type: 'scatter',\n      mode: 'lines',\n      showlegend: false,\n      line: {\n        color: 'black',\n        width: 1,\n        shape: \"spline\"\n        //   smoothing: 1.3\n      },\n      hoverinfo: \"skip\"\n    }, ...this.getBatchTraces()];\n    this._config = {\n      responsive: true,\n      displayModeBar: false\n    };\n  }\n  get data() {\n    if (this._data) {\n      return this._data;\n    }\n    return [];\n  }\n  get x() {\n    if (this._data) {\n      return this._data.map(row => row.x);\n    }\n    return [];\n  }\n  get y() {\n    if (this._data) {\n      return this._data.map(row => row.y);\n    }\n    return [];\n  }\n  ngOnInit() {\n    this.parameterData.pipe(tap(data => {\n      this._data = data;\n      this.loading = false;\n      if (this._afterViewInit && data && data.length > 0) {\n        this.initPlot();\n      }\n    })).subscribe();\n  }\n  ngOnChanges(changes) {\n    if (this._afterViewInit === true && _.isEqual(changes['selectedBatches'].currentValue, changes['selectedBatches'].previousValue) === false) {\n      this.initPlot();\n    }\n  }\n  ngAfterViewInit() {\n    this._afterViewInit = true;\n    setTimeout(() => {\n      this.initPlot();\n    });\n  }\n  getBatchTraces() {\n    if (!!this.selectedBatches) {\n      return this.selectedBatches.map((batch, index) => {\n        const x = batch[this.parameter];\n        return {\n          x: [x, x],\n          y: [_.min(this.y) || 0, _.max(this.y) || 0],\n          type: 'scatter',\n          mode: 'lines',\n          name: batch.batch_id,\n          showlegend: true,\n          line: {\n            color: this.defaultColorList[index],\n            width: 1\n          },\n          hovertemplate: `Batch: ${batch.batch_id}<br />Parameter value: %{x}<extra></extra>`\n        };\n      });\n    }\n    return [];\n  }\n  initPlot() {\n    Plotly.newPlot(this.plotElement.nativeElement, this._traces(), this._layout(), this._config);\n  }\n  static #_ = this.ɵfac = function PcvParameterChartComponent_Factory(t) {\n    return new (t || PcvParameterChartComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PcvParameterChartComponent,\n    selectors: [[\"app-pcv-parameter-chart\"]],\n    viewQuery: function PcvParameterChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.plotElement = _t.first);\n      }\n    },\n    inputs: {\n      selectedBatches: \"selectedBatches\",\n      parameter: \"parameter\",\n      parameterData: \"parameterData\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[\"plot\", \"\"], [1, \"parameter-chart\"]],\n    template: function PcvParameterChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PcvParameterChartComponent_Conditional_0_Template, 1, 0, \"rds-progress-bar\");\n        i0.ɵɵelement(1, \"div\", 1, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(0, ctx.loading === true ? 0 : -1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n  padding: 0 24px;\\n  background-color: white;\\n}\\n[_nghost-%COMP%]:has(.rds-progress-bar)   .parameter-chart[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n[_nghost-%COMP%]:has(.rds-progress-bar)   .parameter-chart[_ngcontent-%COMP%]::before {\\n  content: \\\"\\\";\\n  display: block;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  background: white;\\n  z-index: 10;\\n}\\n[_nghost-%COMP%]    > .rds-progress-bar[_ngcontent-%COMP%] {\\n  margin: 0 -24px 0;\\n  width: calc(100% + 48px);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wY3YtbW9kZWwtaW5zaWdodHMvcGN2LXBhcmFtZXRlci1jaGFydC9wY3YtcGFyYW1ldGVyLWNoYXJ0LmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBaUJJLGVBQUE7RUFDQSx1QkFBQTtBQWZKO0FBRFE7RUFDSSxrQkFBQTtBQUdaO0FBRlk7RUFDSSxXQUFBO0VBQ0EsY0FBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsV0FBQTtBQUloQjtBQUVJO0VBQ0ksaUJBQUE7RUFDQSx3QkFBQTtBQUFSIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICAgICY6aGFzKC5yZHMtcHJvZ3Jlc3MtYmFyKSB7XG4gICAgICAgIC5wYXJhbWV0ZXItY2hhcnQge1xuICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICB0b3A6IDA7XG4gICAgICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IHdoaXRlO1xuICAgICAgICAgICAgICAgIHotaW5kZXg6ICsxMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwYWRkaW5nOiAwIDI0cHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gICAgPiAucmRzLXByb2dyZXNzLWJhciB7XG4gICAgICAgIG1hcmdpbjogMCAtMjRweCAwO1xuICAgICAgICB3aWR0aDogY2FsYygxMDAlICsgNDhweCk7XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["tap","_","i0","ɵɵelement","PcvParameterChartComponent","constructor","_afterViewInit","loading","defaultColorList","_layout","title","text","parameter","font","size","xref","x","xaxis","showline","showgrid","range","min","max","yaxis","standoff","dtick","griddash","gridcolor","y","hovermode","hoverdistance","_traces","type","mode","showlegend","line","color","width","shape","hoverinfo","getBatchTraces","_config","responsive","displayModeBar","data","_data","map","row","ngOnInit","parameterData","pipe","length","initPlot","subscribe","ngOnChanges","changes","isEqual","currentValue","previousValue","ngAfterViewInit","setTimeout","selectedBatches","batch","index","name","batch_id","hovertemplate","Plotly","newPlot","plotElement","nativeElement","_2","selectors","viewQuery","PcvParameterChartComponent_Query","rf","ctx","ɵɵtemplate","PcvParameterChartComponent_Conditional_0_Template","ɵɵconditional"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-model-insights/pcv-parameter-chart/pcv-parameter-chart.component.ts","/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-model-insights/pcv-parameter-chart/pcv-parameter-chart.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild } from '@angular/core';\nimport { IBatch, IParameterDataRow } from '../../../../types/pcv-model-insights';\nimport { Observable, tap } from 'rxjs';\nimport * as _ from 'lodash';\ndeclare const Plotly: any;\n\n@Component({\n  selector: 'app-pcv-parameter-chart',\n  templateUrl: './pcv-parameter-chart.component.html',\n  styleUrl: './pcv-parameter-chart.component.scss'\n})\nexport class PcvParameterChartComponent implements OnInit, OnChanges, AfterViewInit {\n\n  @ViewChild(\"plot\", { static: false }) plotElement!: ElementRef;\n\n  @Input({ required: true }) selectedBatches!: IBatch[];\n\n  @Input({ required: true}) parameter!: string;\n\n  @Input({ required: true}) parameterData!: Observable<IParameterDataRow[] | null>;\n\n  private _data!: IParameterDataRow[] | null;\n\n  private _afterViewInit: boolean = false;\n\n  public loading = true;\n\n  get data(): IParameterDataRow[] {\n    if (this._data) {\n      return this._data;\n    }\n    return [];\n  }\n\n  get x(): number[] {\n    if (this._data) {\n      return this._data.map((row: IParameterDataRow) => row.x);\n    }\n    return [];\n  }\n\n  get y(): number[] {\n    if (this._data) {\n      return this._data.map((row: IParameterDataRow) => row.y);\n    }\n    return [];\n  }\n\n  private defaultColorList: string[] = [\n    '#1f77b4',  // muted blue\n    '#ff7f0e',  // safety orange\n    '#2ca02c',  // cooked asparagus green\n    '#d62728',  // brick red\n    '#9467bd',  // muted purple\n    '#8c564b',  // chestnut brown\n    '#e377c2',  // raspberry yogurt pink\n    '#7f7f7f',  // middle gray\n    '#bcbd22',  // curry yellow-green\n    '#17becf'   // blue-teal\n  ];\n\n  private _layout = () => {\n    return {\n      title: {\n        text: '<b>' + this.parameter + '</b>', \n        font: { \n          size:18\n        }, \n        xref: 'container', \n        x: 0\n      },\n      xaxis: {\n        title: { \n            text : this.parameter\n        },\n        showline: true,\n        showgrid : false,\n        range: [_.min(this.x) || 0, _.max(this.x) || 0],\n      },\n      yaxis: {\n        title: { \n            text : 'Density',\n            standoff:25\n        },\n        showline: true,\n        dtick: 200,\n        showgrid: true,\n        griddash: 'dash',\n        gridcolor: '#ccc',\n        range: [_.min(this.y) || 0, _.max(this.y) || 0],\n      },\n      hovermode: 'x',\n      hoverdistance: 1\n    };\n  }\n\n  private _traces = () => [\n    {\n      x: this.x,\n      y: this.y,\n      type: 'scatter',\n      mode: 'lines',\n      showlegend: false,\n      line: {\n        color: 'black',\n        width: 1,\n        shape:\"spline\",\n     //   smoothing: 1.3\n      },\n      hoverinfo:\"skip\",\n    },\n    ...this.getBatchTraces()\n  ];\n\n  private _config = {\n    responsive: true,\n    displayModeBar: false\n  }\n\n  ngOnInit(): void {\n    this.parameterData.pipe(\n      tap((data: IParameterDataRow[] | null) => {\n        this._data = data;\n        this.loading = false;\n        if (this._afterViewInit && data && data.length > 0) {\n          this.initPlot();\n        }\n      })\n    ).subscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._afterViewInit === true && _.isEqual(changes['selectedBatches'].currentValue, changes['selectedBatches'].previousValue) === false) {\n      this.initPlot();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this._afterViewInit = true;\n    setTimeout(() => {\n      this.initPlot();\n    });\n  }\n\n  private getBatchTraces(): any[] {\n    if (!!this.selectedBatches) {\n      return this.selectedBatches.map((batch: IBatch, index: number) => {\n        const x: number = (batch as IBatch)[this.parameter];\n        return {\n          x: [x, x],\n          y: [_.min(this.y) || 0, _.max(this.y) || 0],\n          type: 'scatter',\n          mode: 'lines',\n          name: batch.batch_id,\n          showlegend: true,\n          line: {\n            color: this.defaultColorList[index],\n            width: 1,\n          },\n          hovertemplate: `Batch: ${batch.batch_id}<br />Parameter value: %{x}<extra></extra>`,\n        };\n      });\n    }\n    return [];\n  }\n\n  private initPlot(): void {\n    Plotly.newPlot(this.plotElement!.nativeElement, this._traces(), this._layout(), this._config);\n  }\n}\n","@if (loading === true) {\n    <rds-progress-bar></rds-progress-bar>\n}\n<div #plot class=\"parameter-chart\"></div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}