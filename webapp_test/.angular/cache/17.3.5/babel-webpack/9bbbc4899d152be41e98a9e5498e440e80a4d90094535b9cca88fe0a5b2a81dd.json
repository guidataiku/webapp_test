{"ast":null,"code":"import { NavigationEnd } from '@angular/router';\nimport { environment } from '@environment';\nimport { filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nimport * as i2 from \"@angular/router\";\nconst langIndex = 0;\nexport class LangService {\n  constructor(translate, router) {\n    this.translate = translate;\n    this.router = router;\n    this.translate.addLangs(environment.availableLangs);\n    this.router.events.pipe(filter(e => e instanceof NavigationEnd)).subscribe(event => this.updateLang(event));\n  }\n  updateLang(event) {\n    const urlSegments = event.urlAfterRedirects.split('/');\n    urlSegments.shift();\n    if (environment.availableLangs.includes(urlSegments[langIndex]) === false) {\n      urlSegments[langIndex] = environment.defaultLang;\n      this.router.navigate(['/', ...urlSegments]);\n    } else {\n      if (urlSegments[langIndex] !== this.translate.currentLang) {\n        this.translate.use(urlSegments[langIndex]);\n      }\n    }\n  }\n  changeLang(lang, url) {\n    const path = ['/', ...url.map((segment, index) => index === langIndex ? lang : segment.path)];\n    this.router.navigate(path);\n  }\n  getCurrentLang() {\n    return this.translate.currentLang;\n  }\n  static #_ = this.ɵfac = function LangService_Factory(t) {\n    return new (t || LangService)(i0.ɵɵinject(i1.TranslateService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LangService,\n    factory: LangService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["NavigationEnd","environment","filter","langIndex","LangService","constructor","translate","router","addLangs","availableLangs","events","pipe","e","subscribe","event","updateLang","urlSegments","urlAfterRedirects","split","shift","includes","defaultLang","navigate","currentLang","use","changeLang","lang","url","path","map","segment","index","getCurrentLang","_","i0","ɵɵinject","i1","TranslateService","i2","Router","_2","factory","ɵfac","providedIn"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/services/lang.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { NavigationEnd, Router, UrlSegment } from '@angular/router';\nimport { environment } from '@environment';\nimport { TranslateService } from '@ngx-translate/core';\nimport { filter } from 'rxjs';\n\nconst langIndex: number = 0;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LangService {\n\n  constructor(private translate: TranslateService, private router: Router) {\n    this.translate.addLangs(environment.availableLangs);\n    this.router.events.pipe(\n      filter((e): e is NavigationEnd => e instanceof NavigationEnd)\n    ).subscribe((event: NavigationEnd) => this.updateLang(event))\n      \n  }\n\n  private updateLang(event: NavigationEnd): void {\n    const urlSegments: string[] = event.urlAfterRedirects.split('/');\n    urlSegments.shift();\n    if (environment.availableLangs.includes(urlSegments[langIndex]) === false) {\n      urlSegments[langIndex] = environment.defaultLang;\n      this.router.navigate(['/', ...urlSegments]);\n    } else {\n      if (urlSegments[langIndex] !== this.translate.currentLang) {\n        this.translate.use(urlSegments[langIndex]);\n      }\n    }\n  }\n\n  public changeLang(lang: string, url: UrlSegment[]) {\n    const path: string[] = ['/', ...url.map((segment: UrlSegment, index: number) => index === langIndex ? lang : segment.path)];\n    this.router.navigate(path);\n  }\n\n  public getCurrentLang(): string {\n    return this.translate.currentLang;\n  }\n}\n"],"mappings":"AACA,SAASA,aAAa,QAA4B,iBAAiB;AACnE,SAASC,WAAW,QAAQ,cAAc;AAE1C,SAASC,MAAM,QAAQ,MAAM;;;;AAE7B,MAAMC,SAAS,GAAW,CAAC;AAK3B,OAAM,MAAOC,WAAW;EAEtBC,YAAoBC,SAA2B,EAAUC,MAAc;IAAnD,KAAAD,SAAS,GAATA,SAAS;IAA4B,KAAAC,MAAM,GAANA,MAAM;IAC7D,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACP,WAAW,CAACQ,cAAc,CAAC;IACnD,IAAI,CAACF,MAAM,CAACG,MAAM,CAACC,IAAI,CACrBT,MAAM,CAAEU,CAAC,IAAyBA,CAAC,YAAYZ,aAAa,CAAC,CAC9D,CAACa,SAAS,CAAEC,KAAoB,IAAK,IAAI,CAACC,UAAU,CAACD,KAAK,CAAC,CAAC;EAE/D;EAEQC,UAAUA,CAACD,KAAoB;IACrC,MAAME,WAAW,GAAaF,KAAK,CAACG,iBAAiB,CAACC,KAAK,CAAC,GAAG,CAAC;IAChEF,WAAW,CAACG,KAAK,EAAE;IACnB,IAAIlB,WAAW,CAACQ,cAAc,CAACW,QAAQ,CAACJ,WAAW,CAACb,SAAS,CAAC,CAAC,KAAK,KAAK,EAAE;MACzEa,WAAW,CAACb,SAAS,CAAC,GAAGF,WAAW,CAACoB,WAAW;MAChD,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,GAAG,EAAE,GAAGN,WAAW,CAAC,CAAC;IAC7C,CAAC,MAAM;MACL,IAAIA,WAAW,CAACb,SAAS,CAAC,KAAK,IAAI,CAACG,SAAS,CAACiB,WAAW,EAAE;QACzD,IAAI,CAACjB,SAAS,CAACkB,GAAG,CAACR,WAAW,CAACb,SAAS,CAAC,CAAC;MAC5C;IACF;EACF;EAEOsB,UAAUA,CAACC,IAAY,EAAEC,GAAiB;IAC/C,MAAMC,IAAI,GAAa,CAAC,GAAG,EAAE,GAAGD,GAAG,CAACE,GAAG,CAAC,CAACC,OAAmB,EAAEC,KAAa,KAAKA,KAAK,KAAK5B,SAAS,GAAGuB,IAAI,GAAGI,OAAO,CAACF,IAAI,CAAC,CAAC;IAC3H,IAAI,CAACrB,MAAM,CAACe,QAAQ,CAACM,IAAI,CAAC;EAC5B;EAEOI,cAAcA,CAAA;IACnB,OAAO,IAAI,CAAC1B,SAAS,CAACiB,WAAW;EACnC;EAAC,QAAAU,CAAA,G;qBA9BU7B,WAAW,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,gBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAXpC,WAAW;IAAAqC,OAAA,EAAXrC,WAAW,CAAAsC,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}