{"ast":null,"code":"import { EMPTY, catchError, delay, finalize, of, retry, share, tap } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class PcvModelInsightService {\n  constructor(http) {\n    this.http = http;\n    this.httpOptions = {\n      headers: new HttpHeaders({}),\n      responseType: 'text'\n    };\n  }\n  getData(data, productId, phaseId, type) {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty(type) && data[phaseId][type].loading === false && data[phaseId][type].data) {\n      return of(data[phaseId][type].data);\n    }\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty(type) && data[phaseId][type].loading === true && data[phaseId][type].request) {\n      return data[phaseId][type].request;\n    }\n    if (data.hasOwnProperty(phaseId) === false) {\n      data[phaseId] = {};\n    }\n    data[phaseId][type] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get(`api/pcv-model-insights/${productId}/${phaseId}/${type}`).pipe(retry(2), delay(2000), tap(loadedData => {\n        data[phaseId][type] = {\n          ...data[phaseId][type],\n          loading: false,\n          error: false,\n          data: loadedData\n        };\n      }), catchError(error => {\n        data[phaseId][type] = {\n          ...data[phaseId][type],\n          loading: false,\n          data: null,\n          error: true\n        };\n        return EMPTY;\n      }), share(), finalize(() => {\n        data[phaseId][type] = {\n          ...data[phaseId][type],\n          request: null\n        };\n      }))\n    };\n    return data[phaseId][type].request;\n  }\n  getParametersData(data, productId, phaseId, parameterIds) {\n    this.cleanUpParameterIds(data, phaseId, parameterIds);\n    return parameterIds.reduce((acc, parameterId) => {\n      acc[parameterId] = this.getDataByParameter(data, productId, phaseId, parameterId);\n      return acc;\n    }, {});\n  }\n  cleanUpParameterIds(data, phaseId, parameterIds) {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('parametersData')) {\n      const parameterRequestsToDelete = Object.keys(data[phaseId].parametersData).filter(existingId => parameterIds.includes(existingId) === false);\n      parameterRequestsToDelete.forEach(parameterId => delete data[phaseId].parametersData[parameterId]);\n    }\n  }\n  getDataByParameter(data, productId, phaseId, parameterId) {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('parametersData') && data[phaseId].parametersData.hasOwnProperty(parameterId) && data[phaseId].parametersData[parameterId].loading === false && data[phaseId].parametersData[parameterId].data !== null) {\n      return of(data[phaseId].parametersData[parameterId].data);\n    }\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('parametersData') && data[phaseId].parametersData.hasOwnProperty(parameterId) && data[phaseId].parametersData[parameterId].loading === true && data[phaseId].parametersData[parameterId].data === null) {\n      return of(data[phaseId].parametersData[parameterId].request);\n    }\n    if (data.hasOwnProperty(phaseId) === false) {\n      data[phaseId] = {};\n    }\n    if (data[phaseId].hasOwnProperty('parametersData') === false) {\n      data[phaseId]['parametersData'] = {};\n    }\n    data[phaseId]['parametersData'][parameterId] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get(`api/pcv-model-insights/${productId}/${phaseId}/parameters/${parameterId}`).pipe(retry(2), delay(2000), tap(loadedData => {\n        if (data[phaseId]['parametersData'][parameterId]) {\n          data[phaseId]['parametersData'][parameterId] = {\n            ...data[phaseId]['parametersData'][parameterId],\n            loading: false,\n            error: false,\n            data: loadedData\n          };\n        }\n      }), catchError(error => {\n        if (data[phaseId]['parametersData'][parameterId]) {\n          data[phaseId]['parametersData'][parameterId] = {\n            ...data[phaseId]['parametersData'][parameterId],\n            loading: false,\n            data: null,\n            error: true\n          };\n        }\n        return EMPTY;\n      }), share(), finalize(() => {\n        if (data[phaseId]['parametersData'][parameterId]) {\n          data[phaseId]['parametersData'][parameterId] = {\n            ...data[phaseId]['parametersData'][parameterId],\n            request: null\n          };\n        }\n      }))\n    };\n    return data[phaseId].parametersData[parameterId].request;\n  }\n  static #_ = this.ɵfac = function PcvModelInsightService_Factory(t) {\n    return new (t || PcvModelInsightService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PcvModelInsightService,\n    factory: PcvModelInsightService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EMPTY","catchError","delay","finalize","of","retry","share","tap","HttpHeaders","PcvModelInsightService","constructor","http","httpOptions","headers","responseType","getData","data","productId","phaseId","type","hasOwnProperty","loading","request","error","get","pipe","loadedData","getParametersData","parameterIds","cleanUpParameterIds","reduce","acc","parameterId","getDataByParameter","parameterRequestsToDelete","Object","keys","parametersData","filter","existingId","includes","forEach","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/services/pcv-model-insight.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { IBatch, IData, IParameter, IParameterDataRow } from '../../types/pcv-model-insights';\nimport { EMPTY, Observable, catchError, delay, finalize, forkJoin, map, of, retry, share, tap } from 'rxjs';\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpParamsOptions } from '@angular/common/http';\nimport * as _ from 'lodash';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PcvModelInsightService {\n\n  private readonly httpOptions: any = {\n    headers: new HttpHeaders({}),\n    responseType: 'text'\n  };\n\n  constructor(private http: HttpClient) {}\n\n  public getData(data: IData, productId: string, phaseId: string, type: 'batches' | 'parameters'): Observable<any> {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty(type) && data[phaseId][type].loading === false && data[phaseId][type].data) {\n      return of(data[phaseId][type].data as any[]);\n    }\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty(type) && data[phaseId][type].loading === true && data[phaseId][type].request) {\n      return data[phaseId][type].request;\n    }\n    if (data.hasOwnProperty(phaseId) === false) {\n      (data[phaseId] as any) = {};\n    }\n    data[phaseId][type] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get<any>(`api/pcv-model-insights/${productId}/${phaseId}/${type}`)\n        .pipe(\n          retry(2),\n          delay(2000),\n          tap((loadedData: IBatch[] | IParameter[]) => {\n            data[phaseId][type] = {\n              ...data[phaseId][type],\n              loading: false,\n              error: false,\n              data: loadedData as any\n            };\n          }),\n          catchError((error: HttpErrorResponse) => {\n            data[phaseId][type] = {\n              ...data[phaseId][type],\n              loading: false,\n              data: null,\n              error: true\n            };\n            return EMPTY;\n          }),\n          share(),\n          finalize(() => {\n            data[phaseId][type] = {\n              ...data[phaseId][type],\n              request: null\n            } as any\n          })\n        )\n    };\n    return data[phaseId][type].request;\n  }\n\n  public getParametersData(data: IData, productId: string, phaseId: string, parameterIds: string[]): {[parameterId: string]: Observable<null | IParameterDataRow[]>} {\n    this.cleanUpParameterIds(data, phaseId, parameterIds);\n    return parameterIds.reduce((acc: {[parameterId: string]: Observable<null | IParameterDataRow[]>}, parameterId: string) => {\n      acc[parameterId] = this.getDataByParameter(data, productId, phaseId, parameterId);\n      return acc;\n    }, {});\n  }\n\n  private cleanUpParameterIds(data: IData, phaseId: string, parameterIds: string[]): void {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('parametersData')) {\n      const parameterRequestsToDelete: string[] = Object.keys(data[phaseId].parametersData).filter((existingId: string) => parameterIds.includes(existingId) === false);\n      parameterRequestsToDelete.forEach((parameterId: string) => delete data[phaseId].parametersData[parameterId]);\n    }\n  }\n\n  private getDataByParameter(data: IData, productId: string, phaseId: string, parameterId: string): Observable<null | IParameterDataRow[]> {\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('parametersData') && data[phaseId].parametersData.hasOwnProperty(parameterId) && data[phaseId].parametersData[parameterId].loading === false && data[phaseId].parametersData[parameterId].data !== null) {\n      return of(data[phaseId].parametersData[parameterId].data);\n    }\n    if (data.hasOwnProperty(phaseId) && data[phaseId].hasOwnProperty('parametersData') && data[phaseId].parametersData.hasOwnProperty(parameterId) && data[phaseId].parametersData[parameterId].loading === true && data[phaseId].parametersData[parameterId].data === null) {\n      return of(data[phaseId].parametersData[parameterId].request);\n    }\n    if (data.hasOwnProperty(phaseId) === false) {\n      (data[phaseId] as any) = {};\n    }\n    if (data[phaseId].hasOwnProperty('parametersData') === false) {\n      (data[phaseId]['parametersData'] as any) = {};\n    }\n    data[phaseId]['parametersData'][parameterId] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get<any>(`api/pcv-model-insights/${productId}/${phaseId}/parameters/${parameterId}`)\n        .pipe(\n          retry(2),\n          delay(2000),\n          tap((loadedData: IParameterDataRow[]) => {\n            if (data[phaseId]['parametersData'][parameterId]) {\n              data[phaseId]['parametersData'][parameterId] = {\n                ...data[phaseId]['parametersData'][parameterId],\n                loading: false,\n                error: false,\n                data: loadedData as any\n              };\n            }\n          }),\n          catchError((error: HttpErrorResponse) => {\n            if (data[phaseId]['parametersData'][parameterId]) {\n              data[phaseId]['parametersData'][parameterId] = {\n                ...data[phaseId]['parametersData'][parameterId],\n                loading: false,\n                data: null,\n                error: true\n              };\n            }\n            return EMPTY;\n          }),\n          share(),\n          finalize(() => {\n            if (data[phaseId]['parametersData'][parameterId]) {\n              data[phaseId]['parametersData'][parameterId] = {\n                ...data[phaseId]['parametersData'][parameterId],\n                request: null\n              };\n            }\n          })\n        )\n    };\n    return data[phaseId].parametersData[parameterId].request;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}