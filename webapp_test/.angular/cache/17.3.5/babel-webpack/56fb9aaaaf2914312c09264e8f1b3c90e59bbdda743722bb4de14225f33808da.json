{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nconst _c0 = [\"plot\"];\nfunction PcvPredictionChartComponent_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"rds-progress-bar\");\n  }\n}\nexport class PcvPredictionChartComponent {\n  constructor(translate) {\n    this.translate = translate;\n    this.toggleBatchId = new EventEmitter();\n    this.defaultColorList = ['#1f77b4',\n    // muted blue\n    '#ff7f0e',\n    // safety orange\n    '#2ca02c',\n    // cooked asparagus green\n    '#d62728',\n    // brick red\n    '#9467bd',\n    // muted purple\n    '#8c564b',\n    // chestnut brown\n    '#e377c2',\n    // raspberry yogurt pink\n    '#7f7f7f',\n    // middle gray\n    '#bcbd22',\n    // curry yellow-green\n    '#17becf' // blue-teal\n    ];\n    this._afterViewInit = false;\n    this.loading = true;\n    this._data = () => [{\n      x: this.getMetrics('predicted_pcv_10h'),\n      y: this.getMetrics('measured_pcv'),\n      type: 'scatter',\n      mode: 'markers',\n      marker: {\n        size: 10,\n        color: 'black'\n      },\n      showlegend: false,\n      data: {\n        unselected: true\n      }\n    }, {\n      x: this.getMetrics('predicted_pcv_60h'),\n      y: this.getMetrics('measured_pcv'),\n      xaxis: 'x2',\n      yaxis: 'y2',\n      type: 'scatter',\n      mode: 'markers',\n      marker: {\n        size: 10,\n        color: 'black'\n      },\n      showlegend: false,\n      data: {\n        unselected: true\n      }\n    }, ...this.getSelectedTraces()];\n    this._config = {\n      responsive: true,\n      displayModeBar: false\n    };\n    this._layout = () => {\n      return {\n        title: {\n          text: `<b>${this.translate.instant('pcv-model-insights.chart_title')}</b>`,\n          font: {\n            size: 18\n          },\n          xref: 'container',\n          x: 0\n        },\n        yaxis: {\n          title: this.translate.instant('pcv-model-insights.chart_measured_pcv'),\n          showline: true,\n          dtick: 0.05,\n          showgrid: true,\n          griddash: \"dash\",\n          gridcolor: \"#ccc\"\n        },\n        yaxis2: {\n          title: this.translate.instant('pcv-model-insights.chart_measured_pcv'),\n          showline: true,\n          dtick: 0.05,\n          showgrid: true,\n          griddash: \"dash\",\n          gridcolor: \"#ccc\"\n        },\n        xaxis: {\n          title: this.translate.instant('pcv-model-insights.chart_predicted_pcv_10h'),\n          showline: true,\n          showgrid: false,\n          zeroline: false\n        },\n        xaxis2: {\n          title: this.translate.instant('pcv-model-insights.chart_predicted_pcv_60h'),\n          showline: true,\n          showgrid: false,\n          zeroline: false\n        },\n        grid: {\n          rows: 1,\n          columns: 2,\n          subplots: [['xy', 'x2y2']]\n        },\n        legend: {\n          orientation: 'h'\n          // xanchor: 'center',\n        },\n        hovermode: 'closest'\n      };\n    };\n  }\n  ngOnChanges(changes) {\n    if (this._afterViewInit === true && changes['batches']?.currentValue?.length > 0 && changes['batches']?.currentValue !== changes['batches']?.previousValue) {\n      this.initPlot();\n    }\n    if (this._afterViewInit === true && changes['selectedBatchIds']?.currentValue && _.isEqual(changes['selectedBatchIds']?.currentValue, changes['selectedBatchIds']?.previousValue) === false) {\n      this.initPlot();\n    }\n  }\n  ngAfterViewInit() {\n    this._afterViewInit = true;\n    setTimeout(() => {\n      this.initPlot();\n    });\n  }\n  getMetrics(col, outlier = false) {\n    return this.batches?.filter(batch => !this.selectedBatchIds.includes(batch.batch_id))?.filter(batch => batch.outlier_flag === outlier).map(batch => batch[col]) ?? [];\n  }\n  getSelectedTraces() {\n    return this.batches?.filter(batch => this.selectedBatchIds.includes(batch.batch_id)).reduce((acc, batch, index) => {\n      const traces = [{\n        x: [batch.predicted_pcv_10h],\n        y: [batch.measured_pcv],\n        type: 'scatter',\n        mode: 'markers',\n        marker: {\n          size: 16,\n          color: this.getColorByIndex(index)\n        },\n        name: batch.batch_id,\n        legendgroup: batch.batch_id,\n        data: {\n          batch_id: batch.batch_id\n        }\n      }, {\n        x: [batch.predicted_pcv_60h],\n        y: [batch.measured_pcv],\n        xaxis: 'x2',\n        yaxis: 'y2',\n        type: 'scatter',\n        mode: 'markers',\n        marker: {\n          size: 16,\n          color: this.getColorByIndex(index)\n        },\n        legendgroup: batch.batch_id,\n        showlegend: false,\n        data: {\n          batch_id: batch.batch_id\n        }\n      }];\n      return [...acc, ...traces];\n    }, []) ?? [];\n  }\n  initPlot() {\n    if (this.batches?.length > 0) {\n      this.loading = false;\n    }\n    Plotly.newPlot(this.plotElement.nativeElement, this._data(), this._layout(), this._config);\n    this.plotElement.nativeElement.on('plotly_click', data => this.updateByClick(data));\n  }\n  updateByClick(data) {\n    const tracebinding = data.points[0].data.data;\n    if (tracebinding.hasOwnProperty('batch_id')) {\n      this.toggleBatchId.emit(tracebinding.batch_id);\n    }\n    if (tracebinding.unselected === true) {\n      const idx = data.points[0].pointIndex;\n      const batchId = this.getMetrics('batch_id')[idx];\n      if (this.getBatchByBatchId(batchId).outlier_flag === false) {\n        this.toggleBatchId.emit(this.getMetrics('batch_id')[idx]);\n      }\n    }\n  }\n  getColorByIndex(index) {\n    // return 'Plotly.d3.scale.category10()(index)';\n    return this.defaultColorList[index];\n  }\n  getBatchByBatchId(batchId) {\n    return this.batches.find(batch => batch.batch_id === batchId);\n  }\n  static #_ = this.ɵfac = function PcvPredictionChartComponent_Factory(t) {\n    return new (t || PcvPredictionChartComponent)(i0.ɵɵdirectiveInject(i1.TranslateService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: PcvPredictionChartComponent,\n    selectors: [[\"app-pcv-prediction-chart\"]],\n    viewQuery: function PcvPredictionChartComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.plotElement = _t.first);\n      }\n    },\n    inputs: {\n      selectedBatchIds: \"selectedBatchIds\",\n      batches: \"batches\"\n    },\n    outputs: {\n      toggleBatchId: \"toggleBatchId\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 3,\n    vars: 1,\n    consts: [[\"plot\", \"\"], [1, \"prediction-chart\"]],\n    template: function PcvPredictionChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, PcvPredictionChartComponent_Conditional_0_Template, 1, 0, \"rds-progress-bar\");\n        i0.ɵɵelement(1, \"div\", 1, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵconditional(0, ctx.loading === true ? 0 : -1);\n      }\n    },\n    styles: [\"[_nghost-%COMP%] {\\n  padding: 0 24px;\\n  background-color: white;\\n  min-height: 450px;\\n  display: block;\\n}\\n[_nghost-%COMP%]    > .prediction-chart[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n[_nghost-%COMP%]:has(.rds-progress-bar)   .prediction-chart[_ngcontent-%COMP%] {\\n  position: relative;\\n}\\n[_nghost-%COMP%]:has(.rds-progress-bar)   .prediction-chart[_ngcontent-%COMP%]::before {\\n  content: \\\"\\\";\\n  display: block;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  background: white;\\n  z-index: 10;\\n}\\n[_nghost-%COMP%]    > .rds-progress-bar[_ngcontent-%COMP%] {\\n  margin: 0 -24px 0;\\n  width: calc(100% + 48px);\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9wY3YtbW9kZWwtaW5zaWdodHMvcGN2LXByZWRpY3Rpb24tY2hhcnQvcGN2LXByZWRpY3Rpb24tY2hhcnQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxlQUFBO0VBQ0EsdUJBQUE7RUFDQSxpQkFBQTtFQUNBLGNBQUE7QUFDSjtBQUFJO0VBQ0ksV0FBQTtBQUVSO0FBQ1E7RUFDSSxrQkFBQTtBQUNaO0FBQVk7RUFDSSxXQUFBO0VBQ0EsY0FBQTtFQUNBLE1BQUE7RUFDQSxPQUFBO0VBQ0EsV0FBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGlCQUFBO0VBQ0EsV0FBQTtBQUVoQjtBQUVJO0VBQ0ksaUJBQUE7RUFDQSx3QkFBQTtBQUFSIiwic291cmNlc0NvbnRlbnQiOlsiOmhvc3Qge1xuICAgIHBhZGRpbmc6IDAgMjRweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcbiAgICBtaW4taGVpZ2h0OiA0NTBweDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICA+IC5wcmVkaWN0aW9uLWNoYXJ0IHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICAgICY6aGFzKC5yZHMtcHJvZ3Jlc3MtYmFyKSB7XG4gICAgICAgIC5wcmVkaWN0aW9uLWNoYXJ0IHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICAgICY6OmJlZm9yZSB7XG4gICAgICAgICAgICAgICAgY29udGVudDogJyc7XG4gICAgICAgICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgICAgIGxlZnQ6IDA7XG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbiAgICAgICAgICAgICAgICB6LWluZGV4OiArMTA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgPiAucmRzLXByb2dyZXNzLWJhciB7XG4gICAgICAgIG1hcmdpbjogMCAtMjRweCAwO1xuICAgICAgICB3aWR0aDogY2FsYygxMDAlICsgNDhweCk7XG4gICAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"names":["EventEmitter","_","i0","ɵɵelement","PcvPredictionChartComponent","constructor","translate","toggleBatchId","defaultColorList","_afterViewInit","loading","_data","x","getMetrics","y","type","mode","marker","size","color","showlegend","data","unselected","xaxis","yaxis","getSelectedTraces","_config","responsive","displayModeBar","_layout","title","text","instant","font","xref","showline","dtick","showgrid","griddash","gridcolor","yaxis2","zeroline","xaxis2","grid","rows","columns","subplots","legend","orientation","hovermode","ngOnChanges","changes","currentValue","length","previousValue","initPlot","isEqual","ngAfterViewInit","setTimeout","col","outlier","batches","filter","batch","selectedBatchIds","includes","batch_id","outlier_flag","map","reduce","acc","index","traces","predicted_pcv_10h","measured_pcv","getColorByIndex","name","legendgroup","predicted_pcv_60h","Plotly","newPlot","plotElement","nativeElement","on","updateByClick","tracebinding","points","hasOwnProperty","emit","idx","pointIndex","batchId","getBatchByBatchId","find","ɵɵdirectiveInject","i1","TranslateService","_2","selectors","viewQuery","PcvPredictionChartComponent_Query","rf","ctx","ɵɵtemplate","PcvPredictionChartComponent_Conditional_0_Template","ɵɵconditional"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-model-insights/pcv-prediction-chart/pcv-prediction-chart.component.ts","/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/components/pcv-model-insights/pcv-prediction-chart/pcv-prediction-chart.component.html"],"sourcesContent":["import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { IBatch } from '../../../../types/pcv-model-insights';\nimport * as _ from 'lodash';\nimport { TranslateService } from '@ngx-translate/core';\ndeclare const Plotly: any;\n\n@Component({\n  selector: 'app-pcv-prediction-chart',\n  templateUrl: './pcv-prediction-chart.component.html',\n  styleUrl: './pcv-prediction-chart.component.scss'\n})\nexport class PcvPredictionChartComponent implements AfterViewInit, OnChanges {\n\n  @ViewChild(\"plot\", { static: false }) plotElement!: ElementRef;\n\n  @Input({ required: true }) selectedBatchIds!: string[];\n\n  @Input({ required: true }) batches!: IBatch[];\n\n  @Output() toggleBatchId = new EventEmitter<string>();\n\n  private defaultColorList: string[] = [\n    '#1f77b4',  // muted blue\n    '#ff7f0e',  // safety orange\n    '#2ca02c',  // cooked asparagus green\n    '#d62728',  // brick red\n    '#9467bd',  // muted purple\n    '#8c564b',  // chestnut brown\n    '#e377c2',  // raspberry yogurt pink\n    '#7f7f7f',  // middle gray\n    '#bcbd22',  // curry yellow-green\n    '#17becf'   // blue-teal\n  ];\n\n  private _plot: any;\n\n  private _afterViewInit: boolean = false;\n\n  public loading = true;\n\n  private _data = () => [\n    {\n      x: this.getMetrics('predicted_pcv_10h'),\n      y: this.getMetrics('measured_pcv'),\n      type: 'scatter',\n      mode: 'markers',\n      marker:{ \n        size: 10,\n        color: 'black'\n      },\n      showlegend: false,\n      data: {\n        unselected: true\n      }\n    },\n    {\n      x: this.getMetrics('predicted_pcv_60h'),\n      y: this.getMetrics('measured_pcv'),\n      xaxis: 'x2',\n      yaxis: 'y2',\n      type: 'scatter',\n      mode: 'markers',\n      marker:{ \n        size: 10,\n        color: 'black'\n      },\n      showlegend: false,\n      data: {\n        unselected: true\n      }\n    },\n    ...this.getSelectedTraces()\n  ];\n\n  private _config = {\n    responsive: true,\n    displayModeBar: false\n  }\n\n  private _layout = () => {\n    return {\n      title: {\n        text: `<b>${this.translate.instant('pcv-model-insights.chart_title')}</b>`, \n        font: { \n          size: 18\n        }, \n        xref: 'container', \n        x: 0\n      },\n      yaxis: { \n        title: this.translate.instant('pcv-model-insights.chart_measured_pcv'),\n        showline: true,\n        dtick: 0.05,\n        showgrid : true,\n        griddash:\"dash\",\n        gridcolor: \"#ccc\",\n      },\n      yaxis2: { \n        title: this.translate.instant('pcv-model-insights.chart_measured_pcv'),\n        showline: true,\n        dtick: 0.05,\n        showgrid : true,\n        griddash:\"dash\",\n        gridcolor: \"#ccc\",\n      },\n      xaxis: {\n        title: this.translate.instant('pcv-model-insights.chart_predicted_pcv_10h'),\n        showline: true,\n        showgrid : false,\n        zeroline: false\n      },\n      xaxis2: {\n        title: this.translate.instant('pcv-model-insights.chart_predicted_pcv_60h'),\n        showline: true,\n        showgrid : false,\n        zeroline: false\n      },\n      grid: {\n        rows: 1,\n        columns: 2,\n        subplots:[['xy','x2y2']]\n      },\n      legend: {\n        orientation: 'h'\n        // xanchor: 'center',\n      },\n      hovermode: 'closest'\n    }\n  };\n\n  constructor(private translate: TranslateService) {\n    \n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (this._afterViewInit === true && \n        changes['batches']?.currentValue?.length > 0 && \n        changes['batches']?.currentValue !== changes['batches']?.previousValue) {\n        this.initPlot();\n    }\n    if (this._afterViewInit === true && changes['selectedBatchIds']?.currentValue && _.isEqual(changes['selectedBatchIds']?.currentValue, changes['selectedBatchIds']?.previousValue) === false) {\n      this.initPlot();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    this._afterViewInit = true;\n    setTimeout(() => {\n      this.initPlot();\n    });\n  }\n\n  private getMetrics(col: keyof IBatch, outlier: boolean = false): (string | number | boolean)[] {\n    return this.batches\n      ?.filter((batch: IBatch) => !this.selectedBatchIds.includes(batch.batch_id))\n      ?.filter((batch: IBatch) => batch.outlier_flag === outlier)\n      .map((batch: IBatch) => batch[col]) ?? [];\n  }\n\n  private getSelectedTraces(): any[] {\n    return this.batches?.filter((batch: IBatch) => this.selectedBatchIds.includes(batch.batch_id))\n      .reduce((acc: any[], batch: IBatch, index: number) => {\n        const traces: any[] = [{\n            x: [batch.predicted_pcv_10h],\n            y: [batch.measured_pcv],\n            type: 'scatter',\n            mode: 'markers',\n            marker:{ \n              size: 16,\n              color: this.getColorByIndex(index)\n            },\n            name: batch.batch_id,\n            legendgroup: batch.batch_id,\n            data: {\n              batch_id: batch.batch_id\n            }\n          \n        },\n        {\n            x: [batch.predicted_pcv_60h],\n            y: [batch.measured_pcv],\n            xaxis: 'x2',\n            yaxis: 'y2',\n            type: 'scatter',\n            mode: 'markers',\n            marker:{ \n              size: 16,\n              color: this.getColorByIndex(index)\n            },\n            legendgroup: batch.batch_id,\n            showlegend: false,\n            data: {\n              batch_id: batch.batch_id\n            }\n        }]\n        return [...acc, ...traces];\n      }, []) ?? [];\n  }\n\n  private initPlot(): void {\n    if (this.batches?.length > 0) {\n      this.loading = false;\n    }\n    Plotly.newPlot(this.plotElement!.nativeElement, this._data(), this._layout(), this._config);\n    this.plotElement.nativeElement.on('plotly_click', (data: any) => this.updateByClick(data));\n  }\n\n  private updateByClick(data: any): void {\n    const tracebinding: any = data.points[0].data.data;\n    if (tracebinding.hasOwnProperty('batch_id')) {\n      this.toggleBatchId.emit(tracebinding.batch_id);\n    }\n    if (tracebinding.unselected === true) {\n      const idx: number = data.points[0].pointIndex;\n      const batchId: string = this.getMetrics('batch_id')[idx] as string;\n      if (this.getBatchByBatchId(batchId).outlier_flag === false) {\n        this.toggleBatchId.emit(this.getMetrics('batch_id')[idx] as string);\n      }\n    }\n  }\n\n  private getColorByIndex(index: number): string {\n    // return 'Plotly.d3.scale.category10()(index)';\n    return this.defaultColorList[index];\n  }\n\n  private getBatchByBatchId(batchId: string): IBatch {\n    return this.batches.find((batch: IBatch) => batch.batch_id === batchId) as IBatch;\n  }\n}\n","@if (loading === true) {\n    <rds-progress-bar></rds-progress-bar>\n}\n<div #plot class=\"prediction-chart\"></div>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}