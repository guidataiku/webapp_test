{"ast":null,"code":"import { catchError, delay, EMPTY, finalize, of, retry, share, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TreeNavigationService {\n  constructor(http) {\n    this.http = http;\n    this.navigations = {};\n  }\n  getNavigationByChapter(chapter) {\n    if (this.navigations.hasOwnProperty(chapter) && this.navigations[chapter].loading === false && this.navigations[chapter].data !== null) {\n      return of(this.navigations[chapter].data);\n    }\n    if (this.navigations.hasOwnProperty(chapter) && this.navigations[chapter].loading === true && this.navigations[chapter].request !== null) {\n      return this.navigations[chapter].request;\n    }\n    this.navigations[chapter] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get(`./assets/mock/${chapter}/tree-navigation.json`).pipe(retry(2), delay(2000), tap(data => {\n        this.navigations[chapter] = {\n          ...this.navigations[chapter],\n          loading: false,\n          data: data\n        };\n      }), catchError(error => {\n        this.navigations[chapter] = {\n          ...this.navigations[chapter],\n          loading: false,\n          data: null,\n          error: true\n        };\n        return EMPTY;\n      }), share(), finalize(() => {\n        this.navigations[chapter] = {\n          ...this.navigations[chapter],\n          request: null\n        };\n      }))\n    };\n    return this.navigations[chapter].request;\n  }\n  static #_ = this.ɵfac = function TreeNavigationService_Factory(t) {\n    return new (t || TreeNavigationService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TreeNavigationService,\n    factory: TreeNavigationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["catchError","delay","EMPTY","finalize","of","retry","share","tap","TreeNavigationService","constructor","http","navigations","getNavigationByChapter","chapter","hasOwnProperty","loading","data","request","error","get","pipe","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["/home/dataiku/workspace/project-lib-versioned/webapp_test/frontend_copy/src/app/services/tree-navigation.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, delay, EMPTY, finalize, Observable, of, retry, share, tap } from 'rxjs';\nimport { INavigationRequest, ITreeNavigationItem } from '../../types/navigation';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TreeNavigationService {\n\n  private navigations: {[key: string]: INavigationRequest} = {}; \n\n  constructor(private http: HttpClient) { }\n\n  getNavigationByChapter(chapter: string): Observable<ITreeNavigationItem[]> {\n    if (this.navigations.hasOwnProperty(chapter) && this.navigations[chapter].loading === false && this.navigations[chapter].data !== null) {\n      return of(this.navigations[chapter].data as ITreeNavigationItem[]);\n    }\n    if (this.navigations.hasOwnProperty(chapter) && this.navigations[chapter].loading === true && this.navigations[chapter].request !== null) {\n      return this.navigations[chapter].request as Observable<ITreeNavigationItem[]>;\n    }\n    this.navigations[chapter] = {\n      loading: true,\n      data: null,\n      error: false,\n      request: this.http.get<any>(`./assets/mock/${chapter}/tree-navigation.json`)\n        .pipe(\n          retry(2),\n          delay(2000),\n          tap((data: ITreeNavigationItem[]) => {\n            this.navigations[chapter] = {\n              ...this.navigations[chapter], \n              loading: false,\n              data: data\n            };\n          }),\n          catchError((error: HttpErrorResponse) => {\n            this.navigations[chapter] = {\n              ...this.navigations[chapter], \n              loading: false,\n              data: null,\n              error: true\n            };\n            return EMPTY;\n          }),\n          share(),\n          finalize(() => {\n            this.navigations[chapter] = {\n              ...this.navigations[chapter], \n              request: null\n            };\n          })\n        )\n    };\n    return this.navigations[chapter].request as Observable<ITreeNavigationItem[]>;\n  }\n}\n"],"mappings":"AAEA,SAASA,UAAU,EAAEC,KAAK,EAAEC,KAAK,EAAEC,QAAQ,EAAcC,EAAE,EAAEC,KAAK,EAAEC,KAAK,EAAEC,GAAG,QAAQ,MAAM;;;AAM5F,OAAM,MAAOC,qBAAqB;EAIhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,WAAW,GAAwC,EAAE;EAErB;EAExCC,sBAAsBA,CAACC,OAAe;IACpC,IAAI,IAAI,CAACF,WAAW,CAACG,cAAc,CAACD,OAAO,CAAC,IAAI,IAAI,CAACF,WAAW,CAACE,OAAO,CAAC,CAACE,OAAO,KAAK,KAAK,IAAI,IAAI,CAACJ,WAAW,CAACE,OAAO,CAAC,CAACG,IAAI,KAAK,IAAI,EAAE;MACtI,OAAOZ,EAAE,CAAC,IAAI,CAACO,WAAW,CAACE,OAAO,CAAC,CAACG,IAA6B,CAAC;IACpE;IACA,IAAI,IAAI,CAACL,WAAW,CAACG,cAAc,CAACD,OAAO,CAAC,IAAI,IAAI,CAACF,WAAW,CAACE,OAAO,CAAC,CAACE,OAAO,KAAK,IAAI,IAAI,IAAI,CAACJ,WAAW,CAACE,OAAO,CAAC,CAACI,OAAO,KAAK,IAAI,EAAE;MACxI,OAAO,IAAI,CAACN,WAAW,CAACE,OAAO,CAAC,CAACI,OAA4C;IAC/E;IACA,IAAI,CAACN,WAAW,CAACE,OAAO,CAAC,GAAG;MAC1BE,OAAO,EAAE,IAAI;MACbC,IAAI,EAAE,IAAI;MACVE,KAAK,EAAE,KAAK;MACZD,OAAO,EAAE,IAAI,CAACP,IAAI,CAACS,GAAG,CAAM,iBAAiBN,OAAO,uBAAuB,CAAC,CACzEO,IAAI,CACHf,KAAK,CAAC,CAAC,CAAC,EACRJ,KAAK,CAAC,IAAI,CAAC,EACXM,GAAG,CAAES,IAA2B,IAAI;QAClC,IAAI,CAACL,WAAW,CAACE,OAAO,CAAC,GAAG;UAC1B,GAAG,IAAI,CAACF,WAAW,CAACE,OAAO,CAAC;UAC5BE,OAAO,EAAE,KAAK;UACdC,IAAI,EAAEA;SACP;MACH,CAAC,CAAC,EACFhB,UAAU,CAAEkB,KAAwB,IAAI;QACtC,IAAI,CAACP,WAAW,CAACE,OAAO,CAAC,GAAG;UAC1B,GAAG,IAAI,CAACF,WAAW,CAACE,OAAO,CAAC;UAC5BE,OAAO,EAAE,KAAK;UACdC,IAAI,EAAE,IAAI;UACVE,KAAK,EAAE;SACR;QACD,OAAOhB,KAAK;MACd,CAAC,CAAC,EACFI,KAAK,EAAE,EACPH,QAAQ,CAAC,MAAK;QACZ,IAAI,CAACQ,WAAW,CAACE,OAAO,CAAC,GAAG;UAC1B,GAAG,IAAI,CAACF,WAAW,CAACE,OAAO,CAAC;UAC5BI,OAAO,EAAE;SACV;MACH,CAAC,CAAC;KAEP;IACD,OAAO,IAAI,CAACN,WAAW,CAACE,OAAO,CAAC,CAACI,OAA4C;EAC/E;EAAC,QAAAI,CAAA,G;qBA/CUb,qBAAqB,EAAAc,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAArBlB,qBAAqB;IAAAmB,OAAA,EAArBnB,qBAAqB,CAAAoB,IAAA;IAAAC,UAAA,EAFpB;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}