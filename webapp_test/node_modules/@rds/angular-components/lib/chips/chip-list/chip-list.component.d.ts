import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterContentInit, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Observable } from 'rxjs';
import { RdsAvatarComponent } from '../../avatar';
import { RdsChipCompareFunction, RdsChipEvent, RdsChipSelectEvent, RdsChipsSize } from '../chip.types';
import { RdsChipSetComponent } from '../chip-set';
import { RdsChipSelectableComponent } from '../chip-selectable/chip-selectable.component';
import * as i0 from "@angular/core";
export declare class RdsChipListComponent<T> extends RdsChipSetComponent<T> implements AfterContentInit, OnDestroy, ControlValueAccessor {
    private readonly ngControl;
    private readonly cdr;
    private _value;
    private _multiple;
    private _selectable;
    private _pendingInitialValue;
    selectableChips: QueryList<RdsChipSelectableComponent<T>>;
    set tabIndex(value: NumberInput);
    get tabIndex(): number;
    get tabindex(): number;
    get empty(): boolean;
    readonly valueChange: EventEmitter<any>;
    avatars: QueryList<RdsAvatarComponent>;
    private onChange;
    private onTouched;
    orientation: string;
    get hostClasses(): string[];
    set multiple(value: BooleanInput);
    get multiple(): boolean;
    set selectable(value: BooleanInput);
    get selectable(): boolean;
    get size(): RdsChipsSize;
    set size(size: RdsChipsSize);
    protected _size: RdsChipsSize;
    compareFn: RdsChipCompareFunction<T>;
    set value(value: T);
    get value(): T;
    set disabled(v: BooleanInput);
    get disabled(): boolean;
    get selected(): RdsChipSelectableComponent<T> | RdsChipSelectableComponent<T>[];
    get chipSelectionChanges(): Observable<RdsChipSelectEvent<T>>;
    get chipBlurChanges(): Observable<RdsChipEvent<T>>;
    get focused(): boolean;
    constructor();
    ngAfterContentInit(): void;
    /**
     * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there
     * are no selected chips.
     */
    focus(): void;
    blur(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    protected getChipSelectableStream<E, C extends RdsChipSelectableComponent<T> = RdsChipSelectableComponent<T>>(mappingFunction: (chip: C) => Observable<E>): Observable<E>;
    protected hasFocusedChip(): boolean;
    private onKeydown;
    private getFirstSelectedChip;
    private markAsTouched;
    private syncListProperties;
    private clearSelection;
    private propagateChanges;
    private setSelectionByValue;
    private selectValue;
    private checkAndSetAvatarSizes;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsChipListComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsChipListComponent<any>, "rds-chip-list", never, { "tabIndex": { "alias": "tabIndex"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "selectable": { "alias": "selectable"; "required": false; }; "size": { "alias": "size"; "required": false; }; "compareFn": { "alias": "compareFn"; "required": false; }; "value": { "alias": "value"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "valueChange": "valueChange"; }, ["selectableChips", "avatars"], ["rds-chip-selectable, rds-chip, button[rds-chip], button[rdsChip]"], false, never>;
}
