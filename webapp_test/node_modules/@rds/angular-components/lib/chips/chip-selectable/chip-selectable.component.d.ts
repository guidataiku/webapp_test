import { EventEmitter } from '@angular/core';
import { RdsChipComponent } from '../chip/chip.component';
import { BooleanInput } from '@angular/cdk/coercion';
import { RdsChipSelectEvent } from '../chip.types';
import * as i0 from "@angular/core";
export declare class RdsChipSelectableComponent<T> extends RdsChipComponent<T> {
    private readonly parentList;
    private _selected;
    protected _selectable: boolean;
    chipListSelectable: boolean;
    chipListMulti: boolean;
    constructor();
    get hostClasses(): Record<string, boolean>;
    get isChecked(): boolean | null;
    get isSelected(): boolean | null;
    set selectable(value: BooleanInput);
    get selectable(): boolean;
    set selected(value: BooleanInput);
    get selected(): boolean;
    readonly selectedChange: EventEmitter<RdsChipSelectEvent<T>>;
    handlePrimaryActionInteraction(): void;
    toggleSelected(isUserInput?: boolean): void;
    setSelectedState(isSelected: boolean, isUserInput: boolean, emitEvent: boolean): void;
    selectViaInteraction(): void;
    select(): void;
    deselect(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsChipSelectableComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsChipSelectableComponent<any>, "rds-chip-selectable", never, { "selectable": { "alias": "selectable"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; }, { "selectedChange": "selectedChange"; }, never, ["rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]", "img[rdsChipAvatar], img[rds-chip-avatar]", "*", "rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]"], false, never>;
}
