import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';
import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { ContentObserver } from '@angular/cdk/observers';
import { Subject } from 'rxjs';
import { RdsChipActionDirective } from '../chip-action';
import { RdsChipEvent, RdsChipsSize, RdsChipType } from '../chip.types';
import * as i0 from "@angular/core";
export declare class RdsChipComponent<T> implements FocusableOption, AfterViewInit, OnDestroy {
    protected readonly elementRef: ElementRef<HTMLElement>;
    protected readonly focusMonitor: FocusMonitor;
    protected readonly contentObserver: ContentObserver;
    protected readonly ngZone: NgZone;
    protected readonly destroyRef: DestroyRef;
    readonly cdr: ChangeDetectorRef;
    private _value;
    private hasFocusInternal;
    private _pendingFocus;
    private _ariaLabelCloseButton?;
    private _initialized;
    readonly focus$: Subject<RdsChipEvent<T>>;
    readonly blur$: Subject<RdsChipEvent<T>>;
    get hostClasses(): Record<string, boolean>;
    readonly id: string;
    set ariaLabelCloseButton(v: string | undefined);
    get ariaLabelCloseButton(): string;
    set size(value: RdsChipsSize);
    get size(): RdsChipsSize;
    private _size;
    type: RdsChipType;
    role: string | null;
    disabled: boolean;
    closable: boolean;
    set value(value: T);
    get value(): T | string;
    get innerText(): string;
    readonly closeChip: EventEmitter<void>;
    readonly destroyed: EventEmitter<RdsChipEvent<T>>;
    primaryAction?: RdsChipActionDirective;
    closeAction: RdsChipActionDirective;
    get textContent(): string | null;
    constructor();
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    handleKeydown(event: PointerEvent | KeyboardEvent): void;
    focus(): void;
    onClose(e: Event): void;
    hasFocus(): boolean;
    /** Handles interactions with the primary action of the chip. */
    handlePrimaryActionInteraction(): void;
    getSourceAction(target: Node): RdsChipActionDirective | undefined;
    getActions(): RdsChipActionDirective[];
    private monitorFocus;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsChipComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsChipComponent<any>, "rds-chip, button[rds-chip], button[rdsChip]", never, { "ariaLabelCloseButton": { "alias": "ariaLabelCloseButton"; "required": false; }; "size": { "alias": "size"; "required": false; }; "type": { "alias": "type"; "required": false; }; "role": { "alias": "role"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "closable": { "alias": "closable"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "closeChip": "closeChip"; "destroyed": "destroyed"; }, never, ["rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]", "img[rdsChipAvatar], img[rds-chip-avatar]", "*", "rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]"], false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_closable: unknown;
}
