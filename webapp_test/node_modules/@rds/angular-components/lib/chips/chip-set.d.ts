import { FocusKeyManager } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, DestroyRef, ElementRef, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';
import { Observable } from 'rxjs';
import { RdsChipActionDirective } from './chip-action';
import { RdsChipEvent, RdsChipsSize, RdsChipType } from './chip.types';
import { RdsChipComponent } from './chip/chip.component';
import * as i0 from "@angular/core";
export declare class RdsChipSetComponent<T> implements AfterContentInit, AfterViewInit, OnDestroy, OnChanges {
    protected readonly destroyRef: DestroyRef;
    protected readonly elementRef: ElementRef<HTMLElement>;
    protected readonly dir: Directionality | null;
    private _lastDestroyedFocusedChipIndex;
    private _tabIndex;
    protected keyManager: FocusKeyManager<RdsChipActionDirective>;
    protected _defaultRole: string;
    protected _disabled: boolean;
    protected _size: RdsChipsSize;
    get chipFocusChanges(): Observable<RdsChipEvent<T>>;
    get chipDestroyedChanges(): Observable<RdsChipEvent<T>>;
    set tabIndex(value: NumberInput);
    get tabIndex(): number;
    type: RdsChipType;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    get empty(): boolean;
    get role(): string | null;
    set role(value: string | null);
    private _explicitRole;
    get focused(): boolean;
    chips: QueryList<RdsChipComponent<T>>;
    chipActions: QueryList<RdsChipActionDirective>;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    protected hasFocusedChip(): boolean;
    protected syncChipsState(): void;
    /** Dummy method for subclasses to override. Base chip set cannot be focused. */
    focus(): void;
    handleKeydown(event: KeyboardEvent): void;
    protected isValidIndex(index: number): boolean;
    protected allowFocusEscape(): void;
    /**
     * Gets a stream of events from all the chips within the set.
     * The stream will automatically incorporate any newly-added chips.
     */
    protected getChipStream<E, C extends RdsChipComponent<T>>(mappingFunction: (chip: C) => Observable<E>): Observable<E>;
    /** Checks whether an event comes from inside a chip element. */
    protected originatesFromChip(event: Event): boolean;
    private setUpFocusManagement;
    /** Listens to changes in the chip set and syncs up the state of the individual chips. */
    private trackChipSetChanges;
    private trackDestroyedFocusedChip;
    private _redirectDestroyedChipFocus;
    private checkAndSetChipSizes;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsChipSetComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsChipSetComponent<any>, "rds-chip-set", never, { "tabIndex": { "alias": "tabIndex"; "required": false; }; "type": { "alias": "type"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "role": { "alias": "role"; "required": false; }; }, {}, ["chips"], never, false, never>;
}
