import { AfterContentInit, DestroyRef, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { RdsDropdownToggleTrigger } from './dropdown.types';
import * as i0 from "@angular/core";
export declare class RdsDropdownToggleDirective implements AfterContentInit, OnChanges, OnDestroy {
    private static readonly TRIGGER_SPLITTER;
    readonly elementRef: ElementRef<HTMLElement>;
    protected readonly destroyRef: DestroyRef;
    readonly toggle: Subject<KeyboardEvent | MouseEvent>;
    protected _isOpen: boolean;
    private readonly _eventsDestroyer$;
    trigger: RdsDropdownToggleTrigger;
    class: string;
    disabled: boolean;
    get isOpen(): boolean;
    set isOpen(isOpen: boolean);
    onEnter($event: KeyboardEvent): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _refreshEvents;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDropdownToggleDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsDropdownToggleDirective, "[rdsDropdownToggle], [rds-dropdown-toggle]", ["rdsDropdownToggle"], { "trigger": { "alias": "trigger"; "required": false; }; "isOpen": { "alias": "isOpen"; "required": false; }; }, {}, never, never, false, never>;
}
