import { AfterContentInit, ChangeDetectorRef, DestroyRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { Overlay } from '@angular/cdk/overlay';
import { RdsDropdownAutoClose, RdsDropdownBackdrop, RdsDropdownPlacement } from './dropdown.types';
import * as i0 from "@angular/core";
export declare class RdsDropdownDirective implements AfterContentInit, OnChanges, OnDestroy {
    protected readonly cdr: ChangeDetectorRef;
    protected readonly destroyRef: DestroyRef;
    protected readonly ngZone: NgZone;
    protected readonly elementRef: ElementRef<HTMLElement>;
    protected readonly renderer: Renderer2;
    protected readonly overlay: Overlay;
    private _menu;
    private _toggle;
    autoClose: RdsDropdownAutoClose;
    placement: RdsDropdownPlacement;
    disabled: boolean;
    backdrop: RdsDropdownBackdrop;
    openChanged: EventEmitter<boolean>;
    shown: EventEmitter<void>;
    hidden: EventEmitter<void>;
    private _open;
    private _overlayRef;
    private _portal;
    private readonly _closed$;
    onHover(): void;
    onLeave(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    isOpen(): boolean;
    show(): void;
    hide(): void;
    toggle(): void;
    private _getPlacement;
    private _setCloseHandlers;
    private _handleMouseOver;
    private _handleMouseLeave;
    private _handleFocus;
    private _handleBlur;
    private _getPositions;
    private _getPositionStrategy;
    private _checkToggle;
    private handleIsPrevButton;
    private handleIsPrevFocused;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDropdownDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsDropdownDirective, "[rdsDropdown], [rds-dropdown]", ["rdsDropdown"], { "autoClose": { "alias": "autoClose"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "backdrop": { "alias": "backdrop"; "required": false; }; }, { "openChanged": "openChanged"; "shown": "shown"; "hidden": "hidden"; }, ["_menu", "_toggle"], never, false, never>;
    static ngAcceptInputType_disabled: unknown;
}
