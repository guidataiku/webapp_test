import { FocusableOption, FocusMonitor, FocusOptions, FocusOrigin } from '@angular/cdk/a11y';
import { AfterContentChecked, AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { RdsDropdownToggleDirective } from './dropdown-toggle.directive';
import * as i0 from "@angular/core";
export type RdsDropdownToggleButtonSize = 's' | 'm' | 'l';
declare type RdsDropdownToggleButtonIcon = 'caret_up' | 'caret_down';
export declare class RdsDropdownToggleButtonComponent extends RdsDropdownToggleDirective implements OnChanges, AfterContentInit, AfterViewInit, AfterContentChecked, OnDestroy, FocusableOption {
    protected readonly focusMonitor: FocusMonitor;
    protected readonly cdr: ChangeDetectorRef;
    protected icon: RdsDropdownToggleButtonIcon;
    protected showIcon: boolean;
    private _size;
    imageWrapper: ElementRef;
    get size(): RdsDropdownToggleButtonSize;
    set size(size: RdsDropdownToggleButtonSize);
    class: string;
    get isDisabled(): 'disabled' | null;
    get isOpen(): boolean;
    set isOpen(isOpen: boolean);
    onEnter($event: KeyboardEvent): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentChecked(): void;
    ngOnDestroy(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    private _isDefault;
    private _isBorderless;
    private _isPrimary;
    private _isSecondary;
    private _isText;
    private _isWarning;
    private _isIconButton;
    private _getCssClass;
    get hostElement(): HTMLButtonElement;
    private _getDefaultSize;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDropdownToggleButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsDropdownToggleButtonComponent, "    button[rdsDropdownToggleButton], button[rds-dropdown-toggle-button],    button[rdsDropdownToggleBorderlessButton], button[rds-dropdown-toggle-borderless-button],    button[rdsDropdownTogglePrimaryButton], button[rds-dropdown-toggle-primary-button],    button[rdsDropdownToggleSecondaryButton], button[rds-dropdown-toggle-secondary-button],    button[rdsDropdownToggleTextButton], button[rds-dropdown-toggle-text-button],    button[rdsDropdownToggleWarningButton], button[rds-dropdown-toggle-warning-button],    button[rdsDropdownToggleIconButton], button[rds-dropdown-toggle-icon-button],  ", never, { "size": { "alias": "size"; "required": false; }; "isOpen": { "alias": "isOpen"; "required": false; }; }, {}, never, ["rds-icon", "*"], false, never>;
}
export {};
