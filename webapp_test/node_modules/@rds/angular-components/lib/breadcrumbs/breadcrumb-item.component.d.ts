import { FocusableOption, FocusOrigin } from '@angular/cdk/a11y';
import { AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export interface RdsBreadcrumbItem {
    text: string;
    title?: string;
}
export declare class RdsBreadcrumbItemComponent<T extends RdsBreadcrumbItem> implements AfterViewInit, OnDestroy, FocusableOption {
    private readonly focusMonitor;
    private readonly elementRef;
    class: string;
    tabIndex: number;
    item: T;
    itemClick: EventEmitter<T>;
    constructor(tabIndex?: string);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onClickItem(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsBreadcrumbItemComponent<any>, [{ attribute: "tabindex"; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsBreadcrumbItemComponent<any>, "rds-breadcrumb-item", never, { "tabIndex": { "alias": "tabIndex"; "required": false; }; "item": { "alias": "item"; "required": false; }; }, { "itemClick": "itemClick"; }, never, never, true, never>;
    static ngAcceptInputType_tabIndex: unknown;
}
