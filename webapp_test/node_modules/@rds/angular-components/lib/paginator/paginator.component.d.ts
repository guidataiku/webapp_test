import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { EventEmitter, InjectionToken, OnInit } from '@angular/core';
import { Observable, Subscriber } from 'rxjs';
import { RdsPaginatorIntl } from './paginator-intl';
import * as i0 from "@angular/core";
export interface PageEvent {
    pageIndex: number;
    previousPageIndex?: number;
    pageSize: number;
    length: number;
}
export interface RdsPaginatorDefaultOptions {
    pageSize?: number;
    pageSizeOptions?: number[];
    hidePageSize?: boolean;
    showFirstLastButtons?: boolean;
    showItemsOfPageLabel?: boolean;
}
export type RdsPaginatorPresentationMode = 'full' | 'basic';
export declare const RDS_PAGINATOR_DEFAULT_OPTIONS: InjectionToken<RdsPaginatorDefaultOptions>;
export declare class RdsPaginatorComponent implements OnInit {
    protected readonly intl: RdsPaginatorIntl;
    private readonly cdr;
    private readonly defaults;
    private _isInitialized;
    private _pendingSubscribers;
    private _length;
    readonly initialized: Observable<void>;
    private _initialized;
    class: string;
    set pageIndex(value: NumberInput);
    get pageIndex(): number;
    private _pageIndex;
    set length(v: NumberInput);
    get length(): number;
    showItemsOfPageLabel: boolean;
    set pageSize(value: NumberInput);
    get pageSize(): number;
    private _pageSize;
    disabled: boolean;
    set pageSizeOptions(value: NumberInput[]);
    get pageSizeOptions(): number[];
    private _pageSizeOptions;
    set showButtons(value: BooleanInput);
    get showButtons(): boolean;
    private _showButtons;
    set presentationMode(value: RdsPaginatorPresentationMode);
    get presentationMode(): RdsPaginatorPresentationMode;
    private _presentationMode;
    hidePageSize: boolean;
    showFirstLastButtons: boolean;
    readonly page: EventEmitter<PageEvent>;
    _displayedPageSizeOptions: number[];
    constructor();
    ngOnInit(): void;
    nextPage(): void;
    previousPage(): void;
    firstPage(): void;
    lastPage(): void;
    hasPreviousPage(): boolean;
    hasNextPage(): boolean;
    getNumberOfPages(): number;
    get(): PageEvent;
    _onPageIndexChange(input: HTMLInputElement): void;
    _changePageSize(pageSize: number): void;
    _nextButtonsDisabled(): boolean;
    _previousButtonsDisabled(): boolean;
    _onPageKeyDown($event: KeyboardEvent): boolean;
    _getPageNumberInputWidth(): number;
    private _updateDisplayedPageSizeOptions;
    emitPageEvent(data: {
        previousPageIndex: number;
        pageIndex?: number;
    }): void;
    protected _markInitialized(): void;
    protected _notifySubscriber(subscriber: Subscriber<void>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsPaginatorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsPaginatorComponent, "rds-paginator", ["rdsPaginator"], { "pageIndex": { "alias": "pageIndex"; "required": false; }; "length": { "alias": "length"; "required": false; }; "showItemsOfPageLabel": { "alias": "showItemsOfPageLabel"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "pageSizeOptions": { "alias": "pageSizeOptions"; "required": false; }; "showButtons": { "alias": "showButtons"; "required": false; }; "presentationMode": { "alias": "presentationMode"; "required": false; }; "hidePageSize": { "alias": "hidePageSize"; "required": false; }; "showFirstLastButtons": { "alias": "showFirstLastButtons"; "required": false; }; }, { "page": "page"; }, never, never, false, never>;
    static ngAcceptInputType_showItemsOfPageLabel: unknown;
    static ngAcceptInputType_pageSize: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_hidePageSize: unknown;
    static ngAcceptInputType_showFirstLastButtons: unknown;
}
