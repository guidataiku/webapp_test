import { AnimationEvent } from '@angular/animations';
import { ElementRef, OnDestroy, TemplateRef } from '@angular/core';
import { Observable } from 'rxjs';
import { RdsTooltipClass, RdsTooltipPosition, RdsTooltipVisibility } from './types';
import { RdsTooltipDirective } from './tooltip.directive';
import * as i0 from "@angular/core";
export declare class RdsTooltipComponent implements OnDestroy {
    private readonly cdr;
    private readonly nativeElement;
    _content: string | TemplateRef<unknown>;
    _tooltipClass: RdsTooltipClass;
    _tooltipArrow: boolean;
    _showTimeout: ReturnType<typeof setTimeout> | null;
    _hideTimeout: ReturnType<typeof setTimeout> | null;
    _position: RdsTooltipPosition;
    _visibility: RdsTooltipVisibility;
    private _closeOnInteraction;
    private readonly _onHide;
    triggerDirectiveRef?: RdsTooltipDirective;
    isPopover: boolean;
    showCloseButton: boolean;
    closeButton: ElementRef<HTMLElement> | undefined;
    role: 'dialog' | null;
    id: string;
    isModal: boolean;
    closeOnBodyClick(): void;
    get contentIsString(): boolean;
    get tooltipIconClass(): string;
    ngOnDestroy(): void;
    /**
     * Show tooltip
     * @param delay in ms
     */
    show(delay?: number): void;
    /**
     * Hide tooltip
     * @param delay in ms
     */
    hide(delay?: number): void;
    getFirstFocusableElement(): HTMLElement | null;
    getLastFocusableElement(): HTMLElement | null;
    afterHidden(): Observable<void>;
    isVisible(): boolean;
    onCloseButtonClick(): void;
    _animationStart(): void;
    _animationDone(event: AnimationEvent): void;
    _markForCheck(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsTooltipComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsTooltipComponent, "rds-tooltip", never, {}, {}, never, never, false, never>;
}
