import { AfterViewInit, EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { RdsTimelineEventIconMarkerDirective } from './timeline-event-icon-marker.directive';
import { RdsTimelineOppositeDirective } from './timeline-event-opposite.directive';
import * as i0 from "@angular/core";
export type RdsTimelineEventStatus = 'default' | 'danger' | 'disabled' | 'success' | 'warning';
export type RdsTimelineEvent<T> = T & {
    status?: RdsTimelineEventStatus;
};
export declare class RdsTimelineEventComponent<T> implements OnInit, AfterViewInit, OnDestroy {
    private readonly elementRef;
    private readonly contentObserver;
    private readonly focusMonitor;
    private readonly cdr;
    private readonly destroyRef;
    private readonly class;
    event: RdsTimelineEvent<T>;
    selected: EventEmitter<void>;
    protected iconMarkerTemplate: TemplateRef<RdsTimelineEventIconMarkerDirective>;
    protected oppositeTemplate: TemplateRef<RdsTimelineOppositeDirective>;
    protected marker: HTMLElement;
    set isActive(value: boolean);
    get isActive(): boolean;
    private _isActive;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsTimelineEventComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsTimelineEventComponent<any>, "rds-timeline-event", never, { "event": { "alias": "event"; "required": true; }; }, { "selected": "selected"; }, ["iconMarkerTemplate", "oppositeTemplate"], ["*", "rds-icon[rds-timeline-event-icon-marker], rds-icon[rdsTimelineEventIconMarker]", "rds-timeline-opposite, [rds-timeline-opposite], [rdsTimelineOpposite]"], false, never>;
}
