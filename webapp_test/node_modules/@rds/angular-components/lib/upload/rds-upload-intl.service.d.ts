import { RdsFileItem } from './file-item.class';
import * as i0 from "@angular/core";
export type RdsUploadIntlMessageFactory = (fileItem: RdsFileItem) => string;
export type RdsUploadIntlToken = keyof typeof RdsUploadIntlService.translations;
export declare class RdsUploadIntlService {
    static readonly translations: {
        EMPTY: string;
        chooseFilesButtonLabel: string;
        dropZoneChooseFiles: string;
        dropZoneOrDropFiles: string;
        uploadListAriaLabel: string;
        startUploadButtonLabel: string;
        retryButtonAriaLabel: string;
        cancelButtonAriaLabel: string;
        uploadFailed: string;
        queueLimitFilterDescription: string;
        fileSizeFilterDescription: string;
        fileTypeFilterDescription: string;
    };
    private readonly _change$;
    change$: import("rxjs").Observable<{
        EMPTY: string;
        chooseFilesButtonLabel: string;
        dropZoneChooseFiles: string;
        dropZoneOrDropFiles: string;
        uploadListAriaLabel: string;
        startUploadButtonLabel: string;
        retryButtonAriaLabel: string;
        cancelButtonAriaLabel: string;
        uploadFailed: string;
        queueLimitFilterDescription: string;
        fileSizeFilterDescription: string;
        fileTypeFilterDescription: string;
    }>;
    setTranslation(key: RdsUploadIntlToken, value: string): void;
    setFileItemUploadSuccessMessageFactory(fn: RdsUploadIntlMessageFactory): void;
    setFileItemUploadErrorMessageFactory(fn: RdsUploadIntlMessageFactory): void;
    setFileItemFilterFailedMessageFactory(fn: RdsUploadIntlMessageFactory): void;
    setFileItemProgressMessageFactory(fn: (progress: number | null) => string): void;
    getFileItemUploadSuccessMessage(fileItem: RdsFileItem): string;
    getFileItemUploadErrorMessage(fileItem: RdsFileItem): string;
    getFileItemFilterFailedMessage(fileItem: RdsFileItem): string;
    getFileItemProgressMessage(progress: number | null): string;
    private fileItemUploadSuccessMessageFactory;
    private fileItemUploadErrorMessageFactory;
    private fileItemFilterFailedMessageFactory;
    private fileItemProgressMessageFactory;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsUploadIntlService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RdsUploadIntlService>;
}
