import { RdsFileItem } from './file-item.class';
import { RdsFileItemStatusChange, RdsUploadConfig, RdsUploadFileAddError, RdsUploadFilter } from './upload.types';
import { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { RdsHttpClientWrapper } from './http-client-wrapper';
export declare class RdsFileUploader<T = unknown> {
    private client?;
    _config: RdsUploadConfig & Required<Pick<RdsUploadConfig, 'filters'>>;
    readonly queue: RdsFileItem[];
    readonly itemIdToRequest: Map<number, RdsHttpClientWrapper<T>>;
    get config(): Readonly<RdsUploadConfig>;
    private readonly events;
    readonly fileInvalid$: import("rxjs").Observable<RdsUploadFileAddError>;
    readonly fileItemSuccess$: import("rxjs").Observable<RdsFileItemStatusChange<T>>;
    readonly fileItemError$: import("rxjs").Observable<RdsFileItemStatusChange<T, HttpErrorResponse>>;
    readonly fileItemCanceled$: import("rxjs").Observable<RdsFileItemStatusChange<T>>;
    readonly fileItemCompleted$: import("rxjs").Observable<RdsFileItemStatusChange<T, HttpErrorResponse | HttpResponse<T>>>;
    readonly allComplete$: import("rxjs").Observable<void>;
    readonly isUploading$: import("rxjs").Observable<boolean>;
    readonly config$: import("rxjs").Observable<Readonly<RdsUploadConfig>>;
    readonly queue$: import("rxjs").Observable<RdsFileItem[]>;
    get isUploading(): boolean;
    private set isUploading(value);
    constructor(config: RdsUploadConfig, client?: HttpClient | undefined);
    setConfig(config: RdsUploadConfig): void;
    updateConfig(update: Partial<RdsUploadConfig>): void;
    addToQueue(files: File[], filters?: RdsUploadFilter[] | string, bypassAutoUpload?: boolean): RdsFileItem[];
    removeFromQueue(value: RdsFileItem | number): boolean;
    clearQueue(): void;
    uploadItem(value: RdsFileItem): void;
    cancelItem(value: RdsFileItem | number): void;
    uploadAll(): void;
    cancelAll(): void;
    destroy(): void;
    registerHttpClient(client: HttpClient): void;
    isHttpClientRegistered(): boolean;
    private removeItem;
    private getIndexOfItem;
    private isValidIndex;
    private getReadyItems;
    private onErrorItem;
    private onCompleteItem;
    private addFileToQueue;
    private getFilters;
    private isValidFile;
    private onProgressItem;
    private onSuccessItem;
    private onCancelItem;
}
