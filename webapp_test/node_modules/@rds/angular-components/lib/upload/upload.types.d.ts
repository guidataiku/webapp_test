import { RdsFileItem } from './file-item.class';
import { HttpHeaders, HttpResponse } from '@angular/common/http';
import { RdsUploadIntlToken } from './rds-upload-intl.service';
export type RdsUploadSize = 's' | 'm' | 'l';
export type RdsUploadFilter = {
    readonly name: string;
    readonly descriptionIntlToken: RdsUploadIntlToken;
    readonly fn: (item: File, config: RdsUploadConfig, queue: RdsFileItem[]) => boolean;
    preventsAddingToQueue?: boolean;
};
export type RdsFileItemStatusChange<T = unknown, U = HttpResponse<T>> = {
    item: RdsFileItem;
    event?: U;
};
export type RdsFileItemProgressChange = {
    item: RdsFileItem;
    progress: number | null;
};
export type RdsUploadFileAddError = {
    file: File;
    failedFilters: RdsUploadFilter[];
    config: RdsUploadConfig;
};
export type RdsUploadConfig = {
    url: string;
    authToken?: string;
    accept?: string[];
    autoUpload?: boolean;
    filters?: RdsUploadFilter[];
    headers?: HttpHeaders;
    maxFileSize?: number;
    queueLimit?: number | null;
    removeAfterUpload?: boolean;
    multiple?: boolean;
    method?: HttpMethod;
    uploadSequentially?: boolean;
    responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';
};
export type RdsFileItemState = 'ready' | 'uploading' | 'aborted' | 'error' | 'success';
export type HttpMethod = 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PATCH' | 'GET' | 'PUT';
