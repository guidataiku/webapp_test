import { AfterContentInit, ElementRef, OnDestroy, OnInit, QueryList } from '@angular/core';
import { RdsUploadSize } from './upload.types';
import { RdsFileUploader } from './uploader';
import { RdsUploadIntlService } from './rds-upload-intl.service';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';
import { noop } from 'rxjs';
import { RdsFileItem } from './file-item.class';
import { RdsUploadErrorDirective } from './upload-error.directive';
import * as i0 from "@angular/core";
export declare class RdsUploadComponent<T = unknown> implements OnInit, AfterContentInit, OnDestroy, ControlValueAccessor, Validator {
    protected readonly intl: RdsUploadIntlService;
    private readonly cdr;
    private readonly destroyRef;
    private readonly httpClient;
    private readonly ngControl;
    private _uploader;
    ariaErrorMessage: string | null;
    onChange: (files: RdsFileItem[]) => void;
    onTouched: typeof noop;
    get hasError(): boolean;
    size: RdsUploadSize;
    hasBackground: boolean;
    set uploader(uploader: RdsFileUploader<T>);
    get uploader(): RdsFileUploader<T>;
    hasDropZone: boolean;
    disabled: boolean;
    get class(): string[];
    fileInput: ElementRef<HTMLInputElement>;
    errors: QueryList<RdsUploadErrorDirective>;
    beforeAddFn: (files: File[]) => File[];
    constructor();
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    onFilesSelected(files: File[]): void;
    writeValue(files: File[]): void;
    registerOnChange(onChange: (value: RdsFileItem[]) => void): void;
    registerOnTouched(onTouched: () => void): void;
    setDisabledState(disabled: boolean): void;
    validate(control: AbstractControl<RdsFileItem[]>): ValidationErrors | null;
    openDialog(): void;
    private setupErrors;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsUploadComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsUploadComponent<any>, "rds-upload", ["rdsUpload"], { "size": { "alias": "size"; "required": false; }; "hasBackground": { "alias": "hasBackground"; "required": false; }; "uploader": { "alias": "uploader"; "required": false; }; "hasDropZone": { "alias": "hasDropZone"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "beforeAddFn": { "alias": "beforeAddFn"; "required": false; }; }, {}, ["errors"], ["rds-upload-error, [rds-upload-error], [rdsUploadError]"], false, never>;
    static ngAcceptInputType_hasBackground: unknown;
    static ngAcceptInputType_hasDropZone: unknown;
    static ngAcceptInputType_disabled: unknown;
}
