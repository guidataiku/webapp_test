import { NumberInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { AnimationTriggerMetadata } from '@angular/animations';
import * as i0 from "@angular/core";
export declare class RdsSwitchChange {
    readonly source: RdsSwitchComponent;
    readonly checked: boolean;
    constructor(source: RdsSwitchComponent, checked: boolean);
}
export declare const rdsSwitchAnimations: {
    readonly transitionMessages: AnimationTriggerMetadata;
};
export type RdsSwitchPosition = 'before' | 'after';
export type RdsSwitchSize = 's' | 'm' | 'l';
export declare class RdsSwitchComponent implements ControlValueAccessor, OnInit, DoCheck, AfterContentInit, AfterViewInit, OnDestroy {
    private readonly destroyRef;
    private readonly cdr;
    private readonly elementRef;
    private readonly focusMonitor;
    private readonly parentForm;
    private readonly parentFormGroup;
    private readonly controlContainer;
    private _uniqueId;
    private _errorState;
    private _tabIndex;
    private _control;
    subscriptAnimationState: '' | 'enter';
    readonly hostClass = "rds-switch";
    formControlName: string;
    name: string;
    size: RdsSwitchSize;
    id: string;
    labelPosition: RdsSwitchPosition;
    ariaLabel: string | null;
    ariaLabelledby: string | null;
    ariaDescribedby: string;
    required: boolean;
    checked: boolean;
    get errorState(): boolean;
    disabled: boolean;
    readonly buttonChanged: EventEmitter<RdsSwitchChange>;
    readonly toggleChange: EventEmitter<void>;
    get inputId(): string;
    _inputElement: ElementRef<HTMLInputElement>;
    onFocus(): void;
    set tabIndex(value: NumberInput);
    get tabIndex(): number;
    private _onChange;
    private _onTouched;
    constructor(tabIndex?: string);
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get isErrorMessageVisible(): boolean;
    _onChangeEvent(event: Event): void;
    _onInputClick(event: Event): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (value: boolean) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    focus(options?: FocusOptions): void;
    toggle(): void;
    _onLabelTextChange(): void;
    private _emitChangeEvent;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSwitchComponent, [{ attribute: "tabindex"; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsSwitchComponent, "rds-switch", never, { "formControlName": { "alias": "formControlName"; "required": false; }; "name": { "alias": "name"; "required": false; }; "size": { "alias": "size"; "required": false; }; "id": { "alias": "id"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "required": { "alias": "required"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; }, { "buttonChanged": "buttonChanged"; "toggleChange": "toggleChange"; }, never, ["*", "rds-control-error", "rds-control-hint"], false, never>;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_disabled: unknown;
}
