import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { BehaviorSubject, Observable } from 'rxjs';
import { RdsSearchIntl } from './search.intl';
import { ControlValueAccessor } from '@angular/forms';
import { FocusableOption, FocusMonitor, FocusOptions, FocusOrigin } from '@angular/cdk/a11y';
import { RdsSearchEvent, RdsSearchEventTrigger, RdsSearchSize } from './search.types';
import * as i0 from "@angular/core";
export declare abstract class RdsAbstractSearchComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit, ControlValueAccessor, FocusableOption {
    protected readonly destroyRef: DestroyRef;
    protected readonly intl: RdsSearchIntl;
    protected readonly cdr: ChangeDetectorRef;
    protected readonly elementRef: ElementRef<any>;
    protected readonly focusMonitor: FocusMonitor;
    placeholder: string;
    buttonText: string;
    emptyValue: string;
    ariaClearLabel: string;
    disabled: boolean;
    includeButton: boolean;
    autoSearch: boolean;
    size: RdsSearchSize;
    get value(): string;
    protected _value: string;
    protected readonly _lastEmitted: BehaviorSubject<RdsSearchEvent>;
    search: Observable<RdsSearchEvent>;
    clear: EventEmitter<void>;
    searchInput: ElementRef<HTMLInputElement>;
    role: string;
    ariaInputLabel: string;
    _onChange: (value: string) => void;
    _onTouched: () => void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: (value: string) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string): void;
    onInput(event: Event): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    isDirtyValue(): boolean;
    resetInput(event: Event): void;
    emitValue(trigger: RdsSearchEventTrigger, event?: Event): void;
    protected setIntlValues(): void;
    private setNewValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsAbstractSearchComponent, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsAbstractSearchComponent, never, never, { "placeholder": { "alias": "placeholder"; "required": false; }; "buttonText": { "alias": "buttonText"; "required": false; }; "emptyValue": { "alias": "emptyValue"; "required": false; }; "ariaClearLabel": { "alias": "ariaClearLabel"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "includeButton": { "alias": "includeButton"; "required": false; }; "autoSearch": { "alias": "autoSearch"; "required": false; }; "size": { "alias": "size"; "required": false; }; "ariaInputLabel": { "alias": "ariaInputLabel"; "required": false; }; }, { "search": "search"; "clear": "clear"; }, never, never, false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_includeButton: unknown;
    static ngAcceptInputType_autoSearch: unknown;
}
