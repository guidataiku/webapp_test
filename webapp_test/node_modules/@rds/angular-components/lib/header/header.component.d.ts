import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { RdsHeaderSearchbarComponent } from './header-searchbar.component';
import { RdsIconButtonComponent } from '../button';
import { AnimationEvent } from '@angular/animations';
import * as i0 from "@angular/core";
export type RdsHeaderExpandedMode = 'expanded' | 'collapsed';
export type RdsHeaderSearchPosition = 'none' | 'start' | 'end' | 'animated';
export declare class RdsHeaderComponent implements AfterViewInit, OnInit, OnDestroy {
    private readonly destroyRef;
    private readonly cdr;
    private readonly renderer;
    private readonly elementRef;
    private readonly ngZone;
    private readonly focusMonitor;
    private readonly contentObserver;
    searchMode: boolean;
    scrollTarget: HTMLElement | ElementRef<HTMLElement> | string | undefined | null;
    searchbarPlaceholder: string;
    searchValue: string;
    search: EventEmitter<string>;
    searchChange: EventEmitter<string>;
    logoTriggered: EventEmitter<KeyboardEvent | MouseEvent>;
    class: string;
    searchbar: RdsHeaderSearchbarComponent;
    searchIcon: RdsIconButtonComponent;
    logoElement: ElementRef;
    get searchPosition(): RdsHeaderSearchPosition;
    set searchPosition(value: RdsHeaderSearchPosition);
    minimalMargins: boolean;
    private _searchPosition;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    startSearching(): void;
    endSearching(): void;
    getExpandedState(): RdsHeaderExpandedMode;
    getCollapsedState(): RdsHeaderExpandedMode;
    onSearch(value: string): void;
    emitSearch(event: Event): void;
    onLogoClick(event: MouseEvent | KeyboardEvent): void;
    focusSearchInput(state: AnimationEvent): void;
    private getScrollTarget;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsHeaderComponent, "rds-header", never, { "scrollTarget": { "alias": "scrollTarget"; "required": false; }; "searchbarPlaceholder": { "alias": "searchbarPlaceholder"; "required": false; }; "searchValue": { "alias": "searchValue"; "required": false; }; "searchPosition": { "alias": "searchPosition"; "required": false; }; "minimalMargins": { "alias": "minimalMargins"; "required": false; }; }, { "search": "search"; "searchChange": "searchChange"; "logoTriggered": "logoTriggered"; }, never, ["rds-divider[rds-header-start-divider], rds-header-app-name", "rds-header-navigation-primary", "rds-divider[rds-header-end-divider]", "rds-header-actions", "rds-header-navigation-secondary"], false, never>;
    static ngAcceptInputType_minimalMargins: unknown;
}
