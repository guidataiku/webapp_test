import { AfterViewInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { AnimationItem } from 'lottie-web';
import { AnimationOptions } from 'ngx-lottie';
import { RdsProgressSpinnerMode, RdsProgressSpinnerSize } from './progress-spinner.types';
import { NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class RdsProgressSpinnerComponent implements AfterViewInit, OnChanges, OnDestroy {
    private animationItem;
    private readonly animationConfig$;
    protected readonly animationConfigDebounced$: import("rxjs").Observable<AnimationOptions>;
    get hostClasses(): string[];
    readonly hostRole = "progressbar";
    get attrValueMin(): number | null;
    get attrValueMax(): number | null;
    get attrValueNow(): number | null;
    set value(newValue: NumberInput);
    get value(): number;
    private _value;
    set minValue(value: NumberInput);
    get minValue(): number;
    private _minValue;
    set maxValue(value: NumberInput);
    get maxValue(): number;
    private _maxValue;
    mode: RdsProgressSpinnerMode;
    size: RdsProgressSpinnerSize;
    label: string | null;
    white: boolean;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    animationCreated($event: AnimationItem): void;
    private playAnimation;
    private _getPath;
    private _setAnimationConfig;
    private removeAnimationItemListener;
    private getPercentageValue;
    private getAnimationDirection;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsProgressSpinnerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsProgressSpinnerComponent, "rds-progress-spinner", never, { "value": { "alias": "value"; "required": false; }; "minValue": { "alias": "minValue"; "required": false; }; "maxValue": { "alias": "maxValue"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "size": { "alias": "size"; "required": false; }; "label": { "alias": "label"; "required": false; }; "white": { "alias": "white"; "required": false; }; }, {}, never, never, false, never>;
    static ngAcceptInputType_white: unknown;
}
