import { AfterContentInit, AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { FocusableOption, FocusOrigin } from '@angular/cdk/a11y';
import { Direction } from '@angular/cdk/bidi';
import { NativeElement, RdsSidenavMenuPanel } from '../sidenav.types';
import * as i0 from "@angular/core";
export declare class RdsSidenavMenuTriggerComponent implements AfterContentInit, AfterViewInit, OnDestroy, FocusableOption, NativeElement {
    private readonly sidenavService;
    private readonly destroyRef;
    private readonly overlay;
    private readonly element;
    private readonly viewContainerRef;
    private readonly _dir;
    private readonly focusMonitor;
    readonly menuOpened: EventEmitter<void>;
    readonly menuClosed: EventEmitter<void>;
    role: string;
    _ariaHaspopup: boolean;
    class: string;
    isHovered: boolean;
    _openedBy: Exclude<FocusOrigin, 'program' | null> | 'hover' | undefined;
    private _menu;
    private _portal;
    private _overlayRef;
    private _menuOpen;
    private _closingActionsSubscription;
    private _menuCloseSubscription;
    private readonly scrollStrategy;
    readonly _focused: Subject<RdsSidenavMenuTriggerComponent>;
    readonly isMinimal$: Observable<boolean>;
    readonly nativeElement: HTMLElement;
    private _handleTouchStart;
    get _ariaExpanded(): boolean | null;
    get _ariaControl(): string | undefined | null;
    get menu(): RdsSidenavMenuPanel;
    set menu(menu: RdsSidenavMenuPanel);
    constructor();
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get menuOpen(): boolean;
    get dir(): Direction;
    toggleMenu(): void;
    openMenu(withBackdrop?: boolean): void;
    closeMenu(): void;
    focus(origin?: FocusOrigin | 'hover', options?: FocusOptions): void;
    private _destroyMenu;
    private _initMenu;
    private _setIsMenuOpen;
    private _checkMenu;
    private _createOverlay;
    private _getOverlayConfig;
    private _subscribeToPositions;
    private _setPosition;
    private _menuClosingActions;
    _handleMousedown(event: MouseEvent): void;
    _handleKeydown(event: KeyboardEvent): void;
    _handleClick({ keyCode }: {
        keyCode?: number;
    }): void;
    private hovered;
    private _handleHover;
    private _getPortal;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSidenavMenuTriggerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsSidenavMenuTriggerComponent, "button[rds-sidenav-menu-trigger-for], button[rdsSidenavMenuTriggerFor]", never, { "menu": { "alias": "rdsSidenavMenuTriggerFor"; "required": false; }; }, { "menuOpened": "menuOpened"; "menuClosed": "menuClosed"; }, never, ["rds-icon", "*", "rds-badge"], false, never>;
}
