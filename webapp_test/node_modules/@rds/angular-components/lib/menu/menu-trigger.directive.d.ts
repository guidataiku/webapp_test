import { FocusOrigin } from '@angular/cdk/a11y';
import { Direction } from '@angular/cdk/bidi';
import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { AfterContentInit, EventEmitter, InjectionToken, OnDestroy } from '@angular/core';
import { RdsMenuPanel } from './menu-panel';
import * as i0 from "@angular/core";
export declare const RDS_MENU_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
export declare function RDS_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;
export declare const RDS_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof RDS_MENU_SCROLL_STRATEGY_FACTORY;
};
export declare const MENU_PANEL_TOP_PADDING = 8;
export declare class RdsMenuTriggerDirective implements AfterContentInit, OnDestroy {
    private readonly overlay;
    private readonly element;
    private readonly viewContainerRef;
    private readonly scrollStrategy;
    private readonly parentMenu;
    private readonly menuItemInstance;
    private readonly _dir;
    private readonly focusMonitor;
    rdsMenuTriggerData: any;
    rdsMenuTriggerRestoreFocus: boolean;
    readonly menuOpened: EventEmitter<void>;
    readonly menuClosed: EventEmitter<void>;
    _ariaHaspopup: boolean;
    class: string;
    _openedBy: Exclude<FocusOrigin, 'program' | null> | undefined;
    private _menu;
    private _portal;
    private _overlayRef;
    private _menuOpen;
    private _closingActionsSubscription;
    private _hoverSubscription;
    private _menuCloseSubscription;
    private _parentMenu;
    private _handleTouchStart;
    get _ariaExpanded(): boolean | null;
    get _ariaControl(): string | undefined | null;
    get menu(): RdsMenuPanel;
    set menu(menu: RdsMenuPanel);
    constructor();
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    get menuOpen(): boolean;
    get dir(): Direction;
    triggersSubmenu(): boolean;
    toggleMenu(): void;
    openMenu(): void;
    closeMenu(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    updatePosition(): void;
    private _destroyMenu;
    private _initMenu;
    private _setMenuElevation;
    private _setIsMenuOpen;
    private _checkMenu;
    private _createOverlay;
    private _getOverlayConfig;
    private _subscribeToPositions;
    private _setPosition;
    private _menuClosingActions;
    _handleMousedown(event: MouseEvent): void;
    _handleKeydown(event: KeyboardEvent): void;
    _handleClick(event: MouseEvent): void;
    private _handleHover;
    private _getPortal;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsMenuTriggerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsMenuTriggerDirective, "[rds-menu-trigger-for], [rdsMenuTriggerFor]", ["rdsMenuTrigger"], { "rdsMenuTriggerData": { "alias": "rdsMenuTriggerData"; "required": false; }; "rdsMenuTriggerRestoreFocus": { "alias": "rdsMenuTriggerRestoreFocus"; "required": false; }; "menu": { "alias": "rdsMenuTriggerFor"; "required": false; }; }, { "menuOpened": "menuOpened"; "menuClosed": "menuClosed"; }, never, never, false, never>;
    static ngAcceptInputType_rdsMenuTriggerRestoreFocus: unknown;
}
