import { FocusOrigin } from '@angular/cdk/a11y';
import { Direction } from '@angular/cdk/bidi';
import { AfterContentInit, EventEmitter, InjectionToken, OnDestroy, OnInit, QueryList, TemplateRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { RdsMenuContentDirective } from './menu-content.directive';
import { RdsMenuItemComponent } from './menu-item.component';
import { RdsMenuPanel } from './menu-panel';
import { AnimationEvent } from '@angular/animations';
import { RdsMenuBackdrop, RdsMenuCloseReason, RdsMenuPositionX, RdsMenuPositionY, RdsMenuSize } from './menu.types';
import * as i0 from "@angular/core";
export interface RdsMenuDefaultOptions {
    xPosition: RdsMenuPositionX;
    yPosition: RdsMenuPositionY;
    overlapTrigger: boolean;
    backdrop: RdsMenuBackdrop;
    overlayPanelClass?: string | string[];
}
export declare const RDS_MENU_DEFAULT_OPTIONS: InjectionToken<RdsMenuDefaultOptions>;
export declare function RDS_MENU_DEFAULT_OPTIONS_FACTORY(): RdsMenuDefaultOptions;
export declare class RdsMenuComponent implements AfterContentInit, RdsMenuPanel<RdsMenuItemComponent>, OnInit, OnDestroy {
    private readonly destroyRef;
    private readonly elementRef;
    private readonly ngZone;
    private readonly defaultOptions;
    private _keyManager;
    private _xPosition;
    private _yPosition;
    private _previousElevation;
    private _size;
    protected _elevationPrefix: string;
    protected _baseElevation: number;
    _allItems: QueryList<RdsMenuItemComponent>;
    attrAriaLabel: null;
    attrAriaLabelledBy: null;
    attrAriaDescribedBy: null;
    protected tabIndex: number;
    private _directDescendantItems;
    private _tabSubscription;
    _classList: {
        [key: string]: boolean;
    };
    _panelAnimationState: 'void' | 'enter';
    readonly _animationDone: Subject<AnimationEvent>;
    _isAnimating: boolean;
    parentMenu: RdsMenuPanel | undefined;
    direction: Direction;
    overlayPanelClass: string | string[];
    backdrop: RdsMenuBackdrop;
    ariaLabel: string | null;
    ariaLabelledby: string | null;
    ariaDescribedby: string | null;
    get size(): RdsMenuSize;
    set size(size: RdsMenuSize);
    get xPosition(): RdsMenuPositionX;
    set xPosition(value: RdsMenuPositionX);
    get yPosition(): RdsMenuPositionY;
    set yPosition(value: RdsMenuPositionY);
    templateRef: TemplateRef<any>;
    lazyContent: RdsMenuContentDirective;
    overlapTrigger: boolean;
    /**
     * This method takes classes set on the host rds-menu-component element and applies them on the
     * menu template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing menu from outside the component.
     * @param classes list of class names
     */
    set panelClass(classes: string);
    private _previousPanelClass;
    readonly closed: EventEmitter<RdsMenuCloseReason>;
    readonly panelId: string;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    _hovered(): Observable<RdsMenuItemComponent>;
    _handleKeydown(event: KeyboardEvent): void;
    focus(): void;
    focusFirstItem(origin?: FocusOrigin): void;
    private _focusFirstItem;
    resetActiveItem(): void;
    setElevation(depth: number): void;
    setPositionClasses(posX?: RdsMenuPositionX, posY?: RdsMenuPositionY): void;
    _startAnimation(): void;
    _resetAnimation(): void;
    _onAnimationDone(event: AnimationEvent): void;
    _onAnimationStart(event: AnimationEvent): void;
    private _updateDirectDescendants;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsMenuComponent, "rds-menu", ["rdsMenu"], { "backdrop": { "alias": "backdrop"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "size": { "alias": "size"; "required": false; }; "xPosition": { "alias": "xPosition"; "required": false; }; "yPosition": { "alias": "yPosition"; "required": false; }; "overlapTrigger": { "alias": "overlapTrigger"; "required": false; }; "panelClass": { "alias": "class"; "required": false; }; }, { "closed": "closed"; }, ["lazyContent", "_allItems"], ["*"], false, never>;
    static ngAcceptInputType_overlapTrigger: unknown;
}
