import { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { ContentObserver } from '@angular/cdk/observers';
import { AfterViewInit, ChangeDetectorRef, DestroyRef, ElementRef, OnDestroy } from '@angular/core';
import { RouterLink } from '@angular/router';
import * as i0 from "@angular/core";
export type RdsLinkType = 'primary' | 'secondary';
export type RdsLinkSize = 's' | 'm' | 'l';
export declare class RdsLinkComponent implements FocusableOption, AfterViewInit, OnDestroy {
    protected readonly destroyRef: DestroyRef;
    protected readonly cdr: ChangeDetectorRef;
    protected readonly elementRef: ElementRef<any>;
    protected readonly focusMonitor: FocusMonitor;
    protected readonly contentObserver: ContentObserver;
    protected readonly routerLink: RouterLink | null;
    get hostClasses(): string[];
    get hasFirstIcon(): boolean;
    get hasLastIcon(): boolean;
    set standalone(isStandalone: BooleanInput);
    get standalone(): boolean;
    protected _standalone: boolean;
    active: boolean;
    get attrDisabled(): boolean | null;
    disabled: boolean;
    set tabIndex(value: NumberInput);
    get tabIndex(): number;
    private _tabIndex;
    type: RdsLinkType;
    size: RdsLinkSize;
    constructor();
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    private _preventDisabledLinkClick;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsLinkComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsLinkComponent, "a[rds-link], a[rdsLink], button[rds-link], button[rdsLink]", never, { "standalone": { "alias": "standalone"; "required": false; }; "active": { "alias": "active"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "type": { "alias": "type"; "required": false; }; "size": { "alias": "size"; "required": false; }; }, {}, never, ["*"], true, never>;
    static ngAcceptInputType_active: unknown;
    static ngAcceptInputType_disabled: unknown;
}
