import { AnimationEvent } from '@angular/animations';
import { FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { RdsDrawerActionsDirective } from './drawer-actions.directive';
import { AutoFocusTarget, RdsDrawerMode, RdsDrawerPosition, RdsDrawerSize } from './drawer-types';
import * as i0 from "@angular/core";
export declare class RdsDrawerComponent implements AfterViewInit, AfterContentInit, OnDestroy {
    private readonly destroyRef;
    private readonly elementRef;
    private readonly cdr;
    private readonly contentObserver;
    private readonly ngZone;
    private readonly focusTrapFactory;
    private readonly focusMonitor;
    private readonly document;
    private readonly interactivityChecker;
    private readonly platformId;
    readonly _modeChanged: Subject<void>;
    readonly _animationStarted: Subject<AnimationEvent>;
    readonly _animationEnd: Subject<AnimationEvent>;
    _animationState: 'open-instant' | 'open' | 'void';
    _animating: 'expanding' | 'collapsing' | null;
    private readonly _isOpened$;
    private _focusTrap;
    private _elementFocusedBeforeDrawerWasOpened;
    size: RdsDrawerSize;
    closeBtnAriaLabel: string;
    get mode(): RdsDrawerMode;
    set mode(value: RdsDrawerMode);
    private _mode;
    get position(): RdsDrawerPosition;
    set position(value: RdsDrawerPosition);
    private _position;
    closable: boolean;
    set expanded(value: BooleanInput);
    get expanded(): boolean;
    private _openedVia;
    disableClose: boolean;
    set autoFocus(value: AutoFocusTarget | string | BooleanInput);
    get autoFocus(): AutoFocusTarget | string | boolean;
    private _autoFocus;
    readonly closeDrawer: EventEmitter<void>;
    readonly openDrawer: EventEmitter<void>;
    readonly positionChanged: EventEmitter<RdsDrawerPosition>;
    actions: RdsDrawerActionsDirective;
    body: ElementRef;
    get class(): string[];
    tabIndex: number;
    get transform(): string;
    get isOpened(): boolean;
    get isOpened$(): Observable<boolean>;
    scrollable: boolean;
    constructor();
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    transformStart(event: AnimationEvent): void;
    transformEnd(event: AnimationEvent): void;
    toggle(expanded?: boolean, openedVia?: FocusOrigin): void;
    open(): void;
    close(): void;
    private forceFocus;
    private focusByCssSelector;
    private takeFocus;
    private restoreFocus;
    private isFocusWithinDrawer;
    private updateFocusTrapState;
    private isScrollable;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDrawerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsDrawerComponent, "rds-drawer", never, { "size": { "alias": "size"; "required": false; }; "closeBtnAriaLabel": { "alias": "closeBtnAriaLabel"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "position": { "alias": "position"; "required": false; }; "closable": { "alias": "closable"; "required": false; }; "expanded": { "alias": "expanded"; "required": false; }; "disableClose": { "alias": "disableClose"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; }, { "closeDrawer": "closeDrawer"; "openDrawer": "openDrawer"; "positionChanged": "positionChanged"; }, ["actions"], ["rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]", "*", "rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]"], true, never>;
    static ngAcceptInputType_closable: unknown;
    static ngAcceptInputType_disableClose: unknown;
}
