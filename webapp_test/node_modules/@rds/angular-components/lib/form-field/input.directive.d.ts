import { DoCheck, OnChanges, OnDestroy } from '@angular/core';
import { BooleanInput } from '@angular/cdk/coercion';
import { RdsAbstractFormFieldControl } from './abstract-form-field-control';
import { RdsControlType } from './control.type';
import * as i0 from "@angular/core";
export declare class RdsInputDirective extends RdsAbstractFormFieldControl<string> implements OnChanges, OnDestroy, DoCheck {
    private readonly elementRef;
    private readonly inputValueAccessor;
    prefixed: boolean;
    suffixed: boolean;
    protected _uid: string;
    private _inputValueAccessor;
    private _previousNativeValue;
    private _type;
    private _placeholder;
    private _readonly;
    private _ariaDescribedby;
    private _neverEmptyInputTypes;
    readonly _isTextarea: boolean;
    readonly hostClass = "rds-form-field__control";
    readonly hostAutocomplete = "off";
    get hostAriaDescribedBy(): string;
    set hostAriaDescribedBy(newValue: string);
    get errorState(): boolean;
    get hostClassSuffixed(): boolean;
    get hostClassPrefixed(): boolean;
    get id(): string;
    set id(value: string);
    protected _id: string;
    get attrDisabled(): boolean | null;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    get attrRequired(): boolean | null;
    get required(): boolean;
    set required(value: BooleanInput);
    get readonly(): boolean | null;
    set readonly(value: BooleanInput);
    get type(): string;
    set type(newValue: string);
    get placeholder(): string;
    set placeholder(value: string);
    get value(): string;
    set value(newValue: string);
    get empty(): boolean;
    get shouldLabelFloat(): boolean;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    focusChanged(isFocused: boolean): void;
    onInput(): void;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(): void;
    get controlType(): RdsControlType;
    getMaxlengthAttr(): number;
    private dirtyCheckNativeValue;
    private dirtyDisabledValue;
    private validateType;
    private isNeverEmpty;
    private isNativelyBadInput;
    private focus;
    private showHidePlaceholder;
    private getContentInfixParentElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsInputDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsInputDirective, " input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]", never, { "id": { "alias": "id"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "type": { "alias": "type"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, {}, never, never, false, never>;
}
