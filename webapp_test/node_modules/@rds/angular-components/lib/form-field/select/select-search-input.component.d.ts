import { FocusOptions, FocusOrigin } from '@angular/cdk/a11y';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Renderer2 } from '@angular/core';
import { FormControl } from '@angular/forms';
import { RdsInputDirective } from '../input.directive';
import * as i0 from "@angular/core";
export type RdsSelectSearchSize = 's' | 'm' | 'l';
export declare class RdsSelectSearchInputComponent implements AfterViewInit {
    protected readonly renderer: Renderer2;
    protected readonly cdr: ChangeDetectorRef;
    private readonly elementRef;
    private readonly destroyRef;
    control: FormControl<string | null>;
    size: RdsSelectSearchSize;
    id: string;
    searchInput: RdsInputDirective;
    search: ElementRef;
    protected get cssClasses(): string[];
    placeholder: string;
    changed: EventEmitter<string>;
    handleClick(): void;
    stopPropagation($event: KeyboardEvent): void;
    rect(): DOMRect;
    isVisible(): boolean;
    ngAfterViewInit(): void;
    reset(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    isDirtyValue(): boolean;
    resetInput(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSelectSearchInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsSelectSearchInputComponent, "rds-select-search-input", never, { "size": { "alias": "size"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; }, { "changed": "changed"; }, never, never, false, never>;
}
