import { AfterContentInit, AfterViewInit, DoCheck, OnChanges, OnDestroy, OnInit, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { RdsFormFieldSize } from '../form-field.component';
import { RdsAbstractSelectComponent } from './abstract-select.component';
import { RdsMultiSelectOptionComponent } from './multi-select-option.component';
import { RdsSelectAllOptionComponent } from './select-all-option.component';
import { BooleanInput } from '@angular/cdk/coercion';
import { RdsChipComponent } from '../../chips';
import { RdsControlType } from '../control.type';
import * as i0 from "@angular/core";
export declare class RdsMultiSelectComponent<T> extends RdsAbstractSelectComponent<T, RdsMultiSelectOptionComponent<T>, T[], RdsMultiSelectOptionComponent<T>[]> implements AfterContentInit, AfterViewInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor {
    private readonly dir;
    protected readonly _name = "rds-multi-select";
    private allOptionsSelected;
    private _withChips;
    get selected(): RdsMultiSelectOptionComponent<T>[];
    get triggerValues(): string[];
    get controlType(): RdsControlType;
    set withChips(value: BooleanInput);
    get withChips(): boolean;
    selectAllElements: QueryList<RdsSelectAllOptionComponent<T>>;
    chips: QueryList<RdsChipComponent<T>>;
    protected focusedChip: RdsChipComponent<T> | null;
    private keyManagerChips;
    private readonly chipActions;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    close(): void;
    toggleAllOptions(selectAll?: boolean): void;
    selectAllOptions(): void;
    deselectAllOptions(): void;
    protected clearSelectedOptions(event: Event): void;
    protected handleClosedKeydown(event: KeyboardEvent): void;
    protected handleOpenKeydown(event: KeyboardEvent): void;
    protected setSelectionByValue(value: T[]): void;
    protected resetOptions(): void;
    protected onSelect(option: RdsMultiSelectOptionComponent<T>): void;
    private sortValues;
    protected getValueToEmit(): T[];
    private setUpFocusManagement;
    private refreshSelectAllCheck;
    private calculateAllOptionsSelected;
    protected _setSize(size: RdsFormFieldSize): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsMultiSelectComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsMultiSelectComponent<any>, "rds-multi-select", never, { "withChips": { "alias": "withChips"; "required": false; }; }, {}, ["selectAllElements"], ["rds-select-search-input", "rds-select-all-option", "rds-multi-select-option"], false, never>;
}
