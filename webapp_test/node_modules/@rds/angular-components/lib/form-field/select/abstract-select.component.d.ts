import { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { SelectionModel } from '@angular/cdk/collections';
import { CdkConnectedOverlay, CdkOverlayOrigin, ConnectedPosition, ScrollStrategy, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { AfterContentInit, ChangeDetectorRef, DestroyRef, DoCheck, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, QueryList, Renderer2, SimpleChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { noop, Observable, Subject } from 'rxjs';
import { RdsAbstractFormFieldControl } from '../abstract-form-field-control';
import { RdsControlType } from '../control.type';
import { RdsFormFieldComponent, RdsFormFieldSize } from '../form-field.component';
import { RdsAbstractSelectOptionSelectionChangedEvent } from './select-option-selection-changed.event';
import { RdsSelectSearchInputComponent } from './select-search-input.component';
import { RdsAbstractSelectFilterByFunc, RdsSelectCompareWithFn, RdsSelectOption } from './select-types';
import * as i0 from "@angular/core";
export declare abstract class RdsAbstractSelectComponent<T, O extends RdsSelectOption<T>, ArrayOfFlatType extends T | T[], SelectedType = O | O[]> extends RdsAbstractFormFieldControl<ArrayOfFlatType> implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor {
    protected readonly destroyRef: DestroyRef;
    protected readonly viewportRuler: ViewportRuler;
    protected readonly cdr: ChangeDetectorRef;
    protected readonly ngZone: NgZone;
    protected readonly scrollStrategyOptions: ScrollStrategyOptions;
    protected readonly elementRef: ElementRef<any>;
    protected readonly liveAnnouncer: LiveAnnouncer;
    protected readonly renderer: Renderer2;
    protected readonly formField: RdsFormFieldComponent<T>;
    protected _name: string;
    private readonly _uid;
    protected readonly selectAllDestroy$: Subject<void>;
    protected readonly destroyKeyManager$: Subject<void>;
    private readonly minPanelWidth;
    private _filterValue;
    protected _panelOpen: boolean;
    /** The scroll position of the overlay panel, calculated to center the selected option. */
    private _scrollTop;
    private _ariaLabel;
    private _ariaDescribedby;
    protected optionIds: string;
    private _hideValue;
    private _placeholder;
    protected selectionModel: SelectionModel<O>;
    protected keyManager: ActiveDescendantKeyManager<O>;
    readonly scrollStrategy: ScrollStrategy;
    readonly positions: ConnectedPosition[];
    readonly optionSelectionChanges: Observable<RdsAbstractSelectOptionSelectionChangedEvent<T, O>>;
    _id: string;
    minWidth: number;
    triggerClientRect: ClientRect;
    transformOrigin: string;
    panelDoneAnimatingStream: Subject<string>;
    hostRole: string;
    hostClass: string;
    get hostAriaDescribedBy(): string | null;
    get hostTabindex(): string;
    get hostAriaOwns(): string | null;
    get hostActivedescendant(): string | null;
    get hostAriaLabelledBy(): string | null;
    get attrDisabled(): boolean | null;
    get attrRequired(): boolean | null;
    set required(value: BooleanInput);
    get required(): boolean;
    get errorState(): boolean;
    get hostAriaLabel(): string | null;
    set hostAriaLabel(newValue: string | null);
    get id(): string;
    set id(value: string);
    ariaLabelledby: string;
    sortComparator: (a: O, b: O, options: O[]) => number;
    compareWith: RdsSelectCompareWithFn<T>;
    set disabled(newValue: BooleanInput);
    get disabled(): boolean;
    set hideValue(value: BooleanInput);
    get hideValue(): boolean;
    get placeholder(): string;
    set placeholder(value: string);
    get value(): ArrayOfFlatType;
    set value(newValue: ArrayOfFlatType);
    readonly valueChange: EventEmitter<ArrayOfFlatType>;
    readonly openChange: EventEmitter<boolean>;
    trigger: ElementRef<HTMLDivElement>;
    origin: CdkOverlayOrigin;
    panel: ElementRef;
    overlayDir: CdkConnectedOverlay;
    options: QueryList<O>;
    focusableOptions: QueryList<O>;
    selectSearch: RdsSelectSearchInputComponent;
    onChange: (value: ArrayOfFlatType) => void;
    onTouched: typeof noop;
    private _filterBy;
    get filterBy(): RdsAbstractSelectFilterByFunc<T, O>;
    set filterBy(fn: RdsAbstractSelectFilterByFunc<T, O>);
    handleKeydown(event: KeyboardEvent): void;
    onFocus(): void;
    onBlur(): void;
    get focused(): boolean;
    setDescribedByIds(ids: string[]): void;
    onContainerClick(): void;
    get shouldLabelFloat(): boolean;
    get empty(): boolean;
    get controlType(): RdsControlType;
    get panelOpen(): boolean;
    abstract get selected(): SelectedType;
    abstract get triggerValues(): string[];
    constructor();
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private dirtyDisabledValue;
    protected removeValue(index: number): void;
    toggle(): void;
    resetFilterValue(): void;
    open(): void;
    close(): void;
    writeValue(value: ArrayOfFlatType): void;
    registerOnChange(fn: (value: ArrayOfFlatType) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    focus(options?: FocusOptions): void;
    onAttached(): void;
    refreshOptionsVisibility(): void;
    shouldShowPlaceholder(): boolean;
    shouldShowValue(): boolean;
    private hasPlaceholderValue;
    private _defaultFilterBy;
    protected abstract handleClosedKeydown(event: KeyboardEvent): void;
    protected abstract handleOpenKeydown(event: KeyboardEvent): void;
    private initializeSelection;
    protected abstract setSelectionByValue(value: ArrayOfFlatType): void;
    protected selectValue(value: T): O | undefined;
    protected initKeyManager(): void;
    protected resetOptions(): void;
    protected onSelect(option: O): void;
    protected abstract getValueToEmit(): ArrayOfFlatType;
    protected propagateChanges(): void;
    private scrollActiveOptionIntoView;
    protected _setSize(size: RdsFormFieldSize): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsAbstractSelectComponent<any, any, any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsAbstractSelectComponent<any, any, any, any>, never, never, { "required": { "alias": "required"; "required": false; }; "hostAriaLabel": { "alias": "aria-label"; "required": false; }; "id": { "alias": "id"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "sortComparator": { "alias": "sortComparator"; "required": false; }; "compareWith": { "alias": "compareWith"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "hideValue": { "alias": "hideValue"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "value": { "alias": "value"; "required": false; }; "filterBy": { "alias": "filterBy"; "required": false; }; }, { "valueChange": "valueChange"; "openChange": "openChange"; }, ["selectSearch", "options", "focusableOptions"], never, false, never>;
}
