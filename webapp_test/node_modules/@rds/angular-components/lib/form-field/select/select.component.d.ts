import { AfterContentInit, DoCheck, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { RdsAbstractSelectComponent } from './abstract-select.component';
import { RdsSingleSelectOptionComponent } from './single-select-option.component';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class RdsSelectComponent<T> extends RdsAbstractSelectComponent<T, RdsSingleSelectOptionComponent<T>, T, RdsSingleSelectOptionComponent<T>> implements AfterContentInit, OnChanges, OnDestroy, OnInit, DoCheck, ControlValueAccessor {
    protected readonly _name = "rds-select";
    set multiple(_multiple: BooleanInput);
    get selected(): RdsSingleSelectOptionComponent<T>;
    get triggerValues(): string[];
    ngOnInit(): void;
    protected handleClosedKeydown(event: KeyboardEvent): void;
    protected handleOpenKeydown(event: KeyboardEvent): void;
    protected setSelectionByValue(value: T): void;
    protected initKeyManager(): void;
    protected resetOptions(): void;
    protected onSelect(option: RdsSingleSelectOptionComponent<T>, isUserInput?: boolean): void;
    protected getValueToEmit(): T;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSelectComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsSelectComponent<any>, "rds-select", never, { "multiple": { "alias": "multiple"; "required": false; }; }, {}, never, ["rds-select-search-input", "rds-select-option"], false, never>;
}
