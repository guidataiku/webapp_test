import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, DoCheck, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { RdsAbstractFormFieldControl } from '../abstract-form-field-control';
import { RdsChipGridComponent } from '../chip-grid/chip-grid.component';
import { RdsChipInputDirective } from '../chip-input';
import { noop } from 'rxjs';
import * as i0 from "@angular/core";
export declare class RdsInputWithChipsComponent<T> extends RdsAbstractFormFieldControl<T[]> implements ControlValueAccessor, AfterContentInit, DoCheck, OnDestroy {
    private readonly destroyRef;
    private _placeholder;
    readonly controlType = "chip-grid";
    get shouldLabelFloat(): boolean;
    errorState: boolean;
    get ariaDisabled(): string;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    set placeholder(value: string);
    get placeholder(): string;
    chipGrid: RdsChipGridComponent<T>;
    input: RdsChipInputDirective<T>;
    _onTouched: typeof noop;
    _onChange: (value: T[]) => void;
    constructor();
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    ngOnDestroy(): void;
    writeValue(value: T[]): void;
    registerOnChange(fn: (value: T[]) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    get empty(): boolean;
    get focused(): boolean;
    onContainerClick(event: MouseEvent): void;
    setDescribedByIds(ids: string[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsInputWithChipsComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsInputWithChipsComponent<any>, "rds-input-with-chips", never, { "disabled": { "alias": "disabled"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; }, {}, ["chipGrid", "input"], ["*"], false, never>;
}
