import { AnimationTriggerMetadata } from '@angular/animations';
import { NumberInput } from '@angular/cdk/coercion';
import { AfterContentChecked, AfterContentInit, AfterViewInit, ElementRef, InjectionToken, OnChanges, QueryList, SimpleChanges } from '@angular/core';
import { RdsAbstractFormFieldControl } from './abstract-form-field-control';
import { RdsErrorDirective } from './error.directive';
import { RdsHintDirective } from './hint.directive';
import { RdsLabelDirective } from './label.directive';
import { RdsPrefixDirective } from './prefix.directive';
import { RdsSuffixDirective } from './suffix.directive';
import * as i0 from "@angular/core";
export type RdsFormFieldSize = 's' | 'm' | 'l';
export declare const rdsFormFieldAnimations: {
    readonly transitionMessages: AnimationTriggerMetadata;
};
export declare const RDS_FORM_FIELD: InjectionToken<RdsFormFieldComponent<unknown>>;
export type RdsFormFieldLabelPosition = 'floating' | 'side-left' | 'side-right' | 'top' | 'none';
export declare class RdsFormFieldComponent<T> implements AfterContentInit, AfterContentChecked, AfterViewInit, OnChanges {
    private readonly destroyRef;
    private readonly elementRef;
    private readonly cdr;
    private readonly renderer;
    subscriptAnimationState: '' | 'enter';
    labelId: string;
    mouseover: boolean;
    abstractControl: RdsAbstractFormFieldControl<T>;
    get control(): RdsAbstractFormFieldControl<T>;
    get numberOfCharacters(): number;
    inputErrors: QueryList<RdsErrorDirective>;
    inputHints: QueryList<RdsHintDirective>;
    inputSuffixes: QueryList<RdsSuffixDirective>;
    inputPrefixes: QueryList<RdsPrefixDirective>;
    label: RdsLabelDirective;
    inputEl: ElementRef<HTMLInputElement>;
    selectEl: ElementRef<HTMLElement>;
    private trigger;
    private suffix;
    private origin;
    get class(): string[];
    hideRequiredMarker: boolean;
    hideTextareaCharacterCounter: boolean;
    _labelPosition: RdsFormFieldLabelPosition;
    get labelPosition(): RdsFormFieldLabelPosition;
    set labelPosition(labelPosition: RdsFormFieldLabelPosition);
    _size: RdsFormFieldSize;
    get size(): RdsFormFieldSize;
    set size(size: RdsFormFieldSize);
    private _labelWidth;
    set labelWidth(value: NumberInput);
    get labelWidth(): number;
    get formFieldType(): string;
    protected maxCharacters: number | null;
    private _isPrevSelect;
    private _isPrevButton;
    private _isPrevFocused;
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private checkFormFieldStatus;
    getConnectedOverlayOrigin(): ElementRef;
    get isErrorMessageVisible(): boolean;
    private buildDescribedByIds;
    private validateControlExistence;
    private checkControlMaxCharacters;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsFormFieldComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsFormFieldComponent<any>, "rds-form-field", never, { "hideRequiredMarker": { "alias": "hideRequiredMarker"; "required": false; }; "hideTextareaCharacterCounter": { "alias": "hideTextareaCharacterCounter"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "size": { "alias": "size"; "required": false; }; "labelWidth": { "alias": "labelWidth"; "required": false; }; }, {}, ["abstractControl", "label", "inputEl", "selectEl", "inputErrors", "inputHints", "inputSuffixes", "inputPrefixes"], ["[rds-control-prefix], rds-control-prefix-separator", "*", "[rds-control-suffix], rds-control-suffix-separator", "rds-control-error", "rds-control-hint", "rds-control-label", "rds-icon[rds-label-icon], rds-icon[rdsLabelIcon]"], false, never>;
    static ngAcceptInputType_hideRequiredMarker: unknown;
    static ngAcceptInputType_hideTextareaCharacterCounter: unknown;
}
