import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { RdsChipComponent, RdsChipEditedEvent } from '../../chips';
import { RdsChipEditInputDirective } from '../../chips/chip-edit-input';
import * as i0 from "@angular/core";
export declare class RdsInputChipComponent<T> extends RdsChipComponent<T> implements OnInit, OnDestroy {
    private readonly document;
    /**
     * The editing action has to be triggered in a timeout. While we're waiting on it, a blur
     * event might occur which will interrupt the editing. This flag is used to avoid interruptions
     * while the editing action is being initialized.
     */
    private editStartPending;
    editReady: boolean;
    isEditing: boolean;
    editable: boolean;
    ariaDescription: string | null;
    readonly edited: EventEmitter<RdsChipEditedEvent<T>>;
    editInput: RdsChipEditInputDirective;
    role: string;
    ngOnInit(): void;
    get classes(): Record<string, boolean>;
    handleFocus(): void;
    handleDoubleclick(): void;
    handleKeydown(event: KeyboardEvent): void;
    private startEditing;
    private onEditFinish;
    private getEditInput;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsInputChipComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsInputChipComponent<any>, "rds-input-chip", never, { "editable": { "alias": "editable"; "required": false; }; "ariaDescription": { "alias": "ariaDescription"; "required": false; }; }, { "edited": "edited"; }, never, ["rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]", "img[rdsChipAvatar], img[rds-chip-avatar]", "*"], false, never>;
    static ngAcceptInputType_editable: unknown;
}
