import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, EventEmitter, OnChanges, OnDestroy } from '@angular/core';
import { RdsChipInputEvent } from '../form-field';
import { RdsChipGridComponent } from './chip-grid/chip-grid.component';
import * as i0 from "@angular/core";
export declare class RdsChipInputDirective<T> implements AfterContentInit, OnChanges, OnDestroy {
    private readonly inputElement;
    private readonly formField;
    private readonly ngControl;
    private focusLastChipOnBackspace;
    private _disabled;
    private _chipGrid?;
    focused: boolean;
    hidePlaceholder: boolean;
    required: boolean;
    get classes(): Record<string, boolean>;
    get ariaRequired(): boolean | null;
    get ariaInvalid(): boolean | null;
    set chipGrid(value: RdsChipGridComponent<T>);
    addOnBlur: boolean;
    separatorKeys: readonly string[];
    placeholder: string;
    id: string;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    readonly chipEnd: EventEmitter<RdsChipInputEvent<T>>;
    get empty(): boolean;
    constructor();
    ngOnChanges(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private onKeydown;
    onKeyup(event: KeyboardEvent): void;
    onBlur(): void;
    onFocus(): void;
    onInput(): void;
    emitChipEnd(event?: KeyboardEvent): void;
    focus(): void;
    clear(): void;
    setDescribedByIds(ids: string[]): void;
    private isSeparatorKey;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsChipInputDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsChipInputDirective<any>, "input[rdsChipInput], input[rds-chip-input]", ["rdsChipInput"], { "required": { "alias": "required"; "required": false; }; "chipGrid": { "alias": "rdsChipInputChipGrid"; "required": false; }; "addOnBlur": { "alias": "rdsChipInputAddOnBlur"; "required": false; }; "separatorKeys": { "alias": "rdsChipInputSeparatorKeys"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "id": { "alias": "id"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "chipEnd": "rdsChipInputTokenEnd"; }, never, never, false, never>;
    static ngAcceptInputType_required: unknown;
    static ngAcceptInputType_addOnBlur: unknown;
    static ngAcceptInputType_separatorKeys: any;
}
