import { BooleanInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { noop, Observable } from 'rxjs';
import { RdsInputChipComponent } from '../input-chip/input-chip.component';
import { RdsChipSetComponent } from '../../chips/chip-set';
import { RdsChipInputDirective } from '../chip-input';
import { RdsChipEditedEvent } from '../../chips/chip.types';
import * as i0 from "@angular/core";
export declare class RdsChipGridChange<T> {
    readonly source: RdsChipGridComponent<T>;
    readonly value: T[];
    constructor(source: RdsChipGridComponent<T>, value: T[]);
}
export declare class RdsChipGridComponent<T> extends RdsChipSetComponent<T> implements AfterContentInit, AfterViewInit, OnDestroy {
    private readonly cdr;
    private _ariaDescribedbyIds;
    private _placeholder;
    private chipInput;
    protected _value: T[];
    _defaultRole: string;
    readonly stateChanges: EventEmitter<void>;
    get id(): string;
    get empty(): boolean;
    get focused(): boolean;
    get chipEditChanges(): Observable<RdsChipEditedEvent<T>>;
    get classes(): Record<string, boolean>;
    errorState: boolean;
    get dynamicTabIndex(): number;
    get ariaDisabled(): string;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    set placeholder(value: string);
    get placeholder(): string;
    set value(value: T[]);
    get value(): T[];
    readonly gridChange: EventEmitter<RdsChipGridChange<T>>;
    readonly valueChange: EventEmitter<T[]>;
    chips: QueryList<RdsInputChipComponent<T>>;
    _onTouched: typeof noop;
    _onChange: (value: T[]) => void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    focus(): void;
    blur(): void;
    handleKeydown(event: KeyboardEvent): void;
    registerInput(inputElement: RdsChipInputDirective<T>): void;
    onContainerClick(event: MouseEvent): void;
    setDescribedByIds(ids: string[]): void;
    setDisabledState(isDisabled: boolean): void;
    focusLastChip(): void;
    protected allowFocusEscape(): void;
    private propagateChanges;
    private markAsTouched;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsChipGridComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsChipGridComponent<any>, "rds-chip-grid", never, { "disabled": { "alias": "disabled"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "gridChange": "gridChange"; "valueChange": "valueChange"; }, ["chips"], ["*"], false, never>;
}
