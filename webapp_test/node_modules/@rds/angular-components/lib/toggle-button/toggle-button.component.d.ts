import { AfterViewInit, EventEmitter, OnDestroy } from '@angular/core';
import { RdsToggleChangedEvent } from './model/toggle-changed-event';
import { FocusableOption, FocusOrigin } from '@angular/cdk/a11y';
import * as i0 from "@angular/core";
export declare class RdsToggleButtonComponent<T> implements AfterViewInit, OnDestroy, FocusableOption {
    private readonly cdr;
    private readonly elementRef;
    private readonly focusMonitor;
    private _showSeparator;
    tabindex: number;
    readonly hostTabindex = -1;
    ariaLabel: string;
    ariaLabelledby: string;
    value: T;
    get showSeparator(): boolean;
    set showSeparator(value: boolean);
    checked: boolean;
    disabled: boolean;
    readonly changed: EventEmitter<RdsToggleChangedEvent<T>>;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    onButtonClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsToggleButtonComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsToggleButtonComponent<any>, "rds-toggle-button", never, { "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "value": { "alias": "value"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "changed": "changed"; }, never, ["*"], false, never>;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_disabled: unknown;
}
