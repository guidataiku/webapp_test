import { AfterContentInit, EventEmitter, OnChanges, OnDestroy, QueryList, SimpleChanges } from '@angular/core';
import { RdsToggleButtonComponent } from './toggle-button.component';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export type RdsToggleType = 'basic' | 'outlined';
export declare class RdsToggleDirective<T> implements OnChanges, AfterContentInit, OnDestroy {
    private readonly destroyRef;
    private readonly errorHandler;
    private readonly _changedDestroy$;
    private selected;
    private rawValue;
    type: RdsToggleType;
    hostRole: string;
    get hostClass(): string[];
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _disabled;
    value: T;
    valueChange: EventEmitter<T>;
    buttonToggles: QueryList<RdsToggleButtonComponent<T>>;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private handleToggleButtonChange;
    private refreshSeparators;
    private refreshChangeListener;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsToggleDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsToggleDirective<any>, "rds-toggle", never, { "type": { "alias": "type"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "valueChange": "valueChange"; }, ["buttonToggles"], never, false, never>;
}
