import { AnimationEvent } from '@angular/animations';
import { CdkStepper } from '@angular/cdk/stepper';
import { AfterContentInit, AfterViewInit, EventEmitter, QueryList } from '@angular/core';
import { RdsStepHeaderComponent } from './step-header.component';
import { RdsStepComponent } from './step.component';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export declare class RdsStepperComponent extends CdkStepper implements AfterContentInit, AfterViewInit {
    private readonly cdr;
    private readonly viewportRuler;
    get class(): string[];
    readonly hostRole = "tablist";
    /** The list of step headers of the steps in the stepper. */
    _stepHeader: QueryList<RdsStepHeaderComponent>;
    /** Full list of steps inside the stepper, including inside nested steppers. */
    _steps: QueryList<RdsStepComponent>;
    sideBySide: boolean;
    /** Event emitted when the current step is done transitioning in. */
    readonly animationDone: EventEmitter<void>;
    readonly steps: QueryList<RdsStepComponent>;
    /** Stream of animation `done` events when the body expands/collapses. */
    readonly _animationDone: Subject<AnimationEvent>;
    _horizontalLineStyle: Partial<CSSStyleDeclaration>;
    constructor();
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    private calculateHorizontalLineStyle;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsStepperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsStepperComponent, "rds-stepper, [rdsStepper], [rds-stepper]", ["rdsStepper"], { "sideBySide": { "alias": "sideBySide"; "required": false; }; }, { "animationDone": "animationDone"; }, ["_steps"], never, false, never>;
    static ngAcceptInputType_sideBySide: unknown;
}
