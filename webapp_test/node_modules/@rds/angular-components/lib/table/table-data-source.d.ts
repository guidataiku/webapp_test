import { DataSource } from '@angular/cdk/table';
import { BehaviorSubject, Observable, Subject, Subscription } from 'rxjs';
import { RdsSortDirective, Sort } from './sort.directive';
import { PageEvent, RdsPaginatorComponent } from '../paginator';
interface Paginator {
    page: Subject<PageEvent>;
    pageIndex: number;
    initialized: Observable<void>;
    pageSize: number;
    length: number;
}
export declare abstract class _RdsTableDataSource<T, P extends Paginator> extends DataSource<T> {
    protected readonly _data: BehaviorSubject<T[]>;
    protected readonly _renderData: BehaviorSubject<T[]>;
    protected readonly _internalPageChanges: Subject<void>;
    protected _isInitialized: boolean;
    _renderChangesSubscription: Subscription | null;
    get data(): T[];
    set data(data: T[]);
    get sort(): RdsSortDirective | null;
    set sort(sort: RdsSortDirective | null);
    protected _sort: RdsSortDirective | null;
    get paginator(): P | null;
    set paginator(paginator: P | null);
    protected _paginator: P | null;
    sortingDataAccessor: (data: T, sortHeaderId: string) => string | number;
    sortData: (data: T[], sort: RdsSortDirective) => T[];
    constructor(initialData?: T[]);
    connect(): Observable<T[]>;
    disconnect(): void;
    init(): this;
    protected abstract _updateChangeSubscription(): void;
    protected createSortObservable(): Observable<Sort | void>;
    protected createPageObservable(): Observable<PageEvent | void>;
    protected _orderData(data: T[]): T[];
    protected _pageData(data: T[]): T[];
    protected _updatePaginator(filteredDataLength: number): void;
}
export declare class RdsTableDataSource<T> extends _RdsTableDataSource<T, RdsPaginatorComponent> {
    protected readonly _filter: BehaviorSubject<string>;
    protected _filteredData: T[];
    get filteredData(): T[];
    private set filteredData(value);
    set data(data: T[]);
    get data(): T[];
    get filter(): string;
    set filter(filter: string);
    protected _filterData(data: T[], skipPaginatorUpdate?: boolean): T[];
    filterPredicate: (data: T, filter: string) => boolean;
    protected _updateChangeSubscription(): void;
}
export interface RdsAsyncDataSourceEvent {
    sort: Sort | void | null;
    page: PageEvent | void | null;
}
export interface RdsAsyncDataSourceResponse<T, E = unknown> {
    offset: number;
    length: number;
    data: T[];
    error?: E;
}
export declare class RdsTableAsyncDataSource<T> extends _RdsTableDataSource<T, RdsPaginatorComponent> {
    protected readonly _loadingData$: BehaviorSubject<boolean>;
    protected readonly _error$: BehaviorSubject<unknown>;
    protected readonly _externalTrigger$: BehaviorSubject<void>;
    get isLoading(): boolean;
    get isError(): boolean;
    private readonly _fetchData;
    constructor(fetchData: (event: RdsAsyncDataSourceEvent) => Observable<RdsAsyncDataSourceResponse<T>>);
    disconnect(): void;
    fetchData(): void;
    getLoadingData(): Observable<boolean>;
    getError(): Observable<unknown | null>;
    protected _updateChangeSubscription(): void;
}
export {};
