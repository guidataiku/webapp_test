import { Observable, Subject } from 'rxjs';
export type AllSelectedType = 'none' | 'partial' | 'all';
export declare class AsyncSelectionModel<T> {
    protected _multiple: boolean;
    protected _emitChanges: boolean;
    protected _length: number;
    protected _isAllSelected: boolean;
    protected _removedToEmit: T[];
    protected _addedToEmit: T[];
    protected _selected: T[];
    protected _deselected: T[];
    protected readonly _changed: Subject<AsyncSelectionChange<T>>;
    get changed(): Observable<AsyncSelectionChange<T>>;
    get length(): number;
    protected _compareFunc: (a: T, b: T) => boolean;
    constructor(length: number, _multiple?: boolean, compareFunc?: (a: T, b: T) => boolean, initiallySelectedValues?: T[], initiallyDeselectedValues?: T[], _emitChanges?: boolean);
    updateLength(length: number): void;
    isAllSelected(): boolean;
    getAllSelectedType(): AllSelectedType;
    selectAll(): void;
    deselectAll(): void;
    toggleAll(): void;
    clear(): void;
    select(...values: T[]): void;
    deselect(...values: T[]): void;
    toggle(value: T): void;
    isSelected(value: T): boolean;
    isDeselected(value: T): boolean;
    isEmpty(): boolean;
    hasValue(): boolean;
    sort(predicate?: (a: T, b: T) => number): void;
    isMultipleSelection(): boolean;
    protected _emitChangeEvent(): void;
    protected _markSelected(value: T): void;
    protected _unmarkSelected(value: T): void;
    protected _markDeselected(value: T): void;
    protected _unmarkDeselected(value: T): void;
    protected _unmarkAll(): void;
    protected _verifyValueAssignment(values: T[]): void;
    protected _checkIfAllSelected(): void;
    protected pushIfNotExists(array: T[], value: T): void;
}
export interface AsyncSelectionChange<T> {
    source: AsyncSelectionModel<T>;
    isAllSelected: boolean;
    allSelectedType: AllSelectedType;
    added: T[];
    removed: T[];
}
export declare function getMultipleValuesInSingleSelectionError(): Error;
export declare function isEqual<T>(...property: (keyof T)[]): (a: T, b: T) => boolean;
