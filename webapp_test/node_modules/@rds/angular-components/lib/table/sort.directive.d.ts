import { EventEmitter, InjectionToken, OnChanges, OnDestroy, OnInit } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export type SortDirection = 'asc' | 'desc' | '';
export interface RdsSortable {
    id: string;
    start: SortDirection;
    disableClear: boolean;
}
export interface Sort {
    active: string;
    direction: SortDirection;
}
export interface RdsSortDefaultOptions {
    disableClear?: boolean;
}
export declare const RDS_SORT_DEFAULT_OPTIONS: InjectionToken<RdsSortDefaultOptions>;
export declare class RdsSortDirective implements OnChanges, OnDestroy, OnInit {
    private readonly defaultOptions;
    readonly _stateChanges: Subject<void>;
    sortables: Map<string, RdsSortable>;
    class: string;
    active: string | null;
    disabled: boolean;
    start: SortDirection;
    get direction(): SortDirection;
    set direction(direction: SortDirection);
    private _direction;
    disableClear: boolean;
    get initialized(): Observable<void>;
    private _initialized;
    readonly rdsSortChange: EventEmitter<Sort>;
    register(sortable: RdsSortable): void;
    deregister(sortable: RdsSortable): void;
    sort(sortable: RdsSortable): void;
    getNextSortDirection(sortable: RdsSortable): SortDirection;
    ngOnInit(): void;
    ngOnChanges(): void;
    ngOnDestroy(): void;
    private _getSortDirectionCycle;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSortDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsSortDirective, "[rdsSort], [rds-sort]", ["rdsSort"], { "active": { "alias": "rdsSortActive"; "required": false; }; "disabled": { "alias": "rdsSortDisabled"; "required": false; }; "start": { "alias": "rdsSortStart"; "required": false; }; "direction": { "alias": "rdsSortDirection"; "required": false; }; "disableClear": { "alias": "rdsSortDisableClear"; "required": false; }; }, { "rdsSortChange": "rdsSortChange"; }, never, never, false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_disableClear: unknown;
}
