import { NumberInput } from '@angular/cdk/coercion';
import { AfterViewInit, EventEmitter, OnDestroy, Provider } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare const RDS_SLIDER_VALUE_ACCESSOR: Provider;
export declare class RdsSliderChange {
    source: RdsSliderComponent;
    value: number | null;
}
export declare class RdsSliderComponent implements ControlValueAccessor, OnDestroy, AfterViewInit {
    private readonly elementRef;
    private readonly destroyRef;
    private readonly focusMonitor;
    private readonly cdr;
    private readonly dir;
    private readonly ngZone;
    private readonly document;
    private readonly animationMode;
    class: string;
    role: string;
    disabled: boolean;
    set tabIndex(value: NumberInput);
    get tabIndex(): number;
    private _tabIndex;
    invert: boolean;
    set max(v: NumberInput);
    get max(): number;
    private _max;
    set min(v: NumberInput);
    get min(): number;
    private _min;
    set step(v: NumberInput);
    get step(): number;
    private _step;
    thumbLabel: boolean;
    get tickInterval(): 'auto' | number;
    set tickInterval(value: 'auto' | number);
    private _tickInterval;
    get value(): number;
    set value(v: NumberInput);
    private _value;
    get valueTextAttr(): string;
    displayWith: (value: number) => string | number;
    valueText: string;
    get ariaOrientationAttr(): string;
    get rdsSliderHorizontal(): boolean;
    vertical: boolean;
    get rdsSliderAxisInvertedClass(): boolean;
    get rdsSliderInvertMouseCoords(): boolean;
    get hideLastTick(): boolean;
    get noAnimation(): boolean;
    onTouched: () => void;
    get percent(): number;
    private _percent;
    _isSliding: 'keyboard' | 'pointer' | null;
    _isActive: boolean;
    readonly change: EventEmitter<RdsSliderChange>;
    readonly input: EventEmitter<RdsSliderChange>;
    readonly valueChange: EventEmitter<number | null>;
    private _tickIntervalPercent;
    private _sliderDimensions;
    private _controlValueAccessorChangeFn;
    private _roundToDecimal;
    private _valueOnSlideStart;
    private _sliderWrapper;
    private _lastPointerEvent;
    private _touchId;
    get displayValue(): string | number;
    focus(options?: FocusOptions): void;
    blur(): void;
    _shouldInvertAxis(): boolean;
    _isMinValue(): boolean;
    _getThumbGap(): number;
    _getTrackFillStyles(): Partial<CSSStyleDeclaration>;
    _getTicksContainerStyles(): Partial<CSSStyleDeclaration>;
    _getTicksStyles(): Partial<CSSStyleDeclaration>;
    _getThumbContainerStyles(): Partial<CSSStyleDeclaration>;
    _shouldInvertMouseCoords(): boolean;
    private _getDirection;
    constructor(tabIndex?: string);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _onMouseenter(): void;
    _onFocus(): void;
    _onBlur(): void;
    _onSelectStart($event: Event): void;
    _onKeydown(event: KeyboardEvent): void;
    _onKeyup(): void;
    private _pointerDown;
    private _pointerMove;
    private _pointerUp;
    private _windowBlur;
    private _getWindow;
    private _bindGlobalEvents;
    private _removeGlobalEvents;
    private _increment;
    private _updateValueFromPosition;
    private _emitChangeEvent;
    private _emitInputEvent;
    private _updateTickIntervalPercent;
    private _createChangeEvent;
    private _calculatePercentage;
    private _calculateValue;
    private _clamp;
    private _getSliderDimensions;
    private _focusHostElement;
    private _blurHostElement;
    writeValue(value: number): void;
    registerOnChange(fn: (value: number) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSliderComponent, [{ attribute: "tabindex"; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsSliderComponent, "rds-slider", ["rdsSlider"], { "disabled": { "alias": "disabled"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "invert": { "alias": "invert"; "required": false; }; "max": { "alias": "max"; "required": false; }; "min": { "alias": "min"; "required": false; }; "step": { "alias": "step"; "required": false; }; "thumbLabel": { "alias": "thumbLabel"; "required": false; }; "tickInterval": { "alias": "tickInterval"; "required": false; }; "value": { "alias": "value"; "required": false; }; "displayWith": { "alias": "displayWith"; "required": false; }; "valueText": { "alias": "valueText"; "required": false; }; "vertical": { "alias": "vertical"; "required": false; }; }, { "change": "change"; "input": "input"; "valueChange": "valueChange"; }, never, never, false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_invert: unknown;
    static ngAcceptInputType_thumbLabel: unknown;
    static ngAcceptInputType_vertical: unknown;
}
