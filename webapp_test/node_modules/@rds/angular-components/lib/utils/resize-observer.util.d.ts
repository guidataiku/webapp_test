import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterContentInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class ResizeObserverFactory {
    create(callback: ResizeObserverCallback): ResizeObserver | null;
    static ɵfac: i0.ɵɵFactoryDeclaration<ResizeObserverFactory, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ResizeObserverFactory>;
}
export declare class DimensionsObserver implements OnDestroy {
    private readonly resizeObserverFactory;
    private _observedElements;
    ngOnDestroy(): void;
    observe(element: Element): Observable<ResizeObserverEntry[]>;
    observe(element: ElementRef<Element>): Observable<ResizeObserverEntry[]>;
    private _observeElement;
    private _unobserveElement;
    private _cleanupObserver;
    static ɵfac: i0.ɵɵFactoryDeclaration<DimensionsObserver, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<DimensionsObserver>;
}
/**
 * Directive that triggers a callback whenever the content of
 * its associated element has changed.
 */
export declare class RdsObserveResizeDirective implements AfterContentInit, OnDestroy {
    private readonly dimensionsObserver;
    private readonly elementRef;
    readonly rdsObserveResize: EventEmitter<ResizeObserverEntry[]>;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _disabled;
    set debounce(value: NumberInput);
    get debounce(): number;
    private _debounce;
    private _currentSubscription;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    private _subscribe;
    private _unsubscribe;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsObserveResizeDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsObserveResizeDirective, "[rdsObserveResize]", ["rdsObserveResize"], { "disabled": { "alias": "rdsObserveResizeDisabled"; "required": false; }; "debounce": { "alias": "debounce"; "required": false; }; }, { "rdsObserveResize": "rdsObserveResize"; }, never, never, true, never>;
}
