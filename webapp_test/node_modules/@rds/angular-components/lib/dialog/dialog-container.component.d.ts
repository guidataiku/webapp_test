import { ComponentRef, EmbeddedViewRef, EventEmitter } from '@angular/core';
import { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, DomPortal, TemplatePortal } from '@angular/cdk/portal';
import { AnimationEvent } from '@angular/animations';
import { RdsDialogConfig } from './model';
import * as i0 from "@angular/core";
export declare class RdsDialogContainerComponent<D> extends BasePortalOutlet {
    private readonly elementRef;
    private readonly focusTrapFactory;
    private readonly cdr;
    private readonly document;
    readonly config: RdsDialogConfig<D>;
    private focusTrap;
    private elementFocusedBeforeDialogWasOpened;
    ariaLabelledBy: string | null;
    id: string;
    animationState: 'void' | 'enter' | 'exit';
    readonly animationStateChanged: EventEmitter<AnimationEvent>;
    portalOutlet: CdkPortalOutlet;
    readonly hostClass = "rds-dialog";
    readonly hostTabindex = -1;
    readonly hostAriaDialog = true;
    get hostId(): string;
    get hostSize(): string;
    get hostRole(): string;
    get hostAriaLabelledby(): string | null;
    get hostAriaLabel(): string | null;
    get hostAriaDescribedby(): string | null;
    get hostDialogContainer(): string;
    onAnimationStart($event: AnimationEvent): void;
    onAnimationDone(event: AnimationEvent): void;
    attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T>;
    attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C>;
    attachDomPortal: (portal: DomPortal) => void;
    startExitAnimation(): void;
    recaptureFocus(): void;
    private trapFocus;
    private restoreFocus;
    private setupFocusTrap;
    private isFocusInsideDialog;
    private throwCannotAttachError;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDialogContainerComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsDialogContainerComponent<any>, "rds-dialog", never, {}, {}, never, never, false, never>;
}
