import { OnDestroy, TemplateRef } from '@angular/core';
import { RdsDialogConfig, RdsDialogRef } from './model';
import { Observable, Subject } from 'rxjs';
import { ComponentType } from '@angular/cdk/overlay';
import * as i0 from "@angular/core";
export declare class RdsDialogService implements OnDestroy {
    private readonly overlay;
    private readonly injector;
    private readonly scrollStrategyOptions;
    private readonly parentDialogService;
    private dialogsOpenAtCurrentLevel;
    private readonly afterAllClosedAtCurrentLevel;
    private readonly afterOpenedAtCurrentLevel;
    private readonly scrollStrategy;
    get openDialogs(): RdsDialogRef<any>[];
    get afterOpened(): Subject<RdsDialogRef<any>>;
    get _afterAllClosed(): Subject<void>;
    readonly afterAllClosed: Observable<void>;
    ngOnDestroy(): void;
    open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>, dialogConfig?: Partial<RdsDialogConfig<D>>): RdsDialogRef<T, D, R>;
    closeAll(): void;
    private createOverlayRef;
    private getDialogById;
    private buildOverlayConfig;
    private attachDialogContainer;
    private attachDialogContent;
    private createInjector;
    private removeDialogRef;
    private closeDialogs;
    private mergeDialogConfigWithDefaultDialogConfigValues;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDialogService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RdsDialogService>;
}
