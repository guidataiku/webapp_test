import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { RdsRadioChangedEvent } from './radio-button-changed-event';
import { AnimationTriggerMetadata } from '@angular/animations';
import * as i0 from "@angular/core";
export type RdsRadioButtonPosition = 'before' | 'after';
export type RdsRadioButtonSize = 's' | 'm' | 'l';
export declare const rdsRadioAnimations: {
    readonly transitionMessages: AnimationTriggerMetadata;
};
export declare class RdsRadioButtonComponent<T> implements OnInit, AfterViewInit, OnDestroy {
    private readonly radioGroup;
    private readonly destroyRef;
    private readonly elementRef;
    private readonly cdr;
    private readonly focusMonitor;
    private readonly radioDispatcher;
    private _uniqueId;
    private _disabled;
    private _required;
    private _value;
    private _labelPosition;
    subscriptAnimationState: '' | 'enter';
    get inputId(): string;
    _inputElement: ElementRef<HTMLInputElement>;
    readonly hostClass = "rds-radio-button";
    get errorState(): boolean;
    id: string;
    name: string;
    size: RdsRadioButtonSize;
    ariaLabel: string;
    ariaLabelledby: string;
    ariaDescribedby: string;
    set checked(value: BooleanInput);
    get checked(): boolean;
    private _checked;
    get value(): T;
    set value(value: T);
    get labelPosition(): RdsRadioButtonPosition;
    set labelPosition(value: RdsRadioButtonPosition);
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    set required(value: BooleanInput);
    get required(): boolean;
    buttonChanged: EventEmitter<RdsRadioChangedEvent<T>>;
    onFocus(): void;
    get isErrorMessageVisible(): boolean;
    private readonly removeUniqueSelectionListener;
    constructor();
    focus(options?: FocusOptions): void;
    markForCheck(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private emitChangeEvent;
    onInputClick(event: Event): void;
    onInputChange(event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsRadioButtonComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsRadioButtonComponent<any>, "rds-radio-button", never, { "id": { "alias": "id"; "required": false; }; "name": { "alias": "name"; "required": false; }; "size": { "alias": "size"; "required": false; }; "ariaLabel": { "alias": "ariaLabel"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "value": { "alias": "value"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, { "buttonChanged": "buttonChanged"; }, never, ["*", "rds-control-error", "rds-control-hint"], false, never>;
}
