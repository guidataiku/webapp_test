import { ControlValueAccessor, FormControl, FormGroupDirective, NgForm } from '@angular/forms';
import { AfterContentInit, DoCheck, EventEmitter, InjectionToken, OnInit, QueryList } from '@angular/core';
import { RdsRadioButtonComponent, RdsRadioButtonPosition } from './radio-button.component';
import { RdsRadioChangedEvent } from './radio-button-changed-event';
import * as i0 from "@angular/core";
/**
 * Provider Expression that allows rds-radio-group to register as a ControlValueAccessor. This
 * allows it to support [(ngModel)] and ngControl.
 */
export declare const RDS_RADIO_GROUP: InjectionToken<RdsRadioGroupDirective<any>>;
/**
 * Injection token that can be used to inject instances of `RdsRadioGroupDirective`. It serves as
 * alternative token to the actual `RdsRadioGroupDirective` class which could cause unnecessary
 * retention of the class and its component metadata.
 */
export declare const RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: {
    provide: InjectionToken<readonly ControlValueAccessor[]>;
    useExisting: import("@angular/core").Type<any>;
    multi: boolean;
};
export declare class RdsRadioGroupDirective<T> implements OnInit, AfterContentInit, ControlValueAccessor, DoCheck {
    private readonly cdr;
    private readonly destroyRef;
    private readonly injector;
    readonly parentForm: NgForm | null;
    readonly parentFormGroup: FormGroupDirective | null;
    private _value;
    private _name;
    private _selected;
    private _isInitialized;
    private _labelPosition;
    private _errorState;
    control: FormControl;
    _radios: QueryList<RdsRadioButtonComponent<T>>;
    readonly hostClass = "rds-radio-group";
    get name(): string;
    set name(value: string);
    get labelPosition(): RdsRadioButtonPosition;
    set labelPosition(v: RdsRadioButtonPosition);
    get value(): T | null;
    set value(newValue: T | null);
    get selected(): RdsRadioButtonComponent<T> | null;
    set selected(selected: RdsRadioButtonComponent<T> | null);
    disabled: boolean;
    required: boolean;
    buttonChanged: EventEmitter<RdsRadioChangedEvent<T>>;
    _controlValueAccessorChangeFn: (value: T) => void;
    onTouched: () => void;
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngDoCheck(): void;
    checkSelectedRadioButton(): void;
    touch(): void;
    private updateRadioButtonNames;
    private updateSelectedRadioFromValue;
    emitChangeEvent(): void;
    markRadiosForCheck(): void;
    writeValue(value: T): void;
    registerOnChange(fn: (value: T) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsRadioGroupDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsRadioGroupDirective<any>, "rds-radio-group", never, { "name": { "alias": "name"; "required": false; }; "labelPosition": { "alias": "labelPosition"; "required": false; }; "value": { "alias": "value"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, { "buttonChanged": "buttonChanged"; }, ["_radios"], never, false, never>;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_required: unknown;
}
