import { FocusableOption, FocusOrigin } from '@angular/cdk/a11y';
import { AfterViewInit, OnDestroy } from '@angular/core';
import { RdsExpansionPanelComponent } from './expansion-panel.component';
import * as i0 from "@angular/core";
export declare class RdsExpansionPanelHeaderComponent implements AfterViewInit, OnDestroy, FocusableOption {
    readonly panel: RdsExpansionPanelComponent;
    private readonly element;
    private readonly focusMonitor;
    private readonly cdr;
    private _parentChangeSubscription;
    private _tabIndex;
    class: string;
    role: string;
    get attrId(): string;
    get attrDisabled(): boolean;
    get tabIndex(): number;
    set tabIndex(value: number);
    get disabled(): boolean;
    get _isExpanded(): boolean;
    get _getPanelId(): string;
    get _isAfterTogglePosition(): boolean;
    get _isBeforeTogglePosition(): boolean;
    constructor(tabIndex?: string);
    _toggle(): void;
    _keydown(event: KeyboardEvent): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsExpansionPanelHeaderComponent, [{ attribute: "tabindex"; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsExpansionPanelHeaderComponent, "rds-expansion-panel-header", never, { "tabIndex": { "alias": "tabIndex"; "required": false; }; }, {}, never, ["rds-panel-title", "*"], false, never>;
}
export declare class RdsExpansionPanelTitleDirective {
    class: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsExpansionPanelTitleDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsExpansionPanelTitleDirective, "rds-panel-title", never, {}, {}, never, never, false, never>;
}
