import { BooleanInput } from '@angular/cdk/coercion';
import { Overlay, ScrollStrategy } from '@angular/cdk/overlay';
import { ComponentType, TemplatePortal } from '@angular/cdk/portal';
import { AfterViewInit, ElementRef, EventEmitter, InjectionToken, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { RdsCalendarComponent } from './calendar.component';
import { RdsCalendarView } from './calendar.types';
import { RdsCalendarCellClassFunction, RdsCalendarUserEvent } from './calendar-body.component';
import { DateFilterFn } from './datepicker-input.base';
import { DateRange, ExtractDateTypeFromSelection, RdsDateSelectionModel } from './date-selection.model';
import * as i0 from "@angular/core";
export declare const RDS_DATEPICKER_SCROLL_STRATEGY: InjectionToken<() => ScrollStrategy>;
export declare function RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy;
export type DatepickerDropdownPositionX = 'start' | 'end';
export type DatepickerDropdownPositionY = 'above' | 'below';
export declare const RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER: {
    provide: InjectionToken<() => ScrollStrategy>;
    deps: (typeof Overlay)[];
    useFactory: typeof RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY;
};
declare class RdsDatepickerContentBase {
    readonly _elementRef: ElementRef<any>;
}
export declare class RdsDatepickerContentComponent<C extends RdsDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> extends RdsDatepickerContentBase implements OnInit, AfterViewInit, OnDestroy {
    readonly _elementRef: ElementRef<any>;
    private readonly cdr;
    private readonly globalModel;
    private readonly dateAdapter;
    private readonly rangeSelectionStrategy;
    private readonly intl;
    private _subscriptions;
    private _model;
    class: string;
    get isContentTouch(): boolean | null;
    get transformPanel(): 'enter' | 'void';
    _calendar: RdsCalendarComponent<D> | null;
    datepicker: RdsDatepickerBaseDirective<C, S, D> | null;
    comparisonStart: D | null;
    comparisonEnd: D | null;
    _animationState: 'enter' | 'void';
    _animationDone: Subject<void>;
    _closeButtonText: string | null;
    _closeButtonFocused: boolean | null;
    _actionsPortal: TemplatePortal | null;
    _onAnimationDone(): void;
    constructor();
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    _handleUserSelection(event: RdsCalendarUserEvent<D | null>): void;
    _startExitAnimation(): void;
    _getSelected(): D | DateRange<D> | null;
    _applyPendingSelection(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDatepickerContentComponent<any, any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsDatepickerContentComponent<any, any, any>, "rds-datepicker-content", ["rdsDatepickerContent"], {}, {}, never, never, false, never>;
}
export interface RdsDatepickerControl<D> {
    getStartValue(): D | null;
    min: D | null;
    max: D | null;
    disabled: boolean;
    dateFilter: DateFilterFn<D>;
    getConnectedOverlayOrigin(): ElementRef;
    stateChanges: Observable<void>;
}
export interface RdsDatepickerPanel<C extends RdsDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> {
    closedStream: EventEmitter<void>;
    datepickerInput: C;
    disabled: boolean;
    id: string;
    opened: boolean;
    openedStream: EventEmitter<void>;
    stateChanges: Subject<void>;
    availableViews: RdsCalendarView[];
    open(): void;
    registerInput(input: C): RdsDateSelectionModel<S, D>;
}
export declare abstract class RdsDatepickerBaseDirective<C extends RdsDatepickerControl<D>, S, D = ExtractDateTypeFromSelection<S>> implements RdsDatepickerPanel<C, S, D>, OnDestroy, OnChanges {
    private readonly dialog;
    private readonly overlay;
    private readonly ngZone;
    private readonly viewContainerRef;
    private readonly scrollStrategy;
    private readonly dateAdapter;
    private readonly document;
    private readonly model;
    private _originalShowToggle;
    private _inputStateChanges;
    calendarHeaderComponent: ComponentType<unknown> | null;
    get startAt(): D | null;
    set startAt(value: D | null);
    private _startAt;
    startView: RdsCalendarView;
    set touchUi(value: BooleanInput);
    get touchUi(): boolean;
    private _touchUi;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _disabled;
    set availableViews(newViews: RdsCalendarView[]);
    get availableViews(): RdsCalendarView[];
    private _availableViews;
    set showToggle(value: BooleanInput | null);
    get showToggle(): boolean | null;
    private _showToggle;
    xPosition: DatepickerDropdownPositionX;
    yPosition: DatepickerDropdownPositionY;
    restoreFocus: boolean;
    readonly yearSelected: EventEmitter<D>;
    readonly monthSelected: EventEmitter<D>;
    readonly viewChanged: EventEmitter<RdsCalendarView>;
    dateClass: RdsCalendarCellClassFunction<D> | null;
    openedStream: EventEmitter<void>;
    closedStream: EventEmitter<void>;
    panelClass: string[] | string;
    set opened(value: BooleanInput);
    get opened(): boolean;
    private _opened;
    id: string;
    private _popupRef;
    private _dialogRef;
    private _popupComponentRef;
    private _focusedElementBeforeOpen;
    private _backdropHarnessClass;
    private _actionsPortal;
    datepickerInput: C;
    readonly stateChanges: Subject<void>;
    _getStartView(): RdsCalendarView;
    _getMinDate(): D | null;
    _getMaxDate(): D | null;
    _getDateFilter(): DateFilterFn<D>;
    constructor();
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    select(date: D): void;
    _selectYear(normalizedYear: D): void;
    _selectMonth(normalizedMonth: D): void;
    _viewChanged(view: RdsCalendarView): void;
    registerInput(input: C): RdsDateSelectionModel<S, D>;
    registerActions(portal: TemplatePortal): void;
    removeActions(portal: TemplatePortal): void;
    open(): void;
    close(): void;
    _applyPendingSelection(): void;
    private _updateShowToggleIfNeeded;
    private _openAsDialog;
    private _openAsPopup;
    protected _forwardContentValues(instance: RdsDatepickerContentComponent<C, S, D>): void;
    private _createPopup;
    private _destroyPopup;
    private _setConnectedPositions;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDatepickerBaseDirective<any, any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsDatepickerBaseDirective<any, any, any>, never, never, { "calendarHeaderComponent": { "alias": "calendarHeaderComponent"; "required": false; }; "startAt": { "alias": "startAt"; "required": false; }; "startView": { "alias": "startView"; "required": false; }; "touchUi": { "alias": "touchUi"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "availableViews": { "alias": "availableViews"; "required": false; }; "showToggle": { "alias": "showToggle"; "required": false; }; "xPosition": { "alias": "xPosition"; "required": false; }; "yPosition": { "alias": "yPosition"; "required": false; }; "restoreFocus": { "alias": "restoreFocus"; "required": false; }; "dateClass": { "alias": "dateClass"; "required": false; }; "panelClass": { "alias": "panelClass"; "required": false; }; "opened": { "alias": "opened"; "required": false; }; }, { "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; "viewChanged": "viewChanged"; "openedStream": "openedStream"; "closedStream": "closedStream"; }, never, never, false, never>;
    static ngAcceptInputType_restoreFocus: unknown;
    static ngAcceptInputType_panelClass: any;
}
export {};
