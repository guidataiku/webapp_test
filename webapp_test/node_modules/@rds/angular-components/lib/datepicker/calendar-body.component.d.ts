import { EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { RdsCalendarView } from './calendar.types';
import * as i0 from "@angular/core";
export type RdsCalendarCellCssClasses = string | string[] | Set<string> | {
    [key: string]: unknown;
};
export type RdsCalendarCellClassFunction<D> = (date: D, view: RdsCalendarView) => RdsCalendarCellCssClasses;
export declare class RdsCalendarCell<D = any> {
    value: number;
    displayValue: string;
    ariaLabel: string;
    enabled: boolean;
    cssClasses: RdsCalendarCellCssClasses;
    rawValue: D;
    compareValue: number;
    constructor(value: number, displayValue: string, ariaLabel: string, enabled: boolean, cssClasses: RdsCalendarCellCssClasses, rawValue: D, compareValue?: number);
}
export interface RdsCalendarUserEvent<D> {
    value: D;
    event: Event;
}
export declare class RdsCalendarBodyComponent<D> implements OnChanges, OnDestroy {
    private readonly elementRef;
    private readonly ngZone;
    private _skipNextFocus;
    class: string;
    role: string;
    ariaReadonly: string;
    label: string | null;
    rows: RdsCalendarCell<D>[][] | null;
    todayValue: number | null;
    startValue: number | null;
    endValue: number | null;
    labelMinRequiredCells: number | null;
    numCols: number;
    activeCell: RdsCalendarCell<D> | null;
    isRange: boolean;
    cellAspectRatio: number;
    comparisonStart: number | null;
    comparisonEnd: number | null;
    previewStart: number | null;
    previewEnd: number | null;
    readonly selectedValueChange: EventEmitter<RdsCalendarUserEvent<RdsCalendarCell<D>>>;
    previewChange: EventEmitter<RdsCalendarUserEvent<RdsCalendarCell<D> | null>>;
    _firstRowOffset: number | null;
    _cellPadding: string | null;
    _cellWidth: string | null;
    constructor();
    _cellClicked(cell: RdsCalendarCell<D>, event: MouseEvent): void;
    _isSelected(value: number): boolean;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    _isActiveCell(item: RdsCalendarCell<D>): boolean;
    _focusActiveCell(movePreview?: boolean): void;
    _isRangeStart(value: number): boolean;
    _isRangeEnd(value: number): boolean;
    _isInRange(value: number): boolean;
    _isComparisonStart(value: number): boolean;
    _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number): boolean;
    _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number): boolean;
    _isComparisonEnd(value: number): boolean;
    _isInComparisonRange(value: number): boolean;
    _isComparisonIdentical(value: number): boolean;
    _isPreviewStart(value: number): boolean;
    _isPreviewEnd(value: number): boolean;
    _isInPreview(value: number): boolean;
    private _enterHandler;
    private _leaveHandler;
    private _getCellFromElement;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsCalendarBodyComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsCalendarBodyComponent<any>, "[rdsCalendarBody], [rds-calendar-body]", ["rdsCalendarBody"], { "label": { "alias": "label"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "todayValue": { "alias": "todayValue"; "required": false; }; "startValue": { "alias": "startValue"; "required": false; }; "endValue": { "alias": "endValue"; "required": false; }; "labelMinRequiredCells": { "alias": "labelMinRequiredCells"; "required": false; }; "numCols": { "alias": "numCols"; "required": false; }; "activeCell": { "alias": "activeCell"; "required": false; }; "isRange": { "alias": "isRange"; "required": false; }; "cellAspectRatio": { "alias": "cellAspectRatio"; "required": false; }; "comparisonStart": { "alias": "comparisonStart"; "required": false; }; "comparisonEnd": { "alias": "comparisonEnd"; "required": false; }; "previewStart": { "alias": "previewStart"; "required": false; }; "previewEnd": { "alias": "previewEnd"; "required": false; }; }, { "selectedValueChange": "selectedValueChange"; "previewChange": "previewChange"; }, never, never, false, never>;
    static ngAcceptInputType_isRange: unknown;
}
