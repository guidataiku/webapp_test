import { DoCheck, EventEmitter, InjectionToken, Injector, OnInit } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm, ValidatorFn } from '@angular/forms';
import { BooleanInput } from '@angular/cdk/coercion';
import { DateFilterFn, RdsDatepickerInputBaseDirective, RdsDatepickerInputEvent } from './datepicker-input.base';
import { DateRange, DateSelectionModelChange } from './date-selection.model';
import { Subject } from 'rxjs';
import { ErrorStateMatcher } from '../core';
import * as i0 from "@angular/core";
export interface RdsDateRangeInputParent<D> {
    id: string;
    min: D | null;
    max: D | null;
    dateFilter: DateFilterFn<D>;
    rangePicker: {
        opened: boolean;
        id: string;
    };
    _startInput: RdsDateRangeInputPartBaseDirective<D>;
    _endInput: RdsDateRangeInputPartBaseDirective<D>;
    _groupDisabled: boolean;
    _handleChildValueChange(): void;
    _openDatepicker(): void;
}
export declare const RDS_DATE_RANGE_INPUT_PARENT: InjectionToken<RdsDateRangeInputParent<unknown>>;
declare abstract class RdsDateRangeInputPartBaseDirective<D> extends RdsDatepickerInputBaseDirective<DateRange<D>> implements OnInit, DoCheck {
    protected readonly rangeInput: RdsDateRangeInputParent<D>;
    protected readonly defaultErrorStateMatcher: ErrorStateMatcher;
    protected readonly injector: Injector;
    protected readonly parentForm: NgForm | null;
    protected readonly parentFormGroup: FormGroupDirective | null;
    errorStateMatcher: ErrorStateMatcher | null;
    errorState: boolean;
    ngControl: NgControl;
    protected abstract _validator: ValidatorFn | null;
    protected abstract _assignValueToModel(value: D | null): void;
    protected abstract _getValueFromModel(modelValue: DateRange<D>): D | null;
    ngOnInit(): void;
    ngDoCheck(): void;
    isEmpty(): boolean;
    _getPlaceholder(): string;
    focus(): void;
    _onInput(value: string): void;
    protected _openPopup(): void;
    _getMinDate(): D;
    _getMaxDate(): D;
    protected _getDateFilter(): DateFilterFn<D>;
    protected _parentDisabled(): boolean;
    protected _shouldHandleChangeEvent({ source, }: DateSelectionModelChange<DateRange<D>>): boolean;
    protected _assignValueProgrammatically(value: D | null): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDateRangeInputPartBaseDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsDateRangeInputPartBaseDirective<any>, never, never, {}, {}, never, never, false, never>;
}
export declare class RdsStartDateDirective<D> extends RdsDateRangeInputPartBaseDirective<D> implements DoCheck, OnInit {
    protected _validator: ValidatorFn | null;
    readonly stateChanges: Subject<void>;
    errorStateMatcher: ErrorStateMatcher | null;
    readonly dateChange: EventEmitter<RdsDatepickerInputEvent<D, DateRange<D>>>;
    readonly dateInput: EventEmitter<RdsDatepickerInputEvent<D, DateRange<D>>>;
    class: string;
    type: string;
    get isDisabled(): boolean | null;
    get id(): string;
    get hasPopup(): string | null;
    get ariaOwns(): string | null;
    get min(): string | null;
    get max(): string | null;
    get attrRequired(): boolean | null;
    set required(value: BooleanInput);
    get required(): boolean;
    protected _required: boolean;
    private _startValidator;
    onBlur(): void;
    onChange(): void;
    onKeydown($event: Event): void;
    onInput($event: KeyboardEvent): void;
    constructor();
    ngOnInit(): void;
    ngDoCheck(): void;
    protected _getValueFromModel(modelValue: DateRange<D>): D | null;
    protected _shouldHandleChangeEvent(change: DateSelectionModelChange<DateRange<D>>): boolean;
    protected _assignValueToModel(value: D | null): void;
    protected _formatValue(value: D | null): void;
    /** Gets the value that should be used when mirroring the input's size. */
    getMirrorValue(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsStartDateDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsStartDateDirective<any>, "input[rdsStartDate], input[rds-start-date]", never, { "errorStateMatcher": { "alias": "errorStateMatcher"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, { "dateChange": "dateChange"; "dateInput": "dateInput"; }, never, never, false, never>;
}
export declare class RdsEndDateDirective<D> extends RdsDateRangeInputPartBaseDirective<D> implements DoCheck, OnInit {
    readonly stateChanges: Subject<void>;
    errorStateMatcher: ErrorStateMatcher | null;
    readonly dateChange: EventEmitter<RdsDatepickerInputEvent<D, DateRange<D>>>;
    readonly dateInput: EventEmitter<RdsDatepickerInputEvent<D, DateRange<D>>>;
    class: string;
    type: string;
    get isDisabled(): boolean | null;
    get id(): string;
    get hasPopup(): string | null;
    get ariaOwns(): string | null;
    get min(): string | null;
    get max(): string | null;
    get attrRequired(): boolean | null;
    set required(value: BooleanInput);
    get required(): boolean;
    protected _required: boolean | undefined;
    private _endValidator;
    protected _validator: ValidatorFn | null;
    onBlur(): void;
    onChange(): void;
    onKeydown($event: Event): void;
    onInput($event: KeyboardEvent): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    protected _getValueFromModel(modelValue: DateRange<D>): D | null;
    protected _shouldHandleChangeEvent(change: DateSelectionModelChange<DateRange<D>>): boolean;
    protected _assignValueToModel(value: D | null): void;
    _onKeydown(event: KeyboardEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsEndDateDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsEndDateDirective<any>, "input[rdsEndDate], input[rds-end-date]", never, { "errorStateMatcher": { "alias": "errorStateMatcher"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, { "dateChange": "dateChange"; "dateInput": "dateInput"; }, never, never, false, never>;
}
export {};
