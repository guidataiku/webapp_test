import { AfterContentInit, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { RdsCalendarBodyComponent, RdsCalendarCell, RdsCalendarCellClassFunction, RdsCalendarUserEvent } from './calendar-body.component';
import { DateRange } from './date-selection.model';
import * as i0 from "@angular/core";
export declare class RdsMonthViewComponent<D> implements AfterContentInit, OnChanges, OnDestroy {
    private readonly cdr;
    private readonly dateFormats;
    private readonly dateAdapter;
    private readonly dir;
    private readonly rangeStrategy;
    private _rerenderSubscription;
    get activeDate(): D;
    set activeDate(value: D);
    private _activeDate;
    get selected(): DateRange<D> | D | null;
    set selected(value: DateRange<D> | D | null);
    private _selected;
    get minDate(): D | null;
    set minDate(value: D | null);
    private _minDate;
    get maxDate(): D | null;
    set maxDate(value: D | null);
    private _maxDate;
    dateFilter: ((date: D) => boolean) | null;
    dateClass: RdsCalendarCellClassFunction<D> | null;
    comparisonStart: D | null;
    comparisonEnd: D | null;
    readonly selectedChange: EventEmitter<D | null>;
    readonly _userSelection: EventEmitter<RdsCalendarUserEvent<D | null>>;
    readonly activeDateChange: EventEmitter<D>;
    _rdsCalendarBody: RdsCalendarBodyComponent<D> | null;
    _monthLabel: string | null;
    _weeks: RdsCalendarCell<D>[][] | null;
    _firstWeekOffset: number | null;
    _rangeStart: number | null;
    _rangeEnd: number | null;
    _comparisonRangeStart: number | null;
    _comparisonRangeEnd: number | null;
    _previewStart: number | null;
    _previewEnd: number | null;
    _isRange: boolean;
    _todayDate: number | null;
    _weekdays: {
        long: string;
        narrow: string;
    }[] | null;
    constructor();
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    _onDateSelected(event: RdsCalendarUserEvent<RdsCalendarCell<D>>): void;
    _dateSelected(event: RdsCalendarUserEvent<D>): void;
    _handleCalendarBodyKeydown(event: KeyboardEvent): void;
    _init(): void;
    _focusActiveCell(movePreview?: boolean): void;
    _previewChanged({ event, value: cell, }: RdsCalendarUserEvent<RdsCalendarCell<D> | null>): void;
    _getActiveCell(): RdsCalendarCell<D> | null;
    private _initWeekdays;
    private _createWeekCells;
    private _shouldEnableDate;
    private _hasSameMonthAndYear;
    private _getCellCompareValue;
    private _isRtl;
    private _setRanges;
    private _getCurrentMonthDate;
    private _getPreviousMonthDate;
    private _getNextMonthDate;
    private _getClasses;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsMonthViewComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsMonthViewComponent<any>, "rds-month-view", ["rdsMonthView"], { "activeDate": { "alias": "activeDate"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "minDate": { "alias": "minDate"; "required": false; }; "maxDate": { "alias": "maxDate"; "required": false; }; "dateFilter": { "alias": "dateFilter"; "required": false; }; "dateClass": { "alias": "dateClass"; "required": false; }; "comparisonStart": { "alias": "comparisonStart"; "required": false; }; "comparisonEnd": { "alias": "comparisonEnd"; "required": false; }; }, { "selectedChange": "selectedChange"; "_userSelection": "_userSelection"; "activeDateChange": "activeDateChange"; }, never, never, false, never>;
}
