import { AfterViewInit, DestroyRef, ElementRef, InjectionToken, OnDestroy, Provider, Renderer2 } from '@angular/core';
import { DateFilterFn, RdsDatepickerInputBaseDirective } from './datepicker-input.base';
import { RdsDatepickerControl, RdsDatepickerPanel } from './datepicker-base';
import { DateSelectionModelChange } from './date-selection.model';
import { RdsFormFieldComponent } from '../form-field';
import * as i0 from "@angular/core";
export declare const RDS_DATEPICKER_VALUE_ACCESSOR: Provider;
export declare const RDS_DATEPICKER_VALIDATORS: Provider;
export declare const RDS_INPUT_VALUE_ACCESSOR: InjectionToken<{
    value: unknown;
}>;
export declare class RdsDatepickerInputDirective<D> extends RdsDatepickerInputBaseDirective<D | null, D> implements RdsDatepickerControl<D | null>, AfterViewInit, OnDestroy {
    protected readonly renderer: Renderer2;
    protected readonly destroyRef: DestroyRef;
    protected readonly formField: RdsFormFieldComponent<D>;
    private _destroyDatepickerSubscriptions$;
    class: string;
    get ariaHasPopup(): string | null;
    get ariaOwns(): string | null;
    get attrMin(): string | null;
    get attrMax(): string | null;
    get attrDataRdsCalendar(): string | null;
    get attrDisabled(): boolean | null;
    set rdsDatepicker(datepicker: RdsDatepickerPanel<RdsDatepickerControl<D>, D | null, D>);
    _datepicker?: RdsDatepickerPanel<RdsDatepickerControl<D>, D | null, D>;
    get min(): D | null;
    set min(value: D | null);
    private _min;
    get max(): D | null;
    set max(value: D | null);
    private _max;
    get dateFilter(): DateFilterFn<D | null>;
    set dateFilter(value: DateFilterFn<D | null>);
    private _dateFilter?;
    protected _validator: import("@angular/forms").ValidatorFn | null;
    onInput($event: Event): void;
    _onChange(): void;
    _onBlur(): void;
    _onKeydown($event: KeyboardEvent): void;
    getConnectedOverlayOrigin(): ElementRef;
    getStartValue(): D | null;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    protected _formatValue(value: D | null): void;
    protected _openPopup(): void;
    protected _getValueFromModel(modelValue: D | null): D | null;
    protected _assignValueToModel(value: D | null): void;
    _getMinDate(): D;
    _getMaxDate(): D;
    protected _getDateFilter(): DateFilterFn<D | null>;
    protected _shouldHandleChangeEvent(event: DateSelectionModelChange<D>): boolean;
    protected _setDefaultPlaceholder(): void;
    protected _calculateDefaultPlaceholder(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDatepickerInputDirective<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsDatepickerInputDirective<any>, "input[rdsDatepicker], input[rds-datepicker]", ["rdsDatepickerInput"], { "rdsDatepicker": { "alias": "rdsDatepicker"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "dateFilter": { "alias": "rdsDatepickerFilter"; "required": false; }; }, {}, never, never, false, never>;
}
