import { AfterContentInit, EventEmitter, OnDestroy } from '@angular/core';
import { DateAdapter } from './adapter';
import { RdsCalendarBodyComponent, RdsCalendarCell, RdsCalendarCellClassFunction, RdsCalendarUserEvent } from './calendar-body.component';
import { DateRange } from './date-selection.model';
import * as i0 from "@angular/core";
export declare const yearsPerPage = 28;
export declare const yearsPerRow = 4;
export declare class RdsMultiYearViewComponent<D> implements AfterContentInit, OnDestroy {
    private readonly cdr;
    private readonly dateAdapter;
    private readonly dir;
    private _rerenderSubscription;
    get activeDate(): D;
    set activeDate(value: D);
    private _activeDate;
    get selected(): DateRange<D> | D | null;
    set selected(value: DateRange<D> | D | null);
    private _selected;
    get minDate(): D | null;
    set minDate(value: D | null);
    private _minDate;
    get maxDate(): D | null;
    set maxDate(value: D | null);
    private _maxDate;
    dateFilter: ((date: D) => boolean) | null;
    dateClass: RdsCalendarCellClassFunction<D> | null;
    readonly selectedChange: EventEmitter<D>;
    readonly yearSelected: EventEmitter<RdsCalendarUserEvent<D>>;
    readonly activeDateChange: EventEmitter<D>;
    _rdsCalendarBody: RdsCalendarBodyComponent<D> | null;
    _years: RdsCalendarCell[][] | null;
    _todayYear: number | null;
    _selectedYear: number | null;
    constructor();
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    _init(): void;
    _onYearSelected(event: RdsCalendarUserEvent<RdsCalendarCell<D>>): void;
    _yearSelected(event: RdsCalendarUserEvent<D>): void;
    _handleCalendarBodyKeydown(event: KeyboardEvent): void;
    _getActiveCell(): RdsCalendarCell<D> | null;
    _focusActiveCell(): void;
    private _createCellForYear;
    private _shouldEnableYear;
    private _isRtl;
    private _setSelectedYear;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsMultiYearViewComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsMultiYearViewComponent<any>, "rds-multi-year-view", ["rdsMultiYearView"], { "activeDate": { "alias": "activeDate"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "minDate": { "alias": "minDate"; "required": false; }; "maxDate": { "alias": "maxDate"; "required": false; }; "dateFilter": { "alias": "dateFilter"; "required": false; }; "dateClass": { "alias": "dateClass"; "required": false; }; }, { "selectedChange": "selectedChange"; "yearSelected": "yearSelected"; "activeDateChange": "activeDateChange"; }, never, never, false, never>;
}
export declare function isSameMultiYearView<D>(dateAdapter: DateAdapter<D>, date1: D, date2: D, minDate: D | null, maxDate: D | null): boolean;
export declare function getActiveOffset<D>(dateAdapter: DateAdapter<D>, activeDate: D, minDate: D | null, maxDate: D | null): number;
