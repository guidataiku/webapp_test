import { AfterContentInit, ElementRef, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput } from '@angular/cdk/coercion';
import { DateFilterFn } from './datepicker-input.base';
import { DateRange } from './date-selection.model';
import { RdsDateRangeInputParent, RdsEndDateDirective, RdsStartDateDirective } from './date-range-input.parts';
import { RdsDatepickerControl, RdsDatepickerPanel } from './datepicker-base';
import { RdsAbstractFormFieldControl } from '../form-field';
import { RdsControlType } from '../form-field/control.type';
import { RdsDateRangePickerInput } from './date-range-picker.component';
import * as i0 from "@angular/core";
export declare class RdsDateRangeInputComponent<D> extends RdsAbstractFormFieldControl<DateRange<D>> implements RdsDatepickerControl<D>, RdsDateRangeInputParent<D>, RdsDateRangePickerInput<D>, AfterContentInit, OnChanges, OnDestroy {
    private readonly cdr;
    private readonly elementRef;
    private readonly dateAdapter;
    private readonly formField;
    private _closedSubscription;
    protected _id: string;
    get classes(): string[];
    idAttr: null;
    role: string;
    get _ariaLabelledby(): string;
    get dataRdsCalendar(): string | null;
    get value(): DateRange<D>;
    controlType: RdsControlType;
    private _dateFilter;
    private _min;
    private _max;
    private _rangePicker;
    get shouldLabelFloat(): boolean;
    get placeholder(): string;
    get rangePicker(): RdsDatepickerPanel<RdsDatepickerControl<D>, DateRange<D>, D>;
    set rangePicker(rangePicker: RdsDatepickerPanel<RdsDatepickerControl<D>, DateRange<D>, D>);
    get attrRequired(): boolean | null;
    set required(value: BooleanInput);
    get required(): boolean;
    get dateFilter(): DateFilterFn<D>;
    set dateFilter(value: DateFilterFn<D>);
    get min(): D | null;
    set min(value: D | null);
    get max(): D | null;
    set max(value: D | null);
    get disabled(): boolean;
    set disabled(value: BooleanInput);
    _groupDisabled: boolean;
    get errorState(): boolean;
    get empty(): boolean;
    _ariaDescribedBy: string | null;
    private _model?;
    separator: string;
    comparisonStart: D | null;
    comparisonEnd: D | null;
    _startInput: RdsStartDateDirective<D>;
    _endInput: RdsEndDateDirective<D>;
    constructor();
    setDescribedByIds(ids: string[]): void;
    onContainerClick(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    getStartValue(): D | null;
    getConnectedOverlayOrigin(): ElementRef;
    _getInputMirrorValue(): string;
    _shouldHidePlaceholders(): boolean;
    _handleChildValueChange(): void;
    _openDatepicker(): void;
    _shouldHideSeparator(): boolean;
    _getAriaLabelledby(): string;
    _updateFocus(origin: FocusOrigin): void;
    private _revalidate;
    private _registerModel;
    private isBoolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDateRangeInputComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsDateRangeInputComponent<any>, "rds-date-range-input", ["rdsDateRangeInput"], { "rangePicker": { "alias": "rangePicker"; "required": false; }; "required": { "alias": "required"; "required": false; }; "dateFilter": { "alias": "dateFilter"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "separator": { "alias": "separator"; "required": false; }; "comparisonStart": { "alias": "comparisonStart"; "required": false; }; "comparisonEnd": { "alias": "comparisonEnd"; "required": false; }; }, {}, ["_startInput", "_endInput"], ["input[rdsStartDate]", "input[rdsEndDate]"], false, never>;
}
