import { BooleanInput } from '@angular/cdk/coercion';
import { AfterViewInit, ElementRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlValueAccessor, ValidationErrors, Validator, ValidatorFn } from '@angular/forms';
import { DateAdapter, RdsDateFormats } from './adapter';
import { noop, Subject } from 'rxjs';
import { DateSelectionModelChange, ExtractDateTypeFromSelection, RdsDateSelectionModel } from './date-selection.model';
import * as i0 from "@angular/core";
export declare class RdsDatepickerInputEvent<D, S = unknown> {
    readonly target: RdsDatepickerInputBaseDirective<S, D>;
    readonly targetElement: HTMLElement;
    value: D | null;
    constructor(target: RdsDatepickerInputBaseDirective<S, D>, targetElement: HTMLElement);
}
export type DateFilterFn<D> = (date: D | null) => boolean;
export declare abstract class RdsDatepickerInputBaseDirective<S, D = ExtractDateTypeFromSelection<S>> implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy, Validator {
    protected readonly elementRef: ElementRef<HTMLInputElement>;
    readonly dateAdapter: DateAdapter<D>;
    protected readonly dateFormats: RdsDateFormats;
    private _isInitialized;
    get value(): D | null;
    set value(value: D | null);
    protected _model: RdsDateSelectionModel<S, D> | undefined;
    set disabled(value: BooleanInput);
    get disabled(): boolean;
    private _disabled?;
    private _valueChangesSubscription;
    private _localeSubscription;
    readonly dateChange: EventEmitter<RdsDatepickerInputEvent<D, S>>;
    readonly dateInput: EventEmitter<RdsDatepickerInputEvent<D, S>>;
    stateChanges: Subject<void>;
    _onTouched: typeof noop;
    _validatorOnChange: typeof noop;
    private _cvaOnChange;
    private _pendingValue;
    protected _lastValueValid: boolean;
    private _parseValidator;
    private _filterValidator;
    private _minValidator;
    private _maxValidator;
    protected _getValidators(): ValidatorFn[];
    abstract _getMinDate(): D | null;
    abstract _getMaxDate(): D | null;
    protected abstract _getDateFilter(): DateFilterFn<D> | undefined;
    _registerModel(model: RdsDateSelectionModel<S, D>): void;
    protected abstract _openPopup(): void;
    protected abstract _assignValueToModel(model: D | null): void;
    protected abstract _getValueFromModel(modelValue: S | null): D | null;
    protected abstract _validator: ValidatorFn | null;
    protected abstract _shouldHandleChangeEvent(event: DateSelectionModelChange<S>): boolean;
    protected constructor();
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    registerOnValidatorChange(fn: () => void): void;
    validate(c: AbstractControl): ValidationErrors | null;
    writeValue(value: D): void;
    registerOnChange(fn: (value: D | null) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    _onKeydown(event: KeyboardEvent): void;
    _onInput(value: string): void;
    _onChange(): void;
    _onBlur(): void;
    protected _formatValue(value: D | null): void;
    private _assignValue;
    private _isValidValue;
    protected _parentDisabled(): boolean;
    protected _assignValueProgrammatically(value: D | null): void;
    _matchesFilter(value: D | null): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDatepickerInputBaseDirective<any, any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsDatepickerInputBaseDirective<any, any>, never, never, { "value": { "alias": "value"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "dateChange": "dateChange"; "dateInput": "dateInput"; }, never, never, false, never>;
}
export declare function dateInputsHaveChanged<D>(changes: SimpleChanges, adapter: DateAdapter<D>): boolean;
