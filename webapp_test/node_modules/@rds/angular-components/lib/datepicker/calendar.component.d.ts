import { ComponentType, Portal } from '@angular/cdk/portal';
import { AfterContentInit, AfterViewChecked, EventEmitter, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';
import { Subject } from 'rxjs';
import { RdsCalendarCellClassFunction, RdsCalendarUserEvent } from './calendar-body.component';
import { RdsDatepickerIntl } from './datepicker.intl';
import { RdsMonthViewComponent } from './month-view.component';
import { RdsMultiYearViewComponent } from './multi-year-view.component';
import { RdsYearViewComponent } from './year-view.component';
import { DateRange } from './date-selection.model';
import { RdsCalendarView } from './calendar.types';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class RdsCalendarComponent<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {
    private readonly intl;
    private readonly cdr;
    private readonly dateAdapter;
    private readonly dateFormats;
    class: string;
    headerComponent: ComponentType<unknown> | null;
    _calendarHeaderPortal: Portal<unknown> | null;
    private _intlChanges;
    private _moveFocusOnNextTick;
    get startAt(): D | null;
    set startAt(value: D | null);
    private _startAt;
    startView: RdsCalendarView;
    get selected(): DateRange<D> | D | null;
    set selected(value: DateRange<D> | D | null);
    private _selected;
    get minDate(): D | null;
    set minDate(value: D | null);
    private _minDate;
    get maxDate(): D | null;
    set maxDate(value: D | null);
    private _maxDate;
    dateFilter: ((date: D) => boolean) | null;
    dateClass: RdsCalendarCellClassFunction<D> | null;
    comparisonStart: D | null;
    comparisonEnd: D | null;
    isMonthDisabled: boolean;
    isMultiYearDisabled: boolean;
    isYearDisabled: boolean;
    set showToggle(value: BooleanInput | null);
    get showToggle(): boolean | null;
    readonly selectedChange: EventEmitter<D | null>;
    readonly yearSelected: EventEmitter<D>;
    readonly monthSelected: EventEmitter<D>;
    readonly viewChanged: EventEmitter<RdsCalendarView>;
    readonly _userSelection: EventEmitter<RdsCalendarUserEvent<D | null>>;
    monthView: RdsMonthViewComponent<D> | null;
    yearView: RdsYearViewComponent<D> | null;
    multiYearView: RdsMultiYearViewComponent<D> | null;
    get activeDate(): D;
    set activeDate(value: D);
    private _clampedActiveDate;
    get currentView(): RdsCalendarView;
    set currentView(value: RdsCalendarView);
    get availableViews(): RdsCalendarView[];
    set availableViews(value: RdsCalendarView[]);
    private _currentView;
    private _availableViews;
    private _showToggle;
    stateChanges: Subject<void>;
    constructor();
    ngAfterContentInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    focusActiveCell(): void;
    updateTodaysDate(): void;
    _dateSelected(event: RdsCalendarUserEvent<D | null>): void;
    _yearSelectedInMultiYearView(event: RdsCalendarUserEvent<D>): void;
    _monthSelectedInYearView(event: RdsCalendarUserEvent<D>): void;
    private _goToDateInViewIfAvailable;
    private _getCurrentViewComponent;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsCalendarComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsCalendarComponent<any>, "rds-calendar", ["rdsCalendar"], { "headerComponent": { "alias": "headerComponent"; "required": false; }; "startAt": { "alias": "startAt"; "required": false; }; "startView": { "alias": "startView"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "minDate": { "alias": "minDate"; "required": false; }; "maxDate": { "alias": "maxDate"; "required": false; }; "dateFilter": { "alias": "dateFilter"; "required": false; }; "dateClass": { "alias": "dateClass"; "required": false; }; "comparisonStart": { "alias": "comparisonStart"; "required": false; }; "comparisonEnd": { "alias": "comparisonEnd"; "required": false; }; "isMonthDisabled": { "alias": "isMonthDisabled"; "required": false; }; "isMultiYearDisabled": { "alias": "isMultiYearDisabled"; "required": false; }; "isYearDisabled": { "alias": "isYearDisabled"; "required": false; }; "showToggle": { "alias": "showToggle"; "required": false; }; "availableViews": { "alias": "availableViews"; "required": false; }; }, { "selectedChange": "selectedChange"; "yearSelected": "yearSelected"; "monthSelected": "monthSelected"; "viewChanged": "viewChanged"; "_userSelection": "_userSelection"; }, never, never, false, never>;
    static ngAcceptInputType_isMonthDisabled: unknown;
    static ngAcceptInputType_isMultiYearDisabled: unknown;
    static ngAcceptInputType_isYearDisabled: unknown;
}
export declare class RdsCalendarHeaderComponent<D> {
    private readonly cdr;
    readonly intl: RdsDatepickerIntl;
    readonly calendar: RdsCalendarComponent<D>;
    private readonly dateAdapter;
    private readonly dateFormats;
    _buttonDescriptionId: string;
    constructor();
    get periodButtonText(): string;
    get periodButtonLabel(): string;
    get prevButtonLabel(): string;
    get nextButtonLabel(): string;
    currentPeriodClicked(): void;
    previousClicked(): void;
    nextClicked(): void;
    previousEnabled(): boolean;
    nextEnabled(): boolean;
    private _isSameView;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsCalendarHeaderComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsCalendarHeaderComponent<any>, "rds-calendar-header", ["rdsCalendarHeader"], {}, {}, never, ["*"], false, never>;
}
