import { FactoryProvider, OnDestroy } from '@angular/core';
import { DateAdapter } from './adapter';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class DateRange<D> {
    readonly start: D | null;
    readonly end: D | null;
    private _disableStructuralEquivalency;
    constructor(start: D | null, end: D | null);
}
export type ExtractDateTypeFromSelection<T> = T extends DateRange<infer D> ? D : NonNullable<T>;
export interface DateSelectionModelChange<S> {
    selection: S;
    source: unknown;
    oldValue?: S;
}
export declare abstract class RdsDateSelectionModel<S, D = ExtractDateTypeFromSelection<S>> implements OnDestroy {
    protected readonly _dateAdapter: DateAdapter<D>;
    private _selectionChanged;
    selection: S | null;
    selectionChanged: Observable<DateSelectionModelChange<S>>;
    protected constructor(_dateAdapter: DateAdapter<D>);
    updateSelection(value: S, source: unknown): void;
    ngOnDestroy(): void;
    protected _isValidDateInstance(date: D): boolean;
    abstract add(date: D | null): void;
    abstract isValid(): boolean;
    abstract isComplete(): boolean;
    abstract clone(): RdsDateSelectionModel<S, D>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsDateSelectionModel<any, any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RdsDateSelectionModel<any, any>>;
}
export declare class RdsSingleDateSelectionModel<D> extends RdsDateSelectionModel<D | null, D> {
    constructor(adapter: DateAdapter<D>);
    add(date: D | null): void;
    isValid(): boolean;
    isComplete(): boolean;
    clone(): RdsDateSelectionModel<D | null, D>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsSingleDateSelectionModel<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RdsSingleDateSelectionModel<any>>;
}
export declare class RdsRangeDateSelectionModel<D> extends RdsDateSelectionModel<DateRange<D>, D> {
    selection: DateRange<D>;
    constructor(dateAdapter: DateAdapter<D>);
    add(date: D | null): void;
    isValid(): boolean;
    isComplete(): boolean;
    clone(): RdsRangeDateSelectionModel<D>;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsRangeDateSelectionModel<any>, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<RdsRangeDateSelectionModel<any>>;
}
export declare function RDS_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent: RdsSingleDateSelectionModel<unknown>, dateAdapter: DateAdapter<unknown>): RdsSingleDateSelectionModel<unknown>;
export declare const RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider;
export declare function RDS_RANGE_DATE_SELECTION_MODEL_FACTORY(parent: RdsSingleDateSelectionModel<unknown>, dateAdapter: DateAdapter<unknown>): RdsSingleDateSelectionModel<unknown>;
export declare const RDS_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider;
