import { AfterViewInit, ElementRef, OnDestroy, QueryList } from '@angular/core';
import { RdsAbstractAutocompleteComponent } from './abstract-autocomplete.component';
import { RdsChipComponent } from '../chips';
import { RdsControlType } from '../form-field/control.type';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export declare class RdsMultiAutocompleteComponent<T> extends RdsAbstractAutocompleteComponent<T, T[]> implements AfterViewInit, OnDestroy {
    private readonly renderer;
    private readonly elementRef;
    private readonly dir;
    protected _value: T[];
    controlType: RdsControlType;
    set multiMinimumInputWidth(width: NumberInput);
    get multiMinimumInputWidth(): number;
    private _multiMinimumInputWidth;
    set multiMinimumInputWidthOffset(width: NumberInput);
    get multiMinimumInputWidthOffset(): number;
    private _multiMinimumInputWidthOffset;
    set disabled(disabled: BooleanInput);
    get disabled(): boolean;
    trackBy: keyof T | ((o: T) => unknown);
    protected trackByFn(o: T): unknown;
    protected valueContainer: QueryList<ElementRef<HTMLElement>>;
    protected autocompleteMulti: ElementRef<HTMLElement>;
    chips: QueryList<RdsChipComponent<T>>;
    protected focusedChip: RdsChipComponent<T> | null;
    protected disallowFocusEscape: boolean;
    private keyManager;
    private readonly chipActions;
    private _lastDestroyedFocusedChipIndex;
    ngAfterViewInit(): void;
    handleKeydown(event: KeyboardEvent): void;
    ngOnDestroy(): void;
    set value(value: T[]);
    get value(): T[];
    get values(): T[];
    protected setValueForClear(): void;
    protected onInputKeydown(event: KeyboardEvent): void;
    select(option: T): void;
    deselect(option?: T | null): void;
    isInputFilled(): boolean;
    hide(): void;
    protected chipFocus(chip: RdsChipComponent<T>): void;
    protected assignInputsToDropdown(): void;
    protected showCaret(): boolean;
    private recalculateInputWidth;
    private originatesFromChip;
    private setUpFocusManagement;
    private trackDestroyedFocusedChip;
    private isValidIndex;
    private trackChipSetChanges;
    private syncChipsState;
    private _redirectDestroyedChipFocus;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsMultiAutocompleteComponent<any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsMultiAutocompleteComponent<any>, "rds-multi-autocomplete", never, { "multiMinimumInputWidth": { "alias": "multiMinimumInputWidth"; "required": false; }; "multiMinimumInputWidthOffset": { "alias": "multiMinimumInputWidthOffset"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "trackBy": { "alias": "trackBy"; "required": false; }; }, {}, never, never, true, never>;
}
