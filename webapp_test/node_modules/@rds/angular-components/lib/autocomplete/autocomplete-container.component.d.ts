import { AfterContentChecked, ElementRef, OnInit, TrackByFunction } from '@angular/core';
import { RdsListItemSize } from '../list-item';
import { RdsAbstractAutocompleteComponent } from './abstract-autocomplete.component';
import { RdsAutocompleteOptionDirective } from './autocomplete-option.directive';
import * as i0 from "@angular/core";
export type RdsAutocompleteType = 'single' | 'multi';
export declare class RdsAutocompleteContainerComponent<T, ArrayOfFlatType extends T | T[]> implements AfterContentChecked, OnInit {
    private readonly cdr;
    private readonly intl;
    private readonly observer;
    private readonly destroyRef;
    private readonly elementRef;
    protected readonly config: {
        debounce: number;
        minSearchChars: number;
        optionsContainerMaxHeight: number;
        optionsContainerMinWidth: number;
        multiMinimumInputWidth: number;
        multiMinimumInputWidthOffset: number;
    };
    autocomplete: RdsAbstractAutocompleteComponent<T, ArrayOfFlatType>;
    size: RdsListItemSize;
    type: RdsAutocompleteType;
    set options(options: T[]);
    get options(): T[];
    protected _options: T[];
    protected selectedOptions: T[];
    protected availableOptions: T[];
    protected lastSelectedValue: T | null;
    protected loadingText: string;
    protected noDataText: string;
    protected newItemText: string;
    protected keyboardFocusedItem: RdsAutocompleteOptionDirective<T, ArrayOfFlatType> | null;
    private autocompleteOptions;
    private optionElements;
    protected autocompleteContainer: ElementRef<HTMLElement>;
    protected trackBy: TrackByFunction<T>;
    ngOnInit(): void;
    _addOption(option: HTMLElement, component: RdsAutocompleteOptionDirective<T, ArrayOfFlatType>): void;
    _deleteOption(option: HTMLElement): void;
    ngAfterContentChecked(): void;
    onKeydown(event: KeyboardEvent): void;
    protected shouldShowCreateNewOption(): boolean;
    protected getSelectedFirstOptions(): T[];
    private onDownArrow;
    private onUpArrow;
    private onEnter;
    private scrollToSelectedItem;
    private selectFirstItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsAutocompleteContainerComponent<any, any>, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsAutocompleteContainerComponent<any, any>, "rds-autocomplete-container", never, { "size": { "alias": "size"; "required": false; }; "type": { "alias": "type"; "required": true; }; "options": { "alias": "options"; "required": false; }; }, {}, never, never, true, never>;
}
