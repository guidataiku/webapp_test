import { RdsTreeControl } from './data-source/tree-control';
import { SelectionModel } from '@angular/cdk/collections';
import { RdsFlatTreeNode } from './tree.types';
interface SelectionModelOptions<T> {
    initiallySelectedValues?: T[];
    _emitChanges?: boolean;
    compareWith?: (o1: T, o2: T) => boolean;
}
export declare class RdsTreeSelectionModel<T extends {
    level: number;
} = RdsFlatTreeNode, K = T> extends SelectionModel<T> {
    private treeControl;
    constructor(treeControl: RdsTreeControl<T, K>, getLevel?: ((node: T) => number) | null, selectionModelOptions?: SelectionModelOptions<T>);
    descendantsAllSelected(node: T): boolean;
    /**
     * @returns false when all or none selected, otherwise true
     */
    descendantsPartiallySelected(node: T): boolean;
    /**
     * @returns true when at least one descendant is selected, otherwise false
     */
    descendantsAnySelected(node: T): boolean;
    itemSelectionToggle(node: T): void;
    leafItemSelectionToggle(node: T): void;
    checkAllParentsSelection(node: T): void;
    checkRootNodeSelection(node: T): void;
    getLevel: (node: T) => number;
    getParentNode(node: T): T | null;
}
export {};
