import { CdkTreeNode } from '@angular/cdk/tree';
import { AfterContentInit, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';
import { FocusableOption, FocusMonitor } from '@angular/cdk/a11y';
import { RdsTreeComponent } from './tree.component';
import * as i0 from "@angular/core";
export declare class RdsTreeNodeDirective<T> extends CdkTreeNode<T> implements AfterContentInit, OnChanges, OnDestroy, FocusableOption {
    protected readonly renderer: Renderer2;
    protected readonly focusMonitor: FocusMonitor;
    protected readonly tree: RdsTreeComponent<T>;
    get cssClasses(): string;
    get attrAriaExpanded(): boolean | undefined;
    get attrAriaLevel(): number;
    get styleLevel(): number;
    get attrTabIndex(): number;
    tabIndex: number;
    disabled: boolean;
    active: boolean;
    onArrowDown(): void;
    onArrowUp(): void;
    onExpand(event: KeyboardEvent): void;
    onCollapse(event: KeyboardEvent): void;
    constructor(tabIndex?: string);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    focus(): void;
    private _checkButtons;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsTreeNodeDirective<any>, [{ attribute: "tabindex"; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsTreeNodeDirective<any>, "rds-tree-node", ["rdsTreeNode"], { "tabIndex": { "alias": "tabIndex"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "active": { "alias": "active"; "required": false; }; }, {}, never, never, false, never>;
    static ngAcceptInputType_tabIndex: unknown;
    static ngAcceptInputType_disabled: unknown;
    static ngAcceptInputType_active: unknown;
}
