import { AfterContentInit, AfterViewInit, OnDestroy, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import { RdsAnchorMenuSectionData } from './anchor-menu.types';
import { RdsAnchorMenuSectionDirective } from './anchor-menu-section.directive';
import * as i0 from "@angular/core";
export declare class RdsAnchorMenuSectionsContainerDirective implements AfterContentInit, AfterViewInit, OnDestroy {
    private readonly destroyRef;
    private readonly activeRoute;
    private readonly intersectionObserver;
    private readonly cdr;
    private readonly _sections$;
    private readonly killIntersectionSubscriptions$;
    private readonly activeSection$;
    readonly sections$: Observable<RdsAnchorMenuSectionData[]>;
    readonly id: string;
    sectionQuery: QueryList<RdsAnchorMenuSectionDirective>;
    intersectionObserverOptions: IntersectionObserverInit;
    scrollIntoViewOptions: boolean | ScrollIntoViewOptions;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    queryListToAnchorMenuSectionData(list: QueryList<RdsAnchorMenuSectionDirective>): RdsAnchorMenuSectionData[];
    private onIntersectionEvent;
    private createIntersectionObservable;
    private isScrolledOutDownwards;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsAnchorMenuSectionsContainerDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<RdsAnchorMenuSectionsContainerDirective, "[rds-anchor-menu-sections-container], [rdsAnchorMenuSectionsContainer]", ["rdsAnchorMenuSectionsContainer"], { "intersectionObserverOptions": { "alias": "intersectionObserverOptions"; "required": false; }; "scrollIntoViewOptions": { "alias": "scrollIntoViewOptions"; "required": false; }; }, {}, ["sectionQuery"], never, false, never>;
}
