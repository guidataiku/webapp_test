import { AfterContentInit, AfterViewInit, DestroyRef, ElementRef, EventEmitter, OnDestroy, QueryList } from '@angular/core';
import { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';
import { RdsIconComponent } from '../icons';
import { ContentObserver } from '@angular/cdk/observers';
import { BooleanInput } from '@angular/cdk/coercion';
import * as i0 from "@angular/core";
export type RdsButtonSize = 's' | 'm' | 'l';
export declare class RdsButtonBaseComponent implements AfterContentInit, AfterViewInit, OnDestroy, FocusableOption {
    protected readonly elementRef: ElementRef<HTMLButtonElement>;
    protected readonly focusMonitor: FocusMonitor;
    protected readonly destroyRef: DestroyRef;
    protected readonly contentObserver: ContentObserver;
    protected buttonHostAttributesToClassMapper: {
        [key: string]: string;
    };
    protected _defaultSize: RdsButtonSize;
    protected _size: RdsButtonSize;
    protected _hasIcon: boolean;
    protected _hasFirstIcon: boolean;
    protected _hasLastIcon: boolean;
    protected _hasOnlyIcon: boolean;
    protected _pressed: boolean;
    get size(): RdsButtonSize;
    set size(size: RdsButtonSize);
    set pressed(isPressed: BooleanInput);
    get pressed(): boolean;
    get attrToggle(): boolean | null;
    toggle: boolean;
    get disabled(): boolean;
    get buttonClasses(): string[];
    get hasIcon(): boolean;
    icons: QueryList<RdsIconComponent>;
    pressedChange: EventEmitter<boolean>;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    changeToggle(): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    get hostElement(): HTMLButtonElement;
    protected checkIcons(): void;
    protected _getButtonClassName(): string;
    protected onContentChange(): void;
    private _getChild;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsButtonBaseComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsButtonBaseComponent, "ng-component", never, { "size": { "alias": "size"; "required": false; }; "pressed": { "alias": "pressed"; "required": false; }; "toggle": { "alias": "toggle"; "required": false; }; }, { "pressedChange": "pressedChange"; }, ["icons"], never, false, never>;
    static ngAcceptInputType_toggle: unknown;
}
