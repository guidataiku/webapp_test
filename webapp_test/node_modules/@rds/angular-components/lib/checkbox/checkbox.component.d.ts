import { FocusableOption, FocusOrigin } from '@angular/cdk/a11y';
import { BooleanInput, NumberInput } from '@angular/cdk/coercion';
import { AfterContentInit, AfterViewInit, DoCheck, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { RdsCheckboxChangeEvent } from './checkbox-change.event';
import { AnimationTriggerMetadata } from '@angular/animations';
import * as i0 from "@angular/core";
export declare const rdsCheckboxAnimations: {
    readonly transitionMessages: AnimationTriggerMetadata;
};
export type RdsCheckboxSize = 's' | 'm' | 'l';
export declare const enum TransitionCheckState {
    Init = 0,
    Checked = 1,
    Unchecked = 2,
    Indeterminate = 3
}
export declare class RdsCheckboxComponent implements ControlValueAccessor, AfterViewInit, AfterContentInit, DoCheck, OnDestroy, OnInit, FocusableOption {
    private readonly destroyRef;
    private readonly elementRef;
    private readonly cdr;
    private readonly focusMonitor;
    private readonly ngZone;
    private readonly parentForm;
    private readonly parentFormGroup;
    private readonly controlContainer;
    private _required;
    private _uniqueId;
    private _currentAnimationClass;
    private _errorState;
    private _tabIndex;
    private _indeterminate;
    private _control;
    private _currentCheckState;
    subscriptAnimationState: '' | 'enter';
    checkboxLabel: ElementRef;
    readonly hostClass = "rds-checkbox";
    readonly hostTabindex: string;
    get getHostId(): string;
    get hostIndeterminate(): boolean;
    get hostChecked(): boolean;
    get hostDisabled(): boolean;
    get errorState(): boolean;
    id: string;
    value: string;
    name: string;
    size: RdsCheckboxSize;
    ariaLabel: string;
    ariaLabelledby: string;
    ariaDescribedby: string;
    formControlName: string;
    set tabIndex(value: NumberInput);
    get tabIndex(): number;
    checked: boolean;
    disabled: boolean;
    set indeterminate(value: BooleanInput);
    get indeterminate(): boolean;
    get attrRequired(): boolean | null;
    set required(value: BooleanInput);
    get required(): boolean;
    readonly changed: EventEmitter<RdsCheckboxChangeEvent>;
    _inputElement: ElementRef<HTMLInputElement>;
    _onChange: (value: boolean) => void;
    _onTouched: () => any;
    get inputId(): string;
    get ariaChecked(): 'true' | 'false' | 'mixed';
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    get isErrorMessageVisible(): boolean;
    onLabelTextChange(): void;
    writeValue(value: boolean): void;
    registerOnChange(fn: (value: boolean) => void): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    onInputClick(event: Event): void;
    focus(origin?: FocusOrigin, options?: FocusOptions): void;
    private getAnimationClassForCheckStateTransition;
    private transitionCheckState;
    private toggle;
    private emitChangedEvent;
    private syncIndeterminate;
    static ɵfac: i0.ɵɵFactoryDeclaration<RdsCheckboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RdsCheckboxComponent, "rds-checkbox", never, { "id": { "alias": "id"; "required": false; }; "value": { "alias": "value"; "required": false; }; "name": { "alias": "name"; "required": false; }; "size": { "alias": "size"; "required": false; }; "ariaLabel": { "alias": "aria-label"; "required": false; }; "ariaLabelledby": { "alias": "aria-labelledby"; "required": false; }; "ariaDescribedby": { "alias": "aria-describedby"; "required": false; }; "formControlName": { "alias": "formControlName"; "required": false; }; "tabIndex": { "alias": "tabIndex"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "indeterminate": { "alias": "indeterminate"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, { "changed": "changed"; }, never, ["*", "rds-control-error", "rds-control-hint"], false, never>;
    static ngAcceptInputType_checked: unknown;
    static ngAcceptInputType_disabled: unknown;
}
