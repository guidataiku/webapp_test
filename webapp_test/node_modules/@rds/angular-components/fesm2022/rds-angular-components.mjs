import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';
import * as i1 from '@angular/cdk/portal';
import { TemplatePortal, PortalModule, CdkPortalOutlet, ComponentPortal, BasePortalOutlet, DomPortalOutlet, CdkPortal } from '@angular/cdk/portal';
import * as i1$1 from '@angular/common';
import { DOCUMENT, CommonModule, AsyncPipe, NgTemplateOutlet, isPlatformBrowser } from '@angular/common';
import * as i0 from '@angular/core';
import { InjectionToken, inject, TemplateRef, Directive, ChangeDetectorRef, ViewContainerRef, ElementRef, EventEmitter, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, HostBinding, Input, Output, ContentChild, ViewChild, Injectable, numberAttribute, SecurityContext, ErrorHandler, Attribute, HostListener, NgModule, QueryList, ContentChildren, DestroyRef, Renderer2, NgZone, forwardRef, isDevMode, ViewChildren, ComponentFactoryResolver, LOCALE_ID, Optional, SkipSelf, Injector, PLATFORM_ID, ApplicationRef, RendererStyleFlags2, Pipe } from '@angular/core';
import { UniqueSelectionDispatcher, SelectionModel, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy, DataSource as DataSource$1 } from '@angular/cdk/collections';
import { Subject, Observable, of, Subscription, EMPTY, merge, noop, BehaviorSubject, defer, fromEvent, distinctUntilChanged as distinctUntilChanged$1, skip, interval, timer, asyncScheduler, concat, debounceTime as debounceTime$1, filter as filter$1, race, asapScheduler, ReplaySubject, combineLatest, catchError, from } from 'rxjs';
import { distinctUntilChanged, startWith, filter, take, debounceTime, tap, map, finalize, share, switchMap, delay, takeUntil, timeout, withLatestFrom, skipWhile } from 'rxjs/operators';
import { trigger, state, style, transition, animate, query, animateChild, keyframes } from '@angular/animations';
import * as i1$5 from '@angular/cdk/a11y';
import { FocusMonitor, FocusKeyManager, LiveAnnouncer, ActiveDescendantKeyManager, ConfigurableFocusTrapFactory, A11yModule, InteractivityChecker, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader, AriaDescriber } from '@angular/cdk/a11y';
import { ENTER, hasModifierKey, SPACE, UP_ARROW, DOWN_ARROW, A, LEFT_ARROW, RIGHT_ARROW, HOME, END, BACKSPACE, DELETE, TAB, ESCAPE, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';
import { coerceElement, coerceBooleanProperty, coerceStringArray, _isNumberValue } from '@angular/cdk/coercion';
import { HttpClient, HttpRequest, HttpEventType } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import * as i1$2 from '@angular/cdk/observers';
import { ContentObserver, ObserversModule } from '@angular/cdk/observers';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i1$3 from '@angular/cdk/overlay';
import { ScrollStrategyOptions, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule, Overlay, OverlayConfig, ScrollDispatcher as ScrollDispatcher$1 } from '@angular/cdk/overlay';
import * as i6 from '@angular/forms';
import { NgForm, FormGroupDirective, ControlContainer, Validators, NG_VALUE_ACCESSOR, ReactiveFormsModule, NgControl, FormControl, NG_VALIDATORS, FormsModule, FormControlName, NgModel, CheckboxRequiredValidator } from '@angular/forms';
import { ViewportRuler, CdkScrollableModule, CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';
import { getSupportedInputTypes, Platform, PlatformModule, normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { Directionality, BidiModule } from '@angular/cdk/bidi';
import * as i1$4 from 'ngx-lottie';
import { LottieComponent } from 'ngx-lottie';
import { RouterLink, ActivatedRoute, RouterLinkActive } from '@angular/router';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import { CdkStepLabel, CdkStepHeader, CdkStepper, CdkStep, STEPPER_GLOBAL_OPTIONS, CdkStepperNext, CdkStepperPrevious, CdkStepperModule } from '@angular/cdk/stepper';
import * as i1$6 from '@angular/cdk/table';
import { CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, DataSource, CdkTextColumn, CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkTableModule } from '@angular/cdk/table';
import { RdsThemeDark, RdsThemeLight } from '@rds/core';
import { FlatTreeControl, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, CdkTree, CdkTreeNode, CdkTreeNodeToggle, CdkTreeNodeDef, CdkTreeModule } from '@angular/cdk/tree';

const RDS_ACCORDION = new InjectionToken('RDS_ACCORDION');

// export const EXPANSION_PANEL_ANIMATION_TIMING = `225ms cubic-bezier(0.4,0.0,0.2,1)`;
const EXPANSION_PANEL_ANIMATION_TIMING$1 = `350ms ease`;
const rdsExpansionAnimations = {
    indicatorRotate: trigger('indicatorRotate', [
        state('collapsed, void', style({ transform: 'rotate(0deg)' })),
        state('expanded', style({ transform: 'rotate(180deg)' })),
        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING$1)),
    ]),
    bodyExpansion: trigger('bodyExpansion', [
        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),
        state('expanded', style({ height: '*', visibility: 'visible' })),
        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING$1)),
    ]),
};

class RdsExpansionPanelContentDirective {
    constructor() {
        this._template = inject(TemplateRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsExpansionPanelContentDirective, selector: "ng-template[rdsExpansionPanelContent], ng-template[rds-expansion-panel-content]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[rdsExpansionPanelContent], ng-template[rds-expansion-panel-content]',
                }]
        }] });

let uniqueId$4 = 0;
class RdsExpansionPanelComponent extends CdkAccordionItem {
    get togglePosition() {
        return (this._togglePosition || (this.accordion && this.accordion.togglePosition));
    }
    set togglePosition(value) {
        this._togglePosition = value;
    }
    set expanded(value) {
        super.expanded = value;
    }
    get expanded() {
        return super.expanded;
    }
    constructor() {
        super(inject(RDS_ACCORDION, {
            optional: true,
            skipSelf: true,
        }), inject(ChangeDetectorRef), inject(UniqueSelectionDispatcher));
        this.accordion = inject(RDS_ACCORDION, {
            optional: true,
            skipSelf: true,
        });
        this.viewContainerRef = inject(ViewContainerRef);
        this.document = inject(DOCUMENT);
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this.class = 'rds-expansion-panel';
        this.afterExpand = new EventEmitter();
        this.afterCollapse = new EventEmitter();
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this.expandedChange = new EventEmitter();
        this._inputChanges = new Subject();
        this._headerId = `rds-expansion-panel-header-${uniqueId$4++}`;
        this._bodyAnimationDone = new Subject();
        this._bodyAnimationDone
            .pipe(distinctUntilChanged((x, y) => {
            return x.fromState === y.fromState && x.toState === y.toState;
        }))
            .subscribe((event) => {
            if (event.fromState !== 'void') {
                if (event.toState === 'expanded') {
                    this.afterExpand.emit();
                }
                else if (event.toState === 'collapsed') {
                    this.afterCollapse.emit();
                }
            }
        });
    }
    _getExpandedState() {
        return this.expanded ? 'expanded' : 'collapsed';
    }
    toggle() {
        this.expanded = !this.expanded;
    }
    close() {
        this.expanded = false;
    }
    open() {
        this.expanded = true;
    }
    ngAfterContentInit() {
        this.focusMonitor.monitor(this.elementRef, true);
        if (this._lazyContent) {
            this.opened
                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))
                .subscribe(() => {
                this._portal = new TemplatePortal(this._lazyContent._template, this.viewContainerRef);
            });
        }
    }
    ngOnChanges(changes) {
        this._inputChanges.next(changes);
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.focusMonitor.stopMonitoring(this.elementRef);
        this._bodyAnimationDone.complete();
        this._inputChanges.complete();
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.elementRef, origin, options);
        }
        else {
            this.elementRef.nativeElement.focus(options);
        }
    }
    _containsFocus() {
        if (this._body) {
            const focusedElement = this.document.activeElement;
            const bodyElement = this._body.nativeElement;
            return (focusedElement === bodyElement || bodyElement.contains(focusedElement));
        }
        return false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsExpansionPanelComponent, selector: "rds-expansion-panel", inputs: { togglePosition: "togglePosition", disabled: ["disabled", "disabled", booleanAttribute], expanded: ["expanded", "expanded", booleanAttribute] }, outputs: { afterExpand: "afterExpand", afterCollapse: "afterCollapse", opened: "opened", closed: "closed", expandedChange: "expandedChange" }, host: { properties: { "class": "this.class", "class.rds-disabled": "this.disabled", "class.rds-expanded": "this.expanded" } }, providers: [{ provide: RDS_ACCORDION, useValue: undefined }], queries: [{ propertyName: "_lazyContent", first: true, predicate: RdsExpansionPanelContentDirective, descendants: true }], viewQueries: [{ propertyName: "_body", first: true, predicate: ["body"], descendants: true }], exportAs: ["rdsExpansionPanel"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: ` <ng-content select="rds-expansion-panel-header" />
    <div
      class="rds-expansion-panel-content"
      role="region"
      [@bodyExpansion]="_getExpandedState()"
      (@bodyExpansion.done)="_bodyAnimationDone.next($event)"
      [attr.aria-labelledby]="_headerId"
      [id]="id"
      #body
    >
      <div class="rds-expansion-panel-body">
        <ng-content />
        <ng-template [cdkPortalOutlet]="_portal" />
      </div>
    </div>`, isInline: true, styles: [".rds-accordion{width:100%}.rds-accordion .rds-expansion-panel{box-sizing:content-box;display:flex;flex-direction:column;position:relative;overflow:hidden;padding-bottom:0;border-radius:0;border-bottom:1px solid var(--rds-color-grey-2)}.rds-accordion .rds-expansion-panel:hover:not(.rds-disabled){border-bottom:2px solid var(--rds-color-informative-hover)}.rds-accordion .rds-expansion-panel:hover:not(.rds-disabled) .rds-expansion-panel-header{padding:16px 0 14px}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled){padding-bottom:19px}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled):hover{padding-bottom:18px;border-bottom:2px solid var(--rds-color-informative-hover)}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled) .rds-expansion-panel-header{padding:16px 0}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled) .rds-expansion-panel-header:hover{padding:16px 0}.rds-accordion .rds-expansion-panel.cdk-focused.cdk-keyboard-focused:not(.rds-disabled){outline:2px solid var(--rds-color-stroke-active-focus)}.rds-accordion .rds-expansion-panel.rds-disabled{border-bottom-color:var(--rds-color-grey-2)}.rds-accordion .rds-expansion-panel.rds-disabled .rds-expansion-panel-content{color:var(--rds-color-disabled)}.rds-accordion .rds-expansion-panel.rds-disabled.rds-expanded{padding-bottom:19px}.rds-accordion .rds-expansion-panel.rds-disabled.rds-expanded .rds-expansion-panel-header{padding:16px 0}.rds-accordion .rds-expansion-panel.rds-disabled:hover{border-bottom:1px solid var(--rds-color-grey-2)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{color:var(--rds-color-low-contrast);display:flex;flex-direction:row;align-items:center;padding:16px 0 15px;border:none;cursor:pointer}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:hover,.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:focus{outline:none}@media (max-width: 767.999999px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-indicator{color:var(--rds-color-low-contrast)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:hover,.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:hover .rds-expansion-indicator{color:var(--rds-color-informative-hover)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header.rds-expansion-toggle-indicator-before{flex-direction:row-reverse}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header.rds-expansion-toggle-indicator-before .rds-expansion-indicator{margin:0 12px 0 0}[dir=rtl] .rds-accordion .rds-expansion-panel .rds-expansion-panel-header.rds-expansion-toggle-indicator-before .rds-expansion-indicator{margin:0 0 0 12px}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header[aria-disabled=true]{color:var(--rds-color-disabled);cursor:default}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header[aria-disabled=true] .rds-expansion-indicator{color:var(--rds-color-disabled)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-panel-header-title{margin-right:0;margin-left:16px}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-panel-header-title>*{font-size:inherit;font-family:inherit;font-weight:inherit;line-height:inherit}.rds-accordion .rds-expansion-panel .rds-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.rds-accordion.rds-accordion-size-s .rds-expansion-panel .rds-expansion-panel-header{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n"], dependencies: [{ kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], animations: [rdsExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-expansion-panel', exportAs: 'rdsExpansionPanel', template: ` <ng-content select="rds-expansion-panel-header" />
    <div
      class="rds-expansion-panel-content"
      role="region"
      [@bodyExpansion]="_getExpandedState()"
      (@bodyExpansion.done)="_bodyAnimationDone.next($event)"
      [attr.aria-labelledby]="_headerId"
      [id]="id"
      #body
    >
      <div class="rds-expansion-panel-body">
        <ng-content />
        <ng-template [cdkPortalOutlet]="_portal" />
      </div>
    </div>`, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [rdsExpansionAnimations.bodyExpansion], providers: [{ provide: RDS_ACCORDION, useValue: undefined }], styles: [".rds-accordion{width:100%}.rds-accordion .rds-expansion-panel{box-sizing:content-box;display:flex;flex-direction:column;position:relative;overflow:hidden;padding-bottom:0;border-radius:0;border-bottom:1px solid var(--rds-color-grey-2)}.rds-accordion .rds-expansion-panel:hover:not(.rds-disabled){border-bottom:2px solid var(--rds-color-informative-hover)}.rds-accordion .rds-expansion-panel:hover:not(.rds-disabled) .rds-expansion-panel-header{padding:16px 0 14px}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled){padding-bottom:19px}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled):hover{padding-bottom:18px;border-bottom:2px solid var(--rds-color-informative-hover)}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled) .rds-expansion-panel-header{padding:16px 0}.rds-accordion .rds-expansion-panel.rds-expanded:not(.rds-disabled) .rds-expansion-panel-header:hover{padding:16px 0}.rds-accordion .rds-expansion-panel.cdk-focused.cdk-keyboard-focused:not(.rds-disabled){outline:2px solid var(--rds-color-stroke-active-focus)}.rds-accordion .rds-expansion-panel.rds-disabled{border-bottom-color:var(--rds-color-grey-2)}.rds-accordion .rds-expansion-panel.rds-disabled .rds-expansion-panel-content{color:var(--rds-color-disabled)}.rds-accordion .rds-expansion-panel.rds-disabled.rds-expanded{padding-bottom:19px}.rds-accordion .rds-expansion-panel.rds-disabled.rds-expanded .rds-expansion-panel-header{padding:16px 0}.rds-accordion .rds-expansion-panel.rds-disabled:hover{border-bottom:1px solid var(--rds-color-grey-2)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{color:var(--rds-color-low-contrast);display:flex;flex-direction:row;align-items:center;padding:16px 0 15px;border:none;cursor:pointer}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:hover,.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:focus{outline:none}@media (max-width: 767.999999px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-accordion .rds-expansion-panel .rds-expansion-panel-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-indicator{color:var(--rds-color-low-contrast)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:hover,.rds-accordion .rds-expansion-panel .rds-expansion-panel-header:hover .rds-expansion-indicator{color:var(--rds-color-informative-hover)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header.rds-expansion-toggle-indicator-before{flex-direction:row-reverse}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header.rds-expansion-toggle-indicator-before .rds-expansion-indicator{margin:0 12px 0 0}[dir=rtl] .rds-accordion .rds-expansion-panel .rds-expansion-panel-header.rds-expansion-toggle-indicator-before .rds-expansion-indicator{margin:0 0 0 12px}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header[aria-disabled=true]{color:var(--rds-color-disabled);cursor:default}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header[aria-disabled=true] .rds-expansion-indicator{color:var(--rds-color-disabled)}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-panel-header-title{margin-right:0;margin-left:16px}.rds-accordion .rds-expansion-panel .rds-expansion-panel-header .rds-expansion-panel-header-title>*{font-size:inherit;font-family:inherit;font-weight:inherit;line-height:inherit}.rds-accordion .rds-expansion-panel .rds-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.rds-accordion.rds-accordion-size-s .rds-expansion-panel .rds-expansion-panel-header{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], togglePosition: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-disabled']
            }], expanded: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-expanded']
            }], afterExpand: [{
                type: Output
            }], afterCollapse: [{
                type: Output
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], expandedChange: [{
                type: Output
            }], _lazyContent: [{
                type: ContentChild,
                args: [RdsExpansionPanelContentDirective]
            }], _body: [{
                type: ViewChild,
                args: ['body']
            }] } });

const TAB_INDEX_DEFAULT = 0;
const TAB_INDEX_NOT_FOCUSABLE = -1;

function getFirstFocusableChild(el) {
    return el.querySelector('button, a, input:not([type="hidden"]), select, textarea, [tabindex]:not([tabindex="-1"])');
}

var Breakpoint;
(function (Breakpoint) {
    Breakpoint[Breakpoint["S"] = 0] = "S";
    Breakpoint[Breakpoint["M"] = 768] = "M";
    Breakpoint[Breakpoint["L"] = 1024] = "L";
    Breakpoint[Breakpoint["XL"] = 1440] = "XL";
    Breakpoint[Breakpoint["XXL"] = 1672] = "XXL";
})(Breakpoint || (Breakpoint = {}));
class BreakpointUtil {
    static isMobile() {
        return window.outerWidth < Breakpoint.M;
    }
}

function isHoverSupported() {
    return window && window.matchMedia('(hover: hover)').matches;
}

function getScrollingAncestor(elOrElRef) {
    const el = coerceElement(elOrElRef);
    let scrollingAncestor = null;
    let parent = el.parentElement;
    while (parent && !scrollingAncestor) {
        if (parent.clientHeight > 0 && parent.scrollHeight > parent.clientHeight) {
            scrollingAncestor = parent;
        }
        else {
            parent = parent.parentElement;
        }
    }
    return scrollingAncestor;
}

/* eslint-disable @typescript-eslint/no-non-null-assertion */
class ResizeObserverFactory {
    create(callback) {
        return typeof ResizeObserver === 'undefined'
            ? null
            : new ResizeObserver(callback);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ResizeObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ResizeObserverFactory, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ResizeObserverFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
class DimensionsObserver {
    constructor() {
        this.resizeObserverFactory = inject(ResizeObserverFactory);
        this._observedElements = new Map();
    }
    ngOnDestroy() {
        this._observedElements.forEach((_, element) => this._cleanupObserver(element));
    }
    observe(elementOrRef) {
        const element = coerceElement(elementOrRef);
        return new Observable((observer) => {
            const stream = this._observeElement(element);
            const subscription = stream.subscribe(observer);
            return () => {
                subscription.unsubscribe();
                this._unobserveElement(element);
            };
        });
    }
    _observeElement(element) {
        if (!this._observedElements.has(element)) {
            const stream = new Subject();
            const observer = this.resizeObserverFactory.create((mutations) => stream.next(mutations));
            if (observer) {
                observer.observe(element);
            }
            this._observedElements.set(element, { observer, stream, count: 1 });
        }
        else {
            this._observedElements.get(element).count++;
        }
        return this._observedElements.get(element).stream;
    }
    _unobserveElement(element) {
        if (this._observedElements.has(element)) {
            this._observedElements.get(element).count--;
            if (!this._observedElements.get(element).count) {
                this._cleanupObserver(element);
            }
        }
    }
    _cleanupObserver(element) {
        if (this._observedElements.has(element)) {
            const { observer, stream } = this._observedElements.get(element);
            if (observer) {
                observer.disconnect();
            }
            stream.complete();
            this._observedElements.delete(element);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DimensionsObserver, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DimensionsObserver, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DimensionsObserver, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
/**
 * Directive that triggers a callback whenever the content of
 * its associated element has changed.
 */
class RdsObserveResizeDirective {
    constructor() {
        this.dimensionsObserver = inject(DimensionsObserver);
        this.elementRef = inject(ElementRef);
        this.rdsObserveResize = new EventEmitter();
        this._disabled = false;
        this._currentSubscription = null;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
    }
    get disabled() {
        return this._disabled;
    }
    set debounce(value) {
        this._debounce = numberAttribute(value);
        this._subscribe();
    }
    get debounce() {
        return this._debounce;
    }
    ngAfterContentInit() {
        if (!this._currentSubscription && !this.disabled) {
            this._subscribe();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        const stream = this.dimensionsObserver.observe(this.elementRef);
        this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.rdsObserveResize);
    }
    _unsubscribe() {
        this._currentSubscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsObserveResizeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsObserveResizeDirective, isStandalone: true, selector: "[rdsObserveResize]", inputs: { disabled: ["rdsObserveResizeDisabled", "disabled"], debounce: "debounce" }, outputs: { rdsObserveResize: "rdsObserveResize" }, exportAs: ["rdsObserveResize"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsObserveResizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsObserveResize]',
                    exportAs: 'rdsObserveResize',
                    standalone: true,
                }]
        }], propDecorators: { rdsObserveResize: [{
                type: Output
            }], disabled: [{
                type: Input,
                args: ['rdsObserveResizeDisabled']
            }], debounce: [{
                type: Input
            }] } });

class ErrorStateMatcher {
    isErrorState(control, form) {
        return isErrorState(control, form);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ErrorStateMatcher, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

// IMPORTANT: THIS FILE IS AUTO GENERATED! ANY CHANGES WILL BE OVERWRITTEN DURING BUILD PROCESS
const RDS_VERSION = '4.9.1';
const RDS_VERSION_AS_FILENAME_SUFFIX = '--v4_9_1';

const updateErrorState = (errorState, parentFormGroup, parentForm, control, matcher) => {
    const oldState = errorState;
    const parent = parentFormGroup || parentForm;
    const newState = matcher instanceof ErrorStateMatcher
        ? matcher.isErrorState(control, parent)
        : isErrorState(control, parent);
    if (newState !== oldState) {
        return newState;
    }
    return oldState;
};
const isErrorState = (control, form) => {
    return !!(control &&
        control.invalid &&
        (control.touched || (form && form.submitted)));
};

class IconLoaderErrors {
    static noHttpProviderError() {
        return Error('Could not find HttpClient provider for use with Rds Icons. ' +
            'Please provide the HttpClient by `provideHttpClient()` method in the providers for' +
            ' standalone application or include the HttpClientModule from @angular/common/http in your ' +
            'app imports.');
    }
    static iconUrlFailedToSanitize(url) {
        return Error(`The URL provided to RdsIconRegistry was not trusted as a resource URL ` +
            `via Angular's DomSanitizer. Attempted URL was "${url}".`);
    }
    static invalidNamespaceOrIconNameError(namespace, iconName) {
        return Error(`Cannot find icon when namespace or iconName is invalid. Attempted namespace was <${namespace}> and iconName was <${iconName}>`);
    }
    static svgTagNotFound() {
        return Error('<svg> tag not found in svg string');
    }
}

const RDS_ICON_LOADER_CONFIG = new InjectionToken('RDS_ICON_LOADER_CONFIG');

// in case of change remember to modify create-svg-symbols.js accordingly
const getAllIconsFilename = (namespace) => `_all-${namespace}`;
class IconConfig {
    constructor(data) {
        this.url = '';
        if (isSVGElement(data)) {
            this.svgElement = data;
        }
        else {
            this.url = data;
        }
    }
}
function isSVGElement(data) {
    return typeof data !== 'string' && 'nodeName' in data;
}
function getSvgHref(namespace, name) {
    return `/assets/icons/${namespace}/${name}${RDS_VERSION_AS_FILENAME_SUFFIX}.svg#${name}`;
}
/**
 * Service to load icons used by the `<rds-icon>` component.
 * Icons are get from, assets/icons/{namespace}/{iconName}
 */
class RdsIconLoader {
    // Keys are of in the format namespace:icon
    static { this.BASE_URL = '/'; }
    static { this.BASE_URL_FETCHED = false; }
    static _getBaseUrl() {
        if (!RdsIconLoader.BASE_URL_FETCHED) {
            const baseTag = document.getElementsByTagName('base')[0];
            if (!baseTag || !baseTag.href || baseTag.href === '') {
                RdsIconLoader.BASE_URL = '/';
            }
            else {
                RdsIconLoader.BASE_URL = baseTag.href;
            }
            RdsIconLoader.BASE_URL_FETCHED = true;
        }
        return RdsIconLoader.BASE_URL;
    }
    constructor() {
        this.config = inject(RDS_ICON_LOADER_CONFIG, { optional: true });
        this.httpClient = inject(HttpClient, { optional: true });
        this.document = inject(DOCUMENT, { optional: true });
        this.domSanitizer = inject(DomSanitizer);
        this.iconConfigsCache = new Map();
        this.iconFetchesInProgress = new Map();
        this.allIcons = {};
        this.preloadAll = false;
        this.handleConfig(this.config);
    }
    preloadSelectedIcons(selectedIcons) {
        Object.entries(selectedIcons).forEach(([namespace, icons]) => {
            for (const iconName of icons) {
                this.getSvgIcon(iconName, namespace).subscribe();
            }
        });
    }
    /**
     * Returns an Observable with the icon (as an `<svg>` SVGelement) for the given name
     * and namespace.
     * @param name Name of the icon to be retrieved.
     * @param namespace Namespace in which to look for the icon.
     */
    getSvgIcon(name, namespace) {
        if (this.preloadAll) {
            return this.getFromAllIconsFile(name, namespace);
        }
        const iconConfig = this.getOrCreateIconConfig(name, namespace);
        return this._getSvgElementFromIconConfig(iconConfig);
    }
    ngOnDestroy() {
        this.iconConfigsCache.clear();
    }
    getFromAllIconsFile(name, namespace) {
        if (this.allIcons[namespace]) {
            return of(this.buildFromSymbol(name, namespace));
        }
        const iconConfig = this.getOrCreateIconConfig(name, namespace);
        return this._fetchIcon(iconConfig).pipe(tap((svgText) => {
            this.allIcons[namespace] = this._convertSVGStringToSvgElement(svgText);
        }), map(() => this.buildFromSymbol(name, namespace)));
    }
    getOrCreateIconConfig(name, namespace) {
        const keyName = this.preloadAll ? getAllIconsFilename(namespace) : name;
        const key = iconKey(namespace, keyName);
        return (this.iconConfigsCache.get(key) ||
            this._addIconConfigToCache(namespace, name));
    }
    _addIconConfigToCache(namespace, iconName) {
        if (!namespace || !iconName) {
            throw IconLoaderErrors.invalidNamespaceOrIconNameError(namespace, iconName);
        }
        const url = this._buildIconUrl(namespace, iconName);
        const iconConfig = new IconConfig(url);
        this.iconConfigsCache.set(iconKey(namespace, iconName), iconConfig);
        return iconConfig;
    }
    _buildIconUrl(namespace, iconName) {
        if (this.preloadAll) {
            iconName = getAllIconsFilename(namespace);
        }
        const safeResourceUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(RdsIconLoader._getBaseUrl() +
            `assets/icons/${namespace}/${iconName}${RDS_VERSION_AS_FILENAME_SUFFIX}.svg`);
        const url = this.domSanitizer.sanitize(SecurityContext.RESOURCE_URL, safeResourceUrl);
        if (!url) {
            throw IconLoaderErrors.iconUrlFailedToSanitize(safeResourceUrl);
        }
        return url;
    }
    _getSvgElementFromIconConfig(iconConfig) {
        const svgElement = iconConfig.svgElement;
        if (svgElement) {
            // We already have the SVG element for this icon, return a copy.
            return of(cloneSvg(svgElement));
        }
        else {
            // Fetch the icon from the iconConfig's URL, cache it, and return a copy.
            return this._fetchIcon(iconConfig).pipe(map((svgText) => this._buildSvgElement(svgText)), tap((builtSvgElement) => (iconConfig.svgElement = builtSvgElement)), map((builtSvgElement) => cloneSvg(builtSvgElement)));
        }
    }
    _fetchIcon(iconConfig) {
        const { url } = iconConfig;
        if (!this.httpClient) {
            throw IconLoaderErrors.noHttpProviderError();
        }
        const inProgressFetch = this.iconFetchesInProgress.get(url);
        if (inProgressFetch) {
            return inProgressFetch;
        }
        const req = this.httpClient.get(url, { responseType: 'text' }).pipe(finalize(() => this.iconFetchesInProgress.delete(url)), share());
        this.iconFetchesInProgress.set(url, req);
        return req;
    }
    _buildSvgElement(responseText) {
        const svgElement = this._convertSVGStringToSvgElement(responseText);
        this._setDefaultSvgAttributes(svgElement);
        return svgElement;
    }
    buildFromSymbol(name, namespace) {
        const symbol = this.allIcons[namespace]?.querySelector(`#${name}`);
        const svgString = symbol
            ? `<svg ${symbol.outerHTML.slice(7, -9)}</svg>`
            : '<svg></svg>';
        return this._convertSVGStringToSvgElement(svgString);
    }
    _convertSVGStringToSvgElement(svgString) {
        const div = this.document.createElement('DIV');
        div.innerHTML = svgString;
        const svg = div.querySelector('svg');
        if (svg) {
            return svg;
        }
        throw IconLoaderErrors.svgTagNotFound();
    }
    _setDefaultSvgAttributes(svg) {
        svg.setAttribute('fit', '');
        svg.setAttribute('height', '100%');
        svg.setAttribute('width', '100%');
        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
        svg.setAttribute('viewBox', '0 0 24 24');
        return svg;
    }
    handleConfig(config) {
        if (config?.preloadSelected) {
            config.preloadSelected === 'all'
                ? (this.preloadAll = true)
                : this.preloadSelectedIcons(config.preloadSelected);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
function cloneSvg(svg) {
    return svg.cloneNode(true);
}
function iconKey(namespace, name) {
    return namespace + ':' + name;
}

class RdsIconComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.iconLoader = inject(RdsIconLoader);
        this.errorHandler = inject(ErrorHandler);
        this.namespace = 'filled';
        this.icon = null;
        this.hostClass = 'rds-icon';
        this.hostAriaHidden = 'true';
        this.currentIconFetch = Subscription.EMPTY;
    }
    ngOnChanges(changes) {
        const namespaceChanges = changes['namespace'];
        const iconChanges = changes['icon'];
        // Update the inline SVG if the icon or namespace inputs changed, to avoid unnecessary DOM operations.
        if (iconChanges || namespaceChanges) {
            this.currentIconFetch.unsubscribe();
            if (this.icon) {
                this.currentIconFetch = this.iconLoader
                    .getSvgIcon(this.icon, this.namespace)
                    .pipe(take(1))
                    .subscribe({
                    next: (svg) => this._setSvgIcon(svg),
                    error: (err) => {
                        const errorMessage = `Error retrieving icon ${this.namespace}:${this.icon}! ${err.message}`;
                        this.errorHandler.handleError(new Error(errorMessage));
                    },
                });
            }
            else if (iconChanges.previousValue) {
                this._removeSvgIcon();
            }
        }
    }
    ngOnDestroy() {
        this.currentIconFetch.unsubscribe();
    }
    _setSvgIcon(svgElement) {
        this._removeSvgIcon();
        this.elementRef.nativeElement.appendChild(svgElement);
    }
    _removeSvgIcon() {
        const layoutElement = this.elementRef.nativeElement;
        let childCount = layoutElement.childNodes.length;
        while (childCount--) {
            const child = layoutElement.childNodes[childCount];
            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                layoutElement.removeChild(child);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsIconComponent, isStandalone: true, selector: "rds-icon", inputs: { namespace: "namespace", icon: "icon" }, host: { properties: { "class": "this.hostClass", "attr.aria-hidden": "this.hostAriaHidden" } }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-icon',
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                    standalone: true,
                }]
        }], propDecorators: { namespace: [{
                type: Input
            }], icon: [{
                type: Input
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostAriaHidden: [{
                type: HostBinding,
                args: ['attr.aria-hidden']
            }] } });

class RdsExpansionPanelHeaderComponent {
    get attrId() {
        return this.panel._headerId;
    }
    get attrDisabled() {
        return this.panel.disabled;
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get disabled() {
        return this.panel.disabled;
    }
    get _isExpanded() {
        return this.panel.expanded;
    }
    get _getPanelId() {
        return this.panel.id;
    }
    get _isAfterTogglePosition() {
        return this.panel.togglePosition === 'after';
    }
    get _isBeforeTogglePosition() {
        return this.panel.togglePosition === 'before';
    }
    constructor(tabIndex) {
        this.panel = inject(RdsExpansionPanelComponent, { host: true });
        this.element = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.cdr = inject(ChangeDetectorRef);
        this._parentChangeSubscription = Subscription.EMPTY;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.class = 'rds-expansion-panel-header rds-focus-indicator';
        this.role = 'button';
        const accordionHideToggleChange = this.panel.accordion
            ? this.panel.accordion._stateChanges.pipe(filter((changes) => !!changes['togglePosition']))
            : EMPTY;
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
        this._parentChangeSubscription = merge(this.panel.opened, this.panel.closed, accordionHideToggleChange, this.panel._inputChanges.pipe(filter((changes) => {
            return !!(changes['disabled'] || changes['togglePosition']);
        }))).subscribe(() => this.cdr.markForCheck());
        this.panel.closed
            .pipe(filter(() => this.panel._containsFocus()))
            .subscribe(() => this.focusMonitor.focusVia(this.element, 'program'));
    }
    _toggle() {
        if (!this.disabled) {
            this.panel.toggle();
        }
    }
    _keydown(event) {
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this._toggle();
                }
                break;
            default:
                if (this.panel.accordion) {
                    this.panel.accordion._handleHeaderKeydown(event);
                }
                return;
        }
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.element, origin, options);
        }
        else {
            this.element.nativeElement.focus(options);
        }
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.element).subscribe((origin) => {
            if (origin && this.panel.accordion) {
                this.panel.accordion._handleHeaderFocus(this);
            }
        });
    }
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
        this.focusMonitor.stopMonitoring(this.element);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelHeaderComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsExpansionPanelHeaderComponent, selector: "rds-expansion-panel-header", inputs: { tabIndex: "tabIndex" }, host: { listeners: { "click": "_toggle()", "keydown": "_keydown($event)" }, properties: { "class": "this.class", "attr.role": "this.role", "attr.id": "this.attrId", "attr.aria-disabled": "this.attrDisabled", "tabIndex": "this.tabIndex", "attr.aria-expanded": "this._isExpanded", "class.rds-expanded": "this._isExpanded", "attr.aria-controls": "this._getPanelId", "class.rds-expansion-toggle-indicator-after": "this._isAfterTogglePosition", "class.rds-expansion-toggle-indicator-before": "this._isBeforeTogglePosition" } }, ngImport: i0, template: `<span class="rds-content">
      <ng-content select="rds-panel-title" />
      <ng-content />
    </span>
    <rds-icon
      [@indicatorRotate]="panel._getExpandedState()"
      class="rds-expansion-indicator"
      namespace="filled"
      icon="chevron_down"
    />`, isInline: true, dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], animations: [rdsExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-expansion-panel-header',
                    template: `<span class="rds-content">
      <ng-content select="rds-panel-title" />
      <ng-content />
    </span>
    <rds-icon
      [@indicatorRotate]="panel._getExpandedState()"
      class="rds-expansion-indicator"
      namespace="filled"
      icon="chevron_down"
    />`,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [rdsExpansionAnimations.indicatorRotate],
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], tabIndex: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['tabIndex']
            }], _isExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }, {
                type: HostBinding,
                args: ['class.rds-expanded']
            }], _getPanelId: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], _isAfterTogglePosition: [{
                type: HostBinding,
                args: ['class.rds-expansion-toggle-indicator-after']
            }], _isBeforeTogglePosition: [{
                type: HostBinding,
                args: ['class.rds-expansion-toggle-indicator-before']
            }], _toggle: [{
                type: HostListener,
                args: ['click']
            }], _keydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
class RdsExpansionPanelTitleDirective {
    constructor() {
        this.class = 'rds-expansion-panel-header-title';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsExpansionPanelTitleDirective, selector: "rds-panel-title", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-panel-title',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsIconsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsIconsModule, imports: [RdsIconComponent], exports: [RdsIconComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RdsIconComponent],
                    exports: [RdsIconComponent],
                }]
        }] });

let nextId$7 = 0;
class RdsAccordionDirective extends CdkAccordion {
    constructor() {
        super(...arguments);
        this._stateChanges = new Subject();
        this._openCloseAllActions = new Subject();
        this.id = `rds-accordion-${nextId$7++}`;
        this._ownHeaders = new QueryList();
        this.size = 'm';
        this.togglePosition = 'after';
    }
    get class() {
        return ['rds-accordion', `rds-accordion-size-${this.size}`];
    }
    ngAfterContentInit() {
        this._headers.changes
            .pipe(startWith(this._headers))
            .subscribe((headers) => {
            this._ownHeaders.reset(headers.filter((header) => header.panel.accordion === this));
            this._ownHeaders.notifyOnChanges();
        });
        this._keyManager = new FocusKeyManager(this._ownHeaders)
            .withWrap()
            .withHomeAndEnd();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._ownHeaders.destroy();
    }
    _handleHeaderKeydown(event) {
        this._keyManager.onKeydown(event);
    }
    _handleHeaderFocus(header) {
        this._keyManager.updateActiveItem(header);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAccordionDirective, selector: "rds-accordion", inputs: { size: "size", multi: ["multi", "multi", booleanAttribute], togglePosition: "togglePosition" }, host: { properties: { "class": "this.class", "class.rds-accordion-multi": "this.multi" } }, providers: [
            {
                provide: RDS_ACCORDION,
                useExisting: RdsAccordionDirective,
            },
        ], queries: [{ propertyName: "_headers", predicate: RdsExpansionPanelHeaderComponent, descendants: true }], exportAs: ["rdsAccordion"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-accordion',
                    exportAs: 'rdsAccordion',
                    providers: [
                        {
                            provide: RDS_ACCORDION,
                            useExisting: RdsAccordionDirective,
                        },
                    ],
                }]
        }], propDecorators: { _headers: [{
                type: ContentChildren,
                args: [RdsExpansionPanelHeaderComponent, { descendants: true }]
            }], size: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], multi: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-accordion-multi']
            }], togglePosition: [{
                type: Input
            }] } });

const ELEMENTS$b = [
    RdsAccordionDirective,
    RdsExpansionPanelComponent,
    RdsExpansionPanelHeaderComponent,
    RdsExpansionPanelTitleDirective,
    RdsExpansionPanelContentDirective,
];
class RdsAccordionModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionModule, declarations: [RdsAccordionDirective,
            RdsExpansionPanelComponent,
            RdsExpansionPanelHeaderComponent,
            RdsExpansionPanelTitleDirective,
            RdsExpansionPanelContentDirective], imports: [CommonModule, CdkAccordionModule, PortalModule, RdsIconComponent], exports: [RdsAccordionDirective,
            RdsExpansionPanelComponent,
            RdsExpansionPanelHeaderComponent,
            RdsExpansionPanelTitleDirective,
            RdsExpansionPanelContentDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionModule, imports: [CommonModule, CdkAccordionModule, PortalModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CdkAccordionModule, PortalModule, RdsIconComponent],
                    exports: [...ELEMENTS$b],
                    declarations: [...ELEMENTS$b],
                }]
        }] });

/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function throwInvalidSizeError(type, size) {
    throw new Error(`${getClassName(type)}: does not have '${size}' size`);
}
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function throwInvalidSizePropertyErrorForType(type) {
    throwInvalidSizePropertyError(getClassName(type));
}
function throwInvalidSizePropertyError(forValue) {
    throw new Error(`${forValue}: does not have size property`);
}
/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
function getClassName(type) {
    if (type && type.constructor && type.constructor.name) {
        return type.constructor.name;
    }
    else {
        throw new Error(`${type} is does not have a constructor`);
    }
}

class RdsButtonBaseComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.destroyRef = inject(DestroyRef);
        this.contentObserver = inject(ContentObserver);
        this.buttonHostAttributesToClassMapper = {};
        this._defaultSize = 'm';
        this._size = this._defaultSize;
        this._hasIcon = false;
        this._hasFirstIcon = false;
        this._hasLastIcon = false;
        this._hasOnlyIcon = false;
        this._pressed = false;
        this.toggle = false;
        this.pressedChange = new EventEmitter();
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm' && size !== 'l') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    set pressed(isPressed) {
        const value = this.pressed;
        this._pressed = booleanAttribute(isPressed);
        if (this.toggle && value !== this._pressed) {
            this.pressedChange.next(this._pressed);
        }
    }
    get pressed() {
        return this.toggle && this._pressed;
    }
    get attrToggle() {
        return this.toggle ? this.pressed : null;
    }
    get disabled() {
        return !!this.elementRef.nativeElement.getAttribute('disabled');
    }
    get buttonClasses() {
        const classesMappedFromHostAttributes = Object.entries(this.buttonHostAttributesToClassMapper)
            .filter(([hostAttribute]) => this.hostElement.hasAttribute(hostAttribute))
            .map(([, buttonClass]) => buttonClass);
        const additionalClasses = [];
        if (this._hasFirstIcon) {
            additionalClasses.push('rds-button--with-left-icon');
        }
        if (this._hasLastIcon) {
            additionalClasses.push('rds-button--with-right-icon');
        }
        if (this._hasOnlyIcon) {
            additionalClasses.push('rds-button--with-only-icon');
        }
        return [
            'rds-button',
            `rds-button-${this.size}`,
            ...classesMappedFromHostAttributes,
            ...additionalClasses,
        ];
    }
    get hasIcon() {
        return this._hasIcon;
    }
    ngAfterContentInit() {
        this.checkIcons();
        this.icons.changes.subscribe(() => this.checkIcons());
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true);
        this.contentObserver
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.onContentChange());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    changeToggle() {
        if (this.toggle && !this.disabled) {
            this.pressed = !this.pressed;
        }
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.hostElement, origin, options);
    }
    get hostElement() {
        return this.elementRef.nativeElement;
    }
    checkIcons() {
        this._hasIcon = this.icons.length > 0;
        if (this.hasIcon) {
            const btnContent = this.elementRef.nativeElement;
            const firstChild = this._getChild('first');
            const lastChild = this._getChild('last');
            if (firstChild && firstChild.nodeName) {
                this._hasFirstIcon = firstChild.nodeName.toUpperCase() === 'RDS-ICON';
            }
            else {
                this._hasFirstIcon = false;
            }
            if (lastChild && lastChild.nodeName) {
                this._hasLastIcon =
                    btnContent.lastChild?.nodeName.toUpperCase() === 'RDS-ICON';
            }
            else {
                this._hasLastIcon = false;
            }
            if (firstChild && firstChild === lastChild) {
                this._hasOnlyIcon = true;
                this._hasLastIcon = false;
                this._hasFirstIcon = false;
            }
            else {
                this._hasOnlyIcon = false;
            }
        }
        else {
            this._hasLastIcon = false;
            this._hasLastIcon = false;
            this._hasOnlyIcon = false;
        }
    }
    _getButtonClassName() {
        return this.constructor.name;
    }
    onContentChange() {
        this.checkIcons();
    }
    _getChild(firstOrLast) {
        let currentChild = firstOrLast === 'first'
            ? this.elementRef.nativeElement.firstChild
            : this.elementRef.nativeElement.lastChild;
        while (!currentChild ||
            currentChild.nodeName.toUpperCase() === '#COMMENT') {
            if (!currentChild) {
                return null;
            }
            currentChild =
                firstOrLast === 'first'
                    ? currentChild.nextSibling
                    : currentChild.previousSibling;
        }
        return currentChild;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsButtonBaseComponent, selector: "ng-component", inputs: { size: "size", pressed: "pressed", toggle: ["toggle", "toggle", booleanAttribute] }, outputs: { pressedChange: "pressedChange" }, host: { listeners: { "click": "changeToggle()" }, properties: { "class.rds-button-active": "this.pressed", "attr.aria-pressed": "this.attrToggle", "class": "this.buttonClasses", "class.rds-button--with-icon": "this.hasIcon" } }, queries: [{ propertyName: "icons", predicate: RdsIconComponent }], ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonBaseComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { size: [{
                type: Input
            }], pressed: [{
                type: HostBinding,
                args: ['class.rds-button-active']
            }, {
                type: Input
            }], attrToggle: [{
                type: HostBinding,
                args: ['attr.aria-pressed']
            }], toggle: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonClasses: [{
                type: HostBinding,
                args: ['class']
            }], hasIcon: [{
                type: HostBinding,
                args: ['class.rds-button--with-icon']
            }], icons: [{
                type: ContentChildren,
                args: [RdsIconComponent]
            }], pressedChange: [{
                type: Output
            }], changeToggle: [{
                type: HostListener,
                args: ['click']
            }] } });

class RdsButtonComponent extends RdsButtonBaseComponent {
    constructor() {
        super(...arguments);
        this.buttonHostAttributesToClassMapper = {
            'rds-primary-button': 'rds-button--primary',
            'rds-warning-button': 'rds-button--warning',
            'rds-secondary-button': 'rds-button--secondary',
            'rds-secondary-warning-button': 'rds-button--secondary-warning',
            rdsPrimaryButton: 'rds-button--primary',
            rdsWarningButton: 'rds-button--warning',
            rdsSecondaryButton: 'rds-button--secondary',
            rdsSecondaryWarningButton: 'rds-button--secondary-warning',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsButtonComponent, selector: "\n    button[rds-primary-button],\n    button[rds-warning-button],\n    button[rds-secondary-button],\n    button[rds-secondary-warning-button],\n    button[rdsPrimaryButton],\n    button[rdsWarningButton],\n    button[rdsSecondaryButton],\n    button[rdsSecondaryWarningButton],\n  ", usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: `
    button[rds-primary-button],
    button[rds-warning-button],
    button[rds-secondary-button],
    button[rds-secondary-warning-button],
    button[rdsPrimaryButton],
    button[rdsWarningButton],
    button[rdsSecondaryButton],
    button[rdsSecondaryWarningButton],
  `,
                    template: '<ng-content />',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });

function throwRdsButtonInvalidIconOnlyError(buttonType) {
    throw Error(`${buttonType}: does not have icon only variant`);
}
function throwRdsButtonInvalidOtherIconOnlyError(buttonType) {
    throw Error(`${buttonType}: does have icon only variant`);
}

class RdsIconButtonComponent extends RdsButtonBaseComponent {
    constructor() {
        super(...arguments);
        this.buttonHostAttributesToClassMapper = {
            'rds-icon-button': 'rds-button--icon',
            rdsIconButton: 'rds-button--icon',
            'rds-icon-warning-button': 'rds-button--icon-warning',
            rdsnIconWarningButton: 'rds-button--icon-warning',
        };
        this._defaultSize = 's';
        this._size = this._defaultSize;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    checkIcons() {
        super.checkIcons();
        if (this.hasIcon && !this._hasOnlyIcon) {
            this.cleanIconProperties();
            throwRdsButtonInvalidOtherIconOnlyError(this._getButtonClassName());
        }
        this.cleanIconProperties();
    }
    cleanIconProperties() {
        this._hasFirstIcon = false;
        this._hasLastIcon = false;
        this._hasOnlyIcon = false;
        this._hasIcon = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: { size: "size" }, usesInheritance: true, ngImport: i0, template: `<ng-content />`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: `
    button[rds-icon-button],
    button[rdsIconButton],
    button[rds-icon-warning-button],
    button[rdsIconWarningButton],
  `,
                    template: `<ng-content />`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { size: [{
                type: Input
            }] } });

class RdsFabButtonComponent extends RdsButtonBaseComponent {
    constructor() {
        super(...arguments);
        this.buttonHostAttributesToClassMapper = {
            'rds-fab-button': 'rds-button--fab',
            rdsFabButton: 'rds-button--fab',
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFabButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsFabButtonComponent, selector: "\n    button[rds-fab-button],\n    button[rdsFabButton],\n  ", usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFabButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: `
    button[rds-fab-button],
    button[rdsFabButton],
  `,
                    template: '<ng-content />',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }] });

class RdsTextButtonComponent extends RdsButtonBaseComponent {
    constructor() {
        super(...arguments);
        this.buttonHostAttributesToClassMapper = {
            'rds-text-button': 'rds-button--text',
            rdsTextButton: 'rds-button--text',
            'rds-text-warning-button': 'rds-button--text-warning',
            rdsTextWarningButton: 'rds-button--text-warning',
        };
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm' && size !== 'l') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    checkIcons() {
        super.checkIcons();
        if (this._hasOnlyIcon) {
            throwRdsButtonInvalidIconOnlyError(this._getButtonClassName());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTextButtonComponent, selector: "\n    button[rds-text-button],\n    button[rdsTextButton],\n    button[rds-text-warning-button],\n    button[rdsTextWarningButton],\n  ", inputs: { size: "size" }, usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: `
    button[rds-text-button],
    button[rdsTextButton],
    button[rds-text-warning-button],
    button[rdsTextWarningButton],
  `,
                    template: '<ng-content />',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { size: [{
                type: Input
            }] } });

const ELEMENTS$a = [
    RdsButtonComponent,
    RdsIconButtonComponent,
    RdsFabButtonComponent,
    RdsTextButtonComponent,
];
class RdsButtonModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, declarations: [RdsButtonBaseComponent, RdsButtonComponent,
            RdsIconButtonComponent,
            RdsFabButtonComponent,
            RdsTextButtonComponent], imports: [CommonModule, ObserversModule, RdsIconComponent], exports: [RdsButtonComponent,
            RdsIconButtonComponent,
            RdsFabButtonComponent,
            RdsTextButtonComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, imports: [CommonModule, ObserversModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ObserversModule, RdsIconComponent],
                    declarations: [RdsButtonBaseComponent, ...ELEMENTS$a],
                    exports: [...ELEMENTS$a],
                }]
        }] });

const TYPE_TO_ICON = Object.freeze({
    info: 'info',
    warning: 'warning_triangle',
    error: 'close_circle',
    success: 'checkmark_circle',
});
class RdsAlertComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.closeAlert = new EventEmitter();
        this.icon = 'info';
        this._type = 'info';
        this._opened = true;
        this.showIcon = true;
        this.closable = false;
    }
    set type(value) {
        this._type = value;
        this.icon = TYPE_TO_ICON[this._type];
        this.cdr.markForCheck();
    }
    get type() {
        return this._type;
    }
    set opened(value) {
        const newValue = booleanAttribute(value);
        if (this._opened !== newValue) {
            this._opened = newValue;
            if (!this._opened) {
                this.closeAlert.emit();
            }
        }
    }
    get opened() {
        return this._opened;
    }
    onClose() {
        this.opened = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAlertComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAlertComponent, isStandalone: true, selector: "rds-alert", inputs: { type: "type", opened: "opened", showIcon: ["showIcon", "showIcon", booleanAttribute], closable: ["closable", "closable", booleanAttribute] }, outputs: { closeAlert: "closeAlert" }, ngImport: i0, template: "@if (opened) {\n  <div [className]=\"'rds-alert rds-alert-' + type\">\n    @if (showIcon) {\n      <rds-icon class=\"rds-alert-icon\" namespace=\"outlined\" [icon]=\"icon\" />\n    }\n    <div class=\"rds-alert-content\">\n      <ng-content />\n    </div>\n    @if (closable) {\n      <button\n        rds-icon-button\n        size=\"s\"\n        class=\"rds-alert-close\"\n        (click)=\"onClose()\"\n      >\n        <rds-icon namespace=\"outlined\" icon=\"close\" />\n      </button>\n    }\n  </div>\n}\n", styles: [".rds-alert{display:flex;align-items:center;border-radius:2px;padding:16px}@media (max-width: 767.999999px){.rds-alert{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-alert .rds-alert-icon{align-self:flex-start;margin-right:12px;width:24px;min-width:24px;max-width:24px;height:24px;min-height:24px;max-height:24px}.rds-alert-info{border-left:4px solid var(--rds-color-informative);background-color:var(--rds-color-alert-informative-bg)}.rds-alert-info .rds-alert-icon{color:var(--rds-color-informative)}.rds-alert-warning{border-left:4px solid var(--rds-color-warning);background-color:var(--rds-color-alert-warning-bg)}.rds-alert-warning .rds-alert-icon{color:var(--rds-color-warning)}.rds-alert-error{border-left:4px solid var(--rds-color-error);background-color:var(--rds-color-alert-error-bg)}.rds-alert-error .rds-alert-icon{color:var(--rds-color-error)}.rds-alert-success{border-left:4px solid var(--rds-color-success);background-color:var(--rds-color-alert-success-bg)}.rds-alert-success .rds-alert-icon{color:var(--rds-color-success)}.rds-alert .rds-alert-content{color:var(--rds-color-high-contrast);width:calc(100% - 12px)}.rds-alert .rds-alert-close{display:flex;justify-self:flex-end;margin-left:16px}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAlertComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-alert', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [RdsIconComponent, RdsButtonModule], template: "@if (opened) {\n  <div [className]=\"'rds-alert rds-alert-' + type\">\n    @if (showIcon) {\n      <rds-icon class=\"rds-alert-icon\" namespace=\"outlined\" [icon]=\"icon\" />\n    }\n    <div class=\"rds-alert-content\">\n      <ng-content />\n    </div>\n    @if (closable) {\n      <button\n        rds-icon-button\n        size=\"s\"\n        class=\"rds-alert-close\"\n        (click)=\"onClose()\"\n      >\n        <rds-icon namespace=\"outlined\" icon=\"close\" />\n      </button>\n    }\n  </div>\n}\n", styles: [".rds-alert{display:flex;align-items:center;border-radius:2px;padding:16px}@media (max-width: 767.999999px){.rds-alert{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-alert{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-alert .rds-alert-icon{align-self:flex-start;margin-right:12px;width:24px;min-width:24px;max-width:24px;height:24px;min-height:24px;max-height:24px}.rds-alert-info{border-left:4px solid var(--rds-color-informative);background-color:var(--rds-color-alert-informative-bg)}.rds-alert-info .rds-alert-icon{color:var(--rds-color-informative)}.rds-alert-warning{border-left:4px solid var(--rds-color-warning);background-color:var(--rds-color-alert-warning-bg)}.rds-alert-warning .rds-alert-icon{color:var(--rds-color-warning)}.rds-alert-error{border-left:4px solid var(--rds-color-error);background-color:var(--rds-color-alert-error-bg)}.rds-alert-error .rds-alert-icon{color:var(--rds-color-error)}.rds-alert-success{border-left:4px solid var(--rds-color-success);background-color:var(--rds-color-alert-success-bg)}.rds-alert-success .rds-alert-icon{color:var(--rds-color-success)}.rds-alert .rds-alert-content{color:var(--rds-color-high-contrast);width:calc(100% - 12px)}.rds-alert .rds-alert-close{display:flex;justify-self:flex-end;margin-left:16px}\n"] }]
        }], propDecorators: { closeAlert: [{
                type: Output
            }], type: [{
                type: Input
            }], opened: [{
                type: Input
            }], showIcon: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], closable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsAlertModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAlertModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsAlertModule, imports: [RdsAlertComponent], exports: [RdsAlertComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAlertModule, imports: [RdsAlertComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAlertModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [RdsAlertComponent],
                    imports: [RdsAlertComponent],
                }]
        }] });

class RdsAvatarDescriptionDirective {
    constructor() {
        this.class = 'rds-avatar-description';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarDescriptionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAvatarDescriptionDirective, isStandalone: true, selector: "rds-avatar-description, [rds-avatar-description], [rdsAvatarDescription]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarDescriptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-avatar-description, [rds-avatar-description], [rdsAvatarDescription]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const MAX_VISIBLE_AVATARS_IN_GROUP = 3;
const RDS_AVATAR_MAX_IN_GROUP = new InjectionToken('RDS_AVATAR_MAX_IN_GROUP', {
    providedIn: 'root',
    factory: () => MAX_VISIBLE_AVATARS_IN_GROUP,
});

class RdsAvatarIconDirective {
    constructor() {
        this.class = 'rds-avatar-icon';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAvatarIconDirective, isStandalone: true, selector: "rds-icon[rds-avatar-icon], rds-icon[rdsAvatarIcon]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-icon[rds-avatar-icon], rds-icon[rdsAvatarIcon]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsAvatarImageDirective {
    constructor() {
        this.class = 'rds-avatar-image';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarImageDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAvatarImageDirective, isStandalone: true, selector: "img[rds-avatar-image], img[rdsAvatarImage]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarImageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[rds-avatar-image], img[rdsAvatarImage]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsAvatarInitialsDirective {
    constructor() {
        this.class = 'rds-avatar-initials';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarInitialsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAvatarInitialsDirective, isStandalone: true, selector: "[rds-avatar-initials], [rdsAvatarInitials]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarInitialsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-avatar-initials], [rdsAvatarInitials]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsAvatarLabelDirective {
    constructor() {
        this.class = 'rds-avatar-label';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarLabelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAvatarLabelDirective, isStandalone: true, selector: "rds-avatar-label, [rds-avatar-label], [rdsAvatarLabel]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-avatar-label, [rds-avatar-label], [rdsAvatarLabel]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsAvatarComponent {
    get attrTabIndex() {
        return this.disableInteractions ? TAB_INDEX_NOT_FOCUSABLE : this.tabIndex;
    }
    get class() {
        const classes = ['rds-avatar', `rds-avatar-${this.size}`];
        if (this.disableInteractions) {
            classes.push('rds-avatar-disable-interactions');
        }
        return classes;
    }
    constructor(tabIndex) {
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this.cdr = inject(ChangeDetectorRef);
        this.contentObserver = inject(ContentObserver);
        this.destroyRef = inject(DestroyRef);
        this.tabIndex = TAB_INDEX_DEFAULT;
        this.size = 'm';
        this.disableInteractions = false;
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, false);
        this.contentObserver
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    _hasHiddenStyle() {
        return this.elementRef.nativeElement.style.display === 'none';
    }
    _setHiddenStyles() {
        this.renderer.setStyle(this.elementRef.nativeElement, 'display', 'none');
    }
    _clearHiddenStyles() {
        this.renderer.removeStyle(this.elementRef.nativeElement, 'display');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAvatarComponent, isStandalone: true, selector: "rds-avatar", inputs: { tabIndex: ["tabIndex", "tabIndex", (v) => numberAttribute(v, TAB_INDEX_DEFAULT)], size: "size", disableInteractions: ["disableInteractions", "disableInteractions", booleanAttribute] }, host: { properties: { "tabIndex": "this.attrTabIndex", "class": "this.class" } }, queries: [{ propertyName: "avatarImage", first: true, predicate: RdsAvatarImageDirective, descendants: true }, { propertyName: "avatarIcon", first: true, predicate: RdsAvatarIconDirective, descendants: true }, { propertyName: "avatarInitials", first: true, predicate: RdsAvatarInitialsDirective, descendants: true }, { propertyName: "avatarLabel", first: true, predicate: RdsAvatarLabelDirective, descendants: true }, { propertyName: "avatarDescription", first: true, predicate: RdsAvatarDescriptionDirective, descendants: true }], ngImport: i0, template: `
    <div class="rds-avatar__container">
      <div class="rds-avatar-overlay"></div>
      <ng-content select="img[rds-avatar-image], img[rdsAvatarImage]" />
      @if (!avatarImage) {
        <ng-content
          select="rds-icon[rds-avatar-icon], rds-icon[rdsAvatarIcon]"
        />
      }
      @if (!avatarImage && !avatarIcon) {
        <ng-content select="[rds-avatar-initials], [rdsAvatarInitials]" />
      }
    </div>
    <div [class.rds-avatar__name-wrapper]="avatarLabel || avatarDescription">
      <ng-content
        select="rds-avatar-label, [rds-avatar-label], [rdsAvatarLabel]"
      />
      <ng-content
        select="rds-avatar-description, [rds-avatar-description], [rdsAvatarDescription]"
      />
    </div>
  `, isInline: true, styles: [".rds-avatar{display:flex;align-items:center}.rds-avatar.rds-avatar-xs{column-gap:8px}.rds-avatar.rds-avatar-xs .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:24px;height:24px;flex-shrink:0}.rds-avatar.rds-avatar-xs .rds-avatar__container .rds-icon{width:16px;height:16px}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s{column-gap:8px}.rds-avatar.rds-avatar-s .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:28px;height:28px;flex-shrink:0}.rds-avatar.rds-avatar-s .rds-avatar__container .rds-icon{width:18px;height:18px}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m{column-gap:12px}.rds-avatar.rds-avatar-m .rds-avatar__container{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:40px;height:40px;flex-shrink:0}.rds-avatar.rds-avatar-m .rds-avatar__container .rds-icon{width:24px;height:24px}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l{column-gap:16px}.rds-avatar.rds-avatar-l .rds-avatar__container{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:56px;height:56px;flex-shrink:0}.rds-avatar.rds-avatar-l .rds-avatar__container .rds-icon{width:32px;height:32px}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl{column-gap:16px}.rds-avatar.rds-avatar-xl .rds-avatar__container{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:80px;height:80px;flex-shrink:0}.rds-avatar.rds-avatar-xl .rds-avatar__container .rds-icon{width:48px;height:48px}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-label{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-description{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar .rds-avatar__container{position:relative;display:flex;justify-content:center;align-items:center;border-radius:50%;background:var(--rds-color-avatar-bg);color:var(--rds-color-brand)}.rds-avatar .rds-avatar__name-wrapper{display:flex;flex-direction:column}.rds-avatar .rds-avatar-image{object-fit:cover;border-radius:50%;width:100%;height:100%}.rds-avatar.cdk-focused.cdk-keyboard-focused{outline:none}.rds-avatar.cdk-focused.cdk-keyboard-focused .rds-avatar__container{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar:hover .rds-avatar-overlay{display:block}.rds-avatar.rds-avatar-disable-interactions{pointer-events:none}.rds-avatar-group{display:flex;flex-direction:row}.rds-avatar-group .rds-avatar{display:unset}.rds-avatar-group .rds-avatar-xs:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-s:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-m:not(:first-child){margin-left:-16px}.rds-avatar-group .rds-avatar-l:not(:first-child){margin-left:-24px}.rds-avatar-group .rds-avatar-xl:not(:first-child){margin-left:-32px}.rds-avatar-group .rds-avatar__container.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar-overlay{position:absolute;background:var(--rds-color-bg-transparent-hover-select);width:100%;height:100%;top:0;left:0;border-radius:50%;display:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-avatar', template: `
    <div class="rds-avatar__container">
      <div class="rds-avatar-overlay"></div>
      <ng-content select="img[rds-avatar-image], img[rdsAvatarImage]" />
      @if (!avatarImage) {
        <ng-content
          select="rds-icon[rds-avatar-icon], rds-icon[rdsAvatarIcon]"
        />
      }
      @if (!avatarImage && !avatarIcon) {
        <ng-content select="[rds-avatar-initials], [rdsAvatarInitials]" />
      }
    </div>
    <div [class.rds-avatar__name-wrapper]="avatarLabel || avatarDescription">
      <ng-content
        select="rds-avatar-label, [rds-avatar-label], [rdsAvatarLabel]"
      />
      <ng-content
        select="rds-avatar-description, [rds-avatar-description], [rdsAvatarDescription]"
      />
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [RdsIconComponent], styles: [".rds-avatar{display:flex;align-items:center}.rds-avatar.rds-avatar-xs{column-gap:8px}.rds-avatar.rds-avatar-xs .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:24px;height:24px;flex-shrink:0}.rds-avatar.rds-avatar-xs .rds-avatar__container .rds-icon{width:16px;height:16px}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s{column-gap:8px}.rds-avatar.rds-avatar-s .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:28px;height:28px;flex-shrink:0}.rds-avatar.rds-avatar-s .rds-avatar__container .rds-icon{width:18px;height:18px}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m{column-gap:12px}.rds-avatar.rds-avatar-m .rds-avatar__container{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:40px;height:40px;flex-shrink:0}.rds-avatar.rds-avatar-m .rds-avatar__container .rds-icon{width:24px;height:24px}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l{column-gap:16px}.rds-avatar.rds-avatar-l .rds-avatar__container{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:56px;height:56px;flex-shrink:0}.rds-avatar.rds-avatar-l .rds-avatar__container .rds-icon{width:32px;height:32px}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl{column-gap:16px}.rds-avatar.rds-avatar-xl .rds-avatar__container{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:80px;height:80px;flex-shrink:0}.rds-avatar.rds-avatar-xl .rds-avatar__container .rds-icon{width:48px;height:48px}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-label{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-description{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar .rds-avatar__container{position:relative;display:flex;justify-content:center;align-items:center;border-radius:50%;background:var(--rds-color-avatar-bg);color:var(--rds-color-brand)}.rds-avatar .rds-avatar__name-wrapper{display:flex;flex-direction:column}.rds-avatar .rds-avatar-image{object-fit:cover;border-radius:50%;width:100%;height:100%}.rds-avatar.cdk-focused.cdk-keyboard-focused{outline:none}.rds-avatar.cdk-focused.cdk-keyboard-focused .rds-avatar__container{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar:hover .rds-avatar-overlay{display:block}.rds-avatar.rds-avatar-disable-interactions{pointer-events:none}.rds-avatar-group{display:flex;flex-direction:row}.rds-avatar-group .rds-avatar{display:unset}.rds-avatar-group .rds-avatar-xs:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-s:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-m:not(:first-child){margin-left:-16px}.rds-avatar-group .rds-avatar-l:not(:first-child){margin-left:-24px}.rds-avatar-group .rds-avatar-xl:not(:first-child){margin-left:-32px}.rds-avatar-group .rds-avatar__container.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar-overlay{position:absolute;background:var(--rds-color-bg-transparent-hover-select);width:100%;height:100%;top:0;left:0;border-radius:50%;display:none}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { avatarImage: [{
                type: ContentChild,
                args: [RdsAvatarImageDirective]
            }], avatarIcon: [{
                type: ContentChild,
                args: [RdsAvatarIconDirective]
            }], avatarInitials: [{
                type: ContentChild,
                args: [RdsAvatarInitialsDirective]
            }], avatarLabel: [{
                type: ContentChild,
                args: [RdsAvatarLabelDirective]
            }], avatarDescription: [{
                type: ContentChild,
                args: [RdsAvatarDescriptionDirective]
            }], attrTabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], tabIndex: [{
                type: Input,
                args: [{ transform: (v) => numberAttribute(v, TAB_INDEX_DEFAULT) }]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], size: [{
                type: Input
            }], disableInteractions: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsAvatarGroupComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.contentObserver = inject(ContentObserver);
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.defaultMaxInGroup = inject(RDS_AVATAR_MAX_IN_GROUP);
        this._stateChanges = new Subject();
        this.class = 'rds-avatar-group';
        this.hiddenElements = 0;
        this.size = 'm';
        this._disableInteractions = false;
        this._maxInGroup = this.defaultMaxInGroup;
    }
    set disableInteractions(value) {
        this._disableInteractions = booleanAttribute(value);
        this.checkChildInputs();
    }
    get disableInteractions() {
        return this._disableInteractions;
    }
    set maxInGroup(maxInGroup) {
        const value = numberAttribute(maxInGroup, -1);
        const previousValue = this._maxInGroup;
        this._maxInGroup = value >= 0 ? value : this.defaultMaxInGroup;
        if (this._maxInGroup !== previousValue) {
            this._stateChanges.next();
        }
    }
    get maxInGroup() {
        return this._maxInGroup;
    }
    ngAfterContentInit() {
        merge(this._stateChanges, this.avatarList.changes, this.contentObserver.observe(this.elementRef))
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            const visibilityChanged = this.checkVisibility();
            if (visibilityChanged) {
                this.cdr.markForCheck();
            }
        });
    }
    ngOnDestroy() {
        this._stateChanges.complete();
    }
    checkVisibility() {
        let visibilityChanged = this.checkHiddenElements();
        this.avatarList.forEach((item, index) => {
            if (index < this.maxInGroup) {
                if (item._hasHiddenStyle()) {
                    item._clearHiddenStyles();
                    visibilityChanged = true;
                }
            }
            else if (!item._hasHiddenStyle()) {
                item._setHiddenStyles();
                visibilityChanged = true;
            }
        });
        this.checkChildInputs();
        return visibilityChanged;
    }
    checkChildInputs() {
        Promise.resolve().then(() => {
            this.avatarList
                .filter((i) => i.size !== this.size)
                .forEach((i) => (i.size = this.size));
            this.avatarList
                .filter((i) => i.disableInteractions !== this.disableInteractions)
                .forEach((i) => (i.disableInteractions = this.disableInteractions));
        });
    }
    checkHiddenElements() {
        const previous = this.hiddenElements;
        this.hiddenElements =
            this.avatarList?.length > this.maxInGroup
                ? this.avatarList.length - this.maxInGroup
                : 0;
        return previous !== this.hiddenElements;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAvatarGroupComponent, isStandalone: true, selector: "rds-avatar-group", inputs: { size: "size", disableInteractions: "disableInteractions", maxInGroup: "maxInGroup" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "avatarList", predicate: RdsAvatarComponent }], ngImport: i0, template: `
    <ng-content select="rds-avatar" />
    @if (hiddenElements) {
      <rds-avatar [size]="size" [disableInteractions]="disableInteractions">
        <span rds-avatar-initials>+{{ hiddenElements }}</span>
      </rds-avatar>
    }
  `, isInline: true, styles: [".rds-avatar{display:flex;align-items:center}.rds-avatar.rds-avatar-xs{column-gap:8px}.rds-avatar.rds-avatar-xs .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:24px;height:24px;flex-shrink:0}.rds-avatar.rds-avatar-xs .rds-avatar__container .rds-icon{width:16px;height:16px}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s{column-gap:8px}.rds-avatar.rds-avatar-s .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:28px;height:28px;flex-shrink:0}.rds-avatar.rds-avatar-s .rds-avatar__container .rds-icon{width:18px;height:18px}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m{column-gap:12px}.rds-avatar.rds-avatar-m .rds-avatar__container{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:40px;height:40px;flex-shrink:0}.rds-avatar.rds-avatar-m .rds-avatar__container .rds-icon{width:24px;height:24px}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l{column-gap:16px}.rds-avatar.rds-avatar-l .rds-avatar__container{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:56px;height:56px;flex-shrink:0}.rds-avatar.rds-avatar-l .rds-avatar__container .rds-icon{width:32px;height:32px}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl{column-gap:16px}.rds-avatar.rds-avatar-xl .rds-avatar__container{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:80px;height:80px;flex-shrink:0}.rds-avatar.rds-avatar-xl .rds-avatar__container .rds-icon{width:48px;height:48px}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-label{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-description{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar .rds-avatar__container{position:relative;display:flex;justify-content:center;align-items:center;border-radius:50%;background:var(--rds-color-avatar-bg);color:var(--rds-color-brand)}.rds-avatar .rds-avatar__name-wrapper{display:flex;flex-direction:column}.rds-avatar .rds-avatar-image{object-fit:cover;border-radius:50%;width:100%;height:100%}.rds-avatar.cdk-focused.cdk-keyboard-focused{outline:none}.rds-avatar.cdk-focused.cdk-keyboard-focused .rds-avatar__container{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar:hover .rds-avatar-overlay{display:block}.rds-avatar.rds-avatar-disable-interactions{pointer-events:none}.rds-avatar-group{display:flex;flex-direction:row}.rds-avatar-group .rds-avatar{display:unset}.rds-avatar-group .rds-avatar-xs:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-s:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-m:not(:first-child){margin-left:-16px}.rds-avatar-group .rds-avatar-l:not(:first-child){margin-left:-24px}.rds-avatar-group .rds-avatar-xl:not(:first-child){margin-left:-32px}.rds-avatar-group .rds-avatar__container.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar-overlay{position:absolute;background:var(--rds-color-bg-transparent-hover-select);width:100%;height:100%;top:0;left:0;border-radius:50%;display:none}\n"], dependencies: [{ kind: "component", type: RdsAvatarComponent, selector: "rds-avatar", inputs: ["tabIndex", "size", "disableInteractions"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-avatar-group', template: `
    <ng-content select="rds-avatar" />
    @if (hiddenElements) {
      <rds-avatar [size]="size" [disableInteractions]="disableInteractions">
        <span rds-avatar-initials>+{{ hiddenElements }}</span>
      </rds-avatar>
    }
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [RdsAvatarComponent], styles: [".rds-avatar{display:flex;align-items:center}.rds-avatar.rds-avatar-xs{column-gap:8px}.rds-avatar.rds-avatar-xs .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:24px;height:24px;flex-shrink:0}.rds-avatar.rds-avatar-xs .rds-avatar__container .rds-icon{width:16px;height:16px}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xs .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s{column-gap:8px}.rds-avatar.rds-avatar-s .rds-avatar__container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:1px solid var(--rds-color-avatar-stroke);width:28px;height:28px;flex-shrink:0}.rds-avatar.rds-avatar-s .rds-avatar__container .rds-icon{width:18px;height:18px}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-s .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m{column-gap:12px}.rds-avatar.rds-avatar-m .rds-avatar__container{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:40px;height:40px;flex-shrink:0}.rds-avatar.rds-avatar-m .rds-avatar__container .rds-icon{width:24px;height:24px}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-m .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l{column-gap:16px}.rds-avatar.rds-avatar-l .rds-avatar__container{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:56px;height:56px;flex-shrink:0}.rds-avatar.rds-avatar-l .rds-avatar__container .rds-icon{width:32px;height:32px}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-l .rds-avatar__name-wrapper .rds-avatar-description{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl{column-gap:16px}.rds-avatar.rds-avatar-xl .rds-avatar__container{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:2px solid var(--rds-color-avatar-stroke);width:80px;height:80px;flex-shrink:0}.rds-avatar.rds-avatar-xl .rds-avatar__container .rds-icon{width:48px;height:48px}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-label{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar.rds-avatar-xl .rds-avatar__name-wrapper .rds-avatar-description{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-avatar .rds-avatar__container{position:relative;display:flex;justify-content:center;align-items:center;border-radius:50%;background:var(--rds-color-avatar-bg);color:var(--rds-color-brand)}.rds-avatar .rds-avatar__name-wrapper{display:flex;flex-direction:column}.rds-avatar .rds-avatar-image{object-fit:cover;border-radius:50%;width:100%;height:100%}.rds-avatar.cdk-focused.cdk-keyboard-focused{outline:none}.rds-avatar.cdk-focused.cdk-keyboard-focused .rds-avatar__container{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar:hover .rds-avatar-overlay{display:block}.rds-avatar.rds-avatar-disable-interactions{pointer-events:none}.rds-avatar-group{display:flex;flex-direction:row}.rds-avatar-group .rds-avatar{display:unset}.rds-avatar-group .rds-avatar-xs:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-s:not(:first-child){margin-left:-8px}.rds-avatar-group .rds-avatar-m:not(:first-child){margin-left:-16px}.rds-avatar-group .rds-avatar-l:not(:first-child){margin-left:-24px}.rds-avatar-group .rds-avatar-xl:not(:first-child){margin-left:-32px}.rds-avatar-group .rds-avatar__container.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-avatar-overlay{position:absolute;background:var(--rds-color-bg-transparent-hover-select);width:100%;height:100%;top:0;left:0;border-radius:50%;display:none}\n"] }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], size: [{
                type: Input
            }], disableInteractions: [{
                type: Input
            }], maxInGroup: [{
                type: Input
            }], avatarList: [{
                type: ContentChildren,
                args: [RdsAvatarComponent]
            }] } });

const RDS_AVATAR_DIRECTIVES = [
    RdsAvatarComponent,
    RdsAvatarDescriptionDirective,
    RdsAvatarGroupComponent,
    RdsAvatarImageDirective,
    RdsAvatarIconDirective,
    RdsAvatarInitialsDirective,
    RdsAvatarLabelDirective,
];
class RdsAvatarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarModule, imports: [RdsAvatarComponent,
            RdsAvatarDescriptionDirective,
            RdsAvatarGroupComponent,
            RdsAvatarImageDirective,
            RdsAvatarIconDirective,
            RdsAvatarInitialsDirective,
            RdsAvatarLabelDirective], exports: [RdsAvatarComponent,
            RdsAvatarDescriptionDirective,
            RdsAvatarGroupComponent,
            RdsAvatarImageDirective,
            RdsAvatarIconDirective,
            RdsAvatarInitialsDirective,
            RdsAvatarLabelDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAvatarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...RDS_AVATAR_DIRECTIVES],
                    exports: [...RDS_AVATAR_DIRECTIVES],
                }]
        }] });

class RdsHeaderListItemDirective {
    constructor() {
        this.size = 'l';
    }
    get class() {
        return `rds-header-list-item rds-header-list-item--${this.size}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderListItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderListItemDirective, selector: "rds-header-list-item, [rds-header-list-item], [rdsHeaderListItem]", inputs: { size: "size" }, host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderListItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-list-item, [rds-header-list-item], [rdsHeaderListItem]',
                }]
        }], propDecorators: { size: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const RDS_LIST_ITEM_TEMPLATE = `<ng-content select="rds-icon"></ng-content>
<span class="rds-list-item-text">
  <ng-content />
</span>
`;
const RDS_NESTABLE_LIST_ITEM_TEMPLATE = `${RDS_LIST_ITEM_TEMPLATE}
@if (hasChildItems) {
  <rds-icon
    namespace="outlined"
    icon="chevron_right"
    class="rds-list-item__has-child-items"
  />
}`;
const RDS_SINGLE_SELECT_LIST_ITEM_TEMPLATE = `<ng-content select="rds-avatar"/>
${RDS_LIST_ITEM_TEMPLATE}
<rds-icon icon="checkmark" class="rds-list-item-checkmark"/>`;
const RDS_MULTI_SELECT_LIST_ITEM_TEMPLATE = `<ng-content select="rds-avatar"/>
<ng-content select="rds-icon"/>
@if (!avatar && !icon) {
    <rds-pseudo-checkbox
      noSpacing
      [checked]="checked"
      [disabled]="disabled"
    />
}
<span class="rds-list-item-text">
  <ng-content/>
</span>
@if (avatar || icon) {
    <rds-pseudo-checkbox
      noSpacing
      [checked]="checked"
      [disabled]="disabled"
      class="rds-list-item__checkbox-right"
    />
}
`;

class RdsListItemComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this._focused = new Subject();
        this.size = 'm';
        this.role = 'menuitem';
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.disabled = false;
    }
    get cssClasses() {
        return [
            'rds-list-item',
            `rds-list-item--${this.size}`,
            'rds-focus-indicator',
        ];
    }
    get attrAriaDisabled() {
        return this.disabled.toString();
    }
    get attrDisabled() {
        return this.disabled ? 'disabled' : null;
    }
    focus(origin) {
        if (origin === 'keyboard') {
            this.renderer.addClass(this.elementRef.nativeElement, 'cdk-focused');
            this.renderer.addClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        }
        this._focused.next(this);
    }
    blur() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'cdk-focused');
        this.renderer.removeClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        this.markAsInactive();
    }
    click() {
        this.elementRef.nativeElement.click();
    }
    getLabel() {
        const clone = this.elementRef.nativeElement.cloneNode(true);
        this.removeNodes(clone.querySelectorAll('rds-icon'));
        this.removeNodes(clone.querySelectorAll('rds-avatar'));
        this.removeNodes(clone.querySelectorAll('rds-pseudo-checkbox'));
        return clone.textContent?.trim() || '';
    }
    markAsActive() {
        this.renderer.addClass(this.elementRef.nativeElement, 'rds-list-item-active');
    }
    markAsInactive() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'rds-list-item-active');
    }
    removeNodes(nodes) {
        for (let i = 0; i < nodes.length; i++) {
            nodes[i].remove();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsListItemComponent, selector: "button[rds-list-item], button[rdsListItem]", inputs: { size: "size", role: "role", disabled: ["disabled", "disabled", booleanAttribute] }, host: { listeners: { "focus": "focus()", "blur": "blur()" }, properties: { "attr.role": "this.role", "tabIndex": "this.tabIndex", "class": "this.cssClasses", "class.rds-list-item--disabled": "this.disabled", "attr.aria-disabled": "this.attrAriaDisabled", "attr.disabled": "this.attrDisabled" } }, queries: [{ propertyName: "icon", first: true, predicate: RdsIconComponent, descendants: true }], ngImport: i0, template: "<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_LIST_ITEM_TEMPLATE,
                    selector: 'button[rds-list-item], button[rdsListItem]',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { icon: [{
                type: ContentChild,
                args: [RdsIconComponent]
            }], size: [{
                type: Input
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['class.rds-list-item--disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], attrAriaDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }] } });

class RdsCheckboxChangeEvent {
}

let nextUniqueId$b = 0;
const rdsCheckboxAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
class RdsCheckboxComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.focusMonitor = inject(FocusMonitor);
        this.ngZone = inject(NgZone);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.controlContainer = inject(ControlContainer, {
            optional: true,
            host: true,
            skipSelf: true,
        });
        this._uniqueId = `rds-checkbox-${++nextUniqueId$b}`;
        this._currentAnimationClass = '';
        this._errorState = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this._indeterminate = false;
        this._currentCheckState = 0 /* TransitionCheckState.Init */;
        this.subscriptAnimationState = '';
        this.hostClass = 'rds-checkbox';
        this.id = this._uniqueId;
        this.size = 'l';
        this.ariaLabel = '';
        this.checked = false;
        this.disabled = false;
        this.changed = new EventEmitter();
        this._onChange = noop;
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this._onTouched = noop;
    }
    get getHostId() {
        return this._uniqueId;
    }
    get hostIndeterminate() {
        return this.indeterminate;
    }
    get hostChecked() {
        return this.checked;
    }
    get hostDisabled() {
        return this.disabled;
    }
    get errorState() {
        return this._errorState;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set indeterminate(value) {
        this._indeterminate = booleanAttribute(value);
        if (this.indeterminate) {
            this.transitionCheckState(3 /* TransitionCheckState.Indeterminate */);
        }
        else {
            this.transitionCheckState(this.checked
                ? 1 /* TransitionCheckState.Checked */
                : 2 /* TransitionCheckState.Unchecked */);
        }
        this.syncIndeterminate(this.indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    get attrRequired() {
        if (this._control && this._control?.hasValidator(Validators.required)) {
            return this._control?.hasValidator(Validators.required) ?? null;
        }
        return this._required ?? null;
    }
    set required(value) {
        this._required = booleanAttribute(value);
    }
    get required() {
        return this.attrRequired ?? false;
    }
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    get ariaChecked() {
        if (this.checked) {
            return 'true';
        }
        return this.indeterminate ? 'mixed' : 'false';
    }
    ngOnInit() {
        if (this.controlContainer) {
            if (this.formControlName) {
                this._control = this.controlContainer.control?.get(this.formControlName);
            }
            else {
                // Missing FormControlName directive from host element of the component
            }
        }
        else {
            // Can't find parent FormGroup directive
        }
    }
    ngDoCheck() {
        if (this._control) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this._control);
        }
    }
    ngAfterContentInit() {
        const control = this._control;
        if (control && control.valueChanges) {
            control.valueChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                control?.markAsDirty();
                control?.markAsTouched();
                this.cdr.markForCheck();
            });
        }
        const parent = this.parentFormGroup || this.parentForm;
        if (parent) {
            parent.ngSubmit
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this.cdr.markForCheck();
            });
        }
    }
    ngAfterViewInit() {
        if (this.checkboxLabel.nativeElement.innerText) {
            this.elementRef.nativeElement.classList.add('rds-checkbox-with-label');
        }
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((focusOrigin) => {
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state change
                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.
                // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                // telling the form control it has been touched until the next tick.
                Promise.resolve().then(() => {
                    this._onTouched();
                    this.cdr.markForCheck();
                });
            }
        });
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
        this.syncIndeterminate(this.indeterminate);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    get isErrorMessageVisible() {
        return this.errorState;
    }
    onLabelTextChange() {
        if (this.checkboxLabel.nativeElement.innerText) {
            this.elementRef.nativeElement.classList.add('rds-checkbox-with-label');
        }
        else {
            this.elementRef.nativeElement.classList.remove('rds-checkbox-with-label');
        }
        this.cdr.detectChanges();
    }
    // start ControlValueAccessor - part
    writeValue(value) {
        this.checked = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    // end ControlValueAccessor - part
    onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `checkbox` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        Promise.resolve().then(() => (this.indeterminate = false));
        this.toggle();
        this.transitionCheckState(this.checked
            ? 1 /* TransitionCheckState.Checked */
            : 2 /* TransitionCheckState.Unchecked */);
        this.emitChangedEvent();
    }
    focus(origin = 'keyboard', options) {
        this.focusMonitor.focusVia(this._inputElement, origin, options);
    }
    getAnimationClassForCheckStateTransition(oldState, newState) {
        let animSuffix = '';
        switch (oldState) {
            case 0 /* TransitionCheckState.Init */:
                if (newState === 1 /* TransitionCheckState.Checked */) {
                    animSuffix = 'unchecked-checked';
                }
                else if (newState === 3 /* TransitionCheckState.Indeterminate */) {
                    animSuffix = 'unchecked-indeterminate';
                }
                else {
                    return '';
                }
                break;
            case 2 /* TransitionCheckState.Unchecked */:
                animSuffix =
                    newState === 1 /* TransitionCheckState.Checked */
                        ? 'unchecked-checked'
                        : 'unchecked-indeterminate';
                break;
            case 1 /* TransitionCheckState.Checked */:
                animSuffix =
                    newState === 2 /* TransitionCheckState.Unchecked */
                        ? 'checked-unchecked'
                        : 'checked-indeterminate';
                break;
            case 3 /* TransitionCheckState.Indeterminate */:
                animSuffix =
                    newState === 1 /* TransitionCheckState.Checked */
                        ? 'indeterminate-checked'
                        : 'indeterminate-unchecked';
                break;
        }
        return `rds-checkbox-animation--${animSuffix}`;
    }
    transitionCheckState(newState) {
        const oldState = this._currentCheckState;
        const element = this.elementRef.nativeElement;
        if (oldState === newState) {
            return;
        }
        if (this._currentAnimationClass.length > 0) {
            element.classList.remove(this._currentAnimationClass);
        }
        this._currentAnimationClass = this.getAnimationClassForCheckStateTransition(oldState, newState);
        this._currentCheckState = newState;
        if (this._currentAnimationClass.length > 0) {
            element.classList.add(this._currentAnimationClass);
            // Remove the animation class to avoid animation when the checkbox is moved between containers
            const animationClass = this._currentAnimationClass;
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    element.classList.remove(animationClass);
                }, 1000);
            });
        }
    }
    toggle() {
        this.checked = !this.checked;
    }
    emitChangedEvent() {
        const event = new RdsCheckboxChangeEvent();
        event.source = this;
        event.checked = this.checked;
        this._onChange(this.checked);
        this.changed.emit(event);
    }
    syncIndeterminate(value) {
        const nativeCheckbox = this._inputElement;
        if (nativeCheckbox) {
            nativeCheckbox.nativeElement.indeterminate = value;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCheckboxComponent, selector: "rds-checkbox", inputs: { id: "id", value: "value", name: "name", size: "size", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], formControlName: "formControlName", tabIndex: "tabIndex", checked: ["checked", "checked", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], indeterminate: "indeterminate", required: "required" }, outputs: { changed: "changed" }, host: { properties: { "class": "this.hostClass", "tabIndex": "this.hostTabindex", "attr.id": "this.getHostId", "class.rds-checkbox--indeterminate": "this.hostIndeterminate", "class.rds-checkbox--checked": "this.hostChecked", "class.rds-checkbox--disabled": "this.hostDisabled", "class.rds-checkbox--invalid": "this.errorState", "attr.required": "this.attrRequired" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RdsCheckboxComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "checkboxLabel", first: true, predicate: ["checkboxLabel"], descendants: true }, { propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: `
    <div class="rds-checkbox__wrapper">
      <label [attr.for]="inputId" class="rds-checkbox__container" #label>
        <div class="rds-checkbox__checkbox-container">
          <input
            #input
            class="rds-checkbox__native-checkbox cdk-visually-hidden"
            type="checkbox"
            [id]="inputId"
            [required]="required"
            [checked]="checked"
            [attr.value]="value"
            [disabled]="disabled"
            [attr.name]="name"
            [tabIndex]="tabIndex"
            [attr.aria-label]="ariaLabel || null"
            [attr.aria-labelledby]="ariaLabelledby"
            [attr.aria-checked]="ariaChecked"
            [attr.aria-describedby]="ariaDescribedby"
            (click)="onInputClick($event)"
          />
          <div class="rds-checkbox__overlay"></div>
          <div class="rds-checkbox__frame"></div>
          <div class="rds-checkbox__background">
            <svg
              focusable="false"
              class="rds-checkbox__checkmark"
              viewBox="0 0 24 24"
              xml:space="preserve"
            >
              <path
                class="rds-checkbox__checkmark-path"
                fill="none"
                d="M4.1,12.7 9,17.6 20.3,6.3"
              />
            </svg>
            <div class="rds-checkbox__indeterminate-mark"></div>
          </div>
        </div>
        <span
          class="rds-checkbox__label"
          [ngClass]="'rds-checkbox__label--' + size"
          #checkboxLabel
          (cdkObserveContent)="onLabelTextChange()"
        >
          @if (required && !disabled) {
            <span class="rds-asterisk">&#32;* </span>
          }
          <!-- Add an invisible span so JAWS can read the label -->
          <span style="display:none">&nbsp;</span>
          <ng-content />
        </span>
      </label>
    </div>
    <div class="rds-checkbox__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, isInline: true, styles: ["@keyframes rds-checkbox__fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes rds-checkbox__fade-out-background{0%,50%{opacity:1}to{opacity:0}}@keyframes rds-checkbox__from-checked-to-indeterminate-checkmark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes rds-checkbox__from-indeterminate-to-checked-checkmark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes rds-checkbox__from-unchecked-to-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}to{stroke-dashoffset:0}}@keyframes rds-checkbox__from-checked-to-unchecked-checkmark-path{0%{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}to{transform:scaleX(1)}}@keyframes rds-checkbox__from-checked-to-indeterminate-indeterminate-mark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes rds-checkbox__from-indeterminate-to-checked-indeterminate-mark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,to{opacity:0;transform:scaleX(0)}}.rds-checkbox{display:flex;flex-direction:column}.rds-checkbox.rds-checkbox-with-label .rds-checkbox__checkbox-container{margin:auto 10px auto auto}.rds-checkbox__wrapper{align-items:center;display:inline-flex;transition:background .4s cubic-bezier(.25,.8,.25,1);margin:4px 0;height:24px;cursor:pointer}.rds-checkbox__wrapper .rds-checkbox__container{align-items:center;display:inline-flex;-webkit-user-select:none;user-select:none;cursor:inherit;white-space:nowrap}.rds-checkbox__wrapper .rds-checkbox__checkbox-container{position:relative;display:inline-block;margin:auto;height:18px;width:18px}.rds-checkbox__wrapper .rds-checkbox__native-checkbox{bottom:0;left:50%}.rds-checkbox__wrapper .rds-checkbox__overlay{position:absolute;inset:0;transform:translate(-9px,-9px);transition:border-color 90ms cubic-bezier(0,0,.2,.1),background 90ms cubic-bezier(0,0,.2,.1);border:2px solid transparent;border-radius:2px;width:36px;height:36px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__frame{position:absolute;inset:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border:2px solid var(--rds-color-grey-3);border-radius:2px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__background{position:absolute;inset:0;justify-content:center;align-items:center;display:inline-flex;opacity:0;transition:opacity 90ms cubic-bezier(0,0,.2,.1);border-radius:2px;background:var(--rds-color-informative)}.rds-checkbox__wrapper .rds-checkbox__checkmark{position:absolute;inset:0;opacity:0;width:100%;fill:var(--rds-color-bg-base-1);stroke:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__checkmark-path{stroke-dashoffset:0;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.rds-checkbox__wrapper .rds-checkbox__indeterminate-mark{opacity:0;transform:scaleX(0) rotate(0) translateY(0);width:calc(100% - 6px);height:2px;background:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__label{color:var(--rds-color-high-contrast)}.rds-checkbox__wrapper .rds-checkbox__label--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--checked .rds-checkbox__background{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__indeterminate-mark{transform:scaleX(1) rotate(-45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark{opacity:0;transform:rotate(45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__indeterminate-mark{opacity:1;transform:scaleX(1) rotate(0) translateY(0)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__background{opacity:1}.rds-checkbox.cdk-focused.cdk-keyboard-focused .rds-checkbox__overlay{background:transparent;border-color:var(--rds-color-stroke-active-focus)}.rds-checkbox:hover:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-hover-select)}.rds-checkbox:active:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-pressed)}.rds-checkbox.rds-checkbox--disabled,.rds-checkbox.rds-checkbox--disabled .rds-checkbox__wrapper{cursor:default}.rds-checkbox.rds-checkbox--disabled.rds-checkbox--checked .rds-checkbox__background,.rds-checkbox.rds-checkbox--disabled.rds-checkbox--indeterminate .rds-checkbox__background{background:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__frame{border-color:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__label{color:var(--rds-color-disabled)}.rds-checkbox--invalid .rds-checkbox__background{background:var(--rds-color-error)}.rds-checkbox--invalid .rds-checkbox__frame{border-color:var(--rds-color-error)}.rds-checkbox-animation--unchecked-checked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-checked .rds-checkbox__checkmark-path{animation:.18s linear 0ms rds-checkbox__from-unchecked-to-checked-checkmark-path}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--checked-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--checked-unchecked .rds-checkbox__checkmark-path{animation:90ms linear 0ms rds-checkbox__from-checked-to-unchecked-checkmark-path}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__checkmark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-checkmark}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__checkmark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-checkmark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__indeterminate-mark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-indeterminate-mark}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__indeterminate-mark{animation:.3s linear 0ms rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark}.rds-asterisk{color:var(--rds-color-error)}.rds-checkbox__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-checkbox--disabled .rds-checkbox__subscript{color:var(--rds-color-disabled)}.rds-checkbox__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-checkbox__subscript--hint{color:var(--rds-color-low-contrast)}.rds-checkbox__subscript--error{color:var(--rds-color-error)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$2.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], animations: [rdsCheckboxAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-checkbox', template: `
    <div class="rds-checkbox__wrapper">
      <label [attr.for]="inputId" class="rds-checkbox__container" #label>
        <div class="rds-checkbox__checkbox-container">
          <input
            #input
            class="rds-checkbox__native-checkbox cdk-visually-hidden"
            type="checkbox"
            [id]="inputId"
            [required]="required"
            [checked]="checked"
            [attr.value]="value"
            [disabled]="disabled"
            [attr.name]="name"
            [tabIndex]="tabIndex"
            [attr.aria-label]="ariaLabel || null"
            [attr.aria-labelledby]="ariaLabelledby"
            [attr.aria-checked]="ariaChecked"
            [attr.aria-describedby]="ariaDescribedby"
            (click)="onInputClick($event)"
          />
          <div class="rds-checkbox__overlay"></div>
          <div class="rds-checkbox__frame"></div>
          <div class="rds-checkbox__background">
            <svg
              focusable="false"
              class="rds-checkbox__checkmark"
              viewBox="0 0 24 24"
              xml:space="preserve"
            >
              <path
                class="rds-checkbox__checkmark-path"
                fill="none"
                d="M4.1,12.7 9,17.6 20.3,6.3"
              />
            </svg>
            <div class="rds-checkbox__indeterminate-mark"></div>
          </div>
        </div>
        <span
          class="rds-checkbox__label"
          [ngClass]="'rds-checkbox__label--' + size"
          #checkboxLabel
          (cdkObserveContent)="onLabelTextChange()"
        >
          @if (required && !disabled) {
            <span class="rds-asterisk">&#32;* </span>
          }
          <!-- Add an invisible span so JAWS can read the label -->
          <span style="display:none">&nbsp;</span>
          <ng-content />
        </span>
      </label>
    </div>
    <div class="rds-checkbox__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RdsCheckboxComponent),
                            multi: true,
                        },
                    ], encapsulation: ViewEncapsulation.None, animations: [rdsCheckboxAnimations.transitionMessages], changeDetection: ChangeDetectionStrategy.OnPush, styles: ["@keyframes rds-checkbox__fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes rds-checkbox__fade-out-background{0%,50%{opacity:1}to{opacity:0}}@keyframes rds-checkbox__from-checked-to-indeterminate-checkmark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes rds-checkbox__from-indeterminate-to-checked-checkmark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes rds-checkbox__from-unchecked-to-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}to{stroke-dashoffset:0}}@keyframes rds-checkbox__from-checked-to-unchecked-checkmark-path{0%{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}to{transform:scaleX(1)}}@keyframes rds-checkbox__from-checked-to-indeterminate-indeterminate-mark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes rds-checkbox__from-indeterminate-to-checked-indeterminate-mark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,to{opacity:0;transform:scaleX(0)}}.rds-checkbox{display:flex;flex-direction:column}.rds-checkbox.rds-checkbox-with-label .rds-checkbox__checkbox-container{margin:auto 10px auto auto}.rds-checkbox__wrapper{align-items:center;display:inline-flex;transition:background .4s cubic-bezier(.25,.8,.25,1);margin:4px 0;height:24px;cursor:pointer}.rds-checkbox__wrapper .rds-checkbox__container{align-items:center;display:inline-flex;-webkit-user-select:none;user-select:none;cursor:inherit;white-space:nowrap}.rds-checkbox__wrapper .rds-checkbox__checkbox-container{position:relative;display:inline-block;margin:auto;height:18px;width:18px}.rds-checkbox__wrapper .rds-checkbox__native-checkbox{bottom:0;left:50%}.rds-checkbox__wrapper .rds-checkbox__overlay{position:absolute;inset:0;transform:translate(-9px,-9px);transition:border-color 90ms cubic-bezier(0,0,.2,.1),background 90ms cubic-bezier(0,0,.2,.1);border:2px solid transparent;border-radius:2px;width:36px;height:36px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__frame{position:absolute;inset:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border:2px solid var(--rds-color-grey-3);border-radius:2px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__background{position:absolute;inset:0;justify-content:center;align-items:center;display:inline-flex;opacity:0;transition:opacity 90ms cubic-bezier(0,0,.2,.1);border-radius:2px;background:var(--rds-color-informative)}.rds-checkbox__wrapper .rds-checkbox__checkmark{position:absolute;inset:0;opacity:0;width:100%;fill:var(--rds-color-bg-base-1);stroke:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__checkmark-path{stroke-dashoffset:0;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.rds-checkbox__wrapper .rds-checkbox__indeterminate-mark{opacity:0;transform:scaleX(0) rotate(0) translateY(0);width:calc(100% - 6px);height:2px;background:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__label{color:var(--rds-color-high-contrast)}.rds-checkbox__wrapper .rds-checkbox__label--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--checked .rds-checkbox__background{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__indeterminate-mark{transform:scaleX(1) rotate(-45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark{opacity:0;transform:rotate(45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__indeterminate-mark{opacity:1;transform:scaleX(1) rotate(0) translateY(0)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__background{opacity:1}.rds-checkbox.cdk-focused.cdk-keyboard-focused .rds-checkbox__overlay{background:transparent;border-color:var(--rds-color-stroke-active-focus)}.rds-checkbox:hover:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-hover-select)}.rds-checkbox:active:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-pressed)}.rds-checkbox.rds-checkbox--disabled,.rds-checkbox.rds-checkbox--disabled .rds-checkbox__wrapper{cursor:default}.rds-checkbox.rds-checkbox--disabled.rds-checkbox--checked .rds-checkbox__background,.rds-checkbox.rds-checkbox--disabled.rds-checkbox--indeterminate .rds-checkbox__background{background:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__frame{border-color:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__label{color:var(--rds-color-disabled)}.rds-checkbox--invalid .rds-checkbox__background{background:var(--rds-color-error)}.rds-checkbox--invalid .rds-checkbox__frame{border-color:var(--rds-color-error)}.rds-checkbox-animation--unchecked-checked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-checked .rds-checkbox__checkmark-path{animation:.18s linear 0ms rds-checkbox__from-unchecked-to-checked-checkmark-path}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--checked-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--checked-unchecked .rds-checkbox__checkmark-path{animation:90ms linear 0ms rds-checkbox__from-checked-to-unchecked-checkmark-path}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__checkmark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-checkmark}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__checkmark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-checkmark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__indeterminate-mark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-indeterminate-mark}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__indeterminate-mark{animation:.3s linear 0ms rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark}.rds-asterisk{color:var(--rds-color-error)}.rds-checkbox__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-checkbox--disabled .rds-checkbox__subscript{color:var(--rds-color-disabled)}.rds-checkbox__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-checkbox__subscript--hint{color:var(--rds-color-low-contrast)}.rds-checkbox__subscript--error{color:var(--rds-color-error)}\n"] }]
        }], propDecorators: { checkboxLabel: [{
                type: ViewChild,
                args: ['checkboxLabel']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostTabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], getHostId: [{
                type: HostBinding,
                args: ['attr.id']
            }], hostIndeterminate: [{
                type: HostBinding,
                args: ['class.rds-checkbox--indeterminate']
            }], hostChecked: [{
                type: HostBinding,
                args: ['class.rds-checkbox--checked']
            }], hostDisabled: [{
                type: HostBinding,
                args: ['class.rds-checkbox--disabled']
            }], errorState: [{
                type: HostBinding,
                args: ['class.rds-checkbox--invalid']
            }], id: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], formControlName: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], checked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], indeterminate: [{
                type: Input
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], changed: [{
                type: Output
            }], _inputElement: [{
                type: ViewChild,
                args: ['input']
            }] } });

class RdsPseudoCheckboxComponent {
    constructor() {
        this.hostClass = 'rds-pseudo-checkbox';
        this.checked = false;
        this.disabled = false;
        this.indeterminate = false;
        this.noSpacing = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPseudoCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsPseudoCheckboxComponent, selector: "rds-pseudo-checkbox", inputs: { checked: ["checked", "checked", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], indeterminate: ["indeterminate", "indeterminate", booleanAttribute], noSpacing: ["noSpacing", "noSpacing", booleanAttribute] }, host: { properties: { "class": "this.hostClass", "class.rds-pseudo-checkbox--checked": "this.checked", "class.rds-pseudo-checkbox--disabled": "this.disabled", "class.rds-pseudo-checkbox--indeterminate": "this.indeterminate", "class.rds-pseudo-checkbox--no-spacing": "this.noSpacing" } }, ngImport: i0, template: `
    <div class="rds-pseudo-checkbox__container">
      <div class="rds-pseudo-checkbox__checkbox-container">
        <div class="rds-pseudo-checkbox__frame"></div>
        <div class="rds-pseudo-checkbox__background">
          <svg
            focusable="false"
            class="rds-pseudo-checkbox__checkmark"
            viewBox="0 0 24 24"
            xml:space="preserve"
          >
            <path
              class="rds-pseudo-checkbox__checkmark-path"
              fill="none"
              d="M4.1,12.7 9,17.6 20.3,6.3"
            />
          </svg>
          <div class="rds-pseudo-checkbox__indeterminate-mark"></div>
        </div>
      </div>
    </div>
  `, isInline: true, styles: [".rds-pseudo-checkbox{align-items:center;display:inline-flex;height:24px;margin:4px 0;transition:background .4s cubic-bezier(.25,.8,.25,1)}.rds-pseudo-checkbox .rds-pseudo-checkbox__container{cursor:inherit;display:inline-flex;-webkit-user-select:none;user-select:none;white-space:nowrap}.rds-pseudo-checkbox .rds-pseudo-checkbox__checkbox-container{position:relative;display:inline-block;margin:auto 10px auto auto;height:18px;width:18px}.rds-pseudo-checkbox.rds-pseudo-checkbox--no-spacing{height:unset;margin:0}.rds-pseudo-checkbox.rds-pseudo-checkbox--no-spacing .rds-pseudo-checkbox__checkbox-container{margin-right:auto}.rds-pseudo-checkbox .rds-pseudo-checkbox__frame{background:transparent;border:2px solid var(--rds-color-grey-3);border-radius:2px;inset:0;position:absolute}.rds-pseudo-checkbox .rds-pseudo-checkbox__background{align-items:center;background:var(--rds-color-informative);border-radius:2px;display:inline-flex;justify-content:center;inset:0;opacity:0;position:absolute;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.rds-pseudo-checkbox .rds-pseudo-checkbox__checkmark{fill:var(--rds-color-bg-base-1);stroke:var(--rds-color-bg-base-1);inset:0;opacity:0;position:absolute;width:100%}.rds-pseudo-checkbox .rds-pseudo-checkbox__checkmark-path{stroke-dasharray:22.910259;stroke-dashoffset:0;stroke-width:2.1333333333px}.rds-pseudo-checkbox .rds-pseudo-checkbox__indeterminate-mark{opacity:0;transform:scaleX(0) rotate(0) translateY(0);width:calc(100% - 6px);height:2px;background:var(--rds-color-bg-base-1)}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__checkmark{opacity:1}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__checkmark-path{stroke-dashoffset:0}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__background{opacity:1}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__indeterminate-mark{transform:scaleX(1) rotate(-45deg)}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__checkmark{opacity:0;transform:rotate(45deg)}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__checkmark-path{stroke-dashoffset:0}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__indeterminate-mark{opacity:1;transform:scaleX(1) rotate(0) translateY(0)}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__background{opacity:1}.rds-pseudo-checkbox.rds-pseudo-checkbox--disabled .rds-pseudo-checkbox__frame{border-color:var(--rds-color-grey-2)}.rds-pseudo-checkbox.rds-pseudo-checkbox--disabled .rds-pseudo-checkbox__background{background:var(--rds-color-grey-2)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPseudoCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-pseudo-checkbox', template: `
    <div class="rds-pseudo-checkbox__container">
      <div class="rds-pseudo-checkbox__checkbox-container">
        <div class="rds-pseudo-checkbox__frame"></div>
        <div class="rds-pseudo-checkbox__background">
          <svg
            focusable="false"
            class="rds-pseudo-checkbox__checkmark"
            viewBox="0 0 24 24"
            xml:space="preserve"
          >
            <path
              class="rds-pseudo-checkbox__checkmark-path"
              fill="none"
              d="M4.1,12.7 9,17.6 20.3,6.3"
            />
          </svg>
          <div class="rds-pseudo-checkbox__indeterminate-mark"></div>
        </div>
      </div>
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-pseudo-checkbox{align-items:center;display:inline-flex;height:24px;margin:4px 0;transition:background .4s cubic-bezier(.25,.8,.25,1)}.rds-pseudo-checkbox .rds-pseudo-checkbox__container{cursor:inherit;display:inline-flex;-webkit-user-select:none;user-select:none;white-space:nowrap}.rds-pseudo-checkbox .rds-pseudo-checkbox__checkbox-container{position:relative;display:inline-block;margin:auto 10px auto auto;height:18px;width:18px}.rds-pseudo-checkbox.rds-pseudo-checkbox--no-spacing{height:unset;margin:0}.rds-pseudo-checkbox.rds-pseudo-checkbox--no-spacing .rds-pseudo-checkbox__checkbox-container{margin-right:auto}.rds-pseudo-checkbox .rds-pseudo-checkbox__frame{background:transparent;border:2px solid var(--rds-color-grey-3);border-radius:2px;inset:0;position:absolute}.rds-pseudo-checkbox .rds-pseudo-checkbox__background{align-items:center;background:var(--rds-color-informative);border-radius:2px;display:inline-flex;justify-content:center;inset:0;opacity:0;position:absolute;transition:opacity 90ms cubic-bezier(0,0,.2,.1)}.rds-pseudo-checkbox .rds-pseudo-checkbox__checkmark{fill:var(--rds-color-bg-base-1);stroke:var(--rds-color-bg-base-1);inset:0;opacity:0;position:absolute;width:100%}.rds-pseudo-checkbox .rds-pseudo-checkbox__checkmark-path{stroke-dasharray:22.910259;stroke-dashoffset:0;stroke-width:2.1333333333px}.rds-pseudo-checkbox .rds-pseudo-checkbox__indeterminate-mark{opacity:0;transform:scaleX(0) rotate(0) translateY(0);width:calc(100% - 6px);height:2px;background:var(--rds-color-bg-base-1)}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__checkmark{opacity:1}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__checkmark-path{stroke-dashoffset:0}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__background{opacity:1}.rds-pseudo-checkbox.rds-pseudo-checkbox--checked .rds-pseudo-checkbox__indeterminate-mark{transform:scaleX(1) rotate(-45deg)}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__checkmark{opacity:0;transform:rotate(45deg)}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__checkmark-path{stroke-dashoffset:0}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__indeterminate-mark{opacity:1;transform:scaleX(1) rotate(0) translateY(0)}.rds-pseudo-checkbox.rds-pseudo-checkbox--indeterminate:not(.rds-pseudo-checkbox--checked) .rds-pseudo-checkbox__background{opacity:1}.rds-pseudo-checkbox.rds-pseudo-checkbox--disabled .rds-pseudo-checkbox__frame{border-color:var(--rds-color-grey-2)}.rds-pseudo-checkbox.rds-pseudo-checkbox--disabled .rds-pseudo-checkbox__background{background:var(--rds-color-grey-2)}\n"] }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], checked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-pseudo-checkbox--checked']
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-pseudo-checkbox--disabled']
            }], indeterminate: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-pseudo-checkbox--indeterminate']
            }], noSpacing: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-pseudo-checkbox--no-spacing']
            }] } });

let nextUniqueId$a = 0;
class RdsHintDirective {
    constructor() {
        this._id = `rds-control-hint-${nextUniqueId$a++}`;
    }
    get id() {
        return this._id;
    }
    set id(newId) {
        this._id = newId;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHintDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHintDirective, selector: "rds-control-hint", inputs: { id: "id" }, host: { properties: { "attr.id": "this.id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-control-hint',
                }]
        }], propDecorators: { id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }] } });

let nextUniqueId$9 = 0;
class RdsErrorDirective {
    constructor() {
        this._id = `rds-control-error-${nextUniqueId$9++}`;
        this.hostRole = 'alert';
    }
    get id() {
        return this._id;
    }
    set id(newId) {
        this._id = newId;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsErrorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsErrorDirective, selector: "rds-control-error", inputs: { id: "id" }, host: { properties: { "attr.role": "this.hostRole", "attr.id": "this.id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsErrorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-control-error',
                }]
        }], propDecorators: { hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }] } });

class RdsHelperTextModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHelperTextModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsHelperTextModule, declarations: [RdsErrorDirective, RdsHintDirective], exports: [RdsErrorDirective, RdsHintDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHelperTextModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHelperTextModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RdsErrorDirective, RdsHintDirective],
                    exports: [RdsErrorDirective, RdsHintDirective],
                }]
        }] });

class RdsCheckboxModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxModule, declarations: [RdsCheckboxComponent, RdsPseudoCheckboxComponent], imports: [CommonModule,
            ObserversModule,
            RdsHelperTextModule,
            ReactiveFormsModule], exports: [RdsCheckboxComponent, RdsPseudoCheckboxComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxModule, imports: [CommonModule,
            ObserversModule,
            RdsHelperTextModule,
            ReactiveFormsModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ObserversModule,
                        RdsHelperTextModule,
                        ReactiveFormsModule,
                    ],
                    declarations: [RdsCheckboxComponent, RdsPseudoCheckboxComponent],
                    exports: [RdsCheckboxComponent, RdsPseudoCheckboxComponent],
                }]
        }] });

const RDS_LIST_ITEM_SIZE_TO_AVATAR_SIZE_MAP = {
    s: 'xs',
    m: 's',
    l: 'm',
};
class RdsAbstractSelectableListItemComponent extends RdsListItemComponent {
    constructor() {
        super(...arguments);
        this.destroyRef = inject(DestroyRef);
        this.contentObserver = inject(ContentObserver);
        this.cdr = inject(ChangeDetectorRef);
        this.checkedChanged = new EventEmitter();
        this.role = 'option';
        this.checked = false;
    }
    get cssClasses() {
        return [...super.cssClasses, this.getSelectTypeClass()];
    }
    ngAfterViewInit() {
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.avatar) {
                this.avatar.disableInteractions = true;
                this.adjustAvatarSize();
            }
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        if (changes['size']) {
            this.adjustAvatarSize();
        }
    }
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.checkedChanged.emit(this.checked);
            this.cdr.markForCheck();
        }
    }
    adjustAvatarSize() {
        if (this.avatar &&
            this.avatar.size !== RDS_LIST_ITEM_SIZE_TO_AVATAR_SIZE_MAP[this.size]) {
            this.avatar.size = RDS_LIST_ITEM_SIZE_TO_AVATAR_SIZE_MAP[this.size];
        }
    }
    focus(origin) {
        this.renderer.addClass(this.elementRef.nativeElement, 'cdk-focused');
        if (origin === 'keyboard') {
            this.renderer.addClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        }
        this.cdr.markForCheck();
        this._focused.next(this);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectableListItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsAbstractSelectableListItemComponent, selector: "ng-component", inputs: { role: "role", checked: ["checked", "checked", booleanAttribute] }, outputs: { checkedChanged: "checkedChanged" }, host: { listeners: { "click": "toggle()" }, properties: { "attr.role": "this.role", "class": "this.cssClasses", "class.rds-list-item--checked": "this.checked" } }, queries: [{ propertyName: "avatar", first: true, predicate: RdsAvatarComponent, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectableListItemComponent, decorators: [{
            type: Component,
            args: [{ template: '' }]
        }], propDecorators: { avatar: [{
                type: ContentChild,
                args: [RdsAvatarComponent]
            }], checkedChanged: [{
                type: Output
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], checked: [{
                type: HostBinding,
                args: ['class.rds-list-item--checked']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], toggle: [{
                type: HostListener,
                args: ['click']
            }] } });

class RdsMultiSelectListItemComponent extends RdsAbstractSelectableListItemComponent {
    get checkedBindings() {
        return this.checked;
    }
    getSelectTypeClass() {
        return 'rds-multi-select-list-item';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectListItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiSelectListItemComponent, selector: "button[rds-multi-select-list-item], button[rdsMultiSelectListItem]", host: { properties: { "class.rds-list-item--checked": "this.checkedBindings", "attr.aria-checked": "this.checkedBindings" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsMultiSelectListItemComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-avatar\"/>\n<ng-content select=\"rds-icon\"/>\n@if (!avatar && !icon) {\n    <rds-pseudo-checkbox\n      noSpacing\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    />\n}\n<span class=\"rds-list-item-text\">\n  <ng-content/>\n</span>\n@if (avatar || icon) {\n    <rds-pseudo-checkbox\n      noSpacing\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      class=\"rds-list-item__checkbox-right\"\n    />\n}\n", isInline: true, dependencies: [{ kind: "component", type: RdsPseudoCheckboxComponent, selector: "rds-pseudo-checkbox", inputs: ["checked", "disabled", "indeterminate", "noSpacing"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectListItemComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_MULTI_SELECT_LIST_ITEM_TEMPLATE,
                    selector: 'button[rds-multi-select-list-item], button[rdsMultiSelectListItem]',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsMultiSelectListItemComponent,
                        },
                    ],
                }]
        }], propDecorators: { checkedBindings: [{
                type: HostBinding,
                args: ['class.rds-list-item--checked']
            }, {
                type: HostBinding,
                args: ['attr.aria-checked']
            }] } });

class RdsNestableListItemComponent extends RdsListItemComponent {
    constructor() {
        super(...arguments);
        this.hasChildItems = false;
        this.activated = false;
    }
    get cssClasses() {
        const classes = [...super.cssClasses, 'rds-nestable-list-item'];
        if (!this.disabled && this.activated) {
            classes.push('rds-nestable-list-item-activated');
        }
        return classes;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNestableListItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsNestableListItemComponent, selector: "button[rds-nestable-list-item], button[rdsNestableListItem]", inputs: { hasChildItems: ["hasChildItems", "hasChildItems", booleanAttribute], activated: ["activated", "activated", booleanAttribute] }, host: { properties: { "class": "this.cssClasses" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsNestableListItemComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n\n@if (hasChildItems) {\n  <rds-icon\n    namespace=\"outlined\"\n    icon=\"chevron_right\"\n    class=\"rds-list-item__has-child-items\"\n  />\n}", isInline: true, dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNestableListItemComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_NESTABLE_LIST_ITEM_TEMPLATE,
                    selector: 'button[rds-nestable-list-item], button[rdsNestableListItem]',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsNestableListItemComponent,
                        },
                    ],
                }]
        }], propDecorators: { cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], hasChildItems: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], activated: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsListItemContainerDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this._directDescendantItems = new QueryList();
        this.attrRole = 'menu';
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.ariaMultiSelectable = false;
        this.ariaActiveDescendant = null;
        this.class = 'rds-list-item-container';
    }
    ngAfterContentInit() {
        this._updateDirectDescendants();
        this._keyManager = new FocusKeyManager(this._directDescendantItems)
            .skipPredicate((i) => i.disabled)
            .withWrap()
            .withTypeAhead()
            .withHomeAndEnd();
        this._directDescendantItems.changes
            .pipe(startWith(this._directDescendantItems), tap(() => {
            this.tabIndex = this._directDescendantItems.filter((i) => !i.disabled)
                ? TAB_INDEX_DEFAULT
                : TAB_INDEX_NOT_FOCUSABLE;
            this.setRoleTagsIfParentNotSetAndChildrenHasSameValue();
            this.checkRoleTags();
        }), switchMap((items) => merge(...items.map((item) => item._focused))), takeUntilDestroyed(this.destroyRef))
            .subscribe((focusedItem) => this._keyManager.updateActiveItem(focusedItem));
    }
    ngOnChanges(changes) {
        if (changes['role'] && changes['role'].currentValue) {
            this.attrRole = this.role;
            this.checkRoleTags();
        }
    }
    ngOnDestroy() {
        this._directDescendantItems.destroy();
    }
    focus() {
        if (!this._keyManager.activeItem) {
            this._keyManager.setFirstItemActive();
        }
        if (this._keyManager.activeItem) {
            const firstSelected = this._directDescendantItems
                .toArray()
                .findIndex((i) => i.checked);
            if (firstSelected) {
                this._directDescendantItems.get(firstSelected)?.focus('keyboard');
            }
            this._keyManager.activeItem.focus('keyboard');
            this.ariaActiveDescendant = this._keyManager.activeItem.getLabel();
        }
    }
    blur() {
        this._keyManager.activeItem?.blur();
        this.ariaActiveDescendant = null;
    }
    handleKeydown(event) {
        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {
            this._keyManager.setFocusOrigin('keyboard');
        }
        const lastActiveItem = this._keyManager.activeItem;
        this._keyManager.onKeydown(event);
        if (this._keyManager.activeItem !== lastActiveItem) {
            lastActiveItem?.blur();
        }
        if (this._keyManager.activeItem) {
            if (event.keyCode === ENTER || event.keyCode === SPACE) {
                this._keyManager.activeItem.click();
                this._keyManager.activeItem.markAsActive();
            }
            this.ariaActiveDescendant = this._keyManager.activeItem.getLabel();
        }
    }
    handleKeyup(event) {
        if ((event.keyCode === ENTER || event.keyCode === SPACE) &&
            this._keyManager.activeItem) {
            this._keyManager.activeItem.markAsInactive();
        }
    }
    _updateDirectDescendants() {
        this._allItems.changes
            .pipe(startWith(this._allItems), takeUntilDestroyed(this.destroyRef))
            .subscribe((items) => {
            this._directDescendantItems.reset(items.toArray());
            this._directDescendantItems.notifyOnChanges();
        });
    }
    setRoleTagsIfParentNotSetAndChildrenHasSameValue() {
        if (!this.role) {
            const childRoles = this._directDescendantItems.reduce((acc, curr) => {
                if (!acc.includes(curr.role)) {
                    acc.push(curr.role);
                }
                return acc;
            }, []);
            if (childRoles.length === 1) {
                this.attrRole = childRoles[0] === 'menuitem' ? 'menu' : 'listbox';
            }
        }
    }
    checkRoleTags() {
        this.ariaMultiSelectable =
            this._directDescendantItems.filter((i) => !(i instanceof RdsMultiSelectListItemComponent)).length === 0;
        if (isDevMode()) {
            if (this.attrRole === 'menu') {
                const hasOptionsInsideMenu = this._directDescendantItems.some((i) => i.role !== 'menuitem');
                if (hasOptionsInsideMenu) {
                    throw new Error(`Defining role other than 'menuitem' for 'menu' parent is forbidden.`);
                }
            }
            else if (this.attrRole === 'listbox') {
                const hasMenuitemInsideListbox = this._directDescendantItems.some((i) => i.role !== 'option');
                if (hasMenuitemInsideListbox) {
                    throw new Error(`Defining role other than 'option' for 'listbox' parent is forbidden.`);
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemContainerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsListItemContainerDirective, selector: "[rds-list-item-container], [rdsListItemContainer]", inputs: { role: "role" }, host: { listeners: { "focus": "focus()", "blur": "blur()", "keydown": "handleKeydown($event)", "keyup": "handleKeyup($event)" }, properties: { "attr.role": "this.attrRole", "tabIndex": "this.tabIndex", "attr.aria-multiselectable": "this.ariaMultiSelectable", "attr.aria-activedescendant": "this.ariaActiveDescendant", "class": "this.class" } }, queries: [{ propertyName: "_allItems", predicate: RdsListItemComponent, descendants: true }], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-list-item-container], [rdsListItemContainer]',
                }]
        }], propDecorators: { _allItems: [{
                type: ContentChildren,
                args: [RdsListItemComponent, { descendants: true }]
            }], role: [{
                type: Input
            }], attrRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], ariaMultiSelectable: [{
                type: HostBinding,
                args: ['attr.aria-multiselectable']
            }], ariaActiveDescendant: [{
                type: HostBinding,
                args: ['attr.aria-activedescendant']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], handleKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });

class RdsSingleSelectListItemComponent extends RdsAbstractSelectableListItemComponent {
    get checkedBindings() {
        return this.checked;
    }
    getSelectTypeClass() {
        return 'rds-single-select-list-item';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleSelectListItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSingleSelectListItemComponent, selector: "button[rds-single-select-list-item], button[rdsSingleSelectListItem]", host: { properties: { "class.rds-list-item--checked": "this.checkedBindings", "attr.aria-selected": "this.checkedBindings" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsSingleSelectListItemComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-avatar\"/>\n<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n\n<rds-icon icon=\"checkmark\" class=\"rds-list-item-checkmark\"/>", isInline: true, dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleSelectListItemComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_SINGLE_SELECT_LIST_ITEM_TEMPLATE,
                    selector: 'button[rds-single-select-list-item], button[rdsSingleSelectListItem]',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsSingleSelectListItemComponent,
                        },
                    ],
                }]
        }], propDecorators: { checkedBindings: [{
                type: HostBinding,
                args: ['class.rds-list-item--checked']
            }, {
                type: HostBinding,
                args: ['attr.aria-selected']
            }] } });

const COMPONENTS$2 = [
    RdsHeaderListItemDirective,
    RdsNestableListItemComponent,
    RdsListItemComponent,
    RdsListItemContainerDirective,
    RdsMultiSelectListItemComponent,
    RdsSingleSelectListItemComponent,
];
class RdsListItemModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemModule, declarations: [RdsHeaderListItemDirective,
            RdsNestableListItemComponent,
            RdsListItemComponent,
            RdsListItemContainerDirective,
            RdsMultiSelectListItemComponent,
            RdsSingleSelectListItemComponent], imports: [CommonModule, RdsIconComponent, RdsCheckboxModule], exports: [RdsHeaderListItemDirective,
            RdsNestableListItemComponent,
            RdsListItemComponent,
            RdsListItemContainerDirective,
            RdsMultiSelectListItemComponent,
            RdsSingleSelectListItemComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemModule, imports: [CommonModule, RdsCheckboxModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsIconComponent, RdsCheckboxModule],
                    declarations: [...COMPONENTS$2],
                    exports: [...COMPONENTS$2],
                }]
        }] });

class RdsAutocompleteIntl {
    constructor() {
        this._change$ = new BehaviorSubject(RdsAutocompleteIntl.translations);
        this.change$ = this._change$.asObservable();
    }
    static { this.translations = {
        placeholder: 'Select an option',
        loadingText: 'Loading...',
        noDataText: 'No results found',
        newItemText: 'Create new',
    }; }
    setTranslation(key, value) {
        RdsAutocompleteIntl.translations[key] = value;
        this._change$.next({ ...RdsAutocompleteIntl.translations });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteIntl, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

const INVERSE_CLASSNAME = 'rds-autocomplate-highlight-inverse';
class RdsAutocompleteHighlightDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.sanitizer = inject(DomSanitizer);
        this.renderer = inject(Renderer2);
        this.caseSensitive = false;
        this.customClasses = '';
        this.inverse = false;
        this.disabled = false;
    }
    ngOnChanges(changes) {
        if (this.nativeElement && changes['inverse']) {
            this.applyInversion();
        }
        if (this.nativeElement &&
            (changes['searchTerm'] || changes['caseSensitive'] || changes['disabled'])) {
            const text = this.nativeElement.textContent || '';
            if (this.searchTerm === '' || this.disabled) {
                this.nativeElement.innerHTML = text;
            }
            else {
                const regex = new RegExp(this.searchTerm, this.caseSensitive ? 'g' : 'gi');
                const newText = text.replace(regex, (match) => `<mark class="rds-autocomplete-highlight${' ' + this.customClasses}">${match}</mark>`);
                this.nativeElement.innerHTML =
                    this.sanitizer.sanitize(SecurityContext.HTML, newText) || '';
            }
        }
    }
    applyInversion() {
        if (this.inverse &&
            !this.nativeElement.classList.contains(INVERSE_CLASSNAME)) {
            this.renderer.addClass(this.nativeElement, INVERSE_CLASSNAME);
        }
        else if (!this.inverse &&
            this.nativeElement.classList.contains(INVERSE_CLASSNAME)) {
            this.renderer.removeClass(this.nativeElement, INVERSE_CLASSNAME);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteHighlightDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAutocompleteHighlightDirective, isStandalone: true, selector: "[rdsAutocomplateHighlight], [rds-autocomplate-highlight]", inputs: { searchTerm: ["rdsAutocomplateHighlight", "searchTerm"], caseSensitive: ["rdsAutocomplateHighlightCaseSensitive", "caseSensitive", booleanAttribute], customClasses: ["rdsAutocomplateHighlightCustomClasses", "customClasses"], inverse: ["rdsAutocomplateHighlightInverse", "inverse", booleanAttribute], disabled: ["rdsAutocomplateHighlightDisabled", "disabled", booleanAttribute] }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteHighlightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsAutocomplateHighlight], [rds-autocomplate-highlight]',
                    standalone: true,
                }]
        }], propDecorators: { searchTerm: [{
                type: Input,
                args: ['rdsAutocomplateHighlight']
            }], caseSensitive: [{
                type: Input,
                args: [{
                        alias: 'rdsAutocomplateHighlightCaseSensitive',
                        transform: booleanAttribute,
                    }]
            }], customClasses: [{
                type: Input,
                args: ['rdsAutocomplateHighlightCustomClasses']
            }], inverse: [{
                type: Input,
                args: [{
                        alias: 'rdsAutocomplateHighlightInverse',
                        transform: booleanAttribute,
                    }]
            }], disabled: [{
                type: Input,
                args: [{
                        alias: 'rdsAutocomplateHighlightDisabled',
                        transform: booleanAttribute,
                    }]
            }] } });

const RDS_AUTOCOMPLETE_DEFAULT_CONFIG = Object.freeze({
    debounce: 1000,
    minSearchChars: 3,
    optionsContainerMaxHeight: 190,
    optionsContainerMinWidth: 170,
    multiMinimumInputWidth: 50,
    multiMinimumInputWidthOffset: 10,
});
const RDS_AUTOCOMPLETE_CONFIG = new InjectionToken('RDS_AUTOCOMPLETE_CONFIG');

class RdsAutocompleteOptionDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.renderer = inject(Renderer2);
        this.class = 'rds-autocomplete-option';
    }
    set keyboardFocusedItem(keyboardFocusedItem) {
        this._keyboardFocusedItem = keyboardFocusedItem;
        if (this === keyboardFocusedItem) {
            this.renderer.addClass(this.nativeElement, 'cdk-focused');
            this.renderer.addClass(this.nativeElement, 'cdk-keyboard-focused');
        }
        else {
            this.renderer.removeClass(this.nativeElement, 'cdk-focused');
            this.renderer.removeClass(this.nativeElement, 'cdk-keyboard-focused');
        }
    }
    get keyboardFocusedItem() {
        return this._keyboardFocusedItem;
    }
    ngOnInit() {
        this.autocomplete._addOption(this.nativeElement, this);
    }
    ngOnDestroy() {
        this.autocomplete._deleteOption(this.nativeElement);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteOptionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAutocompleteOptionDirective, isStandalone: true, selector: "rds-autocomplete-option, [rds-autocomplete-option], [rdsAutocompleteOption]", inputs: { autocomplete: ["rdsAutocompleteOption", "autocomplete"], keyboardFocusedItem: "keyboardFocusedItem" }, host: { properties: { "class": "this.class" } }, exportAs: ["rdsAutocompleteOption"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteOptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-autocomplete-option, [rds-autocomplete-option], [rdsAutocompleteOption]',
                    exportAs: 'rdsAutocompleteOption',
                    standalone: true,
                }]
        }], propDecorators: { autocomplete: [{
                type: Input,
                args: [{ required: true, alias: 'rdsAutocompleteOption' }]
            }], keyboardFocusedItem: [{
                type: Input,
                args: [{ required: true }]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsAutocompleteContainerComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.intl = inject(RdsAutocompleteIntl);
        this.observer = inject(ContentObserver);
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.config = {
            ...RDS_AUTOCOMPLETE_DEFAULT_CONFIG,
            ...inject(RDS_AUTOCOMPLETE_CONFIG, { optional: true }),
        };
        this.size = 's';
        this._options = [];
        this.selectedOptions = [];
        this.availableOptions = [];
        this.lastSelectedValue = null;
        this.loadingText = RdsAutocompleteIntl.translations.loadingText;
        this.noDataText = RdsAutocompleteIntl.translations.noDataText;
        this.newItemText = RdsAutocompleteIntl.translations.newItemText;
        this.autocompleteOptions = new Map();
        this.optionElements = [];
        this.trackBy = (_i, a) => this.autocomplete.getUniqProperty(a);
    }
    set options(options) {
        this._options = options;
        this.selectedOptions = options.filter((o) => this.autocomplete.isSelected(o));
        this.availableOptions = options.filter((o) => !this.autocomplete.isSelected(o));
        this.lastSelectedValue =
            this.autocomplete.values.length > 0
                ? this.autocomplete.values[this.autocomplete.values.length - 1]
                : null;
    }
    get options() {
        return this._options;
    }
    ngOnInit() {
        this.intl.change$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((t) => {
            this.loadingText = this.autocomplete.loadingText || t.loadingText;
            this.noDataText = this.autocomplete.noDataText || t.noDataText;
            this.newItemText = this.autocomplete.newItemText || t.newItemText;
            this.cdr.markForCheck();
        });
        this.observer
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.autocomplete.updatePosition());
    }
    _addOption(option, component) {
        this.autocompleteOptions.set(option, component);
    }
    _deleteOption(option) {
        this.autocompleteOptions.delete(option);
    }
    ngAfterContentChecked() {
        this.optionElements = [];
        for (let i = 0; i < this.autocompleteContainer?.nativeElement.children.length; i++) {
            const record = this.autocompleteOptions.get(this.autocompleteContainer.nativeElement.children.item(i));
            if (record) {
                this.optionElements.push(record);
            }
        }
    }
    onKeydown(event) {
        if (['Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {
            event.preventDefault();
            event.stopPropagation();
            if (event.key === 'Enter') {
                this.onEnter();
            }
            else if (event.key === 'ArrowUp') {
                this.onUpArrow();
            }
            else if (event.key === 'ArrowDown') {
                this.onDownArrow();
            }
        }
    }
    shouldShowCreateNewOption() {
        if (this.autocomplete.isInputFilled() &&
            typeof this.autocomplete.newItem === 'function') {
            const newItem = this.autocomplete.getNewItem();
            return !this.getSelectedFirstOptions().some((o) => this.autocomplete.compareItem(o, newItem));
        }
        else {
            return false;
        }
    }
    getSelectedFirstOptions() {
        return [...this.selectedOptions, ...this.availableOptions];
    }
    onDownArrow() {
        if (!this.keyboardFocusedItem) {
            this.selectFirstItem();
        }
        else {
            const index = this.optionElements.findIndex((e) => e === this.keyboardFocusedItem);
            const nextIndex = (index + 1) % this.optionElements.length;
            this.keyboardFocusedItem = this.optionElements[nextIndex];
        }
        this.scrollToSelectedItem();
        this.cdr.markForCheck();
    }
    onUpArrow() {
        if (!this.keyboardFocusedItem) {
            this.selectFirstItem();
        }
        else {
            const index = this.optionElements.findIndex((e) => e === this.keyboardFocusedItem);
            const nextIndex = index - 1 < 0 ? this.optionElements.length - 1 : index - 1;
            this.keyboardFocusedItem = this.optionElements[nextIndex];
        }
        this.scrollToSelectedItem();
        this.cdr.markForCheck();
    }
    onEnter() {
        if (this.optionElements) {
            const index = this.optionElements.findIndex((v) => v === this.keyboardFocusedItem);
            if (index >= 0) {
                for (const [element, option] of this.autocompleteOptions) {
                    if (this.optionElements[index] === option) {
                        element.dispatchEvent(new MouseEvent('click'));
                        break;
                    }
                }
            }
        }
    }
    scrollToSelectedItem() {
        let optionElement;
        for (const [element, option] of this.autocompleteOptions) {
            if (this.keyboardFocusedItem === option) {
                optionElement = element;
                break;
            }
        }
        if (this.keyboardFocusedItem) {
            const itemHeight = optionElement?.offsetHeight || 0;
            const scrollContainerHeight = this.autocompleteContainer.nativeElement.scrollHeight;
            const panelHeight = Math.min(scrollContainerHeight, this.config.optionsContainerMaxHeight);
            const divider = 2;
            const maxScroll = scrollContainerHeight - panelHeight;
            const scrollBuffer = panelHeight / divider;
            const optionOffsetFormScrollTop = this.optionElements.findIndex((el) => el === this.keyboardFocusedItem) *
                itemHeight;
            const halfOptionHeight = itemHeight / divider;
            const optimalScrollPosition = optionOffsetFormScrollTop - scrollBuffer + halfOptionHeight;
            this.autocompleteContainer.nativeElement.scrollTop = Math.min(Math.max(0, optimalScrollPosition), maxScroll);
        }
    }
    selectFirstItem() {
        if (this.optionElements[0]) {
            this.keyboardFocusedItem = this.optionElements[0];
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAutocompleteContainerComponent, isStandalone: true, selector: "rds-autocomplete-container", inputs: { size: "size", type: "type", options: "options" }, viewQueries: [{ propertyName: "autocompleteContainer", first: true, predicate: ["autocompleteContainer"], descendants: true }], ngImport: i0, template: `
    <div class="rds-autocomplete-container" #autocompleteContainer>
      @if (autocomplete.loading | async) {
        @if (autocomplete.loadingTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.loadingTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-loading"
            rds-list-item
            [size]="size"
            disabled
          >
            {{ autocomplete.loadingText || loadingText }}
          </button>
        }
      } @else {
        @for (option of selectedOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        @if (
          selectedOptions.length > 0 &&
          (availableOptions.length > 0 ||
            shouldShowCreateNewOption() ||
            (options.length === 0 && !shouldShowCreateNewOption()))
        ) {
          <div class="rds-autocomplete-separator"></div>
        }
        @if (shouldShowCreateNewOption()) {
          @if (autocomplete.newItemTemplate) {
            <ng-container
              [ngTemplateOutlet]="autocomplete.newItemTemplate"
              [ngTemplateOutletContext]="{
                $implicit: autocomplete,
                autocomplete,
                keyboardFocusedItem
              }"
            />
          } @else {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              class="rds-autocomplete-option-new-item"
              rds-list-item
              [size]="size"
              (click)="autocomplete.selectNewItem()"
            >
              <span class="rds-autocomplete-text">{{ newItemText }}</span>
              {{ autocomplete.getSearchQuery() }}
            </button>
          }
        }
        @for (option of availableOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        <ng-template #defaultOptionTemplate let-o="option">
          @if (type === 'single') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-single-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
          @if (type === 'multi') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-multi-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
        </ng-template>
      }
      @if (
        (autocomplete.loading | async) === false &&
        options.length === 0 &&
        !shouldShowCreateNewOption()
      ) {
        @if (autocomplete.noDataTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.noDataTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-option-no-data"
            rds-list-item
            [size]="size"
            disabled
          >
            <rds-icon namespace="outlined" icon="warning_circle" />
            {{ autocomplete.noDataText || noDataText }}
          </button>
        }
      }
    </div>
  `, isInline: true, styles: ["rds-autocomplete-container{width:100%;background:var(--rds-color-bg-base-1)}rds-autocomplete-container .rds-autocomplete-container{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;border-radius:2px;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1);display:flex;flex-direction:column;background-clip:padding-box;overflow-y:auto}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplete-highlight{font-weight:400;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse{font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse .rds-autocomplete-highlight{font-weight:200;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option.rds-autocomplete-option-new-item .rds-autocomplete-text{color:var(--rds-color-informative);font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-separator{border-bottom:1px solid var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: RdsListItemModule }, { kind: "component", type: RdsListItemComponent, selector: "button[rds-list-item], button[rdsListItem]", inputs: ["size", "role", "disabled"] }, { kind: "component", type: RdsMultiSelectListItemComponent, selector: "button[rds-multi-select-list-item], button[rdsMultiSelectListItem]" }, { kind: "component", type: RdsSingleSelectListItemComponent, selector: "button[rds-single-select-list-item], button[rdsSingleSelectListItem]" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: RdsAutocompleteHighlightDirective, selector: "[rdsAutocomplateHighlight], [rds-autocomplate-highlight]", inputs: ["rdsAutocomplateHighlight", "rdsAutocomplateHighlightCaseSensitive", "rdsAutocomplateHighlightCustomClasses", "rdsAutocomplateHighlightInverse", "rdsAutocomplateHighlightDisabled"] }, { kind: "directive", type: RdsAutocompleteOptionDirective, selector: "rds-autocomplete-option, [rds-autocomplete-option], [rdsAutocompleteOption]", inputs: ["rdsAutocompleteOption", "keyboardFocusedItem"], exportAs: ["rdsAutocompleteOption"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-autocomplete-container', template: `
    <div class="rds-autocomplete-container" #autocompleteContainer>
      @if (autocomplete.loading | async) {
        @if (autocomplete.loadingTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.loadingTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-loading"
            rds-list-item
            [size]="size"
            disabled
          >
            {{ autocomplete.loadingText || loadingText }}
          </button>
        }
      } @else {
        @for (option of selectedOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        @if (
          selectedOptions.length > 0 &&
          (availableOptions.length > 0 ||
            shouldShowCreateNewOption() ||
            (options.length === 0 && !shouldShowCreateNewOption()))
        ) {
          <div class="rds-autocomplete-separator"></div>
        }
        @if (shouldShowCreateNewOption()) {
          @if (autocomplete.newItemTemplate) {
            <ng-container
              [ngTemplateOutlet]="autocomplete.newItemTemplate"
              [ngTemplateOutletContext]="{
                $implicit: autocomplete,
                autocomplete,
                keyboardFocusedItem
              }"
            />
          } @else {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              class="rds-autocomplete-option-new-item"
              rds-list-item
              [size]="size"
              (click)="autocomplete.selectNewItem()"
            >
              <span class="rds-autocomplete-text">{{ newItemText }}</span>
              {{ autocomplete.getSearchQuery() }}
            </button>
          }
        }
        @for (option of availableOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        <ng-template #defaultOptionTemplate let-o="option">
          @if (type === 'single') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-single-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
          @if (type === 'multi') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-multi-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
        </ng-template>
      }
      @if (
        (autocomplete.loading | async) === false &&
        options.length === 0 &&
        !shouldShowCreateNewOption()
      ) {
        @if (autocomplete.noDataTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.noDataTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-option-no-data"
            rds-list-item
            [size]="size"
            disabled
          >
            <rds-icon namespace="outlined" icon="warning_circle" />
            {{ autocomplete.noDataText || noDataText }}
          </button>
        }
      }
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [
                        AsyncPipe,
                        RdsListItemModule,
                        NgTemplateOutlet,
                        RdsIconComponent,
                        RdsAutocompleteHighlightDirective,
                        RdsAutocompleteOptionDirective,
                    ], styles: ["rds-autocomplete-container{width:100%;background:var(--rds-color-bg-base-1)}rds-autocomplete-container .rds-autocomplete-container{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;border-radius:2px;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1);display:flex;flex-direction:column;background-clip:padding-box;overflow-y:auto}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplete-highlight{font-weight:400;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse{font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse .rds-autocomplete-highlight{font-weight:200;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option.rds-autocomplete-option-new-item .rds-autocomplete-text{color:var(--rds-color-informative);font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-separator{border-bottom:1px solid var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}\n"] }]
        }], propDecorators: { size: [{
                type: Input
            }], type: [{
                type: Input,
                args: [{ required: true }]
            }], options: [{
                type: Input
            }], autocompleteContainer: [{
                type: ViewChild,
                args: ['autocompleteContainer']
            }] } });

class RdsAbstractFormFieldControl {
    constructor() {
        this.ngControl = inject(NgControl, { optional: true, self: true });
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.stateChanges = new EventEmitter();
        this._disabled = false;
        this._focused = false;
        this._errorState = false;
    }
    get focused() {
        return this._focused;
    }
    get value() {
        return this._value;
    }
    set value(newId) {
        this._value = newId;
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(isDisabled) {
        this._disabled = booleanAttribute(isDisabled);
    }
    get required() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            false);
    }
    set required(isRequired) {
        this._required = booleanAttribute(isRequired);
    }
    get id() {
        return this._id;
    }
    set id(newId) {
        this._id = newId;
    }
}

class RdsLabelDirective {
    constructor() {
        this.class = 'rds-control-label';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLabelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsLabelDirective, selector: "rds-control-label", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-control-label',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsPrefixDirective {
    constructor() {
        this.hostClass = 'rds-form-field__control-prefix';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPrefixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsPrefixDirective, selector: "[rds-control-prefix], [rdsControlPrefix]", host: { properties: { "class": "this.hostClass" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPrefixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-control-prefix], [rdsControlPrefix]',
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

const SelectAnimations = [
    trigger('transformPanelWrap', [
        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),
    ]),
    trigger('transformPanel', [
        state('void', style({
            transform: 'scaleY(0.8)',
            minWidth: '100%',
            opacity: 0,
        })),
        state('showing', style({
            opacity: 1,
            minWidth: '100%', // 32px = 2 * 16px padding
            transform: 'scaleY(1)',
        })),
        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),
        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),
    ]),
];

class AbstractFocusableOption {
}

const RDS_INPUT_VALUE_ACCESSOR$1 = new InjectionToken('RDS_INPUT_VALUE_ACCESSOR');

const INPUT_INVALID_TYPES = [
    'button',
    'checkbox',
    'file',
    'hidden',
    'image',
    'radio',
    'range',
    'reset',
    'submit',
];
let nextUniqueId$8 = 0;
class RdsInputDirective extends RdsAbstractFormFieldControl {
    constructor() {
        super(...arguments);
        this.elementRef = inject(ElementRef);
        this.inputValueAccessor = inject(RDS_INPUT_VALUE_ACCESSOR$1, {
            optional: true,
            self: true,
        });
        this.prefixed = false;
        this.suffixed = false;
        this._uid = `rds-input-${nextUniqueId$8++}`;
        this._inputValueAccessor = this.inputValueAccessor || this.elementRef.nativeElement;
        this._previousNativeValue = this.value;
        this._type = 'text';
        this._placeholder = '';
        this._readonly = false;
        this._neverEmptyInputTypes = [
            'date',
            'datetime',
            'datetime-local',
            'month',
            'time',
            'week',
        ].filter((t) => getSupportedInputTypes().has(t));
        this._isTextarea = this.elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';
        this.hostClass = 'rds-form-field__control';
        this.hostAutocomplete = 'off';
        this._id = this._uid;
    }
    get hostAriaDescribedBy() {
        return this._ariaDescribedby;
    }
    set hostAriaDescribedBy(newValue) {
        this._ariaDescribedby = newValue;
    }
    get errorState() {
        return this._errorState;
    }
    get hostClassSuffixed() {
        return this.suffixed;
    }
    get hostClassPrefixed() {
        return this.prefixed;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
    }
    get attrDisabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled ? this.ngControl.disabled : null;
        }
        return this._disabled ? this._disabled : null;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this._focused) {
            this._focused = false;
            this.stateChanges.next();
        }
    }
    get disabled() {
        return this.attrDisabled || false;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    get required() {
        return this.attrRequired ?? false;
    }
    set required(value) {
        this._required = booleanAttribute(value);
    }
    get readonly() {
        return this._readonly ? true : null;
    }
    set readonly(value) {
        this._readonly = booleanAttribute(value);
    }
    get type() {
        return this._type;
    }
    set type(newValue) {
        this._type = newValue || 'text';
        this.validateType();
        // When using Angular inputs, developers are no longer able to set the properties on the native
        // input element. To ensure that bindings for `type` work, we need to sync the setter
        // with the native property. Textarea elements don't support the type property or attribute.
        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {
            this.elementRef.nativeElement.type = this._type;
        }
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get value() {
        return this._inputValueAccessor.value;
    }
    set value(newValue) {
        this._inputValueAccessor.value = newValue;
        if (newValue !== this._inputValueAccessor.value) {
            this.stateChanges.next();
        }
    }
    get empty() {
        return (!this.isNeverEmpty() &&
            !this.elementRef.nativeElement.value &&
            !this.isNativelyBadInput());
    }
    get shouldLabelFloat() {
        return this._focused || !this.empty;
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    ngDoCheck() {
        this.showHidePlaceholder();
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            const oldState = this._errorState;
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (oldState !== this._errorState) {
                this.stateChanges.next();
            }
        }
        // We need to dirty-check the native element's value, because there are some cases where
        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
        // updating the value using `emitEvent: false`).
        this.dirtyCheckNativeValue();
        this.dirtyDisabledValue();
    }
    focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this._focused = isFocused;
            this.stateChanges.next();
        }
    }
    onInput() {
        // This is a noop function and is used to let Angular know whenever the value changes.
        // Angular will run a new change detection each time the `input` event has been dispatched.
        // It's necessary that Angular recognizes the value change, because when floatingLabel
        // is set to false and Angular forms aren't used, the placeholder won't recognize the
        // value changes and will not disappear.
        // Listening to the input event wouldn't be necessary when the input is using the
        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
    }
    setDescribedByIds(ids) {
        this.hostAriaDescribedBy = ids.join(' ');
    }
    onContainerClick() {
        if (!this._focused) {
            this.focus();
        }
    }
    get controlType() {
        if (this.elementRef?.nativeElement?.tagName.toUpperCase() === 'TEXTAREA') {
            return 'textarea-field';
        }
        return this.elementRef?.nativeElement?.classList.contains('rds-datepicker-input')
            ? 'date-picker'
            : 'text-field';
    }
    getMaxlengthAttr() {
        return numberAttribute(this.elementRef.nativeElement.getAttribute('maxlength'), 0);
    }
    dirtyCheckNativeValue() {
        const newValue = this.elementRef.nativeElement.value;
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this.stateChanges.next();
        }
    }
    dirtyDisabledValue() {
        if (this._disabled !== this.disabled) {
            this._disabled = this.disabled;
            this.stateChanges.next();
        }
    }
    validateType() {
        if (INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
            throw new Error(`Unsupported type of rds input <${this._type}>`);
        }
    }
    isNeverEmpty() {
        return this._neverEmptyInputTypes.indexOf(this._type) > -1;
    }
    isNativelyBadInput() {
        const validity = this.elementRef.nativeElement
            .validity;
        return validity && validity.badInput;
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    showHidePlaceholder() {
        const element = this.elementRef.nativeElement;
        const datePlaceholder = element.getAttribute('date-placeholder') ?? '';
        const placeholder = this.placeholder ? this.placeholder : datePlaceholder;
        const isSearch = element.type === 'search';
        const contentInfix = this.getContentInfixParentElement(element);
        const isFloatingLabel = contentInfix?.classList.contains('rds-form-field__content-infix--floating-label');
        const isInputWithChips = element.classList.contains('rds-chip-input');
        const inputWithChipsHasPlaceholder = !element.classList.contains('rds-chip-input-no-placeholder');
        if (element.value) {
            return;
        }
        if (isSearch || (isInputWithChips && inputWithChipsHasPlaceholder)) {
            element.placeholder = placeholder;
            return;
        }
        element.placeholder = !isFloatingLabel || this._focused ? placeholder : '';
    }
    getContentInfixParentElement(target) {
        let parent = target.parentElement;
        while (parent &&
            !parent.classList.contains('rds-form-field__content-infix')) {
            parent = parent.parentElement;
        }
        return parent;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsInputDirective, selector: " input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]", inputs: { id: "id", disabled: "disabled", required: "required", readonly: "readonly", type: "type", placeholder: "placeholder", value: "value" }, host: { listeners: { "focus": "focusChanged(true)", "blur": "focusChanged(false)", "input": "onInput()" }, properties: { "class": "this.hostClass", "attr.autocomplete": "this.hostAutocomplete", "attr.aria-describedby": "this.hostAriaDescribedBy", "attr.aria-invalid": "this.errorState", "class.rds-form-field__control--suffixed": "this.hostClassSuffixed", "class.rds-form-field__control--prefixed": "this.hostClassPrefixed", "id": "this.id", "attr.disabled": "this.attrDisabled", "attr.required": "this.attrRequired", "attr.readonly": "this.readonly" } }, providers: [
            { provide: RdsAbstractFormFieldControl, useExisting: RdsInputDirective },
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: ` input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]`,
                    providers: [
                        { provide: RdsAbstractFormFieldControl, useExisting: RdsInputDirective },
                    ],
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostAutocomplete: [{
                type: HostBinding,
                args: ['attr.autocomplete']
            }], hostAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], errorState: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], hostClassSuffixed: [{
                type: HostBinding,
                args: ['class.rds-form-field__control--suffixed']
            }], hostClassPrefixed: [{
                type: HostBinding,
                args: ['class.rds-form-field__control--prefixed']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['id']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], disabled: [{
                type: Input
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.readonly']
            }], type: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], value: [{
                type: Input
            }], focusChanged: [{
                type: HostListener,
                args: ['focus', ['true']]
            }, {
                type: HostListener,
                args: ['blur', ['false']]
            }], onInput: [{
                type: HostListener,
                args: ['input']
            }] } });

let uniqueId$3 = 0;
class RdsSelectSearchInputComponent {
    constructor() {
        this.renderer = inject(Renderer2);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.control = new FormControl('');
        this.size = 'm';
        this.id = `rds-select__search-input-${uniqueId$3++}`;
        this.placeholder = 'Search...';
        this.changed = new EventEmitter();
    }
    get cssClasses() {
        return [
            'rds-select__option',
            'rds-select__option--search-input',
            `rds-select__option--search-input--${this.size}`,
        ];
    }
    handleClick() {
        this.search.nativeElement.focus();
        this.renderer.addClass(this.elementRef.nativeElement, 'cdk-focused');
        this.renderer.addClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        this.cdr.markForCheck();
    }
    stopPropagation($event) {
        if ($event.keyCode === SPACE ||
            ($event.keyCode === A && hasModifierKey($event, 'ctrlKey'))) {
            $event.stopPropagation();
        }
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return true;
    }
    ngAfterViewInit() {
        if (this.searchInput && this.searchInput.ngControl) {
            this.searchInput.ngControl.valueChanges
                ?.pipe(tap((v) => this.changed.emit(v)), takeUntilDestroyed(this.destroyRef))
                .subscribe({ next: noop, error: noop });
        }
        this.focus();
    }
    reset() {
        this.searchInput?.ngControl?.reset();
    }
    focus(origin, options) {
        const element = this.elementRef.nativeElement;
        if (typeof element.focus === 'function') {
            element.focus(options);
            this.handleClick();
        }
    }
    isDirtyValue() {
        return this.control.value !== '';
    }
    resetInput() {
        if (this.isDirtyValue()) {
            this.control.setValue('');
            this.search.nativeElement.focus();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectSearchInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSelectSearchInputComponent, selector: "rds-select-search-input", inputs: { size: "size", placeholder: "placeholder" }, outputs: { changed: "changed" }, host: { listeners: { "click": "handleClick()", "focus": "handleClick()", "keydown": "stopPropagation($event)" }, properties: { "class": "this.cssClasses" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: RdsInputDirective, descendants: true }, { propertyName: "search", first: true, predicate: ["search"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: `
    <rds-icon
      class="rds-search-icon rds-select__option--search-input-prefix"
      namespace="filled"
      icon="search"
      aria-hidden="true"
    />
    <input
      [formControl]="control"
      #search
      rdsInput
      (search)="$event.preventDefault(); $event.stopPropagation()"
      [placeholder]="placeholder"
    />
    <button
      rds-icon-button
      [size]="'s'"
      [class.hidden]="!isDirtyValue()"
      (click)="resetInput(); $event.stopPropagation()"
      class="rds-search-reset-button rds-select__option--search-input-suffix"
    >
      <rds-icon namespace="filled" icon="close" aria-hidden="true" />
    </button>
  `, isInline: true, styles: [".rds-select__option--search-input{display:flex;flex-direction:row;border-radius:2px;border:1px solid var(--rds-color-stroke-enabled);align-items:center;margin:8px 16px}.rds-select__option--search-input--l{height:48px;padding:4px 15px}.rds-select__option--search-input--l rds-icon{height:24px;width:24px;color:var(--rds-color-low-contrast)}.rds-select__option--search-input--l input{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:calc(100% - 6px);border:none;box-shadow:none;background:transparent;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-select__option--search-input--l input:hover,.rds-select__option--search-input--l input:focus{outline:none}.rds-select__option--search-input--l input ::placeholder{color:var(--rds-color-low-contrast)}.rds-select__option--search-input .rds-select__option--search-input-suffix{padding-right:8px}.rds-select__option--search-input .rds-select__option--search-input-suffix rds-icon{margin-top:0}.rds-select__option--search-input--m{height:36px;padding:4px 11px}.rds-select__option--search-input--m rds-icon{height:18px;width:18px;color:var(--rds-color-low-contrast)}.rds-select__option--search-input--m input{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:calc(100% + -0px);border:none;box-shadow:none;background:transparent;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-select__option--search-input--m input:hover,.rds-select__option--search-input--m input:focus{outline:none}.rds-select__option--search-input--m input ::placeholder{color:var(--rds-color-low-contrast)}.rds-select__option--search-input .rds-select__option--search-input-suffix{padding-right:4px}.rds-select__option--search-input .rds-select__option--search-input-suffix rds-icon{margin-top:2px}.rds-select__option--search-input--s{height:28px;padding:4px 7px}.rds-select__option--search-input--s rds-icon{height:18px;width:18px;color:var(--rds-color-low-contrast)}.rds-select__option--search-input--s input{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:calc(100% + -0px);border:none;box-shadow:none;background:transparent;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-select__option--search-input--s input:hover,.rds-select__option--search-input--s input:focus{outline:none}.rds-select__option--search-input--s input ::placeholder{color:var(--rds-color-low-contrast)}.rds-select__option--search-input .rds-select__option--search-input-prefix{margin-right:8px}.rds-select__option--search-input .rds-select__option--search-input-suffix{padding-right:0}.rds-select__option--search-input .rds-select__option--search-input-suffix rds-icon{margin-top:-1px}.rds-select__option--search-input .rds-select__option--search-input-suffix.hidden{visibility:hidden}.rds-select__option--search-input:hover{border-color:var(--rds-color-stroke-hover)}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: RdsInputDirective, selector: " input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]", inputs: ["id", "disabled", "required", "readonly", "type", "placeholder", "value"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectSearchInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-select-search-input', template: `
    <rds-icon
      class="rds-search-icon rds-select__option--search-input-prefix"
      namespace="filled"
      icon="search"
      aria-hidden="true"
    />
    <input
      [formControl]="control"
      #search
      rdsInput
      (search)="$event.preventDefault(); $event.stopPropagation()"
      [placeholder]="placeholder"
    />
    <button
      rds-icon-button
      [size]="'s'"
      [class.hidden]="!isDirtyValue()"
      (click)="resetInput(); $event.stopPropagation()"
      class="rds-search-reset-button rds-select__option--search-input-suffix"
    >
      <rds-icon namespace="filled" icon="close" aria-hidden="true" />
    </button>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-select__option--search-input{display:flex;flex-direction:row;border-radius:2px;border:1px solid var(--rds-color-stroke-enabled);align-items:center;margin:8px 16px}.rds-select__option--search-input--l{height:48px;padding:4px 15px}.rds-select__option--search-input--l rds-icon{height:24px;width:24px;color:var(--rds-color-low-contrast)}.rds-select__option--search-input--l input{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:calc(100% - 6px);border:none;box-shadow:none;background:transparent;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-select__option--search-input--l input:hover,.rds-select__option--search-input--l input:focus{outline:none}.rds-select__option--search-input--l input ::placeholder{color:var(--rds-color-low-contrast)}.rds-select__option--search-input .rds-select__option--search-input-suffix{padding-right:8px}.rds-select__option--search-input .rds-select__option--search-input-suffix rds-icon{margin-top:0}.rds-select__option--search-input--m{height:36px;padding:4px 11px}.rds-select__option--search-input--m rds-icon{height:18px;width:18px;color:var(--rds-color-low-contrast)}.rds-select__option--search-input--m input{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:calc(100% + -0px);border:none;box-shadow:none;background:transparent;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-select__option--search-input--m input:hover,.rds-select__option--search-input--m input:focus{outline:none}.rds-select__option--search-input--m input ::placeholder{color:var(--rds-color-low-contrast)}.rds-select__option--search-input .rds-select__option--search-input-suffix{padding-right:4px}.rds-select__option--search-input .rds-select__option--search-input-suffix rds-icon{margin-top:2px}.rds-select__option--search-input--s{height:28px;padding:4px 7px}.rds-select__option--search-input--s rds-icon{height:18px;width:18px;color:var(--rds-color-low-contrast)}.rds-select__option--search-input--s input{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;width:calc(100% + -0px);border:none;box-shadow:none;background:transparent;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-select__option--search-input--s input:hover,.rds-select__option--search-input--s input:focus{outline:none}.rds-select__option--search-input--s input ::placeholder{color:var(--rds-color-low-contrast)}.rds-select__option--search-input .rds-select__option--search-input-prefix{margin-right:8px}.rds-select__option--search-input .rds-select__option--search-input-suffix{padding-right:0}.rds-select__option--search-input .rds-select__option--search-input-suffix rds-icon{margin-top:-1px}.rds-select__option--search-input .rds-select__option--search-input-suffix.hidden{visibility:hidden}.rds-select__option--search-input:hover{border-color:var(--rds-color-stroke-hover)}\n"] }]
        }], propDecorators: { size: [{
                type: Input
            }], searchInput: [{
                type: ViewChild,
                args: [RdsInputDirective]
            }], search: [{
                type: ViewChild,
                args: ['search', { static: true, read: ElementRef }]
            }], cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], placeholder: [{
                type: Input
            }], changed: [{
                type: Output
            }], handleClick: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['focus']
            }], stopPropagation: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

const SELECT_PANEL_MAX_HEIGHT = 256;

let nextUniqueId$7 = 0;
class RdsAbstractSelectComponent extends RdsAbstractFormFieldControl {
    get hostAriaDescribedBy() {
        return this._ariaDescribedby || null;
    }
    get hostTabindex() {
        return this.disabled ? '-1' : '0';
    }
    get hostAriaOwns() {
        return this.panelOpen ? this.optionIds : null;
    }
    get hostActivedescendant() {
        if (this.panelOpen && this.keyManager && this.keyManager.activeItem) {
            return this.keyManager.activeItem.id;
        }
        return null;
    }
    get hostAriaLabelledBy() {
        return this.ariaLabelledby || null;
    }
    get attrDisabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled ? this.ngControl.disabled : null;
        }
        return this._disabled ? this._disabled : null;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    set required(value) {
        const newValue = booleanAttribute(value);
        if (newValue !== this._required) {
            this._required = newValue;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    get errorState() {
        return this._errorState;
    }
    get hostAriaLabel() {
        if (this.ariaLabelledby) {
            return null;
        }
        if (this._ariaLabel) {
            return this._ariaLabel;
        }
        else {
            return null;
        }
    }
    set hostAriaLabel(newValue) {
        if (newValue !== this._ariaLabel) {
            this._ariaLabel = newValue;
            this.stateChanges.next();
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
        this.stateChanges.next();
    }
    set disabled(newValue) {
        const disabled = booleanAttribute(newValue);
        if (disabled !== this._disabled) {
            if (!this.panelOpen && this.keyManager) {
                this.keyManager.updateActiveItem(-1);
            }
            this._disabled = disabled;
        }
    }
    get disabled() {
        return this.attrDisabled || false;
    }
    set hideValue(value) {
        const newValue = booleanAttribute(value);
        if (this._hideValue !== newValue) {
            this._hideValue = booleanAttribute(value);
            this.stateChanges.emit();
        }
    }
    get hideValue() {
        return this._hideValue;
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.emit();
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue !== this._value) {
            this.writeValue(newValue);
            this._value = newValue;
        }
    }
    get filterBy() {
        return this._filterBy;
    }
    set filterBy(fn) {
        this._filterBy = fn;
    }
    handleKeydown(event) {
        if (!this.disabled) {
            this.panelOpen
                ? this.handleOpenKeydown(event)
                : this.handleClosedKeydown(event);
        }
    }
    onFocus() {
        if (!this.disabled) {
            this._focused = true;
            this.stateChanges.next();
        }
    }
    onBlur() {
        this._focused = false;
        if (!this.disabled) {
            this.onTouched();
            this.cdr.markForCheck();
            this.stateChanges.next();
        }
    }
    get focused() {
        return this._focused || this._panelOpen;
    }
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    onContainerClick() {
        this.focus();
        this.open();
    }
    get shouldLabelFloat() {
        return !this.hideValue && (this._panelOpen || !this.empty);
    }
    get empty() {
        return !this.selectionModel || this.selectionModel.isEmpty();
    }
    get controlType() {
        return 'select';
    }
    get panelOpen() {
        return this._panelOpen;
    }
    constructor() {
        super();
        this.destroyRef = inject(DestroyRef);
        this.viewportRuler = inject(ViewportRuler);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.scrollStrategyOptions = inject(ScrollStrategyOptions);
        this.elementRef = inject(ElementRef);
        this.liveAnnouncer = inject(LiveAnnouncer);
        this.renderer = inject(Renderer2);
        this.formField = inject(forwardRef(() => RdsFormFieldComponent));
        this._name = 'rds-abstract-select';
        this._uid = `${this._name}-${nextUniqueId$7++}`;
        this.selectAllDestroy$ = new Subject();
        this.destroyKeyManager$ = new Subject();
        this.minPanelWidth = 170;
        this._filterValue = null;
        this._panelOpen = false;
        /** The scroll position of the overlay panel, calculated to center the selected option. */
        this._scrollTop = 0;
        this._ariaLabel = '';
        this.optionIds = '';
        this._hideValue = false;
        this._placeholder = '';
        this.positions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
        ];
        this.optionSelectionChanges = defer(() => {
            const options = this.options;
            if (options) {
                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map((option) => option.selectionChange$))), 
                // should emit one time if many selection changes at one time e.g.: select/deselect all
                debounceTime(1));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));
        });
        this._id = this._uid;
        this.minWidth = this.minPanelWidth;
        this.transformOrigin = 'top';
        this.panelDoneAnimatingStream = new Subject();
        this.hostRole = 'listbox';
        this.hostClass = 'rds-form-field__control';
        this.valueChange = new EventEmitter();
        this.openChange = new EventEmitter();
        this.onChange = noop;
        this.onTouched = noop;
        this._filterBy = (t, o) => this._defaultFilterBy(t, o);
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        const scrollStrategy = () => this.scrollStrategyOptions.block();
        this.scrollStrategy = scrollStrategy();
        if (!this.compareWith) {
            this.compareWith = (o1, o2) => o1 === o2;
        }
    }
    ngOnInit() {
        this.stateChanges.next();
        this.stateChanges
            .pipe(delay(1), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this._setSize(this.formField.size);
            this.cdr.markForCheck();
        });
        // We need `distinctUntilChanged` here, because some browsers will
        // fire the animation end event twice for the same animation. See:
        // https://github.com/angular/angular/issues/24084
        this.panelDoneAnimatingStream
            .pipe(distinctUntilChanged(), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.panelOpen) {
                this._scrollTop = 0;
            }
            else {
                this.overlayDir.offsetX = 0;
                this.cdr.markForCheck();
            }
        });
        this.viewportRuler
            .change()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this._panelOpen) {
                this.triggerClientRect =
                    this.trigger.nativeElement.getBoundingClientRect();
                this.minWidth = Math.max(this.minPanelWidth, this.triggerClientRect.width);
                this.cdr.markForCheck();
            }
        });
    }
    ngAfterContentInit() {
        this.initKeyManager();
        this.selectionModel.changed
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            event.added.forEach((option) => (option.checked = true));
            event.removed.forEach((option) => (option.checked = false));
            this.cdr.markForCheck();
        });
        this.options.changes
            .pipe(startWith([null]), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.resetOptions();
            this.initializeSelection();
        });
        if (this.selectSearch) {
            this.selectSearch.changed
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe((filterValue) => {
                this._filterValue = filterValue;
                this.refreshOptionsVisibility();
                this.options.forEach((o) => o.setInactiveStyles());
                this.initKeyManager();
            });
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            const oldState = this._errorState;
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (oldState !== this._errorState) {
                this.stateChanges.next();
            }
        }
        this.dirtyDisabledValue();
    }
    ngOnChanges(changes) {
        if (changes['disabled']) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.selectAllDestroy$.complete();
        this.destroyKeyManager$.next();
        this.destroyKeyManager$.complete();
        this.stateChanges.complete();
        this.openChange.complete();
    }
    dirtyDisabledValue() {
        if (this._disabled !== this.disabled) {
            this._disabled = this.disabled;
            this.stateChanges.next();
        }
    }
    removeValue(index) {
        const values = Array.from(this.options.filter((item) => item.checked && !item.disabled));
        values.splice(index, 1);
        this.selectionModel.clear();
        this.selectionModel.select(...values);
        this.propagateChanges();
    }
    toggle() {
        this.panelOpen ? this.close() : this.open();
    }
    resetFilterValue() {
        this.selectSearch?.reset();
    }
    open() {
        if (this.disabled ||
            !this.options ||
            !this.options.length ||
            this._panelOpen) {
            return;
        }
        this.initKeyManager();
        this.triggerClientRect = this.trigger.nativeElement.getBoundingClientRect();
        this.minWidth = Math.max(this.minPanelWidth, this.triggerClientRect.width);
        this._panelOpen = true;
        this.keyManager.withHorizontalOrientation(null);
        this.cdr.markForCheck();
        this.openChange.emit(true);
    }
    close() {
        if (this._panelOpen) {
            this.focus();
            this.options.forEach((i) => i.setInactiveStyles());
            this._panelOpen = false;
            this.keyManager.withHorizontalOrientation('rtl');
            this.onTouched();
            this.cdr.markForCheck();
            this.openChange.emit(false);
        }
    }
    writeValue(value) {
        if (this.options) {
            this.setSelectionByValue(value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
        this.stateChanges.next();
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    onAttached() {
        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {
            this.cdr.detectChanges();
            this.overlayDir.overlayRef.updatePosition();
            this.panel.nativeElement.scrollTop = this._scrollTop;
            this.selectSearch?.focus();
        });
    }
    refreshOptionsVisibility() {
        if (this.panel &&
            this.panel.nativeElement &&
            this.options &&
            this.options.length > 0) {
            this.options.forEach((item, index, array) => {
                if (typeof this._filterBy === 'function') {
                    item.toggleVisibility(this._filterBy(this._filterValue, item, index, array));
                }
                else {
                    item.toggleVisibility(this._defaultFilterBy(this._filterValue, item));
                }
            });
            if (this.options.filter((item) => item.isVisible()).length === 0) {
                this.renderer.setStyle(this.panel.nativeElement, 'overflow', 'hidden');
            }
            else {
                this.renderer.removeStyle(this.panel.nativeElement, 'overflow');
            }
            this.cdr.markForCheck();
        }
    }
    shouldShowPlaceholder() {
        return (this.hasPlaceholderValue() &&
            (this.formField._labelPosition !== 'floating' ||
                (this.formField._labelPosition === 'floating' &&
                    this.selectionModel.isEmpty() &&
                    this.shouldLabelFloat)));
    }
    shouldShowValue() {
        return (!this.hideValue &&
            (this.selectionModel.hasValue() || !this.hasPlaceholderValue()));
    }
    hasPlaceholderValue() {
        return !!this.placeholder && String(this.placeholder).trim().length > 0;
    }
    _defaultFilterBy(text, option) {
        if (text === null || text === '') {
            return true;
        }
        else if (option &&
            typeof option.value === 'string' &&
            typeof text === 'string') {
            return option.value.includes(text);
        }
        else {
            return option.value === text;
        }
    }
    initializeSelection() {
        Promise.resolve().then(() => {
            if (this.ngControl) {
                this._value = this.ngControl.value;
            }
            this.setSelectionByValue(this._value);
            this.stateChanges.next();
        });
    }
    selectValue(value) {
        const correspondingOption = this.options.find((option) => {
            try {
                // Treat null as a special reset value.
                return option.value != null && this.compareWith(option.value, value);
            }
            catch (error) {
                return false;
            }
        });
        if (correspondingOption) {
            this.selectionModel.select(correspondingOption);
        }
        return correspondingOption;
    }
    initKeyManager() {
        this.destroyKeyManager$.next();
        this.keyManager = new ActiveDescendantKeyManager(this.focusableOptions.filter((o) => o.isVisible()))
            .withVerticalOrientation()
            .withHorizontalOrientation('rtl')
            .withAllowedModifierKeys(['shiftKey'])
            .withHomeAndEnd();
        if (this.selectionModel.selected[0]) {
            const selectedIndex = this.focusableOptions
                .filter((o) => o.isVisible())
                .indexOf(this.selectionModel.selected[0]);
            this.keyManager.updateActiveItem(selectedIndex);
        }
        this.keyManager.tabOut
            .pipe(takeUntil(this.destroyKeyManager$), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.panelOpen) {
                this.close();
            }
        });
        this.keyManager.change
            .pipe(takeUntil(this.destroyKeyManager$), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this._panelOpen && this.panel) {
                this.scrollActiveOptionIntoView();
            }
        });
    }
    resetOptions() {
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        merge(...this.options.map((option) => option.checkedChanged))
            .pipe(
        // should emit one time if states changes for many options
        debounceTime(1), takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.stateChanges.next();
        });
        this.optionIds = this.options.map((option) => option.id).join(' ');
    }
    onSelect(option) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (wasSelected !== option.checked) {
            option.checked
                ? this.selectionModel.select(option)
                : this.selectionModel.deselect(option);
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.propagateChanges();
        }
        this.stateChanges.next();
    }
    propagateChanges() {
        const valueToEmit = this.getValueToEmit();
        this._value = valueToEmit;
        this.valueChange.emit(valueToEmit);
        this.onChange(valueToEmit);
        this.cdr.markForCheck();
    }
    scrollActiveOptionIntoView() {
        const itemHeight = this.keyManager.activeItem?.rect().height || 0;
        const scrollContainerHeight = this.panel.nativeElement.scrollHeight;
        const panelHeight = Math.min(scrollContainerHeight, SELECT_PANEL_MAX_HEIGHT);
        const maxScroll = scrollContainerHeight - panelHeight;
        const scrollBuffer = panelHeight / 2;
        const optionOffsetFormScrollTop = (this.keyManager.activeItemIndex || 0) * itemHeight;
        const halfOptionHeight = itemHeight / 2;
        const optimalScrollPosition = optionOffsetFormScrollTop - scrollBuffer + halfOptionHeight;
        this._scrollTop = Math.min(Math.max(0, optimalScrollPosition), maxScroll);
        this.panel.nativeElement.scrollTop = this._scrollTop;
    }
    _setSize(size) {
        this.options?.forEach((option) => (option.size = size));
        if (this.selectSearch) {
            this.selectSearch.size = size;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAbstractSelectComponent, inputs: { required: "required", hostAriaLabel: ["aria-label", "hostAriaLabel"], id: "id", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], sortComparator: "sortComparator", compareWith: "compareWith", disabled: "disabled", hideValue: "hideValue", placeholder: "placeholder", value: "value", filterBy: "filterBy" }, outputs: { valueChange: "valueChange", openChange: "openChange" }, host: { listeners: { "keydown": "handleKeydown($event)", "focus": "onFocus()", "blur": "onBlur()" }, properties: { "attr.role": "this.hostRole", "class": "this.hostClass", "attr.aria-describedby": "this.hostAriaDescribedBy", "tabIndex": "this.hostTabindex", "attr.aria-owns": "this.hostAriaOwns", "attr.aria-activedescendant": "this.hostActivedescendant", "attr.aria-labelledby": "this.hostAriaLabelledBy", "attr.disabled": "this.attrDisabled", "attr.required": "this.attrRequired", "attr.aria-invalid": "this.errorState", "attr.aria-label": "this.hostAriaLabel", "attr.id": "this.id" } }, queries: [{ propertyName: "selectSearch", first: true, predicate: RdsSelectSearchInputComponent, descendants: true }, { propertyName: "options", predicate: RdsListItemComponent }, { propertyName: "focusableOptions", predicate: AbstractFocusableOption }], viewQueries: [{ propertyName: "panel", first: true, predicate: ["panel"], descendants: true }, { propertyName: "overlayDir", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectComponent, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], hostTabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], hostAriaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], hostActivedescendant: [{
                type: HostBinding,
                args: ['attr.aria-activedescendant']
            }], hostAriaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], errorState: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], hostAriaLabel: [{
                type: Input,
                args: ['aria-label']
            }, {
                type: HostBinding,
                args: ['attr.aria-label']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], sortComparator: [{
                type: Input
            }], compareWith: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hideValue: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], openChange: [{
                type: Output
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], overlayDir: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }], options: [{
                type: ContentChildren,
                args: [RdsListItemComponent]
            }], focusableOptions: [{
                type: ContentChildren,
                args: [AbstractFocusableOption]
            }], selectSearch: [{
                type: ContentChild,
                args: [RdsSelectSearchInputComponent]
            }], filterBy: [{
                type: Input
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });

const COUNT_BADGE_MIN_WIDTH = 48;
class RdsTriggerValuesComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this._hiddenValues = new BehaviorSubject(0);
        this.hiddenValues = this._hiddenValues.pipe(distinctUntilChanged());
        this._multiple = false;
        this._triggerValues = [' '];
    }
    get triggerValues() {
        return this._triggerValues;
    }
    set triggerValues(val) {
        if (this.hasDifferentValues(val)) {
            this._triggerValues = val;
            this.countVisibleCharacters();
        }
    }
    set multiple(multiple) {
        this._multiple = coerceBooleanProperty(multiple);
    }
    get multiple() {
        return this._multiple;
    }
    ngOnChanges(changes) {
        if (changes['wrapperElement'] || changes['multiple']) {
            this.countVisibleCharacters();
        }
    }
    ngAfterViewInit() {
        fromEvent(window, 'resize')
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.countVisibleCharacters());
    }
    countVisibleCharacters() {
        if (this.multiple) {
            if (this.triggerValues.length === 0 ||
                (this.triggerValues.length === 1 && this.triggerValues[0] === ' ')) {
                this.elementRef.nativeElement.innerHTML = ' ';
                this._hiddenValues.next(0);
            }
            let visibleValues = 0;
            while (visibleValues < this.triggerValues.length) {
                this.elementRef.nativeElement.innerHTML = this.triggerValues
                    .slice(0, visibleValues + 1)
                    .join('; ');
                if (this.elementRef.nativeElement.offsetWidth >= this.getValuesMaxWidth()) {
                    break;
                }
                visibleValues++;
            }
            this._hiddenValues.next(this.triggerValues.length - visibleValues - 1);
        }
        else {
            this.elementRef.nativeElement.innerHTML = this.triggerValues[0];
            this._hiddenValues.next(0);
        }
    }
    getValuesMaxWidth() {
        const wrapperWidth = this.wrapperElement?.offsetWidth || 0;
        const badgeWidth = this.wrapperElement?.getElementsByClassName('rds-form-field__select-hidden-trigger-values-placeholder')[0]?.offsetWidth || 0;
        return Math.max(wrapperWidth - Math.max(badgeWidth, COUNT_BADGE_MIN_WIDTH), 0);
    }
    // provided arrays are sorted
    hasDifferentValues(newValue) {
        return (this._triggerValues.length !== newValue.length ||
            this._triggerValues.some((val, i) => val !== newValue[i]));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTriggerValuesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTriggerValuesComponent, selector: "[rds-trigger-values]", inputs: { triggerValues: "triggerValues", wrapperElement: "wrapperElement", multiple: "multiple" }, outputs: { hiddenValues: "hiddenValues" }, host: { properties: { "title": "this.triggerValues" } }, exportAs: ["rdsTriggerValues"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTriggerValuesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[rds-trigger-values]',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'rdsTriggerValues',
                }]
        }], propDecorators: { hiddenValues: [{
                type: Output
            }], triggerValues: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['title']
            }], wrapperElement: [{
                type: Input
            }], multiple: [{
                type: Input
            }] } });

class RdsSelectComponent extends RdsAbstractSelectComponent {
    constructor() {
        super(...arguments);
        this._name = 'rds-select';
    }
    set multiple(_multiple) {
        throw new Error(`Input 'multiple' is not valid anymore and will be removed in the next release. Use 'rds-multi-select' component instead.`);
    }
    get selected() {
        return this.selectionModel.selected[0];
    }
    get triggerValues() {
        if (this.empty) {
            return [''];
        }
        return [this.selectionModel.selected[0].viewValue];
    }
    ngOnInit() {
        super.ngOnInit();
        this.selectionModel = new SelectionModel(false);
    }
    handleClosedKeydown(event) {
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW ||
            keyCode === UP_ARROW ||
            keyCode === LEFT_ARROW ||
            keyCode === RIGHT_ARROW;
        const isOpenKey = keyCode === ENTER || keyCode === SPACE;
        const manager = this.keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||
            (event.altKey && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.open();
        }
        else {
            const previouslySelectedOption = this.selected;
            if (keyCode === HOME || keyCode === END) {
                keyCode === HOME
                    ? manager.setFirstItemActive()
                    : manager.setLastItemActive();
                event.preventDefault();
            }
            else {
                manager.onKeydown(event);
            }
            const selectedOption = this.selected;
            if (selectedOption && previouslySelectedOption !== selectedOption) {
                this.liveAnnouncer.announce(selectedOption.viewValue, 10000);
            }
        }
    }
    handleOpenKeydown(event) {
        const manager = this.keyManager;
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;
        const isTyping = manager.isTyping();
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping &&
            (keyCode === ENTER || keyCode === SPACE) &&
            manager.activeItem &&
            !hasModifierKey(event)) {
            event.preventDefault();
            manager.activeItem.handleClick();
        }
        else {
            manager.onKeydown(event);
        }
    }
    setSelectionByValue(value) {
        this.selectionModel.clear();
        const correspondingOption = this.selectValue(value);
        // Shift focus to the active item. Note that we shouldn't do this in multiple
        // mode, because we don't know what option the user interacted with last.
        if (correspondingOption) {
            this.keyManager.updateActiveItem(correspondingOption);
        }
        else if (!this.panelOpen) {
            // Otherwise reset the highlighted option. Note that we only want to do this while
            // closed, because doing it while open can shift the user's focus unnecessarily.
            this.keyManager.updateActiveItem(-1);
        }
        this.cdr.markForCheck();
    }
    initKeyManager() {
        super.initKeyManager();
        this.keyManager.tabOut
            .pipe(takeUntil(this.destroyKeyManager$), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.panelOpen) {
                // Select the active item when tabbing away. This is consistent with how the native
                // select behaves. Note that we only want to do this in single selection mode.
                if (this.keyManager.activeItem) {
                    this.keyManager.activeItem.toggle();
                }
            }
        });
        this.keyManager.change
            .pipe(takeUntil(this.destroyKeyManager$), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (!this._panelOpen && this.keyManager.activeItem) {
                this.keyManager.activeItem.toggle();
            }
        });
    }
    resetOptions() {
        super.resetOptions();
        this.optionSelectionChanges
            .pipe(takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            this.onSelect(event.source, event.isUserInput);
            if (event.isUserInput && this._panelOpen) {
                this.close();
                this.focus();
            }
        });
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        merge(...this.options.map((option) => option.checkedChanged))
            .pipe(
        // should emit one time if states changes for many options
        debounceTime(1), takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.stateChanges.next();
        });
    }
    onSelect(option, isUserInput = false) {
        super.onSelect(option);
        if (isUserInput) {
            this.keyManager.setActiveItem(option);
        }
        this.stateChanges.next();
    }
    getValueToEmit() {
        return this.selected ? this.selected.value : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSelectComponent, selector: "rds-select", inputs: { multiple: "multiple" }, providers: [
            { provide: RdsAbstractFormFieldControl, useExisting: RdsSelectComponent },
        ], usesInheritance: true, ngImport: i0, template: `
    <ng-container aria-hidden="true" (click)="toggle()">
      @if (shouldShowValue()) {
        <div class="rds-form-field__select-value" #wrapperElement>
          <span
            class="rds-form-field__select-trigger-value"
            rds-trigger-values
            #rdsTriggerValues="rdsTriggerValues"
            [triggerValues]="triggerValues"
            [wrapperElement]="wrapperElement"
          ></span>
        </div>
      } @else {
        @if (shouldShowPlaceholder()) {
          <div class="rds-form-field__select-value">
            <div
              class="rds-form-field__select-trigger-value rds-form-field__select-trigger-value-placeholder"
            >
              {{ placeholder }}
            </div>
          </div>
        }
      }

      <div class="rds-form-field__select-arrow-wrapper">
        <div
          class="rds-form-field__select-arrow"
          [class.rds-form-field__select-arrow--rotate]="panelOpen"
        ></div>
      </div>

      <ng-template
        cdk-connected-overlay
        cdkConnectedOverlayLockPosition
        cdkConnectedOverlayHasBackdrop
        cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
        [cdkConnectedOverlayScrollStrategy]="scrollStrategy"
        [cdkConnectedOverlayOrigin]="origin"
        [cdkConnectedOverlayOpen]="panelOpen"
        [cdkConnectedOverlayPositions]="positions"
        [cdkConnectedOverlayMinWidth]="minWidth"
        (backdropClick)="close(); onBlur()"
        (attach)="onAttached()"
        (detach)="close()"
      >
        <div class="rds-select__panel-wrapper" [@transformPanelWrap]="null">
          <div
            #panel
            class="rds-select__panel"
            [attr.id]="id + '-panel'"
            [@transformPanel]="'showing'"
            (@transformPanel.done)="
              panelDoneAnimatingStream.next($event.toState)
            "
            [style.transformOrigin]="transformOrigin"
            (keydown)="handleKeydown($event)"
          >
            <ng-content select="rds-select-search-input" />
            <ng-content select="rds-select-option" />
          </div>
        </div>
      </ng-template>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1$3.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "component", type: RdsTriggerValuesComponent, selector: "[rds-trigger-values]", inputs: ["triggerValues", "wrapperElement", "multiple"], outputs: ["hiddenValues"], exportAs: ["rdsTriggerValues"] }], animations: SelectAnimations, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-select',
                    template: `
    <ng-container aria-hidden="true" (click)="toggle()">
      @if (shouldShowValue()) {
        <div class="rds-form-field__select-value" #wrapperElement>
          <span
            class="rds-form-field__select-trigger-value"
            rds-trigger-values
            #rdsTriggerValues="rdsTriggerValues"
            [triggerValues]="triggerValues"
            [wrapperElement]="wrapperElement"
          ></span>
        </div>
      } @else {
        @if (shouldShowPlaceholder()) {
          <div class="rds-form-field__select-value">
            <div
              class="rds-form-field__select-trigger-value rds-form-field__select-trigger-value-placeholder"
            >
              {{ placeholder }}
            </div>
          </div>
        }
      }

      <div class="rds-form-field__select-arrow-wrapper">
        <div
          class="rds-form-field__select-arrow"
          [class.rds-form-field__select-arrow--rotate]="panelOpen"
        ></div>
      </div>

      <ng-template
        cdk-connected-overlay
        cdkConnectedOverlayLockPosition
        cdkConnectedOverlayHasBackdrop
        cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
        [cdkConnectedOverlayScrollStrategy]="scrollStrategy"
        [cdkConnectedOverlayOrigin]="origin"
        [cdkConnectedOverlayOpen]="panelOpen"
        [cdkConnectedOverlayPositions]="positions"
        [cdkConnectedOverlayMinWidth]="minWidth"
        (backdropClick)="close(); onBlur()"
        (attach)="onAttached()"
        (detach)="close()"
      >
        <div class="rds-select__panel-wrapper" [@transformPanelWrap]="null">
          <div
            #panel
            class="rds-select__panel"
            [attr.id]="id + '-panel'"
            [@transformPanel]="'showing'"
            (@transformPanel.done)="
              panelDoneAnimatingStream.next($event.toState)
            "
            [style.transformOrigin]="transformOrigin"
            (keydown)="handleKeydown($event)"
          >
            <ng-content select="rds-select-search-input" />
            <ng-content select="rds-select-option" />
          </div>
        </div>
      </ng-template>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: SelectAnimations,
                    providers: [
                        { provide: RdsAbstractFormFieldControl, useExisting: RdsSelectComponent },
                    ],
                }]
        }], propDecorators: { multiple: [{
                type: Input
            }] } });

class RdsSuffixDirective {
    constructor() {
        this.hostClass = 'rds-form-field__control-suffix';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSuffixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsSuffixDirective, selector: "[rds-control-suffix], [rdsControlSuffix]", host: { properties: { "class": "this.hostClass" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSuffixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-control-suffix], [rdsControlSuffix]',
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

let nextUniqueId$6 = 0;
const DEFAULT_LABEL_WIDTH = 25;
const rdsFormFieldAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
const RDS_FORM_FIELD = new InjectionToken('RDS_FORM_FIELD');
class RdsFormFieldComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.renderer = inject(Renderer2);
        this.subscriptAnimationState = '';
        this.labelId = `rds-form-field-label-${nextUniqueId$6++}`;
        this.hideRequiredMarker = false;
        this.hideTextareaCharacterCounter = false;
        this._labelPosition = 'floating';
        this._size = 'l';
        this._labelWidth = DEFAULT_LABEL_WIDTH;
        this.maxCharacters = 0;
        this._isPrevSelect = false;
        this._isPrevButton = false;
        this._isPrevFocused = false;
    }
    get control() {
        return this.abstractControl;
    }
    get numberOfCharacters() {
        return this.abstractControl.value.length;
    }
    get class() {
        const classList = ['rds-form-field'];
        if (this.control.disabled) {
            classList.push('rds-form-field--disabled');
        }
        if (this.control.errorState) {
            classList.push('rds-form-field--invalid');
        }
        if (this.control.focused) {
            classList.push('rds-form-field--focused');
        }
        if (this.control.controlType === 'autocomplete-multi' &&
            this.control.hasValue()) {
            classList.push('rds-form-field--has-value');
        }
        if (this.label && !!this.labelPosition && this.labelPosition !== 'none') {
            if (this.labelPosition === 'side-left') {
                classList.push('rds-form-field--side');
                classList.push('rds-form-field--side-left');
            }
            else if (this.labelPosition === 'side-right') {
                classList.push('rds-form-field--side');
                classList.push('rds-form-field--side-right');
            }
            else if (this.labelPosition === 'floating') {
                classList.push('rds-form-field--floating-label');
            }
        }
        else {
            classList.push('rds-form-field--no-label');
        }
        if (this.inputHints.length ||
            this.inputErrors.length ||
            this.maxCharacters) {
            classList.push('rds-form-field--hint-or-error-or-counter');
        }
        if (this.control.controlType === 'textarea-field') {
            classList.push('rds-form-field__wrapper-textarea-field');
        }
        if (this.inputSuffixes.length) {
            classList.push('rds-form-field-with-suffix');
        }
        if (this.mouseover) {
            classList.push('rds-form-field--hover');
        }
        else {
            const index = classList.indexOf('rds-form-field--hover');
            if (index !== -1) {
                classList.splice(index, 1);
            }
        }
        if (this._isPrevSelect) {
            classList.push('rds-form-field--prev-select');
        }
        if (this._isPrevButton) {
            classList.push('rds-form-field--prev-button');
        }
        if (this._isPrevFocused) {
            classList.push('rds-form-field--prev-focused');
        }
        if (this.size) {
            classList.push(`rds-form-field--${this.size}`);
        }
        return [...classList];
    }
    get labelPosition() {
        return this._labelPosition;
    }
    set labelPosition(labelPosition) {
        this._labelPosition = labelPosition;
        this.control?.stateChanges.emit();
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
        this.control?.stateChanges.emit();
    }
    set labelWidth(value) {
        const val = numberAttribute(value);
        if (val < 0 || val > 100) {
            throw new Error(`The labelWidth value should be less 100 than and greater than 0.`);
        }
        this._labelWidth = numberAttribute(value, DEFAULT_LABEL_WIDTH);
    }
    get labelWidth() {
        return this._labelWidth;
    }
    get formFieldType() {
        if (!this.control) {
            return '';
        }
        if (this.elementRef.nativeElement.parentElement.classList.contains('rds-global-search')) {
            return 'rds-form-field--global-search';
        }
        return `rds-form-field--${this.control.controlType}`;
    }
    ngAfterContentInit() {
        this.validateControlExistence();
        merge(this.inputEl ? fromEvent(this.inputEl.nativeElement, 'focus') : EMPTY, this.inputEl ? fromEvent(this.inputEl.nativeElement, 'blur') : EMPTY, this.selectEl ? fromEvent(this.selectEl.nativeElement, 'focus') : EMPTY, this.selectEl ? fromEvent(this.selectEl.nativeElement, 'blur') : EMPTY)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.checkFormFieldStatus());
        const control = this.control;
        // Run change detection if the value changes.
        if (control.ngControl && control.ngControl.valueChanges) {
            control.ngControl.valueChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this.cdr.markForCheck());
        }
        merge(control.stateChanges, this.inputHints.changes, this.inputErrors.changes)
            .pipe(startWith([null]), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            const describedByIds = this.buildDescribedByIds();
            control.setDescribedByIds(describedByIds);
            this.cdr.markForCheck();
        });
        this.inputSuffixes.changes
            .pipe(startWith([null]), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.control.suffixed = !!this.inputSuffixes.first;
            this.control.stateChanges.emit();
        });
        this.inputPrefixes.changes
            .pipe(startWith([null]), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.control.prefixed = !!this.inputPrefixes.first;
            this.control.stateChanges.emit();
        });
    }
    ngAfterContentChecked() {
        this.checkFormFieldStatus();
        this.validateControlExistence();
        this.checkControlMaxCharacters();
        if (this.formFieldType && this.elementRef.nativeElement) {
            this.renderer.addClass(this.elementRef.nativeElement, this.formFieldType);
        }
    }
    ngAfterViewInit() {
        if (this.control.controlType === 'select' ||
            this.control.controlType === 'select-with-chips') {
            this.control.trigger = this.trigger;
            this.control.origin = this.origin;
        }
        else if (this.control.controlType === 'autocomplete' ||
            this.control.controlType === 'autocomplete-multi') {
            this.control._trigger =
                this.trigger;
            this.control._origin =
                this.origin;
        }
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
    }
    ngOnChanges(changes) {
        if (changes['labelPosition'] && this.labelPosition === 'floating') {
            if (changes['size'] && this.size !== 'l') {
                throw Error(`Form field with '${this.size}' size cannot have floating label`);
            }
        }
    }
    checkFormFieldStatus() {
        this._isPrevSelect =
            this.elementRef?.nativeElement?.nextElementSibling?.classList.contains('rds-form-field--select');
        this._isPrevButton =
            this.elementRef?.nativeElement?.nextElementSibling?.classList.contains('rds-button');
        this._isPrevFocused =
            this.elementRef?.nativeElement?.nextElementSibling?.classList.contains('rds-form-field--focused') ||
                this.elementRef?.nativeElement?.nextElementSibling?.classList.contains('rds-dropdown--focused');
    }
    getConnectedOverlayOrigin() {
        return this.trigger || this.elementRef;
    }
    get isErrorMessageVisible() {
        return (this.inputErrors && this.inputErrors.length > 0 && this.control.errorState);
    }
    buildDescribedByIds() {
        let ids = [];
        if (this.isErrorMessageVisible) {
            ids = this.inputErrors.map((error) => error.id);
        }
        else if (this.inputHints) {
            ids = this.inputHints.map((hint) => hint.id);
        }
        return ids;
    }
    validateControlExistence() {
        if (!this.control) {
            throw new Error('Cannot use form field without control component');
        }
    }
    checkControlMaxCharacters() {
        if (this.control.controlType === 'textarea-field') {
            if (this.control?.ngControl?.control?.validator) {
                const result = this.control.ngControl.control.validator(new FormControl({ length: Infinity }));
                if (result && result['maxlength']) {
                    this.maxCharacters = numberAttribute(result['maxlength']['requiredLength'], 0);
                }
            }
            else if (this.control instanceof RdsInputDirective &&
                this.control.getMaxlengthAttr()) {
                this.maxCharacters = this.control.getMaxlengthAttr();
            }
            else {
                this.maxCharacters = null;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFormFieldComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsFormFieldComponent, selector: "rds-form-field", inputs: { hideRequiredMarker: ["hideRequiredMarker", "hideRequiredMarker", booleanAttribute], hideTextareaCharacterCounter: ["hideTextareaCharacterCounter", "hideTextareaCharacterCounter", booleanAttribute], labelPosition: "labelPosition", size: "size", labelWidth: "labelWidth" }, host: { properties: { "class": "this.class", "style.--rds-control-label-width": "this.labelWidth" } }, providers: [{ provide: RDS_FORM_FIELD, useExisting: RdsFormFieldComponent }], queries: [{ propertyName: "abstractControl", first: true, predicate: RdsAbstractFormFieldControl, descendants: true }, { propertyName: "label", first: true, predicate: RdsLabelDirective, descendants: true }, { propertyName: "inputEl", first: true, predicate: RdsInputDirective, descendants: true, read: ElementRef }, { propertyName: "selectEl", first: true, predicate: RdsSelectComponent, descendants: true, read: ElementRef }, { propertyName: "inputErrors", predicate: RdsErrorDirective, descendants: true }, { propertyName: "inputHints", predicate: RdsHintDirective, descendants: true }, { propertyName: "inputSuffixes", predicate: RdsSuffixDirective, descendants: true }, { propertyName: "inputPrefixes", predicate: RdsPrefixDirective, descendants: true }], viewQueries: [{ propertyName: "trigger", first: true, predicate: ["trigger"], descendants: true }, { propertyName: "suffix", first: true, predicate: ["suffix"], descendants: true }, { propertyName: "origin", first: true, predicate: CdkOverlayOrigin, descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    @if (labelPosition !== 'floating' && labelPosition !== 'none') {
      <div class="rds-form-field__label-wrapper">
        <ng-container [ngTemplateOutlet]="label" />
      </div>
    }
    <div
      class="rds-form-field__container"
      [ngClass]="formFieldType"
      [class.rds-form-field--static-label]="
        labelPosition !== 'floating' && labelPosition !== 'none'
      "
      [class.rds-form-field--hint-or-error-or-counter]="
        inputHints.length || inputErrors.length || maxCharacters
      "
    >
      <div
        class="rds-form-field__control-container"
        [ngClass]="{
          'rds-form-field-textarea':
            this.control.controlType === 'textarea-field'
        }"
        cdk-overlay-origin
        (mouseover)="mouseover = true"
        (mouseout)="mouseover = false"
        [attr.aria-hidden]="control.controlType !== 'chip-grid'"
        #origin="cdkOverlayOrigin"
        #trigger
        (click)="control.onContainerClick($event)"
      >
        <div class="rds-form-field__content">
          @if (inputPrefixes.length > 0) {
            <div class="rds-form-field__content-prefix">
              <ng-content
                select="[rds-control-prefix], rds-control-prefix-separator"
              />
            </div>
          }
          <div
            class="rds-form-field__content-infix"
            [class.rds-form-field__content-infix--floating-label]="
              labelPosition === 'floating'
            "
            [class.rds-form-field_content-infix--focused]="this.control.focused"
          >
            @if (labelPosition === 'floating') {
              <span
                class="rds-form-field__label-wrapper"
                [class.rds-form-field__label-wrapper--float]="
                  control.shouldLabelFloat
                "
              >
                <ng-container [ngTemplateOutlet]="label" />
              </span>
            }
            <ng-content />
          </div>
          @if (inputSuffixes.length > 0) {
            <div
              class="rds-form-field__content-suffix"
              [ngClass]="{
                'rds-form-field__content-suffix-datepicker':
                  this.control.controlType === 'date-picker' ||
                  this.control.controlType === 'date-range'
              }"
              #suffix
            >
              <ng-content
                select="[rds-control-suffix], rds-control-suffix-separator"
              />
            </div>
          }
        </div>
      </div>
      <div class="rds-form-field__subscript-wrapper">
        @switch (isErrorMessageVisible) {
          @case (true) {
            <div
              class="rds-form-field__subscript rds-form-field__subscript--error"
              [@transitionMessages]="subscriptAnimationState"
            >
              <ng-content select="rds-control-error" />
            </div>
          }
          @case (false) {
            <div
              class="rds-form-field__subscript rds-form-field__subscript--hint"
              [@transitionMessages]="subscriptAnimationState"
            >
              <ng-content select="rds-control-hint" />
            </div>
          }
        }
        @if (
          this.control.controlType === 'textarea-field' &&
          !hideTextareaCharacterCounter &&
          maxCharacters
        ) {
          <div class="rds-control-counter">
            {{ numberOfCharacters }}/{{ maxCharacters }}
          </div>
        }
      </div>
    </div>
    <ng-template #label>
      <label
        [id]="labelId"
        [attr.for]="control.id"
        class="rds-form-field__label"
        [class.rds-form-field__label--float]="control.shouldLabelFloat"
      >
        <span>
          <ng-content select="rds-control-label" />
        </span>
        @if (!hideRequiredMarker && control.required && !control.disabled) {
          <span class="rds-form-field__asterisk"> &#32;* </span>
        }
        @if (labelPosition !== 'floating') {
          <span class="rds-form-field-icon-wrapper">
            <ng-content
              select="rds-icon[rds-label-icon], rds-icon[rdsLabelIcon]"
            />
          </span>
        }
      </label>
    </ng-template>
  `, isInline: true, styles: [".rds-form-field__select-x-wrapper{display:flex;margin-right:4px;margin-left:8px;cursor:pointer}rds-multi-select .rds-chips.rds-chips--size-s{gap:4px}.rds-form-field__select-trigger-value{display:inline-block;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.rds-form-field__select-trigger-value.rds-form-field__select-trigger-value-placeholder{color:var(--rds-color-grey-3)}.rds-form-field__select-hidden-trigger-values-placeholder{display:inline-flex;min-width:32px;height:20px;margin-right:12px;margin-left:4px}.rds-form-field__select-hidden-trigger-values-placeholder>rds-badge{margin-right:12px;margin-left:4px}.rds-form-field--floating-label .rds-form-field__control{align-items:unset}.rds-form-field--floating-label .rds-form-field__select-arrow-wrapper{position:absolute;top:calc(50% - 10px);right:0;display:flex}.rds-form-field--floating-label .rds-form-field__select-x-wrapper button{margin-bottom:16px}.rds-form-field .rds-form-field__label{white-space:unset;color:var(--rds-color-low-contrast);display:flex;align-items:flex-start}.rds-form-field.rds-form-field--side{display:flex;flex-direction:row;--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper{display:flex;justify-content:flex-end}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper .rds-form-field__label{text-align:right}.rds-form-field.rds-form-field--side .rds-form-field__label-wrapper{display:flex;align-items:center;margin-bottom:0;margin-right:12px;width:var(--label-width);overflow:unset;text-overflow:unset;white-space:inherit}.rds-form-field.rds-form-field--side.rds-form-field--hint-or-error-or-counter .rds-form-field__label-wrapper{margin-bottom:24px}.rds-form-field.rds-form-field--side .rds-form-field__container{width:calc(100% - var(--label-width) - 12px)}.rds-form-field.rds-form-field--side.rds-form-field__wrapper-textarea-field .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--side.rds-form-field--select-with-chips .rds-form-field__label-wrapper{padding-top:12px;align-items:flex-start}.rds-form-field.rds-form-field--no-label .rds-form-field__label-wrapper{width:0;height:0;padding:0;margin:0}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-prefix-separator,.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__select-arrow{color:var(--rds-color-low-contrast)}.rds-form-field.rds-form-field--focused .rds-form-field__container.rds-form-field--global-search .rds-form-field__control-container{outline:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-active-focus)}.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label{color:var(--rds-color-stroke-active-focus)}.rds-form-field>.rds-form-field__label-wrapper{margin-bottom:4px}.rds-form-field .rds-form-field__container{flex-direction:column;display:flex;position:relative;text-align:center}.rds-form-field .rds-form-field__container .rds-form-field__control-container{display:flex;border-radius:2px;border:1px solid var(--rds-color-stroke-enabled);background:var(--rds-color-bg-base-1);cursor:text}.rds-form-field .rds-form-field__container .rds-form-field__content{display:flex;position:relative;width:100%}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;border-left:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix{position:relative;width:100%;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker{align-items:center;padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker rds-icon{margin-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{height:100%;position:relative;display:flex;flex-direction:row-reverse}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{position:absolute;border-right:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container{padding-bottom:7px;padding-right:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content{display:flex}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{padding-right:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper{position:absolute;z-index:2;left:0;box-sizing:content-box;width:100%;height:32px;overflow:hidden;text-overflow:ellipsis;transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper--float{height:16px}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{position:absolute;width:100%;left:0;text-align:start;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;color:var(--rds-color-low-contrast);transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__control{position:relative;display:flex;margin-top:0;border:none;width:100%;background:transparent;outline:none;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__control::placeholder{color:var(--rds-color-grey-3)}.rds-form-field .rds-form-field__container.rds-form-field__label--float .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field .rds-form-field__container.rds-form-field--static-label .rds-form-field__control{margin-top:0}.rds-form-field .rds-form-field__container textarea.rds-form-field__control{resize:none;bottom:unset}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-vertical{resize:vertical}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-horizontal{resize:horizontal}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-both{resize:both}.rds-form-field .rds-form-field__container .rds-form-field__subscript-wrapper{position:absolute;top:calc(100% - 24px);left:0;z-index:-1;align-items:center;display:flex;justify-content:space-between;width:100%;height:16px;padding-left:0}.rds-form-field .rds-form-field__container .rds-form-field__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-form-field .rds-form-field__container .rds-form-field__subscript--hint{color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__subscript--error{color:var(--rds-color-error)}.rds-form-field .rds-form-field--hint-or-error-or-counter{padding-bottom:24px}.rds-form-field .rds-form-field--hint-or-error-or-counter .rds-form-field__subscript-wrapper{z-index:auto}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container{border-color:var(--rds-color-disabled);background:var(--rds-color-bg-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container:hover{border-color:var(--rds-color-disabled);cursor:default}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-prefix,.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-suffix,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__label,.rds-form-field.rds-form-field--disabled .rds-form-field__control,.rds-form-field.rds-form-field--disabled .rds-form-field__subscript--hint,.rds-form-field.rds-form-field--disabled .rds-form-field__select-arrow,.rds-form-field.rds-form-field--disabled .rds-form-field__select-hidden-trigger-values-placeholder .rds-badge--container .rds-badge.rds-badge--black-minimal{color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{outline:2px solid var(--rds-color-error);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label-wrapper{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-error)}.rds-form-field.rds-form-field--floating-label .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-textfield-decoration-container{position:relative}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-outer-spin-button,.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-inner-spin-button{position:absolute;bottom:0;height:24px;right:0}.rds-form-field .rds-form-field__asterisk{color:var(--rds-color-error)}.rds-form-field .rds-form-field__container.rds-form-field--select .rds-form-field__control-container{cursor:pointer}.rds-form-field .rds-form-field__container .rds-form-field__control{align-items:center}.rds-form-field .rds-form-field__container .rds-form-field__select-value{justify-content:space-between;align-items:center;display:flex;min-width:0;width:calc(100% - 24px)}.rds-form-field .rds-form-field__container .rds-form-field__select-value-placeholder{display:flex;flex-wrap:nowrap;max-height:24px;overflow:hidden}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow-wrapper{position:absolute;right:0;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow{margin:0 7px;border-top:5px solid;border-left:5px solid transparent;border-right:5px solid transparent;width:0;height:0}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow--rotate{transform:rotate(180deg)}.rds-form-field.rds-form-field--disabled.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--disabled.rds-form-field--select-with-chips .rds-form-field__control-container{cursor:default}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 14px 4px 15px}.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 15px 4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 15px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container{padding:3px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:48px;height:48px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:96px;padding:11px 7px 7px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:48px;height:unset}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 7px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 7px);padding-right:15px;margin-right:1px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{padding-top:8px;font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{width:16px;height:16px;margin-top:2px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding-top:0;margin-bottom:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float rds-icon{width:16px;height:16px;margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container textarea.rds-form-field__control{min-height:96px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:1px;width:16px;height:16px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 10px 4px 11px}.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 11px 4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 11px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container{padding:3px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:36px;height:36px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:72px;padding:7px 7px 7px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:36px;height:unset}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-3px;height:calc(100% + 6px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-3px;height:calc(100% + 6px);padding-right:11px;margin-right:1px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container textarea.rds-form-field__control{min-height:72px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:6px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:0;width:16px;height:16px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 6px 4px 7px}.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 7px 4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container{padding:3px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:28px;height:28px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:64px;padding:10px 7px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:28px;height:unset}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 8px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 8px);padding-right:7px;margin-right:1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container textarea.rds-form-field__control{min-height:64px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:4px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-control-counter{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-select__panel-wrapper{flex-basis:100%}.rds-select__panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;overflow:auto;border-radius:2px;min-width:100%;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1)}.rds-select__option.hide{display:none}.rds-select__option--separator{padding:0;margin:0}.rds-select__option--separator div{width:100%;height:1px;border-bottom:1px solid var(--rds-color-grey-2);padding-bottom:0;margin-bottom:4px}[rds-theme=dark] input[type=number]::-webkit-outer-spin-button,[rds-theme=dark] input[type=number]::-webkit-inner-spin-button{filter:invert(.9)}.rds-form-field.rds-form-field--autocomplete-multi .rds-form-field__container .rds-form-field__control-container{height:unset!important}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--floating-label .rds-form-field__control{margin-top:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1$3.CdkOverlayOrigin, selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]", exportAs: ["cdkOverlayOrigin"] }], animations: [rdsFormFieldAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFormFieldComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-form-field', template: `
    @if (labelPosition !== 'floating' && labelPosition !== 'none') {
      <div class="rds-form-field__label-wrapper">
        <ng-container [ngTemplateOutlet]="label" />
      </div>
    }
    <div
      class="rds-form-field__container"
      [ngClass]="formFieldType"
      [class.rds-form-field--static-label]="
        labelPosition !== 'floating' && labelPosition !== 'none'
      "
      [class.rds-form-field--hint-or-error-or-counter]="
        inputHints.length || inputErrors.length || maxCharacters
      "
    >
      <div
        class="rds-form-field__control-container"
        [ngClass]="{
          'rds-form-field-textarea':
            this.control.controlType === 'textarea-field'
        }"
        cdk-overlay-origin
        (mouseover)="mouseover = true"
        (mouseout)="mouseover = false"
        [attr.aria-hidden]="control.controlType !== 'chip-grid'"
        #origin="cdkOverlayOrigin"
        #trigger
        (click)="control.onContainerClick($event)"
      >
        <div class="rds-form-field__content">
          @if (inputPrefixes.length > 0) {
            <div class="rds-form-field__content-prefix">
              <ng-content
                select="[rds-control-prefix], rds-control-prefix-separator"
              />
            </div>
          }
          <div
            class="rds-form-field__content-infix"
            [class.rds-form-field__content-infix--floating-label]="
              labelPosition === 'floating'
            "
            [class.rds-form-field_content-infix--focused]="this.control.focused"
          >
            @if (labelPosition === 'floating') {
              <span
                class="rds-form-field__label-wrapper"
                [class.rds-form-field__label-wrapper--float]="
                  control.shouldLabelFloat
                "
              >
                <ng-container [ngTemplateOutlet]="label" />
              </span>
            }
            <ng-content />
          </div>
          @if (inputSuffixes.length > 0) {
            <div
              class="rds-form-field__content-suffix"
              [ngClass]="{
                'rds-form-field__content-suffix-datepicker':
                  this.control.controlType === 'date-picker' ||
                  this.control.controlType === 'date-range'
              }"
              #suffix
            >
              <ng-content
                select="[rds-control-suffix], rds-control-suffix-separator"
              />
            </div>
          }
        </div>
      </div>
      <div class="rds-form-field__subscript-wrapper">
        @switch (isErrorMessageVisible) {
          @case (true) {
            <div
              class="rds-form-field__subscript rds-form-field__subscript--error"
              [@transitionMessages]="subscriptAnimationState"
            >
              <ng-content select="rds-control-error" />
            </div>
          }
          @case (false) {
            <div
              class="rds-form-field__subscript rds-form-field__subscript--hint"
              [@transitionMessages]="subscriptAnimationState"
            >
              <ng-content select="rds-control-hint" />
            </div>
          }
        }
        @if (
          this.control.controlType === 'textarea-field' &&
          !hideTextareaCharacterCounter &&
          maxCharacters
        ) {
          <div class="rds-control-counter">
            {{ numberOfCharacters }}/{{ maxCharacters }}
          </div>
        }
      </div>
    </div>
    <ng-template #label>
      <label
        [id]="labelId"
        [attr.for]="control.id"
        class="rds-form-field__label"
        [class.rds-form-field__label--float]="control.shouldLabelFloat"
      >
        <span>
          <ng-content select="rds-control-label" />
        </span>
        @if (!hideRequiredMarker && control.required && !control.disabled) {
          <span class="rds-form-field__asterisk"> &#32;* </span>
        }
        @if (labelPosition !== 'floating') {
          <span class="rds-form-field-icon-wrapper">
            <ng-content
              select="rds-icon[rds-label-icon], rds-icon[rdsLabelIcon]"
            />
          </span>
        }
      </label>
    </ng-template>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [rdsFormFieldAnimations.transitionMessages], providers: [{ provide: RDS_FORM_FIELD, useExisting: RdsFormFieldComponent }], styles: [".rds-form-field__select-x-wrapper{display:flex;margin-right:4px;margin-left:8px;cursor:pointer}rds-multi-select .rds-chips.rds-chips--size-s{gap:4px}.rds-form-field__select-trigger-value{display:inline-block;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.rds-form-field__select-trigger-value.rds-form-field__select-trigger-value-placeholder{color:var(--rds-color-grey-3)}.rds-form-field__select-hidden-trigger-values-placeholder{display:inline-flex;min-width:32px;height:20px;margin-right:12px;margin-left:4px}.rds-form-field__select-hidden-trigger-values-placeholder>rds-badge{margin-right:12px;margin-left:4px}.rds-form-field--floating-label .rds-form-field__control{align-items:unset}.rds-form-field--floating-label .rds-form-field__select-arrow-wrapper{position:absolute;top:calc(50% - 10px);right:0;display:flex}.rds-form-field--floating-label .rds-form-field__select-x-wrapper button{margin-bottom:16px}.rds-form-field .rds-form-field__label{white-space:unset;color:var(--rds-color-low-contrast);display:flex;align-items:flex-start}.rds-form-field.rds-form-field--side{display:flex;flex-direction:row;--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper{display:flex;justify-content:flex-end}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper .rds-form-field__label{text-align:right}.rds-form-field.rds-form-field--side .rds-form-field__label-wrapper{display:flex;align-items:center;margin-bottom:0;margin-right:12px;width:var(--label-width);overflow:unset;text-overflow:unset;white-space:inherit}.rds-form-field.rds-form-field--side.rds-form-field--hint-or-error-or-counter .rds-form-field__label-wrapper{margin-bottom:24px}.rds-form-field.rds-form-field--side .rds-form-field__container{width:calc(100% - var(--label-width) - 12px)}.rds-form-field.rds-form-field--side.rds-form-field__wrapper-textarea-field .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--side.rds-form-field--select-with-chips .rds-form-field__label-wrapper{padding-top:12px;align-items:flex-start}.rds-form-field.rds-form-field--no-label .rds-form-field__label-wrapper{width:0;height:0;padding:0;margin:0}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-prefix-separator,.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__select-arrow{color:var(--rds-color-low-contrast)}.rds-form-field.rds-form-field--focused .rds-form-field__container.rds-form-field--global-search .rds-form-field__control-container{outline:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-active-focus)}.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label{color:var(--rds-color-stroke-active-focus)}.rds-form-field>.rds-form-field__label-wrapper{margin-bottom:4px}.rds-form-field .rds-form-field__container{flex-direction:column;display:flex;position:relative;text-align:center}.rds-form-field .rds-form-field__container .rds-form-field__control-container{display:flex;border-radius:2px;border:1px solid var(--rds-color-stroke-enabled);background:var(--rds-color-bg-base-1);cursor:text}.rds-form-field .rds-form-field__container .rds-form-field__content{display:flex;position:relative;width:100%}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;border-left:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix{position:relative;width:100%;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker{align-items:center;padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker rds-icon{margin-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{height:100%;position:relative;display:flex;flex-direction:row-reverse}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{position:absolute;border-right:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container{padding-bottom:7px;padding-right:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content{display:flex}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{padding-right:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper{position:absolute;z-index:2;left:0;box-sizing:content-box;width:100%;height:32px;overflow:hidden;text-overflow:ellipsis;transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper--float{height:16px}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{position:absolute;width:100%;left:0;text-align:start;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;color:var(--rds-color-low-contrast);transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__control{position:relative;display:flex;margin-top:0;border:none;width:100%;background:transparent;outline:none;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__control::placeholder{color:var(--rds-color-grey-3)}.rds-form-field .rds-form-field__container.rds-form-field__label--float .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field .rds-form-field__container.rds-form-field--static-label .rds-form-field__control{margin-top:0}.rds-form-field .rds-form-field__container textarea.rds-form-field__control{resize:none;bottom:unset}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-vertical{resize:vertical}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-horizontal{resize:horizontal}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-both{resize:both}.rds-form-field .rds-form-field__container .rds-form-field__subscript-wrapper{position:absolute;top:calc(100% - 24px);left:0;z-index:-1;align-items:center;display:flex;justify-content:space-between;width:100%;height:16px;padding-left:0}.rds-form-field .rds-form-field__container .rds-form-field__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-form-field .rds-form-field__container .rds-form-field__subscript--hint{color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__subscript--error{color:var(--rds-color-error)}.rds-form-field .rds-form-field--hint-or-error-or-counter{padding-bottom:24px}.rds-form-field .rds-form-field--hint-or-error-or-counter .rds-form-field__subscript-wrapper{z-index:auto}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container{border-color:var(--rds-color-disabled);background:var(--rds-color-bg-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container:hover{border-color:var(--rds-color-disabled);cursor:default}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-prefix,.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-suffix,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__label,.rds-form-field.rds-form-field--disabled .rds-form-field__control,.rds-form-field.rds-form-field--disabled .rds-form-field__subscript--hint,.rds-form-field.rds-form-field--disabled .rds-form-field__select-arrow,.rds-form-field.rds-form-field--disabled .rds-form-field__select-hidden-trigger-values-placeholder .rds-badge--container .rds-badge.rds-badge--black-minimal{color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{outline:2px solid var(--rds-color-error);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label-wrapper{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-error)}.rds-form-field.rds-form-field--floating-label .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-textfield-decoration-container{position:relative}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-outer-spin-button,.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-inner-spin-button{position:absolute;bottom:0;height:24px;right:0}.rds-form-field .rds-form-field__asterisk{color:var(--rds-color-error)}.rds-form-field .rds-form-field__container.rds-form-field--select .rds-form-field__control-container{cursor:pointer}.rds-form-field .rds-form-field__container .rds-form-field__control{align-items:center}.rds-form-field .rds-form-field__container .rds-form-field__select-value{justify-content:space-between;align-items:center;display:flex;min-width:0;width:calc(100% - 24px)}.rds-form-field .rds-form-field__container .rds-form-field__select-value-placeholder{display:flex;flex-wrap:nowrap;max-height:24px;overflow:hidden}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow-wrapper{position:absolute;right:0;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow{margin:0 7px;border-top:5px solid;border-left:5px solid transparent;border-right:5px solid transparent;width:0;height:0}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow--rotate{transform:rotate(180deg)}.rds-form-field.rds-form-field--disabled.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--disabled.rds-form-field--select-with-chips .rds-form-field__control-container{cursor:default}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 14px 4px 15px}.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 15px 4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 15px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container{padding:3px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:48px;height:48px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:96px;padding:11px 7px 7px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:48px;height:unset}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 7px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 7px);padding-right:15px;margin-right:1px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{padding-top:8px;font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{width:16px;height:16px;margin-top:2px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding-top:0;margin-bottom:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float rds-icon{width:16px;height:16px;margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container textarea.rds-form-field__control{min-height:96px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:1px;width:16px;height:16px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 10px 4px 11px}.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 11px 4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 11px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container{padding:3px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:36px;height:36px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:72px;padding:7px 7px 7px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:36px;height:unset}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-3px;height:calc(100% + 6px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-3px;height:calc(100% + 6px);padding-right:11px;margin-right:1px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container textarea.rds-form-field__control{min-height:72px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:6px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:0;width:16px;height:16px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 6px 4px 7px}.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 7px 4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container{padding:3px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:28px;height:28px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:64px;padding:10px 7px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:28px;height:unset}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 8px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 8px);padding-right:7px;margin-right:1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container textarea.rds-form-field__control{min-height:64px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:4px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-control-counter{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-select__panel-wrapper{flex-basis:100%}.rds-select__panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;overflow:auto;border-radius:2px;min-width:100%;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1)}.rds-select__option.hide{display:none}.rds-select__option--separator{padding:0;margin:0}.rds-select__option--separator div{width:100%;height:1px;border-bottom:1px solid var(--rds-color-grey-2);padding-bottom:0;margin-bottom:4px}[rds-theme=dark] input[type=number]::-webkit-outer-spin-button,[rds-theme=dark] input[type=number]::-webkit-inner-spin-button{filter:invert(.9)}.rds-form-field.rds-form-field--autocomplete-multi .rds-form-field__container .rds-form-field__control-container{height:unset!important}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--floating-label .rds-form-field__control{margin-top:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}\n"] }]
        }], propDecorators: { abstractControl: [{
                type: ContentChild,
                args: [RdsAbstractFormFieldControl]
            }], inputErrors: [{
                type: ContentChildren,
                args: [RdsErrorDirective, { descendants: true }]
            }], inputHints: [{
                type: ContentChildren,
                args: [RdsHintDirective, { descendants: true }]
            }], inputSuffixes: [{
                type: ContentChildren,
                args: [RdsSuffixDirective, { descendants: true }]
            }], inputPrefixes: [{
                type: ContentChildren,
                args: [RdsPrefixDirective, { descendants: true }]
            }], label: [{
                type: ContentChild,
                args: [RdsLabelDirective, { descendants: true }]
            }], inputEl: [{
                type: ContentChild,
                args: [RdsInputDirective, { descendants: true, read: ElementRef }]
            }], selectEl: [{
                type: ContentChild,
                args: [RdsSelectComponent, { descendants: true, read: ElementRef }]
            }], trigger: [{
                type: ViewChild,
                args: ['trigger']
            }], suffix: [{
                type: ViewChild,
                args: ['suffix']
            }], origin: [{
                type: ViewChild,
                args: [CdkOverlayOrigin]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], hideRequiredMarker: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hideTextareaCharacterCounter: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], labelPosition: [{
                type: Input
            }], size: [{
                type: Input
            }], labelWidth: [{
                type: HostBinding,
                args: ['style.--rds-control-label-width']
            }, {
                type: Input
            }] } });

class RdsPrefixSeparatorComponent {
    constructor() {
        this.hostClass = 'rds-form-field__control-prefix-separator-container';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPrefixSeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsPrefixSeparatorComponent, selector: "rds-control-prefix-separator", host: { properties: { "class": "this.hostClass" } }, ngImport: i0, template: ` <div class="rds-form-field__control-prefix-separator"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPrefixSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-control-prefix-separator',
                    template: ` <div class="rds-form-field__control-prefix-separator"></div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsAbstractSelectOptionSelectionChangedEvent {
    constructor(source, isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
class RdsSelectOptionSelectionChangedEvent extends RdsAbstractSelectOptionSelectionChangedEvent {
}
class RdsMultiSelectOptionSelectionChangedEvent extends RdsAbstractSelectOptionSelectionChangedEvent {
}

let nextId$6 = 0;
class RdsMultiSelectOptionComponent extends RdsMultiSelectListItemComponent {
    constructor() {
        super(...arguments);
        this._currentViewValue = '';
        this.hostClass = 'rds-select__option';
        this.id = `rds-option-${nextId$6++}`;
        this.selectionChange$ = new Subject();
    }
    get viewValue() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    ngAfterViewChecked() {
        if (this.checked) {
            const viewValue = this.viewValue;
            if (viewValue !== this._currentViewValue) {
                this._currentViewValue = viewValue;
            }
        }
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return !this.elementRef.nativeElement.classList.contains('hide');
    }
    toggleVisibility(value) {
        if (value === true) {
            this.show();
        }
        else if (value === false) {
            this.hide();
        }
        else {
            if (this.isVisible()) {
                this.hide();
            }
            else if (!this.isVisible()) {
                this.show();
            }
        }
    }
    hide() {
        this.renderer.addClass(this.elementRef.nativeElement, 'hide');
    }
    show() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'hide');
    }
    toggle() {
        super.toggle();
        this.selectionChange$.next(new RdsMultiSelectOptionSelectionChangedEvent(this, true));
    }
    handleClick() {
        this.toggle();
    }
    setActiveStyles() {
        this.focus('keyboard');
    }
    setInactiveStyles() {
        if (this._focused) {
            this.blur();
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectOptionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiSelectOptionComponent, selector: "rds-multi-select-option", inputs: { id: "id", value: "value" }, host: { properties: { "class": "this.hostClass", "attr.id": "this.id" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsMultiSelectOptionComponent,
            },
            {
                provide: AbstractFocusableOption,
                useExisting: RdsMultiSelectOptionComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-avatar\"/>\n<ng-content select=\"rds-icon\"/>\n@if (!avatar && !icon) {\n    <rds-pseudo-checkbox\n      noSpacing\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    />\n}\n<span class=\"rds-list-item-text\">\n  <ng-content/>\n</span>\n@if (avatar || icon) {\n    <rds-pseudo-checkbox\n      noSpacing\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      class=\"rds-list-item__checkbox-right\"\n    />\n}\n", isInline: true, dependencies: [{ kind: "component", type: RdsPseudoCheckboxComponent, selector: "rds-pseudo-checkbox", inputs: ["checked", "disabled", "indeterminate", "noSpacing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_MULTI_SELECT_LIST_ITEM_TEMPLATE,
                    selector: 'rds-multi-select-option',
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsMultiSelectOptionComponent,
                        },
                        {
                            provide: AbstractFocusableOption,
                            useExisting: RdsMultiSelectOptionComponent,
                        },
                    ],
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], value: [{
                type: Input
            }] } });

class RdsSelectAllChangedEvent {
    constructor(source, selectAll) {
        this.source = source;
        this.selectAll = selectAll;
    }
}

let uniqueId$2 = 0;
class RdsSelectAllOptionComponent extends RdsAbstractSelectableListItemComponent {
    constructor() {
        super(...arguments);
        this.id = `rds-select__select-all-${uniqueId$2++}`;
        this.selectAllChanged = new EventEmitter();
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return true;
    }
    get hostElement() {
        return this.elementRef.nativeElement;
    }
    setActiveStyles() {
        this.focus('keyboard');
    }
    setInactiveStyles() {
        this.blur();
    }
    getSelectTypeClass() {
        return 'rds-select__option--select-all';
    }
    toggle() {
        super.toggle();
        this.selectAllChanged.emit(new RdsSelectAllChangedEvent(this, this.checked));
        this.cdr.markForCheck();
    }
    handleClick() {
        this.toggle();
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectAllOptionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSelectAllOptionComponent, selector: "rds-select-all-option", outputs: { selectAllChanged: "selectAllChanged" }, providers: [
            {
                provide: AbstractFocusableOption,
                useExisting: RdsSelectAllOptionComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: `
    <rds-pseudo-checkbox noSpacing [checked]="checked" [disabled]="disabled" />
    <span>Select all</span>
  `, isInline: true, dependencies: [{ kind: "component", type: RdsPseudoCheckboxComponent, selector: "rds-pseudo-checkbox", inputs: ["checked", "disabled", "indeterminate", "noSpacing"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectAllOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-select-all-option',
                    template: `
    <rds-pseudo-checkbox noSpacing [checked]="checked" [disabled]="disabled" />
    <span>Select all</span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: AbstractFocusableOption,
                            useExisting: RdsSelectAllOptionComponent,
                        },
                    ],
                }]
        }], propDecorators: { selectAllChanged: [{
                type: Output
            }] } });

class RdsSelectOptionSeparatorComponent {
    constructor() {
        this.class = 'rds-select__option--separator';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectOptionSeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSelectOptionSeparatorComponent, selector: "rds-select-option-separator", host: { properties: { "class": "this.class" } }, ngImport: i0, template: '<div>&nbsp;</div>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectOptionSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-select-option-separator',
                    template: '<div>&nbsp;</div>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

let nextId$5 = 0;
class RdsSingleSelectOptionComponent extends RdsSingleSelectListItemComponent {
    constructor() {
        super(...arguments);
        this._currentViewValue = '';
        this.hostClass = 'rds-select__option';
        this.id = `rds-option-${nextId$5++}`;
        this.selectionChange$ = new Subject();
    }
    get viewValue() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    ngAfterViewChecked() {
        if (this.checked) {
            const viewValue = this.viewValue;
            if (viewValue !== this._currentViewValue) {
                this._currentViewValue = viewValue;
            }
        }
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return !this.elementRef.nativeElement.classList.contains('hide');
    }
    toggleVisibility(value) {
        if (value === true) {
            this.show();
        }
        else if (value === false) {
            this.hide();
        }
        else {
            if (this.isVisible()) {
                this.hide();
            }
            else if (!this.isVisible()) {
                this.show();
            }
        }
    }
    hide() {
        this.renderer.addClass(this.elementRef.nativeElement, 'hide');
    }
    show() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'hide');
    }
    toggle() {
        this.handleClick();
    }
    handleClick() {
        if (!this.disabled && !this.checked) {
            this.checked = true;
            this.selectionChange$.next(new RdsSelectOptionSelectionChangedEvent(this, true));
        }
    }
    setActiveStyles() {
        this.focus('keyboard');
    }
    setInactiveStyles() {
        if (this._focused) {
            this.blur();
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleSelectOptionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSingleSelectOptionComponent, selector: "rds-select-option", inputs: { id: "id", value: "value" }, host: { properties: { "class": "this.hostClass", "attr.id": "this.id" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsSingleSelectOptionComponent,
            },
            {
                provide: AbstractFocusableOption,
                useExisting: RdsSingleSelectOptionComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-avatar\"/>\n<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n\n<rds-icon icon=\"checkmark\" class=\"rds-list-item-checkmark\"/>", isInline: true, dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_SINGLE_SELECT_LIST_ITEM_TEMPLATE,
                    selector: 'rds-select-option',
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsSingleSelectOptionComponent,
                        },
                        {
                            provide: AbstractFocusableOption,
                            useExisting: RdsSingleSelectOptionComponent,
                        },
                    ],
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], value: [{
                type: Input
            }] } });

class RdsSuffixSeparatorComponent {
    constructor() {
        this.hostClass = 'rds-form-field__control-suffix-separator-container';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSuffixSeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSuffixSeparatorComponent, selector: "rds-control-suffix-separator", host: { properties: { "class": "this.hostClass" } }, ngImport: i0, template: ` <div class="rds-form-field__control-suffix-separator"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSuffixSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-control-suffix-separator',
                    template: ` <div class="rds-form-field__control-suffix-separator"></div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsChipAvatarDirective {
    constructor() {
        this.avatar = inject(RdsAvatarComponent, {
            host: true,
            self: true,
            optional: true,
        });
        this.class = 'rds-chip__avatar';
        if (this.avatar) {
            this.avatar.disableInteractions = true;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipAvatarDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipAvatarDirective, selector: "\n  img[rds-chip-avatar], img[rdsChipAvatar],\n  svg[rds-chip-avatar], svg[rdsChipAvatar],\n  rds-avatar[rds-chip-avatar], rds-avatar[rdsChipAvatar],\n  ", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipAvatarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `
  img[rds-chip-avatar], img[rdsChipAvatar],
  svg[rds-chip-avatar], svg[rdsChipAvatar],
  rds-avatar[rds-chip-avatar], rds-avatar[rdsChipAvatar],
  `,
                }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsChipLeadingIconDirective {
    constructor() {
        this.class = 'rds-chip__leading-icon';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipLeadingIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipLeadingIconDirective, selector: "rds-icon[rds-chip-leading-icon], rds-icon[rdsChipLeadingIcon]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipLeadingIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-icon[rds-chip-leading-icon], rds-icon[rdsChipLeadingIcon]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const RDS_CHIP_LIST = new InjectionToken('RDS_CHIP_LIST');
/** Injection token to be used to override the default options for the chips module. */
const RDS_CHIPS_DEFAULT_OPTIONS = new InjectionToken('RDS_CHIPS_DEFAULT_OPTIONS');

class RdsChipActionDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this._tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.classes = 'rds-chip-action';
        this.disabled = false;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_NOT_FOCUSABLE);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    get disabledAttribute() {
        // When this chip action is disabled and focusing disabled chips is not permitted, return empty
        // string to indicate that disabled attribute should be included.
        return this.disabled ? '' : null;
    }
    get tabindexAttribute() {
        return this.disabled ? null : this.tabIndex.toString();
    }
    focus() {
        this.nativeElement.focus();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipActionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsChipActionDirective, selector: "[rds-chip-action], [rdsChipAction]", inputs: { tabIndex: "tabIndex", disabled: ["disabled", "disabled", booleanAttribute] }, host: { properties: { "class": "this.classes", "attr.aria-disabled": "this.disabled", "attr.disabled": "this.disabledAttribute", "tabIndex": "this.tabindexAttribute" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipActionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-chip-action], [rdsChipAction]',
                }]
        }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], tabIndex: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], disabledAttribute: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], tabindexAttribute: [{
                type: HostBinding,
                args: ['tabIndex']
            }] } });

let nextId$4 = 0;
class RdsChipComponent {
    get hostClasses() {
        return {
            'rds-chips__chip': true,
            'rds-chips__chip--input': this.closable,
            [`rds-chips--size-${this.size}`]: true,
            [`rds-chips--type-${this.type}`]: true,
        };
    }
    set ariaLabelCloseButton(v) {
        this._ariaLabelCloseButton = v;
    }
    get ariaLabelCloseButton() {
        return this._ariaLabelCloseButton || 'close' + this.textContent;
    }
    set size(value) {
        if (this._size !== value) {
            this._size = value;
            if (this._initialized) {
                this.cdr.detectChanges();
            }
        }
    }
    get size() {
        return this._size;
    }
    set value(value) {
        const oldValue = this._value;
        this._value = value;
        if (this._value !== oldValue) {
            this.cdr.markForCheck();
        }
    }
    get value() {
        return this._value !== undefined ? this._value : this.innerText;
    }
    get innerText() {
        return this.elementRef.nativeElement.innerText;
    }
    get textContent() {
        return this.elementRef.nativeElement.textContent;
    }
    constructor() {
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.contentObserver = inject(ContentObserver);
        this.ngZone = inject(NgZone);
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.hasFocusInternal = false;
        this._pendingFocus = false;
        this._initialized = false;
        this.focus$ = new Subject();
        this.blur$ = new Subject();
        this.id = `rds-chip--${nextId$4++}`;
        this.type = 'blue';
        this.role = null;
        this.disabled = false;
        this.closable = false;
        this.closeChip = new EventEmitter();
        this.destroyed = new EventEmitter();
        this.monitorFocus();
    }
    ngAfterViewInit() {
        this.contentObserver
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
        if (this._pendingFocus) {
            this._pendingFocus = false;
            this.focus();
        }
        this._initialized = true;
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this.destroyed.emit({ source: this });
        this.destroyed.complete();
    }
    handleKeydown(event) {
        if (this.disabled ||
            // let action chips do their own thing
            event.target?.tagName.toLowerCase() === 'button') {
            return;
        }
        if ('keyCode' in event && event.keyCode !== SPACE) {
            if (event.keyCode === BACKSPACE || event.keyCode === DELETE) {
                event.preventDefault();
                this.closeChip.emit();
            }
            return;
        }
        event.preventDefault();
        this.handlePrimaryActionInteraction();
    }
    focus() {
        if (!this.disabled) {
            // If `focus` is called before `ngAfterViewInit`, we won't have access to the primary action.
            // This can happen if the consumer tries to focus a chip immediately after it is added.
            // Queue the method to be called again on init.
            if (this.primaryAction) {
                this.primaryAction.focus();
            }
            else {
                this._pendingFocus = true;
            }
        }
    }
    onClose(e) {
        if (!this.disabled) {
            e.stopPropagation();
            this.closeChip.emit();
        }
    }
    hasFocus() {
        return this.hasFocusInternal;
    }
    /** Handles interactions with the primary action of the chip. */
    handlePrimaryActionInteraction() {
        // Empty here, but is overwritten in child classes.
    }
    getSourceAction(target) {
        return this.getActions().find((action) => {
            const element = action.nativeElement;
            return element === target || element.contains(target);
        });
    }
    getActions() {
        const result = [];
        if (this.primaryAction) {
            result.push(this.primaryAction);
        }
        if (this.closeAction) {
            result.push(this.closeAction);
        }
        return result;
    }
    monitorFocus() {
        this.focusMonitor.monitor(this.elementRef, true).subscribe((origin) => {
            const hasFocus = origin !== null;
            if (hasFocus !== this.hasFocusInternal) {
                this.hasFocusInternal = hasFocus;
                if (hasFocus) {
                    this.focus$.next({ source: this });
                }
                else {
                    // When animations are enabled, Angular may end up removing the chip from the DOM a little
                    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list
                    // that moves focus not the next item. To work around the issue, we defer marking the chip
                    // as not focused until the next time the zone stabilizes.
                    this.ngZone.onStable
                        .pipe(take(1))
                        .subscribe(() => this.ngZone.run(() => this.blur$.next({ source: this })));
                }
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsChipComponent, selector: "rds-chip, button[rds-chip], button[rdsChip]", inputs: { ariaLabelCloseButton: "ariaLabelCloseButton", size: "size", type: "type", role: "role", disabled: ["disabled", "disabled", booleanAttribute], closable: ["closable", "closable", booleanAttribute], value: "value" }, outputs: { closeChip: "closeChip", destroyed: "destroyed" }, host: { listeners: { "click": "handleKeydown($event)", "keydown": "handleKeydown($event)" }, properties: { "class": "this.hostClasses", "attr.id": "this.id", "attr.role": "this.role", "attr.aria-disabled": "this.disabled", "disabled": "this.disabled" } }, viewQueries: [{ propertyName: "primaryAction", first: true, predicate: ["primary"], descendants: true, read: RdsChipActionDirective }, { propertyName: "closeAction", first: true, predicate: ["closeButton"], descendants: true, read: RdsChipActionDirective }], ngImport: i0, template: "<div [ngClass]=\"['rds-chips-wrapper', 'rds-chips--size-' + size]\">\n  <span #primary rds-chip-action [disabled]=\"disabled\">\n    <ng-content\n      select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n    />\n    <ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n    <ng-content />\n  </span>\n  @if (closable) {\n    <button\n      #closeButton\n      class=\"rds-chip-close-button\"\n      rds-icon-button\n      rds-chip-action\n      [attr.aria-label]=\"ariaLabelCloseButton\"\n      [disabled]=\"disabled\"\n      (click)=\"onClose($event)\"\n      type=\"button\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n    </button>\n  } @else {\n    <ng-content\n      select=\"rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]\"\n    />\n  }\n</div>\n", styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: RdsChipActionDirective, selector: "[rds-chip-action], [rdsChipAction]", inputs: ["tabIndex", "disabled"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-chip, button[rds-chip], button[rdsChip]', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [ngClass]=\"['rds-chips-wrapper', 'rds-chips--size-' + size]\">\n  <span #primary rds-chip-action [disabled]=\"disabled\">\n    <ng-content\n      select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n    />\n    <ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n    <ng-content />\n  </span>\n  @if (closable) {\n    <button\n      #closeButton\n      class=\"rds-chip-close-button\"\n      rds-icon-button\n      rds-chip-action\n      [attr.aria-label]=\"ariaLabelCloseButton\"\n      [disabled]=\"disabled\"\n      (click)=\"onClose($event)\"\n      type=\"button\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n    </button>\n  } @else {\n    <ng-content\n      select=\"rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]\"\n    />\n  }\n</div>\n", styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n"] }]
        }], ctorParameters: () => [], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], ariaLabelCloseButton: [{
                type: Input
            }], size: [{
                type: Input
            }], type: [{
                type: Input
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], disabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: HostBinding,
                args: ['disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], closable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], value: [{
                type: Input
            }], closeChip: [{
                type: Output
            }], destroyed: [{
                type: Output
            }], primaryAction: [{
                type: ViewChild,
                args: ['primary', { read: RdsChipActionDirective }]
            }], closeAction: [{
                type: ViewChild,
                args: ['closeButton', { read: RdsChipActionDirective }]
            }], handleKeydown: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class RdsChipSetComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.dir = inject(Directionality, { optional: true });
        this._lastDestroyedFocusedChipIndex = null;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this._defaultRole = 'presentation';
        this._disabled = false;
        this._size = 's';
        this.type = 'blue';
        this._explicitRole = null;
        this.chipActions = new QueryList();
    }
    get chipFocusChanges() {
        return this.getChipStream((chip) => chip.focus$);
    }
    get chipDestroyedChanges() {
        return this.getChipStream((chip) => chip.destroyed);
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        this.syncChipsState();
    }
    get disabled() {
        return this._disabled;
    }
    get empty() {
        return this.chips.length === 0;
    }
    get role() {
        if (this._explicitRole) {
            return this._explicitRole;
        }
        return this.empty ? null : this._defaultRole;
    }
    set role(value) {
        this._explicitRole = value;
    }
    get focused() {
        return this.hasFocusedChip();
    }
    ngAfterContentInit() {
        this.chips.changes
            .pipe(startWith(this.chips), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.checkAndSetChipSizes());
    }
    ngAfterViewInit() {
        this.setUpFocusManagement();
        this.trackChipSetChanges();
        this.trackDestroyedFocusedChip();
    }
    ngOnDestroy() {
        this.keyManager?.destroy();
        this.chipActions.destroy();
    }
    ngOnChanges(changes) {
        if ((changes['size'] && !changes['size'].isFirstChange()) ||
            (changes['type'] && !changes['type'].isFirstChange())) {
            this.checkAndSetChipSizes();
        }
    }
    hasFocusedChip() {
        return this.chips && this.chips.some((chip) => chip.hasFocus());
    }
    syncChipsState() {
        if (this.chips) {
            this.chips.forEach((chip) => {
                chip.disabled = this._disabled;
                chip.cdr.markForCheck();
            });
        }
    }
    /** Dummy method for subclasses to override. Base chip set cannot be focused. */
    focus() {
        noop();
    }
    handleKeydown(event) {
        if (this.originatesFromChip(event)) {
            this.keyManager.onKeydown(event);
        }
    }
    isValidIndex(index) {
        return index >= 0 && index < this.chips.length;
    }
    allowFocusEscape() {
        if (this.tabIndex !== TAB_INDEX_NOT_FOCUSABLE) {
            const previousTabIndex = this.tabIndex;
            this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
            setTimeout(() => (this.tabIndex = previousTabIndex));
        }
    }
    /**
     * Gets a stream of events from all the chips within the set.
     * The stream will automatically incorporate any newly-added chips.
     */
    getChipStream(mappingFunction) {
        return this.chips.changes.pipe(startWith(null), switchMap(() => merge(...this.chips.map(mappingFunction))));
    }
    /** Checks whether an event comes from inside a chip element. */
    originatesFromChip(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this.elementRef.nativeElement) {
            if (currentElement.classList.contains('rds-chips__chip')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    setUpFocusManagement() {
        // Create a flat `QueryList` containing the actions of all the chips.
        // This allows us to navigate both within the chip and move to the next/previous
        // one using the existing `ListKeyManager`.
        this.chips.changes
            .pipe(startWith(this.chips))
            .subscribe((chips) => {
            const actions = [];
            chips.forEach((chip) => chip.getActions().forEach((action) => actions.push(action)));
            this.chipActions.reset(actions);
            this.chipActions.notifyOnChanges();
        });
        this.keyManager = new FocusKeyManager(this.chipActions)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr')
            .withHomeAndEnd()
            .skipPredicate((action) => action.disabled);
        // Keep the manager active index in sync so that navigation picks
        // up from the current chip if the user clicks into the list directly.
        this.chipFocusChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(({ source: chip }) => {
            const action = chip.getSourceAction(document.activeElement);
            if (action) {
                this.keyManager.updateActiveItem(action);
            }
        });
        this.dir?.change
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((direction) => this.keyManager.withHorizontalOrientation(direction));
    }
    /** Listens to changes in the chip set and syncs up the state of the individual chips. */
    trackChipSetChanges() {
        this.chips.changes
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => this.syncChipsState());
            }
            this._redirectDestroyedChipFocus();
        });
    }
    trackDestroyedFocusedChip() {
        this.chipDestroyedChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            const chipArray = this.chips.toArray();
            const chipIndex = chipArray.indexOf(event.source);
            // If the focused chip is destroyed, save its index so that we can move focus to the next
            // chip. We only save the index here, rather than move the focus immediately, because we want
            // to wait until the chip is removed from the chip list before focusing the next one. This
            // allows us to keep focus on the same index if the chip gets swapped out.
            if (this.isValidIndex(chipIndex) && event.source.hasFocus()) {
                this._lastDestroyedFocusedChipIndex = chipIndex;
            }
        });
    }
    _redirectDestroyedChipFocus() {
        if (this._lastDestroyedFocusedChipIndex == null) {
            return;
        }
        if (this.chips.length) {
            const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this.chips.length - 1);
            const chipToFocus = this.chips.toArray()[newIndex];
            if (chipToFocus.disabled) {
                // If we're down to one disabled chip, move focus back to the set.
                if (this.chips.length === 1) {
                    this.focus();
                }
                else {
                    this.keyManager.setPreviousItemActive();
                }
            }
            else {
                chipToFocus.focus();
            }
        }
        else {
            this.focus();
        }
        this._lastDestroyedFocusedChipIndex = null;
    }
    checkAndSetChipSizes() {
        this.chips.forEach((a) => {
            if (a.size !== this._size) {
                a.size = this._size;
            }
            if (a.type !== this.type) {
                a.type = this.type;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipSetComponent, selector: "rds-chip-set", inputs: { tabIndex: "tabIndex", type: "type", disabled: "disabled", role: "role" }, host: { listeners: { "keydown": "handleKeydown($event)" }, properties: { "attr.role": "this.role" } }, queries: [{ propertyName: "chips", predicate: RdsChipComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-chip-set',
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { tabIndex: [{
                type: Input
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], chips: [{
                type: ContentChildren,
                args: [RdsChipComponent, { descendants: true }]
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class RdsChipSelectableComponent extends RdsChipComponent {
    constructor() {
        super();
        this.parentList = inject(RDS_CHIP_LIST, {
            optional: true,
        });
        this._selected = false;
        this._selectable = true;
        this.chipListSelectable = true;
        this.chipListMulti = false;
        this.selectedChange = new EventEmitter();
        if (isDevMode() && !this.parentList) {
            throw new Error('RdsChipSelectableComponent can only be used as a child of RdsChipListComponent');
        }
        this.role = 'option';
    }
    get hostClasses() {
        return {
            ...super.hostClasses,
            'rds-chips__chip--selected': this.selected,
        };
    }
    get isChecked() {
        return this.chipListMulti ? this.selected : null;
    }
    get isSelected() {
        return this.chipListMulti ? null : this.selected;
    }
    set selectable(value) {
        this._selectable = booleanAttribute(value);
    }
    get selectable() {
        return this._selectable && this.chipListSelectable;
    }
    set selected(value) {
        this.setSelectedState(booleanAttribute(value), false, true);
    }
    get selected() {
        return this._selected;
    }
    handlePrimaryActionInteraction() {
        if (this.selectable && !this.disabled) {
            this.toggleSelected(true);
        }
    }
    toggleSelected(isUserInput = false) {
        this.setSelectedState(!this.selected, isUserInput, true);
    }
    setSelectedState(isSelected, isUserInput, emitEvent) {
        if (!this.disabled && isSelected !== this.selected) {
            this._selected = isSelected;
            if (emitEvent) {
                this.selectedChange.emit({
                    source: this,
                    isUserInput,
                    selected: this.selected,
                });
            }
            this.cdr.markForCheck();
        }
    }
    selectViaInteraction() {
        this.setSelectedState(true, true, true);
    }
    select() {
        this.setSelectedState(true, false, true);
    }
    deselect() {
        this.setSelectedState(false, false, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSelectableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsChipSelectableComponent, selector: "rds-chip-selectable", inputs: { selectable: "selectable", selected: "selected" }, outputs: { selectedChange: "selectedChange" }, host: { properties: { "class": "this.hostClasses", "attr.aria-checked": "this.isChecked", "attr.aria-selected": "this.isSelected" } }, providers: [
            { provide: RdsChipComponent, useExisting: RdsChipSelectableComponent },
        ], usesInheritance: true, ngImport: i0, template: "<div [ngClass]=\"['rds-chips-wrapper', 'rds-chips--size-' + size]\">\n  <span #primary rds-chip-action [disabled]=\"disabled\">\n    <ng-content\n      select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n    />\n    <ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n    <ng-content />\n  </span>\n  @if (closable) {\n    <button\n      #closeButton\n      class=\"rds-chip-close-button\"\n      rds-icon-button\n      rds-chip-action\n      [attr.aria-label]=\"ariaLabelCloseButton\"\n      [disabled]=\"disabled\"\n      (click)=\"onClose($event)\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n    </button>\n  } @else {\n    <ng-content\n      select=\"rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]\"\n    />\n  }\n</div>\n", dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: RdsChipActionDirective, selector: "[rds-chip-action], [rdsChipAction]", inputs: ["tabIndex", "disabled"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSelectableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-chip-selectable', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: RdsChipComponent, useExisting: RdsChipSelectableComponent },
                    ], template: "<div [ngClass]=\"['rds-chips-wrapper', 'rds-chips--size-' + size]\">\n  <span #primary rds-chip-action [disabled]=\"disabled\">\n    <ng-content\n      select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n    />\n    <ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n    <ng-content />\n  </span>\n  @if (closable) {\n    <button\n      #closeButton\n      class=\"rds-chip-close-button\"\n      rds-icon-button\n      rds-chip-action\n      [attr.aria-label]=\"ariaLabelCloseButton\"\n      [disabled]=\"disabled\"\n      (click)=\"onClose($event)\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n    </button>\n  } @else {\n    <ng-content\n      select=\"rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]\"\n    />\n  }\n</div>\n" }]
        }], ctorParameters: () => [], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], isChecked: [{
                type: HostBinding,
                args: ['attr.aria-checked']
            }], isSelected: [{
                type: HostBinding,
                args: ['attr.aria-selected']
            }], selectable: [{
                type: Input
            }], selected: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }] } });

class RdsChipListComponent extends RdsChipSetComponent {
    set tabIndex(value) {
        super.tabIndex = numberAttribute(value);
    }
    get tabIndex() {
        return super.tabIndex;
    }
    get tabindex() {
        return this.empty ? TAB_INDEX_NOT_FOCUSABLE : this.tabIndex;
    }
    get empty() {
        return this.selectableChips.length === 0;
    }
    get hostClasses() {
        const classes = [
            'rds-chips',
            `rds-chips--size-${this.size}`,
            `rds-chips--type-${this.type}`,
        ];
        if (this.disabled) {
            classes.push('rds-chips--disabled');
        }
        return classes;
    }
    set multiple(value) {
        const oldValue = this._multiple;
        this._multiple = booleanAttribute(value);
        this.syncListProperties(oldValue !== this._multiple);
    }
    get multiple() {
        return this._multiple;
    }
    set selectable(value) {
        this._selectable = booleanAttribute(value);
        this.syncListProperties();
    }
    get selectable() {
        return this._selectable;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
    }
    set value(value) {
        this.writeValue(value);
        this._value = value;
    }
    get value() {
        return this._value;
    }
    set disabled(v) {
        super.disabled = v;
    }
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    get selected() {
        const selectedChips = this.selectableChips
            .toArray()
            .filter((chip) => chip.selected);
        return this.multiple ? selectedChips : selectedChips[0];
    }
    get chipSelectionChanges() {
        return this.getChipSelectableStream((chip) => chip.selectedChange);
    }
    get chipBlurChanges() {
        return this.getChipSelectableStream((chip) => chip.blur$);
    }
    get focused() {
        return this.hasFocusedChip();
    }
    constructor() {
        super();
        this.ngControl = inject(NgControl, {
            self: true,
            optional: true,
        });
        this.cdr = inject(ChangeDetectorRef);
        this._multiple = false;
        this._selectable = true;
        this.valueChange = new EventEmitter();
        this.onChange = noop;
        this.onTouched = noop;
        this.orientation = 'horizontal';
        this._size = 'm';
        this.compareFn = (valueOne, valueTwo) => valueOne === valueTwo;
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        this.role = 'listbox';
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        if (this._pendingInitialValue !== undefined) {
            Promise.resolve().then(() => {
                this.setSelectionByValue(this._pendingInitialValue, false);
                this._pendingInitialValue = undefined;
            });
        }
        this.selectableChips.changes
            .pipe(startWith(this.selectableChips), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            const newRole = this.selectableChips.length > 0 ? 'listbox' : 'presentation';
            if (newRole !== this.role) {
                this.role = newRole;
            }
            // Update listbox selectable/multiple properties on chips
            this.syncListProperties();
        });
        this.chipBlurChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.blur());
        this.chipSelectionChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            if (!this.multiple) {
                this.selectableChips.forEach((chip) => {
                    if (chip !== event.source) {
                        chip.setSelectedState(false, false, false);
                    }
                });
            }
            if (event.isUserInput) {
                this.propagateChanges();
            }
        });
        this.checkAndSetAvatarSizes();
        this.avatars.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.checkAndSetAvatarSizes());
    }
    /**
     * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there
     * are no selected chips.
     */
    focus() {
        if (this.disabled) {
            return;
        }
        const firstSelectedChip = this.getFirstSelectedChip();
        if (firstSelectedChip && !firstSelectedChip.disabled) {
            firstSelectedChip.focus();
        }
        else if (this.selectableChips.length > 0) {
            this.keyManager.setFirstItemActive();
        }
        else {
            this.elementRef.nativeElement.focus();
        }
    }
    blur() {
        if (!this.disabled) {
            // Wait to see if focus moves to an individual chip.
            setTimeout(() => {
                if (!this.focused) {
                    this.markAsTouched();
                }
            });
        }
    }
    // ControlValueAccessor Start
    writeValue(value) {
        if (this.selectableChips) {
            this.setSelectionByValue(value, false);
        }
        else if (value != null) {
            this._pendingInitialValue = value;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // ControlValueAccessor End
    getChipSelectableStream(mappingFunction) {
        return this.selectableChips.changes.pipe(startWith(null), switchMap(() => merge(...this.selectableChips.map(mappingFunction))));
    }
    hasFocusedChip() {
        return (this.selectableChips &&
            this.selectableChips.some((chip) => chip.hasFocus()));
    }
    onKeydown(e) {
        if (e.keyCode === TAB) {
            super.allowFocusEscape();
        }
    }
    getFirstSelectedChip() {
        if (Array.isArray(this.selected)) {
            return this.selected.length ? this.selected[0] : undefined;
        }
        else {
            return this.selected;
        }
    }
    markAsTouched() {
        this.onTouched();
        this.cdr.markForCheck();
    }
    syncListProperties(clearSelection = false) {
        if (this.selectableChips) {
            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(() => {
                this.selectableChips.forEach((chip) => {
                    chip.chipListSelectable = this.selectable;
                    chip.chipListMulti = this.multiple;
                    if (clearSelection) {
                        chip.deselect();
                    }
                    chip.cdr.markForCheck();
                });
            });
        }
    }
    clearSelection(skip) {
        this.selectableChips.forEach((chip) => {
            if (chip !== skip) {
                chip.deselect();
            }
        });
    }
    propagateChanges(fallbackValue) {
        let valueToEmit;
        if (this.multiple) {
            valueToEmit = this.selected.map((chip) => chip.value);
        }
        else {
            valueToEmit = this.selected
                ? this.selected.value
                : fallbackValue || null;
        }
        this.value = valueToEmit;
        this.onChange(valueToEmit);
        this.valueChange.emit(valueToEmit);
    }
    setSelectionByValue(value, isUserInput = true) {
        this.clearSelection();
        if (this.multiple && value) {
            if (!Array.isArray(value)) {
                throw new Error('A multiselect chip-list requires the given value to be an array');
            }
            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));
        }
        else {
            this.selectValue(value, isUserInput);
        }
    }
    selectValue(value, isUserInput) {
        const correspondingChip = this.selectableChips.find((chip) => {
            try {
                return chip.value != null && this.compareFn(chip.value, value);
            }
            catch (error) {
                return false;
            }
        });
        if (correspondingChip) {
            isUserInput
                ? correspondingChip.selectViaInteraction()
                : correspondingChip.select();
        }
        return correspondingChip;
    }
    checkAndSetAvatarSizes() {
        this.avatars
            .filter((a) => a.size !== this.size)
            .forEach((a) => (a.size = this.size));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipListComponent, selector: "rds-chip-list", inputs: { tabIndex: "tabIndex", multiple: "multiple", selectable: "selectable", size: "size", compareFn: "compareFn", value: "value", disabled: "disabled" }, outputs: { valueChange: "valueChange" }, host: { listeners: { "focus": "focus()", "blur": "blur()", "keydown": "onKeydown($event)" }, properties: { "tabIndex": "this.tabindex", "attr.aria-orientation": "this.orientation", "class": "this.hostClasses", "attr.aria-multiselectable": "this.multiple" } }, providers: [
            {
                provide: RDS_CHIP_LIST,
                useExisting: RdsChipListComponent,
            },
        ], queries: [{ propertyName: "selectableChips", predicate: RdsChipSelectableComponent, descendants: true }, { propertyName: "avatars", predicate: RdsAvatarComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-content
      select="rds-chip-selectable, rds-chip, button[rds-chip], button[rdsChip]"
    />
  `, isInline: true, styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-chip-list', template: `
    <ng-content
      select="rds-chip-selectable, rds-chip, button[rds-chip], button[rdsChip]"
    />
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: RDS_CHIP_LIST,
                            useExisting: RdsChipListComponent,
                        },
                    ], styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n"] }]
        }], ctorParameters: () => [], propDecorators: { selectableChips: [{
                type: ContentChildren,
                args: [RdsChipSelectableComponent, { descendants: true }]
            }], tabIndex: [{
                type: Input
            }], tabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], valueChange: [{
                type: Output
            }], avatars: [{
                type: ContentChildren,
                args: [RdsAvatarComponent, { descendants: true }]
            }], orientation: [{
                type: HostBinding,
                args: ['attr.aria-orientation']
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], multiple: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-multiselectable']
            }], selectable: [{
                type: Input
            }], size: [{
                type: Input
            }], compareFn: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class RdsChipEditInputDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.document = inject(DOCUMENT);
        this.classes = 'rds-chip-edit-input';
        this.role = 'textbox';
        this.tabindex = TAB_INDEX_NOT_FOCUSABLE;
        this.contenteditable = true;
    }
    initialize(initialValue) {
        this.getNativeElement().focus();
        this.setValue(initialValue);
    }
    getNativeElement() {
        return this.elementRef.nativeElement;
    }
    setValue(value) {
        this.getNativeElement().textContent = value;
        this.moveCursorToEndOfInput();
    }
    getValue() {
        return this.getNativeElement().textContent || '';
    }
    moveCursorToEndOfInput() {
        const range = this.document.createRange();
        range.selectNodeContents(this.getNativeElement());
        range.collapse(false);
        const sel = window.getSelection();
        if (sel) {
            sel.removeAllRanges();
            sel.addRange(range);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipEditInputDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipEditInputDirective, selector: "span[rdsChipEditInput], span[rds-chip-edit-input]", host: { properties: { "class": "this.classes", "attr.role": "this.role", "tabIndex": "this.tabindex", "attr.contenteditable": "this.contenteditable" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipEditInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'span[rdsChipEditInput], span[rds-chip-edit-input]',
                }]
        }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], tabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], contenteditable: [{
                type: HostBinding,
                args: ['attr.contenteditable']
            }] } });

const CHIP_DECLARATIONS = [
    RdsChipListComponent,
    RdsChipComponent,
    RdsChipLeadingIconDirective,
    RdsChipAvatarDirective,
    RdsChipSelectableComponent,
    RdsChipSelectableComponent,
    RdsChipActionDirective,
];
const PRIVATE_DECLARATIONS = [RdsChipEditInputDirective, RdsChipSetComponent];
class RdsChipsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsChipsModule, declarations: [RdsChipListComponent,
            RdsChipComponent,
            RdsChipLeadingIconDirective,
            RdsChipAvatarDirective,
            RdsChipSelectableComponent,
            RdsChipSelectableComponent,
            RdsChipActionDirective, RdsChipEditInputDirective, RdsChipSetComponent], imports: [CommonModule,
            RdsIconComponent,
            RdsButtonModule, RdsAvatarComponent, RdsAvatarDescriptionDirective, RdsAvatarGroupComponent, RdsAvatarImageDirective, RdsAvatarIconDirective, RdsAvatarInitialsDirective, RdsAvatarLabelDirective], exports: [RdsChipListComponent,
            RdsChipComponent,
            RdsChipLeadingIconDirective,
            RdsChipAvatarDirective,
            RdsChipSelectableComponent,
            RdsChipSelectableComponent,
            RdsChipActionDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipsModule, providers: [
            {
                provide: RDS_CHIPS_DEFAULT_OPTIONS,
                useValue: {
                    separatorKeys: ['Enter', ','],
                },
            },
        ], imports: [CommonModule,
            RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RdsIconComponent,
                        RdsButtonModule,
                        ...RDS_AVATAR_DIRECTIVES,
                    ],
                    declarations: [...CHIP_DECLARATIONS, ...PRIVATE_DECLARATIONS],
                    exports: [...CHIP_DECLARATIONS],
                    providers: [
                        {
                            provide: RDS_CHIPS_DEFAULT_OPTIONS,
                            useValue: {
                                separatorKeys: ['Enter', ','],
                            },
                        },
                    ],
                }]
        }] });

const RDS_DEFAULT_BADGE_COLORS = [
    'info',
    'success',
    'warning',
    'error',
    'neutral',
];
const RDS_MINIMAL_BADGE_COLORS = [
    'blue',
    'green',
    'yellow',
    'red',
    'neutral',
    'orange',
    'black',
    'purple',
    'pink',
];
const RDS_DOT_BADGE_COLORS = [...RDS_DEFAULT_BADGE_COLORS, 'other'];
const RDS_BADGE_COLORS = {
    default: [...RDS_DEFAULT_BADGE_COLORS],
    minimal: [...RDS_MINIMAL_BADGE_COLORS],
    dot: [...RDS_DOT_BADGE_COLORS],
};
const RDS_BADGE_DEFAULT_COLOR = {
    default: 'info',
    minimal: 'blue',
    dot: 'info',
};

class RdsBadgeComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.class = 'rds-badge--container';
        /**
         * @desc Has effect only for standalone badges that has either `default` or `minimal` type
         */
        this.size = 's';
        this.label = null;
        this.type = 'default';
        this.ariaDescribedBy = null;
        this._isAttached = false;
    }
    ngOnChanges(changes) {
        if (!this.color) {
            // for backwards compatibility when it comes to default colors
            this.color = RDS_BADGE_DEFAULT_COLOR[this.type];
        }
        if (isDevMode()) {
            if ((changes['color'] || changes['type']) &&
                this.type &&
                this.color &&
                !RDS_BADGE_COLORS[this.type].includes(this.color)) {
                throw new Error(`The '${this.color}' color is not available for '${this.type}' badge type.`);
            }
        }
    }
    detectChanges() {
        this.cdr.detectChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsBadgeComponent, isStandalone: true, selector: "rds-badge", inputs: { size: "size", label: "label", color: "color", type: "type", ariaDescribedBy: "ariaDescribedBy" }, host: { properties: { "class": "this.class" } }, usesOnChanges: true, ngImport: i0, template: "<span\n  class=\"rds-badge rds-badge--{{ color }}-{{ type }}\"\n  [class.rds-badge--single-char]=\"type !== 'dot' && label && label.length === 1\"\n  [class.rds-badge--attached]=\"_isAttached\"\n  [class.rds-badge--l]=\"size === 'l' && type !== 'dot' && !_isAttached\"\n  [class.rds-badge--s]=\"size === 's' && type !== 'dot' && !_isAttached\"\n  [attr.aria-describedby]=\"ariaDescribedBy\"\n  >{{ type === 'dot' ? '' : label }}</span\n>\n@if (type === 'dot' && label && label.length > 0) {\n  <span class=\"rds-badge--content\">{{ label }}</span>\n}\n", styles: [".rds-badge--container{position:relative;display:inline-flex;align-items:center}.rds-badge--container .rds-badge{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;--single-char-padding: 4px 10px;--multiple-char-padding: 4px 12px;line-height:unset;display:inline-flex;align-items:center;border-radius:100vmax;white-space:nowrap;padding:var(--padding, var(--multiple-char-padding));height:28px;background-color:var(--rds-color-badge-grey-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--info-default{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--info-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-informative)}.rds-badge--container .rds-badge.rds-badge--success-default{background-color:var(--rds-color-bg-success);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--success-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-success)}.rds-badge--container .rds-badge.rds-badge--warning-default{background-color:var(--rds-color-bg-warning);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--warning-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-warning)}.rds-badge--container .rds-badge.rds-badge--error-default{background-color:var(--rds-color-bg-error);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--error-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-error)}.rds-badge--container .rds-badge.rds-badge--neutral-default{background-color:var(--rds-color-badge-grey-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--neutral-minimal{background-color:var(--rds-color-badge-neutral-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--neutral-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-grey-3)}.rds-badge--container .rds-badge.rds-badge--blue-minimal{background-color:var(--rds-color-badge-blue-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--green-minimal{background-color:var(--rds-color-badge-green-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--red-minimal{background-color:var(--rds-color-badge-red-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--yellow-minimal{background-color:var(--rds-color-badge-yellow-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--orange-minimal{background-color:var(--rds-color-badge-orange-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--black-minimal{background-color:var(--rds-color-badge-dark-grey-bg);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--purple-minimal{background-color:var(--rds-color-badge-purple-2-bg);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--pink-minimal{background-color:var(--rds-color-badge-purple-1-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--other-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-accent)}.rds-badge--container .rds-badge--content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-flex;align-items:center;height:28px;color:var(--rds-color-high-contrast);padding-left:8px}.rds-badge--container .rds-badge--single-char{display:flex;justify-content:center;--padding: var(--single-char-padding)}.rds-badge--container .rds-badge--s,.rds-badge--container .rds-badge--attached{height:20px;padding:0 6px}.rds-badge--container .rds-badge--s{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-badge--container .rds-badge--l{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;line-height:unset;--single-char-padding:6px 14px;--multiple-char-padding:6px 16px;height:36px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-badge', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, template: "<span\n  class=\"rds-badge rds-badge--{{ color }}-{{ type }}\"\n  [class.rds-badge--single-char]=\"type !== 'dot' && label && label.length === 1\"\n  [class.rds-badge--attached]=\"_isAttached\"\n  [class.rds-badge--l]=\"size === 'l' && type !== 'dot' && !_isAttached\"\n  [class.rds-badge--s]=\"size === 's' && type !== 'dot' && !_isAttached\"\n  [attr.aria-describedby]=\"ariaDescribedBy\"\n  >{{ type === 'dot' ? '' : label }}</span\n>\n@if (type === 'dot' && label && label.length > 0) {\n  <span class=\"rds-badge--content\">{{ label }}</span>\n}\n", styles: [".rds-badge--container{position:relative;display:inline-flex;align-items:center}.rds-badge--container .rds-badge{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;--single-char-padding: 4px 10px;--multiple-char-padding: 4px 12px;line-height:unset;display:inline-flex;align-items:center;border-radius:100vmax;white-space:nowrap;padding:var(--padding, var(--multiple-char-padding));height:28px;background-color:var(--rds-color-badge-grey-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--info-default{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--info-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-informative)}.rds-badge--container .rds-badge.rds-badge--success-default{background-color:var(--rds-color-bg-success);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--success-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-success)}.rds-badge--container .rds-badge.rds-badge--warning-default{background-color:var(--rds-color-bg-warning);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--warning-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-warning)}.rds-badge--container .rds-badge.rds-badge--error-default{background-color:var(--rds-color-bg-error);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--error-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-error)}.rds-badge--container .rds-badge.rds-badge--neutral-default{background-color:var(--rds-color-badge-grey-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--neutral-minimal{background-color:var(--rds-color-badge-neutral-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--neutral-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-grey-3)}.rds-badge--container .rds-badge.rds-badge--blue-minimal{background-color:var(--rds-color-badge-blue-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--green-minimal{background-color:var(--rds-color-badge-green-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--red-minimal{background-color:var(--rds-color-badge-red-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--yellow-minimal{background-color:var(--rds-color-badge-yellow-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--orange-minimal{background-color:var(--rds-color-badge-orange-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--black-minimal{background-color:var(--rds-color-badge-dark-grey-bg);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--purple-minimal{background-color:var(--rds-color-badge-purple-2-bg);color:var(--rds-color-on-dark-surface)}.rds-badge--container .rds-badge.rds-badge--pink-minimal{background-color:var(--rds-color-badge-purple-1-bg);color:var(--rds-color-on-light-surface)}.rds-badge--container .rds-badge.rds-badge--other-dot{font-size:0;padding:0;width:8px;height:8px;background-color:var(--rds-color-accent)}.rds-badge--container .rds-badge--content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:inline-flex;align-items:center;height:28px;color:var(--rds-color-high-contrast);padding-left:8px}.rds-badge--container .rds-badge--single-char{display:flex;justify-content:center;--padding: var(--single-char-padding)}.rds-badge--container .rds-badge--s,.rds-badge--container .rds-badge--attached{height:20px;padding:0 6px}.rds-badge--container .rds-badge--s{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-badge--container .rds-badge--l{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;line-height:unset;--single-char-padding:6px 14px;--multiple-char-padding:6px 16px;height:36px}\n"] }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], color: [{
                type: Input
            }], type: [{
                type: Input
            }], ariaDescribedBy: [{
                type: Input
            }] } });

class RdsMultiSelectComponent extends RdsAbstractSelectComponent {
    constructor() {
        super(...arguments);
        this.dir = inject(Directionality, { optional: true });
        this._name = 'rds-multi-select';
        this.allOptionsSelected = false;
        this._withChips = false;
        this.focusedChip = null;
        this.chipActions = new QueryList();
    }
    get selected() {
        return this.selectionModel.selected;
    }
    get triggerValues() {
        if (this.empty) {
            return [''];
        }
        return this.selectionModel.selected.map((option) => option.viewValue);
    }
    get controlType() {
        if (this.withChips) {
            return 'select-with-chips';
        }
        else {
            return 'select';
        }
    }
    set withChips(value) {
        const newValue = booleanAttribute(value);
        if (this._withChips !== newValue) {
            this._withChips = newValue;
            this.stateChanges.emit();
        }
    }
    get withChips() {
        return this._withChips;
    }
    ngOnInit() {
        super.ngOnInit();
        this.selectionModel = new SelectionModel(true);
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this.selectionModel.changed
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            // check it
            this.calculateAllOptionsSelected();
            this.refreshSelectAllCheck();
            this.cdr.markForCheck();
        });
        this.calculateAllOptionsSelected();
        this.selectAllElements.changes
            .pipe(startWith(this.selectAllElements), tap(() => this.selectAllDestroy$.next()), filter(() => this.selectAllElements.length > 0), switchMap(() => merge(...this.selectAllElements.map((all) => all.selectAllChanged)).pipe(takeUntil(this.selectAllDestroy$), takeUntilDestroyed(this.destroyRef))), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.toggleAllOptions();
        });
    }
    ngAfterViewInit() {
        this.setUpFocusManagement();
    }
    close() {
        super.close();
        if (this._panelOpen) {
            this.selectAllElements.forEach((all) => all.setInactiveStyles());
        }
    }
    toggleAllOptions(selectAll = !this.allOptionsSelected) {
        if (this.allOptionsSelected !== selectAll) {
            this.selectionModel.clear();
            this.allOptionsSelected = selectAll;
            this.selectionModel.select(...this.options.filter((item) => this.allOptionsSelected
                ? item.checked || !item.disabled
                : item.checked && item.disabled));
            this.sortValues();
            this.propagateChanges();
        }
    }
    selectAllOptions() {
        this.toggleAllOptions(true);
    }
    deselectAllOptions() {
        this.toggleAllOptions(false);
    }
    clearSelectedOptions(event) {
        event.preventDefault();
        event.stopPropagation();
        this.selectionModel.clear();
        this.propagateChanges();
    }
    handleClosedKeydown(event) {
        if (this.withChips) {
            return;
        }
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW ||
            keyCode === UP_ARROW ||
            keyCode === LEFT_ARROW ||
            keyCode === RIGHT_ARROW;
        const isOpenKey = keyCode === ENTER || keyCode === SPACE;
        const manager = this.keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||
            isArrowKey) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.open();
        }
    }
    handleOpenKeydown(event) {
        const manager = this.keyManager;
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;
        const isTyping = manager.isTyping();
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping &&
            (keyCode === ENTER || keyCode === SPACE) &&
            manager.activeItem &&
            !hasModifierKey(event)) {
            event.preventDefault();
            manager.activeItem.handleClick();
        }
        else if (!isTyping && keyCode === A && event.ctrlKey) {
            event.preventDefault();
            this.toggleAllOptions();
            this.selectAllElements.forEach((option) => option.markForCheck());
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (isArrowKey &&
                event.shiftKey &&
                manager.activeItem &&
                manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem.handleClick();
            }
        }
    }
    setSelectionByValue(value) {
        if (value) {
            this.selectionModel.clear();
            value.forEach((currentValue) => this.selectValue(currentValue));
            this.sortValues();
        }
        this.cdr.markForCheck();
    }
    resetOptions() {
        super.resetOptions();
        this.optionSelectionChanges
            .pipe(takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => this.onSelect(event.source));
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        merge(...this.options.map((option) => option.checkedChanged))
            .pipe(
        // should emit one time if states changes for many options
        debounceTime(1), takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.calculateAllOptionsSelected();
            this.refreshSelectAllCheck();
            this.selectAllElements.forEach((option) => option.markForCheck());
            this.stateChanges.next();
        });
        this.calculateAllOptionsSelected();
        this.refreshSelectAllCheck();
    }
    onSelect(option) {
        super.onSelect(option);
        this.sortValues();
        this.stateChanges.next();
    }
    sortValues() {
        const options = this.options.toArray();
        this.selectionModel.sort((a, b) => {
            return this.sortComparator
                ? this.sortComparator(a, b, options)
                : options.indexOf(a) - options.indexOf(b);
        });
        this.stateChanges.next();
    }
    getValueToEmit() {
        return this.selected.map((s) => s.value);
    }
    setUpFocusManagement() {
        this.chips.changes
            .pipe(startWith(this.chips), takeUntilDestroyed(this.destroyRef))
            .subscribe((chips) => {
            const actions = [];
            chips.forEach((chip) => chip.getActions().forEach((action) => actions.push(action)));
            this.chipActions.reset(actions);
            this.chipActions.notifyOnChanges();
        });
        this.keyManagerChips = new FocusKeyManager(this.chipActions)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr')
            .withHomeAndEnd()
            .skipPredicate((action) => action.disabled);
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$))), takeUntilDestroyed(this.destroyRef))
            .subscribe(({ source: chip }) => {
            const action = chip.getSourceAction(document.activeElement);
            if (action) {
                this.keyManagerChips.updateActiveItem(action);
            }
        });
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$.pipe(map((e) => ({ focused: true, source: e.source })))), ...this.chips.map((c) => c.blur$.pipe(map((e) => ({ focused: false, source: e.source })))))), takeUntilDestroyed(this.destroyRef))
            .subscribe((chip) => {
            if (chip.focused) {
                this.focusedChip = chip.source;
            }
            else if (this.focusedChip === chip.source) {
                this.focusedChip = null;
            }
            this.cdr.markForCheck();
        });
        this.dir?.change
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((direction) => this.keyManagerChips.withHorizontalOrientation(direction));
    }
    refreshSelectAllCheck() {
        this.selectAllElements.forEach((all) => (all.checked = this.allOptionsSelected));
        this.cdr.markForCheck();
    }
    calculateAllOptionsSelected() {
        this.allOptionsSelected = this.options
            .toArray()
            .filter((item) => !item.disabled)
            .every((item) => item.checked);
        this.cdr.markForCheck();
    }
    _setSize(size) {
        super._setSize(size);
        this.selectAllElements?.forEach((element) => (element.size = size));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiSelectComponent, selector: "rds-multi-select", inputs: { withChips: "withChips" }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: RdsMultiSelectComponent,
            },
        ], queries: [{ propertyName: "selectAllElements", predicate: RdsSelectAllOptionComponent }], viewQueries: [{ propertyName: "chips", predicate: RdsChipComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-container aria-hidden="true" (click)="toggle()">
      @if (shouldShowValue()) {
        <div class="rds-form-field__select-value" #wrapperElement>
          @if (withChips) {
            @if (triggerValues.length && triggerValues[0]) {
              <rds-chip-list size="s">
                @for (value of triggerValues; track value; let i = $index) {
                  <rds-chip
                    closable
                    (closeChip)="removeValue(i)"
                    #valueContainer
                    [disabled]="disabled"
                    [tabindex]="
                      !focusedChip || focusedChip === valueContainer ? 0 : -1
                    "
                  >
                    {{ value }}
                  </rds-chip>
                }
              </rds-chip-list>
            }
          } @else {
            <span
              class="rds-form-field__select-trigger-value"
              rds-trigger-values
              multiple
              #rdsTriggerValues="rdsTriggerValues"
              [triggerValues]="triggerValues"
              [wrapperElement]="wrapperElement"
            ></span>
            @if (((rdsTriggerValues.hiddenValues | async) || 0) > 0) {
              <span
                class="rds-form-field__select-hidden-trigger-values-placeholder"
              >
                <rds-badge
                  type="minimal"
                  size="s"
                  [color]="disabled ? 'black' : 'blue'"
                  [label]="'+' + (rdsTriggerValues.hiddenValues | async)"
                />
              </span>
            }
          }
          @if (withChips && triggerValues.length && triggerValues[0]) {
            <div class="rds-form-field__select-x-wrapper">
              <button
                rds-icon-button
                size="m"
                [disabled]="disabled"
                (click)="clearSelectedOptions($event)"
              >
                <rds-icon namespace="filled" icon="close" />
              </button>
            </div>
          }
        </div>
      } @else {
        @if (shouldShowPlaceholder()) {
          <div class="rds-form-field__select-value">
            <div
              class="rds-form-field__select-trigger-value rds-form-field__select-trigger-value-placeholder"
            >
              {{ placeholder }}
            </div>
          </div>
        }
      }
      <div class="rds-form-field__select-arrow-wrapper">
        <div
          class="rds-form-field__select-arrow"
          [class.rds-form-field__select-arrow--rotate]="panelOpen"
        ></div>
      </div>
    </ng-container>

    <ng-template
      cdk-connected-overlay
      cdkConnectedOverlayLockPosition
      cdkConnectedOverlayHasBackdrop
      cdkConnectedOverlayPanelClass="test"
      cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
      [cdkConnectedOverlayScrollStrategy]="scrollStrategy"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="panelOpen"
      [cdkConnectedOverlayPositions]="positions"
      [cdkConnectedOverlayMinWidth]="minWidth"
      (backdropClick)="close(); onBlur()"
      (attach)="onAttached()"
      (detach)="close()"
    >
      <div class="rds-select__panel-wrapper" [@transformPanelWrap]="null">
        <div
          #panel
          class="rds-select__panel"
          aria-multiselectable="true"
          [attr.id]="id + '-panel'"
          [@transformPanel]="'showing'"
          (@transformPanel.done)="panelDoneAnimatingStream.next($event.toState)"
          [style.transformOrigin]="transformOrigin"
          (keydown)="handleKeydown($event)"
        >
          <ng-content select="rds-select-search-input" />
          <ng-content select="rds-select-all-option" />
          <ng-content select="rds-multi-select-option" />
        </div>
      </div>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1$3.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: RdsChipListComponent, selector: "rds-chip-list", inputs: ["tabIndex", "multiple", "selectable", "size", "compareFn", "value", "disabled"], outputs: ["valueChange"] }, { kind: "component", type: RdsChipComponent, selector: "rds-chip, button[rds-chip], button[rdsChip]", inputs: ["ariaLabelCloseButton", "size", "type", "role", "disabled", "closable", "value"], outputs: ["closeChip", "destroyed"] }, { kind: "component", type: RdsBadgeComponent, selector: "rds-badge", inputs: ["size", "label", "color", "type", "ariaDescribedBy"] }, { kind: "component", type: RdsTriggerValuesComponent, selector: "[rds-trigger-values]", inputs: ["triggerValues", "wrapperElement", "multiple"], outputs: ["hiddenValues"], exportAs: ["rdsTriggerValues"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], animations: SelectAnimations, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-multi-select',
                    template: `
    <ng-container aria-hidden="true" (click)="toggle()">
      @if (shouldShowValue()) {
        <div class="rds-form-field__select-value" #wrapperElement>
          @if (withChips) {
            @if (triggerValues.length && triggerValues[0]) {
              <rds-chip-list size="s">
                @for (value of triggerValues; track value; let i = $index) {
                  <rds-chip
                    closable
                    (closeChip)="removeValue(i)"
                    #valueContainer
                    [disabled]="disabled"
                    [tabindex]="
                      !focusedChip || focusedChip === valueContainer ? 0 : -1
                    "
                  >
                    {{ value }}
                  </rds-chip>
                }
              </rds-chip-list>
            }
          } @else {
            <span
              class="rds-form-field__select-trigger-value"
              rds-trigger-values
              multiple
              #rdsTriggerValues="rdsTriggerValues"
              [triggerValues]="triggerValues"
              [wrapperElement]="wrapperElement"
            ></span>
            @if (((rdsTriggerValues.hiddenValues | async) || 0) > 0) {
              <span
                class="rds-form-field__select-hidden-trigger-values-placeholder"
              >
                <rds-badge
                  type="minimal"
                  size="s"
                  [color]="disabled ? 'black' : 'blue'"
                  [label]="'+' + (rdsTriggerValues.hiddenValues | async)"
                />
              </span>
            }
          }
          @if (withChips && triggerValues.length && triggerValues[0]) {
            <div class="rds-form-field__select-x-wrapper">
              <button
                rds-icon-button
                size="m"
                [disabled]="disabled"
                (click)="clearSelectedOptions($event)"
              >
                <rds-icon namespace="filled" icon="close" />
              </button>
            </div>
          }
        </div>
      } @else {
        @if (shouldShowPlaceholder()) {
          <div class="rds-form-field__select-value">
            <div
              class="rds-form-field__select-trigger-value rds-form-field__select-trigger-value-placeholder"
            >
              {{ placeholder }}
            </div>
          </div>
        }
      }
      <div class="rds-form-field__select-arrow-wrapper">
        <div
          class="rds-form-field__select-arrow"
          [class.rds-form-field__select-arrow--rotate]="panelOpen"
        ></div>
      </div>
    </ng-container>

    <ng-template
      cdk-connected-overlay
      cdkConnectedOverlayLockPosition
      cdkConnectedOverlayHasBackdrop
      cdkConnectedOverlayPanelClass="test"
      cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
      [cdkConnectedOverlayScrollStrategy]="scrollStrategy"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="panelOpen"
      [cdkConnectedOverlayPositions]="positions"
      [cdkConnectedOverlayMinWidth]="minWidth"
      (backdropClick)="close(); onBlur()"
      (attach)="onAttached()"
      (detach)="close()"
    >
      <div class="rds-select__panel-wrapper" [@transformPanelWrap]="null">
        <div
          #panel
          class="rds-select__panel"
          aria-multiselectable="true"
          [attr.id]="id + '-panel'"
          [@transformPanel]="'showing'"
          (@transformPanel.done)="panelDoneAnimatingStream.next($event.toState)"
          [style.transformOrigin]="transformOrigin"
          (keydown)="handleKeydown($event)"
        >
          <ng-content select="rds-select-search-input" />
          <ng-content select="rds-select-all-option" />
          <ng-content select="rds-multi-select-option" />
        </div>
      </div>
    </ng-template>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: SelectAnimations,
                    providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: RdsMultiSelectComponent,
                        },
                    ],
                }]
        }], propDecorators: { withChips: [{
                type: Input
            }], selectAllElements: [{
                type: ContentChildren,
                args: [RdsSelectAllOptionComponent]
            }], chips: [{
                type: ViewChildren,
                args: [RdsChipComponent]
            }] } });

class RdsLabelIconDirective {
    constructor() {
        this.hostClass = 'rds-control-label__icon';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLabelIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsLabelIconDirective, selector: "rds-icon[rds-label-icon], rds-icon[rdsLabelIcon]", host: { properties: { "class": "this.hostClass" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLabelIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-icon[rds-label-icon], rds-icon[rdsLabelIcon]',
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsTextareaResizeDirective {
    constructor() {
        this.resize = 'vertical';
    }
    get class() {
        return `rds-textarea-resize-${this.resize || 'vertical'}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextareaResizeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTextareaResizeDirective, selector: "textarea[resize]", inputs: { resize: "resize" }, host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextareaResizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `textarea[resize]`,
                }]
        }], propDecorators: { resize: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsInputChipComponent extends RdsChipComponent {
    constructor() {
        super(...arguments);
        this.document = inject(DOCUMENT);
        /**
         * The editing action has to be triggered in a timeout. While we're waiting on it, a blur
         * event might occur which will interrupt the editing. This flag is used to avoid interruptions
         * while the editing action is being initialized.
         */
        this.editStartPending = false;
        this.editReady = false;
        this.isEditing = false;
        this.editable = false;
        this.ariaDescription = null;
        this.edited = new EventEmitter();
        this.role = 'row';
    }
    ngOnInit() {
        this.blur$.pipe(takeUntilDestroyed(this.destroyRef)).subscribe(() => {
            if (this.isEditing && !this.editStartPending) {
                this.onEditFinish();
            }
        });
    }
    get classes() {
        return {
            'rds-chips__chip': true,
            'rds-input-chip': true,
            'rds-input-chip-editing': this.isEditing,
            'rds-chips__chip--disabled': this.disabled,
        };
    }
    handleFocus() {
        if (!this.isEditing && !this.disabled) {
            this.focus();
        }
    }
    handleDoubleclick() {
        if (!this.disabled && this.editable) {
            this.startEditing();
        }
    }
    handleKeydown(event) {
        if (event.keyCode === ENTER && !this.disabled) {
            if (this.isEditing) {
                event.preventDefault();
                this.onEditFinish();
            }
            else if (this.editable) {
                this.startEditing();
            }
        }
        else if (this.isEditing) {
            event.stopPropagation();
        }
        else {
            if (event.keyCode === BACKSPACE || event.keyCode === DELETE) {
                event.preventDefault();
                this.closeChip.emit();
            }
        }
    }
    startEditing() {
        const value = this.value;
        this.isEditing = true;
        this.editStartPending = true;
        setTimeout(() => {
            this.getEditInput().initialize(typeof value === 'string' ? value : this.innerText);
            this.editStartPending = false;
            this.editReady = true;
        });
    }
    onEditFinish() {
        this.isEditing = false;
        this.editStartPending = false;
        this.editReady = false;
        this.edited.emit({ source: this, value: this.getEditInput().getValue() });
        this.getEditInput().setValue('');
        if (this.document.activeElement === this.getEditInput().getNativeElement() ||
            this.document.activeElement === this.document.body) {
            this.focus();
        }
    }
    getEditInput() {
        return this.editInput;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputChipComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsInputChipComponent, selector: "rds-input-chip", inputs: { editable: ["editable", "editable", booleanAttribute], ariaDescription: "ariaDescription" }, outputs: { edited: "edited" }, host: { listeners: { "focus": "handleFocus()", "dblclick": "handleDoubleclick()" }, properties: { "attr.role": "this.role", "class": "this.classes" } }, providers: [
            { provide: RdsChipComponent, useExisting: RdsInputChipComponent },
        ], viewQueries: [{ propertyName: "editInput", first: true, predicate: RdsChipEditInputDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-content\n  select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n/>\n<ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n<span role=\"gridcell\">\n  <span\n    [attr.role]=\"editable ? 'button' : null\"\n    [attr.aria-description]=\"ariaDescription\"\n    #primary\n    rds-chip-action\n    [disabled]=\"disabled\"\n  >\n    <span [style.display]=\"editReady ? 'none' : 'initial'\">\n      <ng-content />\n    </span>\n    <span\n      [style.display]=\"editReady || isEditing ? 'initial' : 'none'\"\n      rdsChipEditInput\n    ></span>\n  </span>\n</span>\n<span role=\"gridcell\">\n  <button\n    rds-icon-button\n    #closeButton\n    rds-chip-action\n    class=\"rds-chip-close-button\"\n    size=\"s\"\n    (click)=\"onClose($event)\"\n    [disabled]=\"disabled\"\n    type=\"button\"\n    [attr.aria-label]=\"ariaLabelCloseButton\"\n  >\n    <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n  </button>\n</span>\n", styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n", ".rds-input-chip span{outline:none}.rds-input-chip span[role=gridcell]{display:inline-flex;align-items:center}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: RdsChipActionDirective, selector: "[rds-chip-action], [rdsChipAction]", inputs: ["tabIndex", "disabled"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputChipComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-input-chip', encapsulation: ViewEncapsulation.None, providers: [
                        { provide: RdsChipComponent, useExisting: RdsInputChipComponent },
                    ], template: "<ng-content\n  select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n/>\n<ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n<span role=\"gridcell\">\n  <span\n    [attr.role]=\"editable ? 'button' : null\"\n    [attr.aria-description]=\"ariaDescription\"\n    #primary\n    rds-chip-action\n    [disabled]=\"disabled\"\n  >\n    <span [style.display]=\"editReady ? 'none' : 'initial'\">\n      <ng-content />\n    </span>\n    <span\n      [style.display]=\"editReady || isEditing ? 'initial' : 'none'\"\n      rdsChipEditInput\n    ></span>\n  </span>\n</span>\n<span role=\"gridcell\">\n  <button\n    rds-icon-button\n    #closeButton\n    rds-chip-action\n    class=\"rds-chip-close-button\"\n    size=\"s\"\n    (click)=\"onClose($event)\"\n    [disabled]=\"disabled\"\n    type=\"button\"\n    [attr.aria-label]=\"ariaLabelCloseButton\"\n  >\n    <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n  </button>\n</span>\n", styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n", ".rds-input-chip span{outline:none}.rds-input-chip span[role=gridcell]{display:inline-flex;align-items:center}\n"] }]
        }], propDecorators: { editable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], ariaDescription: [{
                type: Input
            }], edited: [{
                type: Output
            }], editInput: [{
                type: ViewChild,
                args: [RdsChipEditInputDirective]
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }], handleFocus: [{
                type: HostListener,
                args: ['focus']
            }], handleDoubleclick: [{
                type: HostListener,
                args: ['dblclick']
            }] } });

class RdsChipGridChange {
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}
class RdsChipGridComponent extends RdsChipSetComponent {
    constructor() {
        super(...arguments);
        this.cdr = inject(ChangeDetectorRef);
        this._ariaDescribedbyIds = [];
        this._value = [];
        this._defaultRole = 'grid';
        this.stateChanges = new EventEmitter();
        this.errorState = false;
        this.gridChange = new EventEmitter();
        this.valueChange = new EventEmitter();
        this._onTouched = noop;
        this._onChange = noop;
    }
    get id() {
        return this.chipInput.id;
    }
    get empty() {
        return ((!this.chipInput || this.chipInput.empty) &&
            (!this.chips || this.chips.length === 0));
    }
    get focused() {
        return this.chipInput?.focused || this.hasFocusedChip();
    }
    get chipEditChanges() {
        return this.getChipStream((chip) => chip.edited);
    }
    get classes() {
        return {
            'rds-chips': true,
            'rds-chips--size-s': true,
            'rds-chip-list-disabled': this.disabled,
            'rds-chip-list-invalid': this.errorState,
        };
    }
    get dynamicTabIndex() {
        return this.chips && this.chips.length === 0
            ? TAB_INDEX_NOT_FOCUSABLE
            : this.tabIndex;
    }
    get ariaDisabled() {
        return this.disabled.toString();
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        this.syncChipsState();
    }
    get disabled() {
        return this._disabled;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    get placeholder() {
        return this.chipInput ? this.chipInput.placeholder : this._placeholder;
    }
    set value(value) {
        this._value = value;
    }
    get value() {
        return this._value;
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        merge(this.chipEditChanges, this.chips.changes)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.propagateChanges();
            this.stateChanges.next();
        });
        merge(this.chipFocusChanges, this.chips.changes)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.stateChanges.next());
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (!this.chipInput && isDevMode()) {
            throw Error('rds-chip-grid must be used in combination with rdsChipInputFor.');
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.stateChanges.complete();
    }
    focus() {
        if (this.disabled || this.chipInput.focused) {
            return;
        }
        if (!this.chips.length || this.chips.first.disabled) {
            Promise.resolve().then(() => this.chipInput.focus());
        }
        else if (this.chips.length) {
            this.keyManager.setFirstItemActive();
        }
        this.stateChanges.next();
    }
    blur() {
        if (!this.disabled) {
            setTimeout(() => {
                if (!this.focused) {
                    this.markAsTouched();
                }
            });
        }
    }
    handleKeydown(event) {
        if (event.keyCode === TAB) {
            if (this.chipInput.focused &&
                hasModifierKey(event, 'shiftKey') &&
                this.chips.length &&
                !this.chips.last.disabled) {
                event.preventDefault();
                if (this.keyManager.activeItem) {
                    this.keyManager.setActiveItem(this.keyManager.activeItem);
                }
                else {
                    this.focusLastChip();
                }
            }
            else {
                this.allowFocusEscape();
            }
        }
        else if (!this.chipInput.focused) {
            super.handleKeydown(event);
        }
        this.stateChanges.next();
    }
    registerInput(inputElement) {
        this.chipInput = inputElement;
        this.chipInput.setDescribedByIds(this._ariaDescribedbyIds);
    }
    onContainerClick(event) {
        if (!this.disabled && !this.originatesFromChip(event)) {
            this.focus();
        }
    }
    setDescribedByIds(ids) {
        // We must keep this up to date to handle the case where ids are set
        // before the chip input is registered.
        this._ariaDescribedbyIds = ids;
        this.chipInput?.setDescribedByIds(ids);
    }
    setDisabledState(isDisabled) {
        if (isDisabled !== this.disabled) {
            this.disabled = isDisabled;
            this.stateChanges.next();
        }
    }
    focusLastChip() {
        if (this.chips.length) {
            this.chips.last.focus();
        }
    }
    allowFocusEscape() {
        if (!this.chipInput.focused) {
            super.allowFocusEscape();
        }
    }
    propagateChanges() {
        const valueToEmit = this.chips.length
            ? this.chips.toArray().map((chip) => chip.value)
            : [];
        this._value = valueToEmit;
        this.gridChange.emit(new RdsChipGridChange(this, valueToEmit));
        this.valueChange.emit(valueToEmit);
        this._onChange(valueToEmit);
        this.cdr.markForCheck();
    }
    markAsTouched() {
        this._onTouched();
        this.cdr.markForCheck();
        this.stateChanges.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipGridComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipGridComponent, selector: "rds-chip-grid", inputs: { disabled: "disabled", placeholder: "placeholder", value: "value" }, outputs: { gridChange: "gridChange", valueChange: "valueChange" }, host: { listeners: { "focus": "focus()", "blur": "blur()" }, properties: { "class": "this.classes", "attr.aria-invalid": "this.errorState", "tabIndex": "this.dynamicTabIndex", "attr.aria-disabled": "this.ariaDisabled" } }, queries: [{ propertyName: "chips", predicate: RdsInputChipComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n", "rds-chip-grid.rds-chips.rds-chips--size-s{display:flex;flex-wrap:wrap;width:100%;box-sizing:content-box;align-items:center;column-gap:4px;row-gap:8px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipGridComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-chip-grid', template: '<ng-content />', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n", "rds-chip-grid.rds-chips.rds-chips--size-s{display:flex;flex-wrap:wrap;width:100%;box-sizing:content-box;align-items:center;column-gap:4px;row-gap:8px}\n"] }]
        }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], errorState: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], dynamicTabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], ariaDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], disabled: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], value: [{
                type: Input
            }], gridChange: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], chips: [{
                type: ContentChildren,
                args: [RdsInputChipComponent, { descendants: true }]
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }] } });

let nextUniqueId$5 = 0;
class RdsChipInputDirective {
    get classes() {
        return {
            'rds-chip-input': true,
            'rds-chip-input-no-placeholder': this.hidePlaceholder,
        };
    }
    get ariaRequired() {
        return this.required || null;
    }
    get ariaInvalid() {
        return this.ngControl ? this.ngControl.invalid : null;
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set chipGrid(value) {
        if (value) {
            this._chipGrid = value;
            this._chipGrid.registerInput(this);
        }
        else if (isDevMode()) {
            throw new Error('RdsChipInputDirective: rdsChipInputChipGrid received falsy value');
        }
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
    }
    get disabled() {
        return this._disabled || !!(this._chipGrid && this._chipGrid.disabled);
    }
    get empty() {
        return !this.inputElement.value;
    }
    constructor() {
        this.inputElement = inject(ElementRef).nativeElement;
        this.formField = inject(RDS_FORM_FIELD, { optional: true });
        this.ngControl = inject(NgControl, { optional: true });
        this.focusLastChipOnBackspace = false;
        this._disabled = false;
        this.focused = false;
        this.hidePlaceholder = false;
        this.required = false;
        /* eslint-disable-next-line @angular-eslint/no-input-rename */
        this.addOnBlur = false;
        /* eslint-disable-next-line @angular-eslint/no-input-rename */
        this.separatorKeys = inject(RDS_CHIPS_DEFAULT_OPTIONS).separatorKeys;
        this.placeholder = '';
        this.id = `rds-chip-list-input-${nextUniqueId$5++}`;
        /* eslint-disable-next-line @angular-eslint/no-output-rename */
        this.chipEnd = new EventEmitter();
        if (this.formField) {
            this.inputElement.classList.add('rds-form-field-input-control');
        }
    }
    ngOnChanges() {
        this._chipGrid?.stateChanges?.next();
    }
    ngAfterContentInit() {
        this.focusLastChipOnBackspace = this.empty;
    }
    ngOnDestroy() {
        this.chipEnd.complete();
    }
    onKeydown(event) {
        if (event) {
            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,
            // We focus the last chip on backspace only after the user has released the backspace button,
            // And the input is empty (see behaviour in _keyup)
            if (event.keyCode === BACKSPACE && this.focusLastChipOnBackspace) {
                this._chipGrid?.focusLastChip();
                event.preventDefault();
                return;
            }
            else {
                this.focusLastChipOnBackspace = false;
            }
        }
        this.emitChipEnd(event);
    }
    onKeyup(event) {
        // Allow user to move focus to chips next time he presses backspace
        if (!this.focusLastChipOnBackspace &&
            event.keyCode === BACKSPACE &&
            this.empty) {
            this.focusLastChipOnBackspace = true;
            event.preventDefault();
        }
    }
    onBlur() {
        if (this.addOnBlur) {
            this.emitChipEnd();
        }
        this.focused = false;
        // Blur the chip list if it is not focused
        if (!this._chipGrid?.focused) {
            this._chipGrid?.blur();
        }
        this._chipGrid?.stateChanges.next();
    }
    onFocus() {
        this.focused = true;
        this.focusLastChipOnBackspace = this.empty;
        this._chipGrid?.stateChanges.next();
    }
    onInput() {
        // Let chip list know whenever the value changes.
        this._chipGrid?.stateChanges.next();
    }
    emitChipEnd(event) {
        if (!event || this.isSeparatorKey(event)) {
            this.chipEnd.emit({
                input: this.inputElement,
                value: this.inputElement.value,
                chipInput: this,
            });
            event?.preventDefault();
        }
    }
    focus() {
        this.inputElement.focus();
    }
    clear() {
        this.inputElement.value = '';
        this.focusLastChipOnBackspace = true;
    }
    setDescribedByIds(ids) {
        // Set the value directly in the DOM since this binding
        // is prone to "changed after checked" errors.
        if (ids.length) {
            this.inputElement.setAttribute('aria-describedby', ids.join(' '));
        }
        else {
            this.inputElement.removeAttribute('aria-describedby');
        }
    }
    isSeparatorKey(event) {
        return !hasModifierKey(event) && this.separatorKeys.includes(event.key);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipInputDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsChipInputDirective, selector: "input[rdsChipInput], input[rds-chip-input]", inputs: { required: ["required", "required", booleanAttribute], chipGrid: ["rdsChipInputChipGrid", "chipGrid"], addOnBlur: ["rdsChipInputAddOnBlur", "addOnBlur", booleanAttribute], separatorKeys: ["rdsChipInputSeparatorKeys", "separatorKeys", coerceStringArray], placeholder: "placeholder", id: "id", disabled: "disabled" }, outputs: { chipEnd: "rdsChipInputTokenEnd" }, host: { listeners: { "keydown": "onKeydown($event)", "keyup": "onKeyup($event)", "blur": "onBlur($event)", "focus": "onFocus($event)", "input": "onInput()" }, properties: { "class": "this.classes", "attr.required": "this.ariaRequired", "attr.aria-required": "this.ariaRequired", "attr.aria-invalid": "this.ariaInvalid", "attr.placeholder": "this.placeholder", "id": "this.id", "disabled": "this.disabled" } }, exportAs: ["rdsChipInput"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsChipInput], input[rds-chip-input]',
                    exportAs: 'rdsChipInput',
                }]
        }], ctorParameters: () => [], propDecorators: { required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }], ariaRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }, {
                type: HostBinding,
                args: ['attr.aria-required']
            }], ariaInvalid: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], chipGrid: [{
                type: Input,
                args: ['rdsChipInputChipGrid']
            }], addOnBlur: [{
                type: Input,
                args: [{ alias: 'rdsChipInputAddOnBlur', transform: booleanAttribute }]
            }], separatorKeys: [{
                type: Input,
                args: [{ alias: 'rdsChipInputSeparatorKeys', transform: coerceStringArray }]
            }], placeholder: [{
                type: HostBinding,
                args: ['attr.placeholder']
            }, {
                type: Input
            }], id: [{
                type: HostBinding,
                args: ['id']
            }, {
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['disabled']
            }, {
                type: Input
            }], chipEnd: [{
                type: Output,
                args: ['rdsChipInputTokenEnd']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }], onFocus: [{
                type: HostListener,
                args: ['focus', ['$event']]
            }], onInput: [{
                type: HostListener,
                args: ['input']
            }] } });

class RdsInputWithChipsComponent extends RdsAbstractFormFieldControl {
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    get ariaDisabled() {
        return this.disabled.toString();
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this.chipGrid) {
            this.chipGrid.disabled = this._disabled;
        }
    }
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    get placeholder() {
        return this._placeholder;
    }
    constructor() {
        super();
        this.destroyRef = inject(DestroyRef);
        this.controlType = 'chip-grid';
        this.errorState = false;
        this._onTouched = noop;
        this._onChange = noop;
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    ngAfterContentInit() {
        this.input.hidePlaceholder = !this.shouldLabelFloat;
        this.chipGrid.stateChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.input.hidePlaceholder = !this.shouldLabelFloat;
            this.stateChanges.next();
        });
        this.chipGrid._onChange = this._onChange;
        this.chipGrid._onTouched = this._onTouched;
        this.chipGrid.disabled = this._disabled;
        this.input.chipGrid = this.chipGrid;
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions).
            const oldState = this.errorState;
            this.errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (this.errorState !== oldState) {
                this.stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    writeValue(value) {
        // The user is responsible for creating the child chips, so we just store the value.
        this._value = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        if (this.chipGrid) {
            this.chipGrid.setDisabledState(isDisabled);
        }
        if (this.input) {
            this.input.disabled = isDisabled;
        }
        this.stateChanges.next();
    }
    get empty() {
        return !!this.chipGrid?.empty;
    }
    get focused() {
        return !!this.chipGrid?.focused;
    }
    onContainerClick(event) {
        this.chipGrid?.onContainerClick(event);
    }
    setDescribedByIds(ids) {
        this.chipGrid?.setDescribedByIds(ids);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputWithChipsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsInputWithChipsComponent, selector: "rds-input-with-chips", inputs: { disabled: "disabled", placeholder: "placeholder" }, host: { properties: { "attr.aria-invalid": "this.errorState", "attr.aria-disabled": "this.ariaDisabled" } }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: RdsInputWithChipsComponent,
            },
        ], queries: [{ propertyName: "chipGrid", first: true, predicate: RdsChipGridComponent, descendants: true }, { propertyName: "input", first: true, predicate: RdsChipInputDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n", "rds-input-with-chips{display:block;width:100%}.rds-form-field.rds-form-field--chip-grid .rds-form-field__container .rds-form-field__control-container{height:unset!important}.rds-form-field.rds-form-field--chip-grid:is(.rds-form-field--s,.rds-form-field--m,.rds-form-field--l) .rds-form-field__control-container{border:1px solid var(--rds-color-stroke-enabled)}.rds-form-field.rds-form-field--chip-grid.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label.rds-form-field__label--float{padding-top:0}.rds-form-field.rds-form-field--chip-grid.rds-form-field--s .rds-form-field__control-container,.rds-form-field.rds-form-field--chip-grid.rds-form-field--s:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--s .rds-form-field__control-container .rds-form-field__control,.rds-form-field.rds-form-field--chip-grid.rds-form-field--s:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container .rds-form-field__control{line-height:18px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--m .rds-form-field__control-container,.rds-form-field.rds-form-field--chip-grid.rds-form-field--m:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--m .rds-form-field__control-container .rds-form-field__control,.rds-form-field.rds-form-field--chip-grid.rds-form-field--m:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container .rds-form-field__control{line-height:26px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l .rds-form-field__control-container,.rds-form-field.rds-form-field--chip-grid.rds-form-field--l:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container{padding:10px 16px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l .rds-form-field__control-container .rds-form-field__control,.rds-form-field.rds-form-field--chip-grid.rds-form-field--l:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container .rds-form-field__control{line-height:26px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container rds-chip-grid{padding-top:16px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container .rds-form-field__control{line-height:22px;padding-top:0;margin-top:0}.rds-form-field.rds-form-field--chip-grid .rds-chip-input{width:unset;flex:1 0 auto}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputWithChipsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-input-with-chips', template: '<ng-content />', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: RdsInputWithChipsComponent,
                        },
                    ], styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n", "rds-input-with-chips{display:block;width:100%}.rds-form-field.rds-form-field--chip-grid .rds-form-field__container .rds-form-field__control-container{height:unset!important}.rds-form-field.rds-form-field--chip-grid:is(.rds-form-field--s,.rds-form-field--m,.rds-form-field--l) .rds-form-field__control-container{border:1px solid var(--rds-color-stroke-enabled)}.rds-form-field.rds-form-field--chip-grid.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label.rds-form-field__label--float{padding-top:0}.rds-form-field.rds-form-field--chip-grid.rds-form-field--s .rds-form-field__control-container,.rds-form-field.rds-form-field--chip-grid.rds-form-field--s:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--s .rds-form-field__control-container .rds-form-field__control,.rds-form-field.rds-form-field--chip-grid.rds-form-field--s:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container .rds-form-field__control{line-height:18px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--m .rds-form-field__control-container,.rds-form-field.rds-form-field--chip-grid.rds-form-field--m:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--m .rds-form-field__control-container .rds-form-field__control,.rds-form-field.rds-form-field--chip-grid.rds-form-field--m:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container .rds-form-field__control{line-height:26px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l .rds-form-field__control-container,.rds-form-field.rds-form-field--chip-grid.rds-form-field--l:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container{padding:10px 16px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l .rds-form-field__control-container .rds-form-field__control,.rds-form-field.rds-form-field--chip-grid.rds-form-field--l:is(.rds-form-field--focused,.rds-form-field--invalid) .rds-form-field__control-container .rds-form-field__control{line-height:26px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container rds-chip-grid{padding-top:16px}.rds-form-field.rds-form-field--chip-grid.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container .rds-form-field__control{line-height:22px;padding-top:0;margin-top:0}.rds-form-field.rds-form-field--chip-grid .rds-chip-input{width:unset;flex:1 0 auto}\n"] }]
        }], ctorParameters: () => [], propDecorators: { errorState: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], ariaDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], disabled: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], chipGrid: [{
                type: ContentChild,
                args: [RdsChipGridComponent]
            }], input: [{
                type: ContentChild,
                args: [RdsChipInputDirective]
            }] } });

const DOT_BADGE_POS_RIGHT_PX = -4;
const BADGE_OFFSET_RIGHT_PX = 10;
class RdsBadgeDirective {
    constructor() {
        this.viewContainerRef = inject(ViewContainerRef);
        this.componentFactoryResolver = inject(ComponentFactoryResolver);
        this.renderer = inject(Renderer2);
        this.elementRef = inject(ElementRef);
        this._componentRef = null;
        this.rdsBadgeLabel = null;
        this.rdsBadgeColor = 'info';
        this.rdsBadgeType = 'default';
        this.rdsBadgeAriaDescribedBy = null;
        this.rdsBadgePlacement = 'top-right';
    }
    ngAfterViewInit() {
        this.renderer.setStyle(this.elementRef.nativeElement, 'position', 'relative');
        this._createComponent();
    }
    ngOnChanges(changes) {
        if (this._componentRef) {
            let shouldDetectChanges = false;
            const label = this._getLabel();
            const badgeType = this._getBadgeType();
            const instance = this._componentRef.instance;
            instance.size = 's';
            if (changes['rdsBadgeLabel'] && instance.label !== label) {
                instance.label = label;
                shouldDetectChanges = true;
            }
            if (changes['rdsBadgeColor'] && instance.color !== this.rdsBadgeColor) {
                instance.color = this.rdsBadgeColor;
                shouldDetectChanges = true;
            }
            if ((changes['rdsBadgeType'] || changes['rdsBadgeLabel']) &&
                instance.type !== badgeType) {
                instance.type = badgeType;
                shouldDetectChanges = true;
            }
            if (changes['rdsBadgeAriaDescribedBy'] &&
                instance.ariaDescribedBy !== this.rdsBadgeAriaDescribedBy) {
                instance.ariaDescribedBy = this.rdsBadgeAriaDescribedBy;
                shouldDetectChanges = true;
            }
            if (shouldDetectChanges) {
                instance.detectChanges();
            }
            if (shouldDetectChanges ||
                (changes['rdsBadgePlacement'] &&
                    changes['rdsBadgePlacement'].previousValue !== this.rdsBadgePlacement)) {
                this._setPosition();
            }
        }
    }
    ngOnDestroy() {
        this._componentRef?.destroy();
    }
    _createComponent() {
        const outlet = new CdkPortalOutlet(this.componentFactoryResolver, this.viewContainerRef);
        const portal = new ComponentPortal(RdsBadgeComponent, this.viewContainerRef);
        this._componentRef = outlet.attachComponentPortal(portal);
        this._componentRef.instance._isAttached = true;
        this._componentRef.instance.label = this._getLabel();
        this._componentRef.instance.color = this.rdsBadgeColor;
        this._componentRef.instance.type = this._getBadgeType();
        this._componentRef.instance.ariaDescribedBy = this.rdsBadgeAriaDescribedBy;
        this._setComponentLocation();
        this._componentRef.changeDetectorRef.detectChanges();
        this._setPosition();
        this._componentRef.onDestroy(() => {
            portal.detach();
            outlet.detach();
        });
    }
    _setComponentLocation() {
        this.renderer.appendChild(this.elementRef.nativeElement, this._getBadgeElement());
        this.renderer.setStyle(this._getBadgeElement(), 'position', 'absolute');
    }
    _setPosition() {
        const badge = this._getBadgeElement();
        this.renderer.removeStyle(badge, 'top');
        this.renderer.removeStyle(badge, 'bottom');
        this.renderer.removeStyle(badge, 'left');
        this.renderer.removeStyle(badge, 'right');
        const offsetY = badge.offsetHeight / 2;
        const offsetWidth = badge.offsetWidth;
        if (this.rdsBadgePlacement?.includes('bottom')) {
            this.renderer.setStyle(badge, 'bottom', `${-offsetY}px`);
        }
        else {
            this.renderer.setStyle(badge, 'top', `${-offsetY}px`);
        }
        this.renderer.setStyle(badge, 'right', `${Math.min(BADGE_OFFSET_RIGHT_PX - offsetWidth, DOT_BADGE_POS_RIGHT_PX)}px`);
    }
    _getLabel() {
        if (this.rdsBadgeType === 'dot' ||
            this.rdsBadgeLabel === null ||
            this.rdsBadgeLabel === undefined) {
            return '';
        }
        return this.rdsBadgeLabel;
    }
    _getBadgeType() {
        return this._getLabel().length > 0 ? this.rdsBadgeType : 'dot';
    }
    _getBadgeElement() {
        return this._componentRef?.location.nativeElement;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsBadgeDirective, isStandalone: true, selector: "[rds-badge], [rdsBadge]", inputs: { rdsBadgeLabel: "rdsBadgeLabel", rdsBadgeColor: "rdsBadgeColor", rdsBadgeType: "rdsBadgeType", rdsBadgeAriaDescribedBy: "rdsBadgeAriaDescribedBy", rdsBadgePlacement: "rdsBadgePlacement" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-badge], [rdsBadge]',
                    standalone: true,
                }]
        }], propDecorators: { rdsBadgeLabel: [{
                type: Input
            }], rdsBadgeColor: [{
                type: Input
            }], rdsBadgeType: [{
                type: Input
            }], rdsBadgeAriaDescribedBy: [{
                type: Input
            }], rdsBadgePlacement: [{
                type: Input
            }] } });

const RDS_BADGE_DIRECTIVES = [
    RdsBadgeComponent,
    RdsBadgeDirective,
];
class RdsBadgeModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeModule, imports: [RdsBadgeComponent,
            RdsBadgeDirective], exports: [RdsBadgeComponent,
            RdsBadgeDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...RDS_BADGE_DIRECTIVES],
                    exports: [...RDS_BADGE_DIRECTIVES],
                }]
        }] });

class RdsFormFieldModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFormFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsFormFieldModule, declarations: [RdsFormFieldComponent,
            RdsInputDirective,
            RdsLabelDirective,
            RdsLabelIconDirective,
            RdsPrefixDirective,
            RdsPrefixSeparatorComponent,
            RdsSuffixDirective,
            RdsSuffixSeparatorComponent,
            RdsSelectComponent,
            RdsMultiSelectComponent,
            RdsTriggerValuesComponent,
            RdsSelectAllOptionComponent,
            RdsSelectSearchInputComponent,
            RdsSelectOptionSeparatorComponent,
            RdsSingleSelectOptionComponent,
            RdsMultiSelectOptionComponent,
            RdsTextareaResizeDirective,
            RdsInputWithChipsComponent,
            RdsInputChipComponent,
            RdsInputDirective,
            RdsChipGridComponent,
            RdsChipInputDirective], imports: [CommonModule,
            OverlayModule,
            ObserversModule,
            RdsCheckboxModule,
            RdsIconComponent,
            ReactiveFormsModule,
            RdsHelperTextModule,
            RdsListItemModule,
            RdsButtonModule,
            RdsChipsModule,
            RdsBadgeComponent], exports: [RdsErrorDirective,
            RdsFormFieldComponent,
            RdsLabelIconDirective,
            RdsHintDirective,
            RdsInputDirective,
            RdsLabelDirective,
            RdsPrefixDirective,
            RdsPrefixSeparatorComponent,
            RdsSuffixDirective,
            RdsSuffixSeparatorComponent,
            RdsSelectComponent,
            RdsMultiSelectComponent,
            RdsSelectAllOptionComponent,
            RdsSelectSearchInputComponent,
            RdsSelectOptionSeparatorComponent,
            RdsSingleSelectOptionComponent,
            RdsMultiSelectOptionComponent,
            RdsTextareaResizeDirective,
            RdsInputWithChipsComponent,
            RdsInputChipComponent,
            RdsInputDirective,
            RdsChipGridComponent,
            RdsChipInputDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFormFieldModule, imports: [CommonModule,
            OverlayModule,
            ObserversModule,
            RdsCheckboxModule,
            ReactiveFormsModule,
            RdsHelperTextModule,
            RdsListItemModule,
            RdsButtonModule,
            RdsChipsModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFormFieldModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        OverlayModule,
                        ObserversModule,
                        RdsCheckboxModule,
                        RdsIconComponent,
                        ReactiveFormsModule,
                        RdsHelperTextModule,
                        RdsListItemModule,
                        RdsButtonModule,
                        RdsChipsModule,
                        RdsBadgeComponent,
                    ],
                    declarations: [
                        RdsFormFieldComponent,
                        RdsInputDirective,
                        RdsLabelDirective,
                        RdsLabelIconDirective,
                        RdsPrefixDirective,
                        RdsPrefixSeparatorComponent,
                        RdsSuffixDirective,
                        RdsSuffixSeparatorComponent,
                        RdsSelectComponent,
                        RdsMultiSelectComponent,
                        RdsTriggerValuesComponent,
                        RdsSelectAllOptionComponent,
                        RdsSelectSearchInputComponent,
                        RdsSelectOptionSeparatorComponent,
                        RdsSingleSelectOptionComponent,
                        RdsMultiSelectOptionComponent,
                        RdsTextareaResizeDirective,
                        RdsInputWithChipsComponent,
                        RdsInputChipComponent,
                        RdsInputDirective,
                        RdsChipGridComponent,
                        RdsChipInputDirective,
                    ],
                    exports: [
                        RdsErrorDirective,
                        RdsFormFieldComponent,
                        RdsLabelIconDirective,
                        RdsHintDirective,
                        RdsInputDirective,
                        RdsLabelDirective,
                        RdsPrefixDirective,
                        RdsPrefixSeparatorComponent,
                        RdsSuffixDirective,
                        RdsSuffixSeparatorComponent,
                        RdsSelectComponent,
                        RdsMultiSelectComponent,
                        RdsSelectAllOptionComponent,
                        RdsSelectSearchInputComponent,
                        RdsSelectOptionSeparatorComponent,
                        RdsSingleSelectOptionComponent,
                        RdsMultiSelectOptionComponent,
                        RdsTextareaResizeDirective,
                        RdsInputWithChipsComponent,
                        RdsInputChipComponent,
                        RdsInputDirective,
                        RdsChipGridComponent,
                        RdsChipInputDirective,
                    ],
                }]
        }] });

class RdsAbstractAutocompleteComponent extends RdsAbstractFormFieldControl {
    get attrDisabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled ? this.ngControl.disabled : null;
        }
        return this._disabled ? this._disabled : null;
    }
    set disabled(disabled) {
        this._disabled = booleanAttribute(disabled);
        if (this._focused) {
            this._focused = false;
            this.stateChanges.next();
        }
    }
    get disabled() {
        return this.attrDisabled || false;
    }
    set debounce(debounce) {
        this._debounce = numberAttribute(debounce, this.config.debounce);
    }
    get debounce() {
        return this._debounce;
    }
    set minSearchChars(minSearchChars) {
        this._minSearchChars = numberAttribute(minSearchChars, this.config.minSearchChars);
    }
    get minSearchChars() {
        return this._minSearchChars;
    }
    get empty() {
        return (this.values.length === 0 &&
            !this.inputEl.nativeElement.value &&
            !this.isNativelyBadInput());
    }
    get shouldLabelFloat() {
        return this._focused || !this.empty;
    }
    get errorState() {
        return this._errorState;
    }
    get inputAriaDescribedBy() {
        return this._inputAriaDescribedby;
    }
    set inputAriaDescribedBy(newValue) {
        this._inputAriaDescribedby = newValue;
    }
    constructor() {
        super();
        this.cdr = inject(ChangeDetectorRef);
        this.overlay = inject(Overlay);
        this.destroyRef = inject(DestroyRef);
        this.config = {
            ...RDS_AUTOCOMPLETE_DEFAULT_CONFIG,
            ...inject(RDS_AUTOCOMPLETE_CONFIG, { optional: true }),
        };
        this.intl = inject(RdsAutocompleteIntl);
        this.formField = inject(RDS_FORM_FIELD);
        this.scrollStrategyOptions = inject(ScrollStrategyOptions);
        this.compareItem = (i1, i2) => this.getUniqProperty(i1) === this.getUniqProperty(i2);
        this.highlightQuery = false;
        this.selectNewItemOnBlur = false;
        this.selectLastRemainingOnBlur = false;
        this._debounce = this.config.debounce;
        this._minSearchChars = this.config.minSearchChars;
        this.hostClass = 'w-100';
        this.controlType = 'autocomplete';
        this.typing$ = new BehaviorSubject(false);
        this.openChanged = new EventEmitter();
        this.shown = new EventEmitter();
        this.hidden = new EventEmitter();
        this.typing = this.typing$.pipe(distinctUntilChanged$1());
        this.loading = new BehaviorSubject(false);
        this.onChange = noop;
        this.onTouched = noop;
        this._newValues = [];
        this._open = false;
        this._overlayRef = null;
        this._options = [];
        this._onFocusInputValue = '';
        this._search$ = new BehaviorSubject('');
        this._lastValues = [];
        this._closed$ = new Subject();
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        merge(this.intl.change$, this.stateChanges)
            .pipe(takeUntilDestroyed())
            .subscribe(() => this.cdr.markForCheck());
        this.typing$
            .pipe(takeUntilDestroyed())
            .subscribe(() => this.onValueChange());
    }
    ngOnInit() {
        this.updateSearch();
    }
    ngOnChanges(changes) {
        if (this.disabled) {
            this.hide();
        }
        if (this._dropdownInstance &&
            (changes['displayProperty'] ||
                changes['loadingText'] ||
                changes['noDataText'])) {
            this.assignInputsToDropdown();
        }
        if (changes['debounce']) {
            this.updateSearch();
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            const oldState = this._errorState;
            this._errorState =
                !this.typing$.getValue() &&
                    !this._open &&
                    updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (oldState !== this._errorState) {
                this.stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.detach();
        }
        this._search$.complete();
        this._closed$.next();
        this._closed$.complete();
    }
    focusChanged(isFocused) {
        this.typing$.next(isFocused);
        if (isFocused !== this.focused &&
            (!this.inputEl.nativeElement.readOnly || !isFocused)) {
            this._focused = isFocused;
            this.stateChanges.next();
            this.inputEl.nativeElement.selectionStart =
                this.inputEl.nativeElement.value.length;
        }
        if (!isFocused) {
            this.onTouched();
            if ((!Array.isArray(this.value) && !this.value) ||
                Array.isArray(this.value)) {
                this.onValueChange(this._onFocusInputValue !== this.inputEl.nativeElement.value);
            }
        }
        else {
            this._onFocusInputValue = this.inputEl.nativeElement.value;
            this.show();
        }
    }
    show() {
        if (!this.disabled &&
            !this._open &&
            this.inputEl.nativeElement.value.length >= this.minSearchChars) {
            this._open = true;
            if (this._options.length === 0 && this.minSearchChars === 0) {
                this.searchFn(this._search$.getValue());
            }
            if (!this._overlayRef) {
                this._overlayRef = this.overlay.create({
                    hasBackdrop: true,
                    backdropClass: 'transparent',
                    positionStrategy: this.getPositionStrategy(),
                    scrollStrategy: this.scrollStrategyOptions.block(),
                    minWidth: Math.max(this.config.optionsContainerMinWidth, this._trigger.nativeElement.getBoundingClientRect().width),
                });
                this._overlayRef
                    .backdropClick()
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => this.addNewItemOnBlurAndHide());
                this._portal = new ComponentPortal(RdsAutocompleteContainerComponent, null);
            }
            this._dropdownInstance = this._overlayRef.attach(this._portal);
            this.assignInputsToDropdown();
            this.openChanged.emit(true);
            this.shown.emit();
            this.inputEl.nativeElement.focus();
        }
    }
    hide() {
        if (this._open) {
            this._open = false;
            if (this._overlayRef) {
                this._overlayRef.detach();
            }
            this.onTouched();
            this._closed$.next();
            this.openChanged.emit(false);
            this.hidden.emit();
            this.cdr.markForCheck();
        }
    }
    hasValue() {
        return this.values.length > 0;
    }
    isSelected(option) {
        return this.values.some((o) => this.compareItem(option, o));
    }
    clear() {
        if (!this.disabled) {
            const beforeValue = this.inputEl.nativeElement.value;
            this.setValueForClear();
            this.inputEl.nativeElement.value = '';
            this.onValueChange(beforeValue !== '');
            this._newValues = [];
            this._options = [];
            this.inputEl.nativeElement.focus();
            this.updateDropdownOptions();
        }
    }
    selectNewItem() {
        if (typeof this.newItem === 'function') {
            const newItem = this.getNewItem();
            if (newItem) {
                this._options = this._options.filter((o) => !this._newValues.some((newOpt) => this.compareItem(o, newOpt)));
                this._newValues = [
                    ...this._newValues.filter((v) => !this.compareItem(v, newItem)),
                    newItem,
                ];
                this._options = [...this._options, ...this._newValues];
                this.select(newItem);
            }
        }
        else if (isDevMode()) {
            throw new Error(`Adding new item requires defined newItem as function for autocomplete.`);
        }
    }
    getNewItem() {
        return typeof this.newItem === 'function'
            ? this.newItem(this.inputEl.nativeElement.value, this._options)
            : null;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    writeValue(v) {
        this.value = v;
    }
    getInputFilledValue() {
        return this.inputEl.nativeElement.value;
    }
    getDisplayProperty(v) {
        if (!v) {
            return '';
        }
        else if (this.displayProperty) {
            if (typeof this.displayProperty === 'function') {
                return this.displayProperty(v);
            }
            else {
                return String(v[this.displayProperty]);
            }
        }
        else {
            return String(v);
        }
    }
    getUniqProperty(v) {
        if (!v) {
            return '';
        }
        else if (this.uniqProperty) {
            if (typeof this.uniqProperty === 'function') {
                return this.uniqProperty(v);
            }
            else {
                return String(v[this.uniqProperty]);
            }
        }
        else {
            return this.getDisplayProperty(v);
        }
    }
    onContainerClick() {
        if (!this._focused) {
            this.focus();
            if (Array.isArray(this.options) &&
                this.debounce === 0 &&
                this.minSearchChars === 0) {
                this.show();
            }
        }
    }
    setDescribedByIds(ids) {
        this.inputAriaDescribedBy = ids.join(' ');
    }
    getSearchQuery() {
        return this._search$.getValue();
    }
    updatePosition() {
        this._overlayRef?.updatePosition();
    }
    clearValue(event) {
        if (event) {
            event.stopPropagation();
        }
        this.clear();
    }
    toggle(option) {
        if (this.isSelected(option)) {
            this.deselect(option);
        }
        else {
            this.select(option);
        }
    }
    get required() {
        if (this.ngControl &&
            this.ngControl.control &&
            this.ngControl.control.validator) {
            const validators = this.ngControl.control.validator({});
            if (validators && validators['required']) {
                return true;
            }
        }
        return super.required;
    }
    _addOption(option, component) {
        this._dropdownInstance?.instance._addOption(option, component);
    }
    _deleteOption(option) {
        this._dropdownInstance?.instance._deleteOption(option);
    }
    onValueChange(force = false) {
        if (force ||
            this.hasAtLeastOneDifferentItem(this.values, this._lastValues)) {
            this._lastValues = [...this.values];
            this.onChange(this.value);
        }
    }
    addNewItemOnBlurAndHide() {
        this.addNewItemOnBlur();
        this.hide();
    }
    addNewItemOnBlur(query = this.inputEl.nativeElement.value) {
        if (this.selectLastRemainingOnBlur && this._options.length === 1) {
            this.select(this._options[0]);
        }
        else if (this.selectNewItemOnBlur && typeof this.newItem === 'function') {
            const newVal = this.newItem(query, this._options);
            if (newVal && this._options.every((o) => !this.compareItem(o, newVal))) {
                this._options = this._options.filter((o) => !this._newValues.some((newOpt) => this.compareItem(o, newOpt)));
                this._newValues = [
                    ...this._newValues.filter((v) => !this.compareItem(v, newVal)),
                    newVal,
                ];
                this._options = [...this._options, ...this._newValues];
                this.updateDropdownOptions();
                this.select(newVal);
            }
        }
        this.onTouched();
        this.typing$.next(false);
    }
    getPlaceholder() {
        if (!this._focused &&
            this.formField.labelPosition === 'floating' &&
            this.values.length === 0) {
            return '';
        }
        else if (typeof this.placeholder === 'string') {
            return this.placeholder;
        }
        else {
            return RdsAutocompleteIntl.translations.placeholder;
        }
    }
    search(query = this.inputEl.nativeElement.value) {
        if (typeof this.skipSearchValue === 'function' &&
            this.skipSearchValue(query)) {
            return;
        }
        this._search$.next(query);
    }
    onInputKeydown(event) {
        if (!hasModifierKey(event, 'altKey', 'shiftKey', 'ctrlKey', 'metaKey')) {
            if (!this._open && event.key === 'Enter') {
                this.show();
            }
            else if (this._open && event.key === 'Escape') {
                this.hide();
            }
            this._dropdownInstance?.instance.onKeydown(event);
        }
    }
    _filterBy(item, query) {
        return typeof this.filterBy === 'function'
            ? this.filterBy(item, query)
            : this.getDisplayProperty(item).includes(query);
    }
    searchFn(query) {
        if (this.inputEl.nativeElement.value.length >= this.minSearchChars) {
            if (this._focused) {
                this.show();
            }
            this.loading.next(true);
            if (typeof this.options === 'function') {
                this.options(query)
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe((options) => {
                    this._options = [
                        ...options,
                        ...this.getNewNotQueriedSelectedValues(options),
                    ];
                    this.updateDropdownOptions();
                });
            }
            else {
                this._options = [
                    ...this.options,
                    ...this.getNewNotQueriedSelectedValues(this.options),
                ].filter((v) => this._filterBy(v, query));
                this.updateDropdownOptions();
                this.loading.next(false);
            }
        }
        else {
            this.loading.next(false);
            this.hide();
        }
    }
    getNewNotQueriedSelectedValues(options) {
        return this.values
            .filter((o) => this._newValues.some((newOpt) => this.compareItem(o, newOpt)))
            .filter((o) => !options.some((q) => this.compareItem(q, o)));
    }
    updateDropdownOptions() {
        if (this._dropdownInstance) {
            this._dropdownInstance.instance.options = this._options;
            this._dropdownInstance.changeDetectorRef.markForCheck();
            this.loading.next(false);
        }
    }
    getPositionStrategy() {
        return this.overlay
            .position()
            .flexibleConnectedTo(this._origin.elementRef)
            .withPositions([this.getPositions()]);
    }
    getPositions() {
        return {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 0,
        };
    }
    assignInputsToDropdown() {
        this._dropdownInstance.instance.autocomplete = this;
        this._dropdownInstance.instance.size = this.formField.size;
        this._dropdownInstance.instance.options = this._options;
        this._dropdownInstance.changeDetectorRef.markForCheck();
    }
    updateSearch() {
        if (this._search$) {
            this._search$.complete();
        }
        const searchQuery = Array.isArray(this.value)
            ? ''
            : this.getDisplayProperty(this.values[0]);
        this._search$ = new BehaviorSubject(searchQuery);
        this._search$
            .pipe(skip(1), distinctUntilChanged$1(), filter((query) => this.inputEl.nativeElement.value === query), tap(() => {
            if (this._focused) {
                this.show();
            }
            if (this._dropdownInstance &&
                this.debounce !== 0 &&
                this.inputEl.nativeElement.value.length >= this.minSearchChars) {
                this.loading.next(true);
            }
            if (this.debounce !== 0 &&
                this.inputEl.nativeElement.value.length < this.minSearchChars &&
                this.loading.getValue()) {
                this.loading.next(false);
            }
        }), debounceTime(this.debounce), takeUntilDestroyed(this.destroyRef))
            .subscribe((q) => this.searchFn(q));
    }
    isNativelyBadInput() {
        return (this.inputEl.nativeElement.validity &&
            this.inputEl.nativeElement.validity.badInput);
    }
    hasAtLeastOneDifferentItem(arrayA, arrayB) {
        if (arrayA.length === 0 && arrayB.length === 0) {
            return false;
        }
        else if (arrayA.length !== arrayB.length) {
            return true;
        }
        return (arrayA.some((o) => !arrayB.some((op) => this.compareItem(o, op))) ||
            arrayB.some((o) => !arrayA.some((op) => this.compareItem(o, op))));
    }
    focus(options) {
        this.inputEl.nativeElement.focus(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractAutocompleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAbstractAutocompleteComponent, inputs: { options: "options", displayProperty: "displayProperty", uniqProperty: "uniqProperty", compareItem: "compareItem", filterBy: "filterBy", highlightQuery: "highlightQuery", newItem: "newItem", selectNewItemOnBlur: ["selectNewItemOnBlur", "selectNewItemOnBlur", booleanAttribute], selectLastRemainingOnBlur: ["selectLastRemainingOnBlur", "selectLastRemainingOnBlur", booleanAttribute], skipSearchValue: "skipSearchValue", placeholder: "placeholder", loadingText: "loadingText", noDataText: "noDataText", newItemText: "newItemText", optionTemplate: "optionTemplate", noDataTemplate: "noDataTemplate", loadingTemplate: "loadingTemplate", newItemTemplate: "newItemTemplate", disabled: "disabled", debounce: "debounce", minSearchChars: "minSearchChars" }, outputs: { openChanged: "openChanged", shown: "shown", hidden: "hidden", typing: "typing", loading: "loading" }, host: { properties: { "attr.disabled": "this.attrDisabled", "class": "this.hostClass" } }, viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputEl"], descendants: true, static: true }, { propertyName: "inputContainer", first: true, predicate: ["inputContainer"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractAutocompleteComponent, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { options: [{
                type: Input,
                args: [{ required: true }]
            }], displayProperty: [{
                type: Input
            }], uniqProperty: [{
                type: Input
            }], compareItem: [{
                type: Input
            }], filterBy: [{
                type: Input
            }], highlightQuery: [{
                type: Input
            }], newItem: [{
                type: Input
            }], selectNewItemOnBlur: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selectLastRemainingOnBlur: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], skipSearchValue: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], loadingText: [{
                type: Input
            }], noDataText: [{
                type: Input
            }], newItemText: [{
                type: Input
            }], optionTemplate: [{
                type: Input
            }], noDataTemplate: [{
                type: Input
            }], loadingTemplate: [{
                type: Input
            }], newItemTemplate: [{
                type: Input
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], disabled: [{
                type: Input
            }], debounce: [{
                type: Input
            }], minSearchChars: [{
                type: Input
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], openChanged: [{
                type: Output
            }], shown: [{
                type: Output
            }], hidden: [{
                type: Output
            }], typing: [{
                type: Output
            }], loading: [{
                type: Output
            }], inputEl: [{
                type: ViewChild,
                args: ['inputEl', { static: true }]
            }], inputContainer: [{
                type: ViewChild,
                args: ['inputContainer', { static: true }]
            }] } });

const ANIMATION_SPEED_FACTOR = 10;
const ANIMATION_DIRECTION = {
    FORWARD: 1,
    BACKWARD: -1,
};
const DEFAULT_MAX_VALUE = 100;
const DEFAULT_MIN_VALUE = 0;
class RdsProgressSpinnerComponent {
    constructor() {
        this.animationConfig$ = new Subject();
        this.animationConfigDebounced$ = this.animationConfig$.pipe(delay(1), debounceTime(1));
        this.hostRole = 'progressbar';
        this._value = DEFAULT_MIN_VALUE;
        this._minValue = DEFAULT_MIN_VALUE;
        this._maxValue = DEFAULT_MAX_VALUE;
        this.mode = 'indeterminate';
        this.size = 'xl';
        this.white = false;
    }
    get hostClasses() {
        return ['rds-progress-spinner', `rds-progress-spinner-${this.size}`];
    }
    get attrValueMin() {
        return this.mode === 'determinate' ? this.minValue : null;
    }
    get attrValueMax() {
        return this.mode === 'determinate' ? this.maxValue : null;
    }
    get attrValueNow() {
        return this.mode === 'determinate' ? this.value : null;
    }
    set value(newValue) {
        const value = numberAttribute(newValue, DEFAULT_MIN_VALUE);
        if (this._value !== value) {
            this._value = value;
            if (this.animationItem) {
                this.animationItem.setDirection(this.getAnimationDirection());
                this.playAnimation();
            }
        }
    }
    get value() {
        return this._value;
    }
    set minValue(value) {
        const min = numberAttribute(value, DEFAULT_MIN_VALUE);
        if (min > this.maxValue) {
            throw new Error(`The minimal value should be less than maximum value`);
        }
        if (this._minValue !== min) {
            this._minValue = min;
            this.animationItem.setDirection(this.getAnimationDirection());
            this.playAnimation();
        }
    }
    get minValue() {
        return this._minValue;
    }
    set maxValue(value) {
        const max = numberAttribute(value, DEFAULT_MAX_VALUE);
        if (max < this.minValue) {
            throw new Error(`The maximal value should be greater than minimal value`);
        }
        if (this._maxValue !== max) {
            this._maxValue = max;
            this.animationItem.setDirection(this.getAnimationDirection());
            this.playAnimation();
        }
    }
    get maxValue() {
        return this._maxValue;
    }
    ngAfterViewInit() {
        this._setAnimationConfig();
    }
    ngOnChanges(changes) {
        if (changes['mode'] || changes['size'] || changes['white']) {
            this._setAnimationConfig();
        }
    }
    ngOnDestroy() {
        this.animationItem?.destroy();
    }
    animationCreated($event) {
        if (this.mode === 'determinate') {
            this.animationItem = $event;
            this.playAnimation();
        }
    }
    playAnimation() {
        if (this.mode === 'determinate' && this.animationItem) {
            this.animationItem.pause();
            this.removeAnimationItemListener();
            if ((this.animationItem.playDirection === ANIMATION_DIRECTION.FORWARD &&
                this.animationItem.currentFrame < this.getPercentageValue()) ||
                (this.animationItem.playDirection === ANIMATION_DIRECTION.BACKWARD &&
                    this.animationItem.currentFrame > this.getPercentageValue())) {
                this.animationItem.setSpeed(Math.abs(this.animationItem.currentFrame - this.getPercentageValue()) / ANIMATION_SPEED_FACTOR);
                this.animationItem.play();
                this.animationItem.addEventListener('enterFrame', (event) => {
                    if ((this.animationItem.playDirection === ANIMATION_DIRECTION.FORWARD &&
                        event.currentTime >= this.getPercentageValue()) ||
                        (this.animationItem.playDirection ===
                            ANIMATION_DIRECTION.BACKWARD &&
                            event.currentTime < this.getPercentageValue())) {
                        this.animationItem.pause();
                        this.removeAnimationItemListener();
                        this.animationItem.goToAndStop(this.getPercentageValue(), true);
                    }
                });
            }
        }
    }
    _getPath() {
        return `assets/spinner/spinner-${this.mode === 'determinate' ? 'determinate-' : ''}${this.white ? 'white-' : ''}${this.size}.json`;
    }
    _setAnimationConfig() {
        if (this.animationItem) {
            this.animationItem.destroy();
        }
        if (this.mode === 'indeterminate') {
            this.animationConfig$.next({
                path: this._getPath(),
                autoplay: true,
                loop: true,
            });
        }
        else {
            this.animationConfig$.next({
                path: this._getPath(),
                loop: false,
            });
        }
    }
    removeAnimationItemListener() {
        if (this.animationItem) {
            this.animationItem.removeEventListener('enterFrame');
        }
    }
    getPercentageValue() {
        const value = ((this.value - this.minValue) / (this.maxValue - this.minValue)) * 100;
        const percentage = Math.round(value + Number.EPSILON);
        if (percentage <= DEFAULT_MIN_VALUE) {
            return DEFAULT_MIN_VALUE;
        }
        else if (percentage >= this.animationItem.totalFrames) {
            return this.animationItem.totalFrames || DEFAULT_MAX_VALUE;
        }
        else {
            return percentage;
        }
    }
    getAnimationDirection() {
        return this.getPercentageValue() < this.animationItem.currentFrame
            ? ANIMATION_DIRECTION.BACKWARD
            : ANIMATION_DIRECTION.FORWARD;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsProgressSpinnerComponent, selector: "rds-progress-spinner", inputs: { value: "value", minValue: "minValue", maxValue: "maxValue", mode: "mode", size: "size", label: "label", white: ["white", "white", booleanAttribute] }, host: { properties: { "class": "this.hostClasses", "attr.role": "this.hostRole", "attr.aria-valuemin": "this.attrValueMin", "attr.aria-valuemax": "this.attrValueMax", "attr.aria-valuenow": "this.attrValueNow", "class.rds-progress-spinner--white": "this.white" } }, usesOnChanges: true, ngImport: i0, template: `
    <div class="rds-progress-spinner-container">
      <ng-lottie
        [options]="animationConfigDebounced$ | async"
        (animationCreated)="animationCreated($event)"
      />
    </div>
    @if (label) {
      <span class="rds-progress-spinner-label">{{ label }}</span>
    }
  `, isInline: true, styles: [".rds-progress-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center}.rds-progress-spinner.rds-progress-spinner-xs .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:18px;width:18px}.rds-progress-spinner.rds-progress-spinner-s .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:24px;width:24px}.rds-progress-spinner.rds-progress-spinner-m .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:32px;width:32px}.rds-progress-spinner.rds-progress-spinner-l .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:44px;width:44px}.rds-progress-spinner.rds-progress-spinner-xl .rds-progress-spinner-container{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:72px;width:72px}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-track)}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-informative)}.rds-progress-spinner .rds-progress-spinner-label{display:flex;margin-top:4px;color:var(--rds-color-informative)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-label{color:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-on-dark-surface)}\n"], dependencies: [{ kind: "component", type: i1$4.LottieComponent, selector: "ng-lottie", inputs: ["width", "height"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-progress-spinner', template: `
    <div class="rds-progress-spinner-container">
      <ng-lottie
        [options]="animationConfigDebounced$ | async"
        (animationCreated)="animationCreated($event)"
      />
    </div>
    @if (label) {
      <span class="rds-progress-spinner-label">{{ label }}</span>
    }
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".rds-progress-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center}.rds-progress-spinner.rds-progress-spinner-xs .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:18px;width:18px}.rds-progress-spinner.rds-progress-spinner-s .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:24px;width:24px}.rds-progress-spinner.rds-progress-spinner-m .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:32px;width:32px}.rds-progress-spinner.rds-progress-spinner-l .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:44px;width:44px}.rds-progress-spinner.rds-progress-spinner-xl .rds-progress-spinner-container{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:72px;width:72px}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-track)}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-informative)}.rds-progress-spinner .rds-progress-spinner-label{display:flex;margin-top:4px;color:var(--rds-color-informative)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-label{color:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-on-dark-surface)}\n"] }]
        }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], attrValueMin: [{
                type: HostBinding,
                args: ['attr.aria-valuemin']
            }], attrValueMax: [{
                type: HostBinding,
                args: ['attr.aria-valuemax']
            }], attrValueNow: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }], value: [{
                type: Input
            }], minValue: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], mode: [{
                type: Input
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], white: [{
                type: HostBinding,
                args: ['class.rds-progress-spinner--white']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsProgressSpinnerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerModule, declarations: [RdsProgressSpinnerComponent], imports: [CommonModule, LottieComponent], exports: [RdsProgressSpinnerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerModule, imports: [CommonModule, LottieComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RdsProgressSpinnerComponent],
                    exports: [RdsProgressSpinnerComponent],
                    imports: [CommonModule, LottieComponent],
                }]
        }] });

class RdsAutocompleteComponent extends RdsAbstractAutocompleteComponent {
    set value(value) {
        const oldValue = this.value;
        this._value = value;
        if (!this.compareItem(oldValue, this.value)) {
            this.inputEl.nativeElement.value = this.getDisplayProperty(this.value);
            this.cdr.markForCheck();
        }
    }
    get value() {
        return this._value;
    }
    isInputFilled() {
        return this.value &&
            this.getDisplayProperty(this.value) === this.inputEl?.nativeElement.value
            ? false
            : this.inputEl?.nativeElement.value.length > 0 || false;
    }
    setValueForClear() {
        this.value = null;
    }
    focusChanged(isFocused) {
        if (!isFocused && this.values.length === 1) {
            super.focusChanged(isFocused);
            if (this._search$.getValue() !== '') {
                this._search$.next('');
            }
        }
        else {
            super.focusChanged(isFocused);
        }
    }
    select(option) {
        if (!this.disabled && !this.isSelected(option)) {
            this._search$.next('');
            this.inputEl.nativeElement.value = this.getDisplayProperty(option);
            this._onFocusInputValue = this.inputEl.nativeElement.value;
            if (this.minSearchChars === 0) {
                this._options = [];
            }
            this.updateDropdownOptions();
            const previousValue = this.value;
            if (this._newValues.some((o) => this.compareItem(o, previousValue))) {
                this._options = this._options.filter((o) => !this.compareItem(o, previousValue));
                this._newValues = [];
            }
            this.value = option;
            this.inputEl.nativeElement.focus();
            this.stateChanges.emit();
            this.hide();
        }
    }
    hide() {
        if (this.values.length === 1) {
            this.inputEl.nativeElement.value = this.getDisplayProperty(this.values[0]);
        }
        super.hide();
    }
    deselect(option) {
        if (!this.disabled && (!option || this.isSelected(option))) {
            if (option && this._newValues.some((v) => this.compareItem(v, option))) {
                this._options = this._options.filter((o) => !this.compareItem(o, option));
                this._newValues = this._newValues.filter((v) => !this.compareItem(v, option));
            }
            this.hide();
            this.value = null;
            this.inputEl.nativeElement.value = '';
            this.inputEl.nativeElement.focus();
            this.updateDropdownOptions();
        }
    }
    get values() {
        return this.value ? [this.value] : [];
    }
    assignInputsToDropdown() {
        this._dropdownInstance.instance.type = 'single';
        super.assignInputsToDropdown();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAutocompleteComponent, isStandalone: true, selector: "rds-autocomplete", providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: forwardRef(() => RdsAutocompleteComponent),
            },
        ], usesInheritance: true, ngImport: i0, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-single"
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-disabled]="disabled"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div class="rds-autocomplete-input-container" #inputContainer>
        <input
          [placeholder]="getPlaceholder()"
          [disabled]="attrDisabled"
          [attr.aria-invalid]="errorState"
          [attr.aria-describedby]="inputAriaDescribedBy"
          autocomplete="off"
          class="rds-form-field__control"
          #inputEl
          (keydown.shift.tab)="addNewItemOnBlurAndHide()"
          (keydown.tab)="addNewItemOnBlurAndHide()"
          (blur)="focusChanged(false)"
          (focus)="focusChanged(true)"
          (input)="search()"
          (keydown)="onInputKeydown($event)"
        />
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            (click)="clearValue($event)"
            [disabled]="ngControl?.disabled"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, isInline: true, styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: RdsProgressSpinnerModule }, { kind: "component", type: RdsProgressSpinnerComponent, selector: "rds-progress-spinner", inputs: ["value", "minValue", "maxValue", "mode", "size", "label", "white"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-single"
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-disabled]="disabled"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div class="rds-autocomplete-input-container" #inputContainer>
        <input
          [placeholder]="getPlaceholder()"
          [disabled]="attrDisabled"
          [attr.aria-invalid]="errorState"
          [attr.aria-describedby]="inputAriaDescribedBy"
          autocomplete="off"
          class="rds-form-field__control"
          #inputEl
          (keydown.shift.tab)="addNewItemOnBlurAndHide()"
          (keydown.tab)="addNewItemOnBlurAndHide()"
          (blur)="focusChanged(false)"
          (focus)="focusChanged(true)"
          (input)="search()"
          (keydown)="onInputKeydown($event)"
        />
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            (click)="clearValue($event)"
            [disabled]="ngControl?.disabled"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: forwardRef(() => RdsAutocompleteComponent),
                        },
                    ], standalone: true, imports: [
                        AsyncPipe,
                        RdsProgressSpinnerModule,
                        RdsIconComponent,
                        RdsButtonModule,
                    ], styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"] }]
        }] });

const INPUT_FILLED_ERROR_KEY = 'rdsInputFilled';
class RdsAutocompleteValidators {
    static inputFilled(autocomplete) {
        return autocomplete && autocomplete.isInputFilled()
            ? {
                [INPUT_FILLED_ERROR_KEY]: {
                    filledValue: autocomplete.getInputFilledValue(),
                },
            }
            : null;
    }
}

class RdsMultiAutocompleteComponent extends RdsAbstractAutocompleteComponent {
    constructor() {
        super(...arguments);
        this.renderer = inject(Renderer2);
        this.elementRef = inject(ElementRef);
        this.dir = inject(Directionality, { optional: true });
        this._value = [];
        this.controlType = 'autocomplete-multi';
        this._multiMinimumInputWidth = this.config.multiMinimumInputWidth;
        this._multiMinimumInputWidthOffset = this.config.multiMinimumInputWidthOffset;
        this.focusedChip = null;
        this.disallowFocusEscape = true;
        this.chipActions = new QueryList();
        this._lastDestroyedFocusedChipIndex = null;
    }
    set multiMinimumInputWidth(width) {
        this._multiMinimumInputWidth = numberAttribute(width, this.config.multiMinimumInputWidth);
    }
    get multiMinimumInputWidth() {
        return this._multiMinimumInputWidth;
    }
    set multiMinimumInputWidthOffset(width) {
        this._multiMinimumInputWidthOffset = numberAttribute(width, this.config.multiMinimumInputWidthOffset);
    }
    get multiMinimumInputWidthOffset() {
        return this._multiMinimumInputWidthOffset;
    }
    set disabled(disabled) {
        super.disabled = disabled;
        this.syncChipsState();
    }
    get disabled() {
        return super.disabled;
    }
    trackByFn(o) {
        if (!this.trackBy) {
            return o;
        }
        if (typeof this.trackBy === 'function') {
            return this.trackBy(o);
        }
        return o[this.trackBy];
    }
    ngAfterViewInit() {
        this.valueContainer.changes
            .pipe(startWith(this.valueContainer), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.recalculateInputWidth());
        this.setUpFocusManagement();
        this.trackChipSetChanges();
        this.trackDestroyedFocusedChip();
    }
    handleKeydown(event) {
        if (this.originatesFromChip(event)) {
            this.keyManager.onKeydown(event);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.keyManager?.destroy();
        this.chipActions.destroy();
    }
    set value(value) {
        const oldValue = this.value;
        this._value = value || [];
        if (this.hasAtLeastOneDifferentItem(oldValue, this._value)) {
            this.recalculateInputWidth();
            this.cdr.markForCheck();
        }
    }
    get value() {
        return this._value;
    }
    get values() {
        return this.value || [];
    }
    setValueForClear() {
        this._options = [];
        this.value = [];
        this.updateDropdownOptions();
    }
    onInputKeydown(event) {
        if (this.values.length > 0 &&
            this.getInputFilledValue().length === 0 &&
            event.key === 'Backspace' &&
            !hasModifierKey(event, 'altKey', 'shiftKey', 'ctrlKey', 'metaKey')) {
            this.deselect(this.values[this.value.length - 1]);
        }
        super.onInputKeydown(event);
    }
    select(option) {
        if (!this.disabled && !this.isSelected(option)) {
            const newValue = this._options.filter((o) => this.isSelected(o) || this.compareItem(o, option));
            this.value = [
                ...this.value.filter((o) => !newValue.some((n) => this.compareItem(n, o))),
                ...newValue,
            ];
            this.updateDropdownOptions();
            this.inputEl.nativeElement.value = '';
            this.stateChanges.emit();
        }
    }
    deselect(option) {
        if (!this.disabled && (!option || this.isSelected(option))) {
            if (option) {
                this.value = this.value.filter((o) => !this.compareItem(o, option));
                if (option) {
                    this._options = this._options.filter((o) => !this._newValues.some((newOpt) => this.compareItem(o, newOpt)));
                    this._newValues = this._newValues.filter((v) => !this.compareItem(v, option));
                    this._options = [...this._options, ...this._newValues];
                }
                this.updateDropdownOptions();
            }
            else {
                this.clear();
            }
            this.focusedChip = null;
            this.onValueChange();
        }
    }
    isInputFilled() {
        return this.inputEl?.nativeElement.value.length > 0 || false;
    }
    hide() {
        super.hide();
        if (this.inputEl.nativeElement.value.length === 0) {
            this._search$.next('');
            this._options = [];
        }
    }
    chipFocus(chip) {
        const index = this.chips
            .map((c) => c.getActions())
            .reduce((p, c) => [...p, ...c], [])
            .findIndex((a) => a === chip.getActions()[0]);
        this.keyManager.setActiveItem(index);
    }
    assignInputsToDropdown() {
        this._dropdownInstance.instance.type = 'multi';
        super.assignInputsToDropdown();
    }
    showCaret() {
        return (this.getPlaceholder().trim() === '' &&
            this.inputEl.nativeElement.value.trim() === '' &&
            this.values.length > 0);
    }
    recalculateInputWidth() {
        if (this.autocompleteMulti &&
            this.inputEl &&
            this.valueContainer &&
            this.valueContainer.last &&
            this.inputContainer) {
            const availableWidth = this.autocompleteMulti.nativeElement.getBoundingClientRect().x +
                this.autocompleteMulti.nativeElement.getBoundingClientRect().width -
                this.valueContainer.last.nativeElement.getBoundingClientRect().x -
                this.valueContainer.last.nativeElement.getBoundingClientRect().width -
                this.multiMinimumInputWidthOffset;
            if (availableWidth > this.multiMinimumInputWidth) {
                this.renderer.setStyle(this.inputContainer.nativeElement, 'width', `${availableWidth}px`);
            }
            else {
                this.renderer.setStyle(this.inputContainer.nativeElement, 'width', '100%');
            }
        }
        else if (this.inputContainer) {
            this.renderer.setStyle(this.inputContainer.nativeElement, 'width', '100%');
        }
    }
    originatesFromChip(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this.elementRef.nativeElement) {
            if (currentElement.classList.contains('rds-chips__chip')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    setUpFocusManagement() {
        // Create a flat `QueryList` containing the actions of all the chips.
        // This allows us to navigate both within the chip and move to the next/previous
        // one using the existing `ListKeyManager`.
        this.chips.changes
            .pipe(startWith(this.chips))
            .subscribe((chips) => {
            const actions = chips
                .map((c) => c.getActions())
                .reduce((p, c) => [...p, ...c], []);
            this.chipActions.reset(actions);
            this.chipActions.notifyOnChanges();
        });
        this.keyManager = new FocusKeyManager(this.chipActions)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr')
            .withHomeAndEnd()
            .skipPredicate((action) => action.disabled);
        this.keyManager.tabOut.subscribe(() => {
            this.disallowFocusEscape = false;
            this.cdr.markForCheck();
            setTimeout(() => {
                this.disallowFocusEscape = true;
                this.cdr.markForCheck();
            });
        });
        // Keep the manager active index in sync so that navigation picks
        // up from the current chip if the user clicks into the list directly.
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$))), takeUntilDestroyed(this.destroyRef))
            .subscribe(({ source: chip }) => {
            const action = chip.getSourceAction(document.activeElement);
            if (action) {
                this.keyManager.updateActiveItem(action);
            }
        });
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$.pipe(map((e) => ({ focused: true, source: e.source })))), ...this.chips.map((c) => c.blur$.pipe(map((e) => ({ focused: false, source: e.source })))))))
            .subscribe((chip) => {
            if (chip.focused) {
                this.focusedChip = chip.source;
            }
            else if (this.focusedChip === chip.source) {
                this.focusedChip = null;
            }
            this.cdr.markForCheck();
        });
        this.dir?.change
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((direction) => this.keyManager.withHorizontalOrientation(direction));
    }
    trackDestroyedFocusedChip() {
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.destroyed))), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            const chipArray = this.chips.toArray();
            const chipIndex = chipArray.indexOf(event.source);
            // If the focused chip is destroyed, save its index so that we can move focus to the next
            // chip. We only save the index here, rather than move the focus immediately, because we want
            // to wait until the chip is removed from the chip list before focusing the next one. This
            // allows us to keep focus on the same index if the chip gets swapped out.
            if (this.isValidIndex(chipIndex) && event.source.hasFocus()) {
                this._lastDestroyedFocusedChipIndex = chipIndex;
            }
        });
    }
    isValidIndex(index) {
        return index >= 0 && index < this.chips.length;
    }
    trackChipSetChanges() {
        this.chips.changes
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => this.syncChipsState());
            }
            this._redirectDestroyedChipFocus();
        });
    }
    syncChipsState() {
        if (this.chips) {
            this.chips.forEach((chip) => {
                chip.disabled = this.disabled;
                chip.cdr.markForCheck();
            });
        }
    }
    _redirectDestroyedChipFocus() {
        if (this._lastDestroyedFocusedChipIndex == null) {
            return;
        }
        if (this.chips.length) {
            const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this.chips.length - 1);
            const chipToFocus = this.chips.toArray()[newIndex];
            if (chipToFocus.disabled) {
                // If we're down to one disabled chip, move focus back to the set.
                if (this.chips.length === 1) {
                    this.focus();
                }
                else {
                    this.keyManager.setPreviousItemActive();
                }
            }
            else {
                chipToFocus.focus();
            }
        }
        else {
            Promise.resolve().then(() => this.focus());
        }
        this._lastDestroyedFocusedChipIndex = null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiAutocompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiAutocompleteComponent, isStandalone: true, selector: "rds-multi-autocomplete", inputs: { multiMinimumInputWidth: "multiMinimumInputWidth", multiMinimumInputWidthOffset: "multiMinimumInputWidthOffset", disabled: "disabled", trackBy: "trackBy" }, host: { listeners: { "keydown": "handleKeydown($event)" } }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: forwardRef(() => RdsMultiAutocompleteComponent),
            },
        ], viewQueries: [{ propertyName: "autocompleteMulti", first: true, predicate: ["autocompleteMulti"], descendants: true, read: ElementRef }, { propertyName: "valueContainer", predicate: ["valueContainer"], descendants: true, read: ElementRef }, { propertyName: "chips", predicate: RdsChipComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-multi"
      #autocomplate
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-floating-label]="
        formField.labelPosition === 'floating'
      "
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div #autocompleteMulti class="rds-autocomplete-multi-container">
        @for (o of values; track trackByFn(o)) {
          <rds-chip
            #valueContainer
            size="s"
            closable
            [tabindex]="
              (!focusedChip || focusedChip === valueContainer) &&
              disallowFocusEscape
                ? 0
                : -1
            "
            (focus)="chipFocus(valueContainer)"
            (closeChip)="deselect(o)"
            >{{ getDisplayProperty(o) }}
          </rds-chip>
        }
        <div
          class="rds-autocomplete-input-container"
          #inputContainer
          [class.rds-form-field__control-show-caret]="showCaret()"
          [class.rds-form-field__control-disabled]="ngControl?.disabled"
          [class.rds-form-field__control-focused]="_focused"
        >
          <input
            [placeholder]="getPlaceholder()"
            [disabled]="attrDisabled"
            [attr.aria-invalid]="errorState"
            [attr.aria-describedby]="inputAriaDescribedBy"
            autocomplete="off"
            class="rds-form-field__control"
            #inputEl
            (keydown.shift.tab)="addNewItemOnBlurAndHide()"
            (keydown.tab)="addNewItemOnBlurAndHide()"
            (blur)="focusChanged(false)"
            (focus)="focusChanged(true)"
            (input)="search()"
            (keydown)="onInputKeydown($event)"
          />
        </div>
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            [disabled]="ngControl?.disabled"
            (click)="clearValue($event)"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, isInline: true, styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: RdsProgressSpinnerModule }, { kind: "component", type: RdsProgressSpinnerComponent, selector: "rds-progress-spinner", inputs: ["value", "minValue", "maxValue", "mode", "size", "label", "white"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "ngmodule", type: RdsChipsModule }, { kind: "component", type: RdsChipComponent, selector: "rds-chip, button[rds-chip], button[rdsChip]", inputs: ["ariaLabelCloseButton", "size", "type", "role", "disabled", "closable", "value"], outputs: ["closeChip", "destroyed"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-multi-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-multi"
      #autocomplate
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-floating-label]="
        formField.labelPosition === 'floating'
      "
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div #autocompleteMulti class="rds-autocomplete-multi-container">
        @for (o of values; track trackByFn(o)) {
          <rds-chip
            #valueContainer
            size="s"
            closable
            [tabindex]="
              (!focusedChip || focusedChip === valueContainer) &&
              disallowFocusEscape
                ? 0
                : -1
            "
            (focus)="chipFocus(valueContainer)"
            (closeChip)="deselect(o)"
            >{{ getDisplayProperty(o) }}
          </rds-chip>
        }
        <div
          class="rds-autocomplete-input-container"
          #inputContainer
          [class.rds-form-field__control-show-caret]="showCaret()"
          [class.rds-form-field__control-disabled]="ngControl?.disabled"
          [class.rds-form-field__control-focused]="_focused"
        >
          <input
            [placeholder]="getPlaceholder()"
            [disabled]="attrDisabled"
            [attr.aria-invalid]="errorState"
            [attr.aria-describedby]="inputAriaDescribedBy"
            autocomplete="off"
            class="rds-form-field__control"
            #inputEl
            (keydown.shift.tab)="addNewItemOnBlurAndHide()"
            (keydown.tab)="addNewItemOnBlurAndHide()"
            (blur)="focusChanged(false)"
            (focus)="focusChanged(true)"
            (input)="search()"
            (keydown)="onInputKeydown($event)"
          />
        </div>
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            [disabled]="ngControl?.disabled"
            (click)="clearValue($event)"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: forwardRef(() => RdsMultiAutocompleteComponent),
                        },
                    ], standalone: true, imports: [
                        AsyncPipe,
                        RdsProgressSpinnerModule,
                        RdsIconComponent,
                        RdsButtonModule,
                        RdsChipsModule,
                    ], styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"] }]
        }], propDecorators: { multiMinimumInputWidth: [{
                type: Input
            }], multiMinimumInputWidthOffset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], trackBy: [{
                type: Input
            }], valueContainer: [{
                type: ViewChildren,
                args: ['valueContainer', { read: ElementRef }]
            }], autocompleteMulti: [{
                type: ViewChild,
                args: ['autocompleteMulti', { read: ElementRef }]
            }], chips: [{
                type: ViewChildren,
                args: [RdsChipComponent]
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class RdsBreadcrumbItemComponent {
    constructor(tabIndex) {
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this.class = 'rds-breadcrumb-item rds-focus-indicator';
        this.tabIndex = TAB_INDEX_DEFAULT;
        this.itemClick = new EventEmitter();
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, false);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    onClickItem() {
        this.itemClick.emit(this.item);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbItemComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsBreadcrumbItemComponent, isStandalone: true, selector: "rds-breadcrumb-item", inputs: { tabIndex: ["tabIndex", "tabIndex", (v) => numberAttribute(v, TAB_INDEX_DEFAULT)], item: "item" }, outputs: { itemClick: "itemClick" }, host: { listeners: { "click": "onClickItem()", "keydown.enter": "onClickItem()", "keydown.space": "onClickItem()" }, properties: { "class": "this.class", "tabIndex": "this.tabIndex" } }, ngImport: i0, template: `<span [title]="item.title ?? ''">{{ item.text }}</span>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-breadcrumb-item',
                    template: `<span [title]="item.title ?? ''">{{ item.text }}</span>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input,
                args: [{ transform: (v) => numberAttribute(v, TAB_INDEX_DEFAULT) }]
            }], item: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], onClickItem: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keydown.enter']
            }, {
                type: HostListener,
                args: ['keydown.space']
            }] } });

class RdsBreadcrumbsComponent {
    constructor() {
        this.size = 'l';
        this.itemClick = new EventEmitter();
    }
    trackBy(index, item) {
        return item.title || item.text || index;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsBreadcrumbsComponent, isStandalone: true, selector: "rds-breadcrumbs", inputs: { size: "size", items: "items" }, outputs: { itemClick: "itemClick" }, ngImport: i0, template: "<div\n  class=\"rds-breadcrumbs rds-breadcrumbs-m\"\n  [class.rds-breadcrumbs-l]=\"size === 'l'\"\n>\n  @for (item of items; track trackBy($index, item); let last = $last) {\n    <div class=\"rds-breadcrumb-item\">\n      <rds-breadcrumb-item [item]=\"item\" (itemClick)=\"itemClick.emit(item)\" />\n      @if (!last) {\n        <rds-icon\n          class=\"rds-breadcrumb-separator\"\n          namespace=\"filled\"\n          icon=\"chevron_right\"\n        />\n      }\n    </div>\n  }\n</div>\n", styles: [".rds-breadcrumbs{flex-flow:row nowrap;align-items:center;display:flex}@media (min-width: 768px){.rds-breadcrumbs.rds-breadcrumbs-m{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-breadcrumbs.rds-breadcrumbs-m .rds-breadcrumb-separator{margin:0 8px}}@media (min-width: 1672px){.rds-breadcrumbs.rds-breadcrumbs-l{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-breadcrumbs.rds-breadcrumbs-l .rds-breadcrumb-separator{margin:0 12px}}@media (max-width: 767.999999px){.rds-breadcrumbs{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-breadcrumbs .rds-breadcrumb-separator{margin:0 4px}.rds-breadcrumbs .rds-breadcrumb-item:not(:first-child):not(:last-child){display:none}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child){display:flex}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child) rds-breadcrumb-item{display:none}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child) rds-icon{position:relative;margin-left:22px}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child) rds-icon:before{color:var(--rds-color-secondary-link);content:\"...\";position:absolute;width:18px;left:-20px;font-size:18px;top:-3px}}.rds-breadcrumbs .rds-breadcrumb-item{display:flex;align-items:center;flex-direction:row;border-radius:2px;border:0;color:var(--rds-color-secondary-link);cursor:pointer}.rds-breadcrumbs .rds-breadcrumb-item:hover{color:var(--rds-color-secondary-link-hover)}.rds-breadcrumbs .rds-breadcrumb-item:active{color:var(--rds-color-secondary-link-pressed)}.rds-breadcrumbs .rds-breadcrumb-item.cdk-focused.cdk-keyboard-focused{background-color:transparent;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px;box-shadow:0 0 0 2px transparent}.rds-breadcrumbs .rds-breadcrumb-separator{width:18px;height:18px;color:var(--rds-color-disabled);cursor:default}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsBreadcrumbItemComponent, selector: "rds-breadcrumb-item", inputs: ["tabIndex", "item"], outputs: ["itemClick"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-breadcrumbs', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [RdsIconComponent, RdsBreadcrumbItemComponent], template: "<div\n  class=\"rds-breadcrumbs rds-breadcrumbs-m\"\n  [class.rds-breadcrumbs-l]=\"size === 'l'\"\n>\n  @for (item of items; track trackBy($index, item); let last = $last) {\n    <div class=\"rds-breadcrumb-item\">\n      <rds-breadcrumb-item [item]=\"item\" (itemClick)=\"itemClick.emit(item)\" />\n      @if (!last) {\n        <rds-icon\n          class=\"rds-breadcrumb-separator\"\n          namespace=\"filled\"\n          icon=\"chevron_right\"\n        />\n      }\n    </div>\n  }\n</div>\n", styles: [".rds-breadcrumbs{flex-flow:row nowrap;align-items:center;display:flex}@media (min-width: 768px){.rds-breadcrumbs.rds-breadcrumbs-m{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-breadcrumbs.rds-breadcrumbs-m .rds-breadcrumb-separator{margin:0 8px}}@media (min-width: 1672px){.rds-breadcrumbs.rds-breadcrumbs-l{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-breadcrumbs.rds-breadcrumbs-l .rds-breadcrumb-separator{margin:0 12px}}@media (max-width: 767.999999px){.rds-breadcrumbs{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-breadcrumbs .rds-breadcrumb-separator{margin:0 4px}.rds-breadcrumbs .rds-breadcrumb-item:not(:first-child):not(:last-child){display:none}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child){display:flex}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child) rds-breadcrumb-item{display:none}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child) rds-icon{position:relative;margin-left:22px}.rds-breadcrumbs .rds-breadcrumb-item:nth-child(2):not(:last-child) rds-icon:before{color:var(--rds-color-secondary-link);content:\"...\";position:absolute;width:18px;left:-20px;font-size:18px;top:-3px}}.rds-breadcrumbs .rds-breadcrumb-item{display:flex;align-items:center;flex-direction:row;border-radius:2px;border:0;color:var(--rds-color-secondary-link);cursor:pointer}.rds-breadcrumbs .rds-breadcrumb-item:hover{color:var(--rds-color-secondary-link-hover)}.rds-breadcrumbs .rds-breadcrumb-item:active{color:var(--rds-color-secondary-link-pressed)}.rds-breadcrumbs .rds-breadcrumb-item.cdk-focused.cdk-keyboard-focused{background-color:transparent;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px;box-shadow:0 0 0 2px transparent}.rds-breadcrumbs .rds-breadcrumb-separator{width:18px;height:18px;color:var(--rds-color-disabled);cursor:default}\n"] }]
        }], propDecorators: { size: [{
                type: Input
            }], items: [{
                type: Input
            }], itemClick: [{
                type: Output
            }] } });

const RDS_BREADCRUMBS_DIRECTIVES = [
    RdsBreadcrumbsComponent,
    RdsBreadcrumbItemComponent,
];
class RdsBreadcrumbsModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbsModule, imports: [RdsBreadcrumbsComponent,
            RdsBreadcrumbItemComponent], exports: [RdsBreadcrumbsComponent,
            RdsBreadcrumbItemComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...RDS_BREADCRUMBS_DIRECTIVES],
                    exports: [...RDS_BREADCRUMBS_DIRECTIVES],
                }]
        }] });

/**
 * Content of a card, needed as it's used as a selector in the API.
 * @docs-private
 */
class RdsCardContentDirective {
    constructor() {
        this.class = 'rds-card-content';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardContentDirective, isStandalone: true, selector: "rds-card-content", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-card-content',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

/**
 * Component intended to be used within the `<rds-card>` component. It adds styles for a
 * preset header section (i.e. a title, subtitle, and avatar layout).
 * @docs-private
 */
class RdsCardHeaderComponent {
    constructor() {
        this.class = 'rds-card-header';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCardHeaderComponent, isStandalone: true, selector: "rds-card-header", inputs: { action: "action" }, host: { properties: { "class": "this.class" } }, ngImport: i0, template: "<div class=\"rds-card-header-overline\">\n  <ng-content\n    select=\"rds-card-overline, [rds-card-overline], [rdsCardOverline]\"\n  />\n</div>\n<div class=\"rds-card-header-title-container\">\n  <ng-content select=\"rds-card-title, [rds-card-title], [rdsCardTitle]\" />\n  <div class=\"rds-card-header-action\">\n    @if (!action) {\n      <rds-icon namespace=\"filled\" icon=\"arrow_right\" />\n    }\n    @if (action) {\n      <button rds-text-button>{{ action }}</button>\n    }\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: RdsTextButtonComponent, selector: "\n    button[rds-text-button],\n    button[rdsTextButton],\n    button[rds-text-warning-button],\n    button[rdsTextWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-card-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [RdsIconComponent, RdsButtonModule], template: "<div class=\"rds-card-header-overline\">\n  <ng-content\n    select=\"rds-card-overline, [rds-card-overline], [rdsCardOverline]\"\n  />\n</div>\n<div class=\"rds-card-header-title-container\">\n  <ng-content select=\"rds-card-title, [rds-card-title], [rdsCardTitle]\" />\n  <div class=\"rds-card-header-action\">\n    @if (!action) {\n      <rds-icon namespace=\"filled\" icon=\"arrow_right\" />\n    }\n    @if (action) {\n      <button rds-text-button>{{ action }}</button>\n    }\n  </div>\n</div>\n" }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], action: [{
                type: Input
            }] } });

/**
 * Image used in a card, needed to add the rds- CSS styling.
 * @docs-private
 */
class RdsCardImageDirective {
    constructor() {
        this.class = 'rds-card-image';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardImageDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardImageDirective, isStandalone: true, selector: "[rds-card-image], [rdsCardImage]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardImageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-card-image], [rdsCardImage]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsCardOverlineDirective {
    constructor() {
        this.class = 'rds-card-overline';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardOverlineDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardOverlineDirective, isStandalone: true, selector: "rds-card-overline, [rds-card-overline], [rdsCardOverline]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardOverlineDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-card-overline, [rds-card-overline], [rdsCardOverline]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

/**
 * Title of a card, needed as it's used as a selector in the API.
 * @docs-private
 */
class RdsCardTitleDirective {
    constructor() {
        this.class = 'rds-card-title';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardTitleDirective, isStandalone: true, selector: "rds-card-title, [rds-card-title], [rdsCardTitle]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `rds-card-title, [rds-card-title], [rdsCardTitle]`,
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

let nextUniqueId$4 = 0;
class RdsCardComponent {
    get class() {
        return 'rds-card rds-focus-indicator rds-card-default';
    }
    get inputId() {
        return `${this.id || this._uniqueId}`;
    }
    constructor(tabIndex) {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this.contentObserver = inject(ContentObserver);
        this._uniqueId = `rds-card-${++nextUniqueId$4}`;
        this.tabIndex = TAB_INDEX_DEFAULT;
        this.id = this._uniqueId;
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, false);
    }
    ngAfterContentInit() {
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    onFocus() {
        this.elementRef.nativeElement.focus();
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCardComponent, isStandalone: true, selector: "rds-card", inputs: { tabIndex: ["tabIndex", "tabIndex", (v) => numberAttribute(v, TAB_INDEX_DEFAULT)], id: "id" }, host: { listeners: { "focus": "onFocus()" }, properties: { "class": "this.class", "tabIndex": "this.tabIndex", "attr.id": "this.inputId" } }, queries: [{ propertyName: "image", first: true, predicate: RdsCardImageDirective, descendants: true }], exportAs: ["rdsCard"], ngImport: i0, template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  <div [class.rds-card-image-container]=\"image\">\n    <ng-content select=\"[rds-card-image], [rdsCardImage]\" />\n    @if (image) {\n      <div class=\"rds-card-image-divider\"></div>\n    }\n  </div>\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n</div>\n@if (!image) {\n  <div class=\"rds-card-bottom-divider\"></div>\n}\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, exportAs: 'rdsCard', imports: [], template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  <div [class.rds-card-image-container]=\"image\">\n    <ng-content select=\"[rds-card-image], [rdsCardImage]\" />\n    @if (image) {\n      <div class=\"rds-card-image-divider\"></div>\n    }\n  </div>\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n</div>\n@if (!image) {\n  <div class=\"rds-card-bottom-divider\"></div>\n}\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { image: [{
                type: ContentChild,
                args: [RdsCardImageDirective]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input,
                args: [{ transform: (v) => numberAttribute(v, TAB_INDEX_DEFAULT) }]
            }], inputId: [{
                type: HostBinding,
                args: ['attr.id']
            }], id: [{
                type: Input
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }] } });

class RdsCardBottomTextDirective {
    constructor() {
        this.class = 'rds-card-bottom-text';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardBottomTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardBottomTextDirective, isStandalone: true, selector: "rds-card-bottom-text, [rds-card-bottom-text], [rdsCardBottomText]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardBottomTextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-card-bottom-text, [rds-card-bottom-text], [rdsCardBottomText]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsCardLabelDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.class = 'rds-card-label';
        this.color = 'blue';
    }
    getTextContent() {
        return this.nativeElement.innerText;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardLabelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardLabelDirective, isStandalone: true, selector: "rds-card-label, [rds-card-label], [rdsCardLabel]", inputs: { color: "color" }, host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-card-label, [rds-card-label], [rdsCardLabel]',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], color: [{
                type: Input
            }] } });

class RdsCardSelectableDirective {
    constructor() {
        this.class = 'rds-card-selectable';
        this.isSelected = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardSelectableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsCardSelectableDirective, isStandalone: true, selector: "rds-card-selectable, [rds-card-selectable], [rdsCardSelectable]", inputs: { isSelected: ["isSelected", "isSelected", booleanAttribute] }, host: { properties: { "class": "this.class", "class.rds-card-selected": "this.isSelected", "attr.aria-checked": "this.isSelected" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardSelectableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `rds-card-selectable, [rds-card-selectable], [rdsCardSelectable]`,
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], isSelected: [{
                type: HostBinding,
                args: ['class.rds-card-selected']
            }, {
                type: HostBinding,
                args: ['attr.aria-checked']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsDashboardCardComponent extends RdsCardComponent {
    constructor() {
        super(...arguments);
        this.color = 'default';
    }
    set label(value) {
        if (value !== this._label) {
            this._label = value;
            // we need additional change detection to handle cases where
            // user has *ngIf on the <rds-card-label>
            this.cdr.markForCheck();
        }
    }
    get label() {
        return this._label;
    }
    get class() {
        return `rds-card rds-dashboard-card rds-dashboard-card-${this.color}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDashboardCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDashboardCardComponent, isStandalone: true, selector: "rds-dashboard-card", inputs: { color: "color" }, queries: [{ propertyName: "label", first: true, predicate: RdsCardLabelDirective, descendants: true }], exportAs: ["rdsDashboardCard"], usesInheritance: true, hostDirectives: [{ directive: RdsCardSelectableDirective, inputs: ["isSelected", "isSelected"] }], ngImport: i0, template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  @if (label) {\n    <rds-badge\n      [label]=\"label.getTextContent()\"\n      [color]=\"label.color\"\n      type=\"minimal\"\n      size=\"s\"\n    />\n  }\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <ng-content select=\"rds-card-extra-content\" />\n  <div class=\"rds-card-bottom-row\">\n    <ng-content select=\"button[rds-text-button], button[rdsTextButton]\" />\n    <ng-content select=\"button[rds-text-button], button[rdsTextButton]\" />\n    <ng-content select=\"button[rds-text-button], button[rdsTextButton]\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-dashboard-card.rds-card.rds-dashboard-card{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;background:var(--rds-color-bg-base-box);padding:24px;outline:none}rds-dashboard-card.rds-card.rds-dashboard-card:hover{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026}rds-dashboard-card.rds-card.rds-dashboard-card-default{border-left:4px solid var(--rds-color-informative)}rds-dashboard-card.rds-card.rds-dashboard-card-neutral{border-left:4px solid var(--rds-color-badge-neutral-bg)}rds-dashboard-card.rds-card.rds-dashboard-card-green{border-left:4px solid var(--rds-color-success)}rds-dashboard-card.rds-card.rds-dashboard-card-yellow{border-left:4px solid var(--rds-color-warning)}rds-dashboard-card.rds-card.rds-dashboard-card-red{border-left:4px solid var(--rds-color-error)}rds-dashboard-card.rds-card.rds-dashboard-card-orange{border-left:4px solid var(--rds-color-300-dark-orange)}rds-dashboard-card.rds-card.rds-dashboard-card-purple{border-left:4px solid var(--rds-color-300-dark-purple)}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card__overlay{left:-12px}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card-bottom-row{margin-top:16px;padding-top:16px;border-top:1px solid var(--rds-color-stroke-enabled);text-align:right}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card-bottom-row:empty{display:none}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card-bottom-row button{margin:0 0 0 16px}rds-dashboard-card.rds-card.rds-dashboard-card.rds-card-selected{background:var(--rds-color-bg-informative-hover-select);outline:2px solid var(--rds-color-informative)}\n"], dependencies: [{ kind: "component", type: RdsBadgeComponent, selector: "rds-badge", inputs: ["size", "label", "color", "type", "ariaDescribedBy"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDashboardCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-dashboard-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'rdsDashboardCard', standalone: true, hostDirectives: [
                        {
                            directive: RdsCardSelectableDirective,
                            inputs: ['isSelected'],
                        },
                    ], imports: [RdsBadgeComponent], template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  @if (label) {\n    <rds-badge\n      [label]=\"label.getTextContent()\"\n      [color]=\"label.color\"\n      type=\"minimal\"\n      size=\"s\"\n    />\n  }\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <ng-content select=\"rds-card-extra-content\" />\n  <div class=\"rds-card-bottom-row\">\n    <ng-content select=\"button[rds-text-button], button[rdsTextButton]\" />\n    <ng-content select=\"button[rds-text-button], button[rdsTextButton]\" />\n    <ng-content select=\"button[rds-text-button], button[rdsTextButton]\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-dashboard-card.rds-card.rds-dashboard-card{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;background:var(--rds-color-bg-base-box);padding:24px;outline:none}rds-dashboard-card.rds-card.rds-dashboard-card:hover{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026}rds-dashboard-card.rds-card.rds-dashboard-card-default{border-left:4px solid var(--rds-color-informative)}rds-dashboard-card.rds-card.rds-dashboard-card-neutral{border-left:4px solid var(--rds-color-badge-neutral-bg)}rds-dashboard-card.rds-card.rds-dashboard-card-green{border-left:4px solid var(--rds-color-success)}rds-dashboard-card.rds-card.rds-dashboard-card-yellow{border-left:4px solid var(--rds-color-warning)}rds-dashboard-card.rds-card.rds-dashboard-card-red{border-left:4px solid var(--rds-color-error)}rds-dashboard-card.rds-card.rds-dashboard-card-orange{border-left:4px solid var(--rds-color-300-dark-orange)}rds-dashboard-card.rds-card.rds-dashboard-card-purple{border-left:4px solid var(--rds-color-300-dark-purple)}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card__overlay{left:-12px}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card-bottom-row{margin-top:16px;padding-top:16px;border-top:1px solid var(--rds-color-stroke-enabled);text-align:right}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card-bottom-row:empty{display:none}rds-dashboard-card.rds-card.rds-dashboard-card .rds-card-bottom-row button{margin:0 0 0 16px}rds-dashboard-card.rds-card.rds-dashboard-card.rds-card-selected{background:var(--rds-color-bg-informative-hover-select);outline:2px solid var(--rds-color-informative)}\n"] }]
        }], propDecorators: { label: [{
                type: ContentChild,
                args: [RdsCardLabelDirective]
            }], color: [{
                type: Input
            }] } });

class RdsBasicCardComponent extends RdsCardComponent {
    constructor() {
        super(...arguments);
        this.layout = 'vertical';
    }
    set label(value) {
        if (value !== this._label) {
            this._label = value;
            // we need additional change detection to handle cases where
            // user has *ngIf on the <rds-card-label>
            this.cdr.markForCheck();
        }
    }
    get label() {
        return this._label;
    }
    get class() {
        return `rds-card rds-basic-card rds-card-layout-${this.layout}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBasicCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsBasicCardComponent, isStandalone: true, selector: "rds-basic-card", inputs: { layout: "layout" }, queries: [{ propertyName: "label", first: true, predicate: RdsCardLabelDirective, descendants: true }], exportAs: ["rdsBasicCard"], usesInheritance: true, hostDirectives: [{ directive: RdsCardSelectableDirective, inputs: ["isSelected", "isSelected"] }], ngImport: i0, template: "<div class=\"rds-card__overlay\"></div>\n<ng-content select=\"rds-icon\" />\n<div class=\"rds-card-content-container\">\n  @if (label) {\n    <rds-badge\n      [label]=\"label.getTextContent()\"\n      [color]=\"label.color\"\n      type=\"minimal\"\n      size=\"s\"\n    />\n  }\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <ng-content select=\"rds-card-extra-content\" />\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-basic-card.rds-card.rds-basic-card{background:var(--rds-color-bg-base-box);border:1px solid var(--rds-color-grey-1);padding:24px;outline:none}rds-basic-card.rds-card.rds-basic-card:hover{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}rds-basic-card.rds-card.rds-basic-card .rds-icon{height:64px;width:64px;flex-shrink:0}rds-basic-card.rds-card.rds-basic-card .rds-card-content-container{flex-grow:1}rds-basic-card.rds-card.rds-basic-card.rds-card-selected{background:var(--rds-color-bg-informative-hover-select);outline:1px solid var(--rds-color-informative);border-color:var(--rds-color-informative)}\n"], dependencies: [{ kind: "component", type: RdsBadgeComponent, selector: "rds-badge", inputs: ["size", "label", "color", "type", "ariaDescribedBy"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBasicCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-basic-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'rdsBasicCard', standalone: true, hostDirectives: [
                        {
                            directive: RdsCardSelectableDirective,
                            inputs: ['isSelected'],
                        },
                    ], imports: [RdsBadgeComponent], template: "<div class=\"rds-card__overlay\"></div>\n<ng-content select=\"rds-icon\" />\n<div class=\"rds-card-content-container\">\n  @if (label) {\n    <rds-badge\n      [label]=\"label.getTextContent()\"\n      [color]=\"label.color\"\n      type=\"minimal\"\n      size=\"s\"\n    />\n  }\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <ng-content select=\"rds-card-extra-content\" />\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-basic-card.rds-card.rds-basic-card{background:var(--rds-color-bg-base-box);border:1px solid var(--rds-color-grey-1);padding:24px;outline:none}rds-basic-card.rds-card.rds-basic-card:hover{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}rds-basic-card.rds-card.rds-basic-card .rds-icon{height:64px;width:64px;flex-shrink:0}rds-basic-card.rds-card.rds-basic-card .rds-card-content-container{flex-grow:1}rds-basic-card.rds-card.rds-basic-card.rds-card-selected{background:var(--rds-color-bg-informative-hover-select);outline:1px solid var(--rds-color-informative);border-color:var(--rds-color-informative)}\n"] }]
        }], propDecorators: { label: [{
                type: ContentChild,
                args: [RdsCardLabelDirective]
            }], layout: [{
                type: Input
            }] } });

class RdsVisualCardComponent extends RdsCardComponent {
    constructor() {
        super(...arguments);
        this.layout = 'vertical';
    }
    set label(value) {
        if (value !== this._label) {
            this._label = value;
            // we need additional change detection to handle cases where
            // user has *ngIf on the <rds-card-label>
            this.cdr.markForCheck();
        }
    }
    get label() {
        return this._label;
    }
    get class() {
        return `rds-card rds-visual-card rds-card-layout-${this.layout}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsVisualCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsVisualCardComponent, isStandalone: true, selector: "rds-visual-card", inputs: { layout: "layout" }, queries: [{ propertyName: "label", first: true, predicate: RdsCardLabelDirective, descendants: true }], exportAs: ["rdsVisualCard"], usesInheritance: true, hostDirectives: [{ directive: RdsCardSelectableDirective, inputs: ["isSelected", "isSelected"] }], ngImport: i0, template: "<div class=\"rds-card__overlay\"></div>\n<div [class.rds-card-image-container]=\"image\">\n  <ng-content select=\"[rds-card-image], [rdsCardImage]\" />\n</div>\n<div class=\"rds-card-content-container\">\n  @if (label) {\n    <rds-badge\n      [label]=\"label.getTextContent()\"\n      [color]=\"label.color\"\n      type=\"minimal\"\n      size=\"s\"\n    />\n  }\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <div class=\"rds-card-bottom-row\">\n    <ng-content select=\"[rds-secondary-button]\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-visual-card.rds-card.rds-visual-card{--rds-card-layout-gap: 0px;background:var(--rds-color-bg-base-box);border:1px solid var(--rds-color-grey-1);outline:none}rds-visual-card.rds-card.rds-visual-card:hover{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}rds-visual-card.rds-card.rds-visual-card .rds-card-bottom-row{margin-top:16px}rds-visual-card.rds-card.rds-visual-card .rds-card-bottom-row:empty{display:none}rds-visual-card.rds-card.rds-visual-card .rds-card-header:first-child{margin-top:0}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal .rds-card-content-container,rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed .rds-card-content-container{display:flex;justify-content:center;flex-direction:column;aspect-ratio:5/4}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal .rds-card-content,rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed .rds-card-content{margin-bottom:16px}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal .rds-card-bottom-row,rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed .rds-card-bottom-row{margin-top:auto}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal:has(button),rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed:has(button){justify-content:flex-start}rds-visual-card.rds-card.rds-visual-card .rds-card-image-container{margin-bottom:0;flex:1 0 calc(50% - var(--rds-card-layout-gap))}rds-visual-card.rds-card.rds-visual-card .rds-card-image-container .rds-card-image{aspect-ratio:5/4}rds-visual-card.rds-card.rds-visual-card .rds-card-content-container{flex:1 0 calc(50% - var(--rds-card-layout-gap));padding:24px;box-sizing:border-box}rds-visual-card.rds-card.rds-visual-card.rds-card-selected{background:var(--rds-color-bg-informative-hover-select);outline:1px solid var(--rds-color-informative);border-color:var(--rds-color-informative)}\n"], dependencies: [{ kind: "component", type: RdsBadgeComponent, selector: "rds-badge", inputs: ["size", "label", "color", "type", "ariaDescribedBy"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsVisualCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-visual-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'rdsVisualCard', standalone: true, hostDirectives: [
                        {
                            directive: RdsCardSelectableDirective,
                            inputs: ['isSelected'],
                        },
                    ], imports: [RdsBadgeComponent], template: "<div class=\"rds-card__overlay\"></div>\n<div [class.rds-card-image-container]=\"image\">\n  <ng-content select=\"[rds-card-image], [rdsCardImage]\" />\n</div>\n<div class=\"rds-card-content-container\">\n  @if (label) {\n    <rds-badge\n      [label]=\"label.getTextContent()\"\n      [color]=\"label.color\"\n      type=\"minimal\"\n      size=\"s\"\n    />\n  }\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <div class=\"rds-card-bottom-row\">\n    <ng-content select=\"[rds-secondary-button]\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-visual-card.rds-card.rds-visual-card{--rds-card-layout-gap: 0px;background:var(--rds-color-bg-base-box);border:1px solid var(--rds-color-grey-1);outline:none}rds-visual-card.rds-card.rds-visual-card:hover{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}rds-visual-card.rds-card.rds-visual-card .rds-card-bottom-row{margin-top:16px}rds-visual-card.rds-card.rds-visual-card .rds-card-bottom-row:empty{display:none}rds-visual-card.rds-card.rds-visual-card .rds-card-header:first-child{margin-top:0}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal .rds-card-content-container,rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed .rds-card-content-container{display:flex;justify-content:center;flex-direction:column;aspect-ratio:5/4}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal .rds-card-content,rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed .rds-card-content{margin-bottom:16px}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal .rds-card-bottom-row,rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed .rds-card-bottom-row{margin-top:auto}rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal:has(button),rds-visual-card.rds-card.rds-visual-card.rds-card-layout-horizontal-reversed:has(button){justify-content:flex-start}rds-visual-card.rds-card.rds-visual-card .rds-card-image-container{margin-bottom:0;flex:1 0 calc(50% - var(--rds-card-layout-gap))}rds-visual-card.rds-card.rds-visual-card .rds-card-image-container .rds-card-image{aspect-ratio:5/4}rds-visual-card.rds-card.rds-visual-card .rds-card-content-container{flex:1 0 calc(50% - var(--rds-card-layout-gap));padding:24px;box-sizing:border-box}rds-visual-card.rds-card.rds-visual-card.rds-card-selected{background:var(--rds-color-bg-informative-hover-select);outline:1px solid var(--rds-color-informative);border-color:var(--rds-color-informative)}\n"] }]
        }], propDecorators: { label: [{
                type: ContentChild,
                args: [RdsCardLabelDirective]
            }], layout: [{
                type: Input
            }] } });

class RdsStoryTeaserCardComponent extends RdsCardComponent {
    get class() {
        return `rds-card rds-story-teaser-card`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStoryTeaserCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsStoryTeaserCardComponent, isStandalone: true, selector: "rds-story-teaser-card", exportAs: ["rdsStoryTeaserCard"], usesInheritance: true, ngImport: i0, template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  <div [class.rds-card-image-container]=\"image\">\n    <ng-content select=\"[rds-card-image], [rdsCardImage]\" />\n  </div>\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <div class=\"rds-card-bottom-text-container\">\n    <ng-content select=\"rds-card-bottom-text\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-story-teaser-card.rds-card.rds-story-teaser-card{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;background:var(--rds-color-bg-base-box)}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-image-container .rds-card-image{aspect-ratio:4/3;transform:none;transition:opacity .3s}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-header-title-container .rds-card-header-action{display:none}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-content-container{padding-bottom:0}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-content{position:absolute;padding-inline:16px;opacity:0;transform:translateY(0);transition-property:opacity,transform;transition-duration:.1s,.2s;transition-timing-function:cubic-bezier(.65,0,.35,1),cubic-bezier(.33,1,.68,1)}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-header .rds-card-title,rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-content{display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;height:3lh;word-break:break-word}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-title,rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-bottom-text{padding-inline:16px}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-bottom-text-container{isolation:isolate;padding-block:16px 32px;background:var(--rds-color-bg-base-box)}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-bottom-text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden;height:1lh;word-break:break-word}rds-story-teaser-card.rds-card.rds-story-teaser-card:hover .rds-card-image{opacity:0;transition-duration:.1s}rds-story-teaser-card.rds-card.rds-story-teaser-card:hover .rds-card-content{opacity:1;transform:translateY(-48cqw);transition-duration:.2s,.3s}rds-story-teaser-card.rds-card.rds-story-teaser-card:hover .rds-card-title{transform:translateY(-48cqw);transition-duration:.3s}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStoryTeaserCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-story-teaser-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, exportAs: 'rdsStoryTeaserCard', template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  <div [class.rds-card-image-container]=\"image\">\n    <ng-content select=\"[rds-card-image], [rdsCardImage]\" />\n  </div>\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <div class=\"rds-card-bottom-text-container\">\n    <ng-content select=\"rds-card-bottom-text\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-story-teaser-card.rds-card.rds-story-teaser-card{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;background:var(--rds-color-bg-base-box)}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-image-container .rds-card-image{aspect-ratio:4/3;transform:none;transition:opacity .3s}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-header-title-container .rds-card-header-action{display:none}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-content-container{padding-bottom:0}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-content{position:absolute;padding-inline:16px;opacity:0;transform:translateY(0);transition-property:opacity,transform;transition-duration:.1s,.2s;transition-timing-function:cubic-bezier(.65,0,.35,1),cubic-bezier(.33,1,.68,1)}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-header .rds-card-title,rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-content{display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical;overflow:hidden;height:3lh;word-break:break-word}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-title,rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-bottom-text{padding-inline:16px}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-bottom-text-container{isolation:isolate;padding-block:16px 32px;background:var(--rds-color-bg-base-box)}rds-story-teaser-card.rds-card.rds-story-teaser-card .rds-card-bottom-text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:-webkit-box;-webkit-line-clamp:1;-webkit-box-orient:vertical;overflow:hidden;height:1lh;word-break:break-word}rds-story-teaser-card.rds-card.rds-story-teaser-card:hover .rds-card-image{opacity:0;transition-duration:.1s}rds-story-teaser-card.rds-card.rds-story-teaser-card:hover .rds-card-content{opacity:1;transform:translateY(-48cqw);transition-duration:.2s,.3s}rds-story-teaser-card.rds-card.rds-story-teaser-card:hover .rds-card-title{transform:translateY(-48cqw);transition-duration:.3s}\n"] }]
        }] });

class RdsTeaserCardComponent extends RdsCardComponent {
    get class() {
        return `rds-card rds-card-teaser-card`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTeaserCardComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTeaserCardComponent, isStandalone: true, selector: "rds-teaser-card", exportAs: ["rdsTeaserCard"], usesInheritance: true, ngImport: i0, template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <div class=\"rds-card-bottom-row\">\n    <ng-content select=\"button\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-teaser-card.rds-card.rds-card-teaser-card{border:1px solid var(--rds-color-chips-1-stroke-enabled);background:var(--rds-color-bg-base-box)}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-header-title-container .rds-card-header-action{display:none}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content-container{padding:32px}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{margin-top:12px}@media (max-width: 767.999999px) and (max-width: 767.999999px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:16px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 768px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:16px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 1024px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:16px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 1440px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:18px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 1672px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:18px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row{display:flex;flex-wrap:wrap;align-items:center;gap:16px}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row button{flex-shrink:0;width:100%}@media (min-width: 768px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row button{width:auto}}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row:not(:empty){margin-top:48px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTeaserCardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-teaser-card', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, exportAs: 'rdsTeaserCard', template: "<div class=\"rds-card__overlay\"></div>\n<div class=\"rds-card-content-container\">\n  <ng-content select=\"rds-card-header\" />\n  <ng-content select=\"rds-card-content\" />\n  <div class=\"rds-card-bottom-row\">\n    <ng-content select=\"button\" />\n  </div>\n</div>\n", styles: [".rds-card{position:relative;display:block;background-color:transparent;cursor:pointer;isolation:isolate;container:card/inline-size}.rds-card .rds-card-image-container{display:flex;flex-direction:column;margin-bottom:24px;overflow:hidden}.rds-card .rds-card-image-container .rds-card-image{transform:scale(1);transition:transform .6s cubic-bezier(.33,1,.68,1);object-fit:cover;width:100%;aspect-ratio:16/9}.rds-card .rds-card-bottom-divider,.rds-card .rds-card-image-divider{position:relative;display:block;width:100%;border-bottom:var(--rds-card-divider)}.rds-card .rds-card-bottom-divider:after,.rds-card .rds-card-image-divider:after{content:\"\";position:absolute;left:0;display:block;opacity:0;transform:scaleX(0);transform-origin:left center;transition:transform .4s cubic-bezier(.33,1,.68,1) 0s,opacity .2s cubic-bezier(.65,0,.35,1);border-bottom:var(--rds-card-divider-active)}.rds-card .rds-card-image-divider{--rds-card-divider: 2px solid var(--rds-color-grey-2);--rds-card-divider-active: 2px solid var(--rds-color-informative)}@container card (min-width: 289px){.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card .rds-card-header .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-header-overline{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card .rds-card-header .rds-card-header-overline:not(:empty){margin-bottom:4px}.rds-card .rds-card-header .rds-card-header-title-container{display:flex;justify-content:space-between;align-items:center}.rds-card .rds-card-header .rds-card-title{display:block}@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@container card (min-width: 591px){@media (max-width: 767.999999px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-header .rds-card-title{font-size:24px;font-weight:400;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-header .rds-card-title{font-size:30px;font-weight:400;line-height:40px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}}.rds-card .rds-card-header .rds-card-header-action{display:flex;margin:0 20px 0 24px;color:var(--rds-color-informative)}.rds-card .rds-card-bottom-divider{--rds-card-divider: 2px solid var(--rds-color-bg-solid-pressed);--rds-card-divider-active: 2px solid var(--rds-color-informative)}.rds-card .rds-card-content-container{padding-bottom:32px}.rds-card .rds-card-content{display:block;margin-top:8px;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-card .rds-card-content{font-size:18px;font-weight:200;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-card .rds-card-content{font-size:20px;font-weight:200;line-height:32px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-card-header+.rds-card .rds-card-content{margin-top:0}.rds-card .rds-card-extra-content{display:block;margin-top:8px}.rds-card .rds-card__overlay{position:absolute;inset:-8px;border-radius:4px;z-index:-1}.rds-card:focus-visible .rds-card__overlay,.rds-card.cdk-keyboard-focused .rds-card__overlay{outline:2px solid var(--rds-color-stroke-active-focus)}@media (max-width: 767.999999px){.rds-card .rds-card-header-overline{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card .rds-card-image-divider{--rds-card-divider: 4px solid var(--rds-color-grey-2);--rds-card-divider-active: 4px solid var(--rds-color-informative)}}.rds-card.rds-card-default:hover .rds-card-title{transition:color .2s cubic-bezier(.33,1,.68,1);color:var(--rds-color-informative)}.rds-card.rds-card-default:hover .rds-card-image-divider:after,.rds-card.rds-card-default:hover .rds-card-bottom-divider:after{content:\"\";position:absolute;display:block;opacity:1;transform:scaleX(1);width:100%}.rds-card.rds-card-default:hover .rds-card-image{transform:scale(1.1)}.rds-card.rds-visual-card .rds-card-content-container,.rds-card.rds-basic-card .rds-card-content-container,.rds-card.rds-dashboard-card .rds-card-content-container{padding-bottom:0}.rds-card.rds-visual-card .rds-card-content,.rds-card.rds-basic-card .rds-card-content,.rds-card.rds-dashboard-card .rds-card-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-card.rds-visual-card .rds-card-header,.rds-card.rds-basic-card .rds-card-header,.rds-card.rds-dashboard-card .rds-card-header{display:block}.rds-card.rds-visual-card .rds-card-header:not(:first-child),.rds-card.rds-basic-card .rds-card-header:not(:first-child),.rds-card.rds-dashboard-card .rds-card-header:not(:first-child){margin-top:8px}.rds-card.rds-visual-card .rds-card-header .rds-card-title,.rds-card.rds-basic-card .rds-card-header .rds-card-title,.rds-card.rds-dashboard-card .rds-card-header .rds-card-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-overline,.rds-card.rds-basic-card .rds-card-header .rds-card-header-overline,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-overline{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-card.rds-visual-card .rds-card-header .rds-card-header-action,.rds-card.rds-basic-card .rds-card-header .rds-card-header-action,.rds-card.rds-dashboard-card .rds-card-header .rds-card-header-action{display:none}.rds-card.rds-card-layout-vertical,.rds-card.rds-card-layout-vertical-reversed,.rds-card.rds-card-layout-horizontal,.rds-card.rds-card-layout-horizontal-reversed{--rds-card-layout-gap: 24px;display:flex;gap:var(--rds-card-layout-gap)}.rds-card.rds-card-layout-vertical{flex-direction:column}.rds-card.rds-card-layout-vertical-reversed{flex-direction:column-reverse}.rds-card.rds-card-layout-horizontal{align-items:center}.rds-card.rds-card-layout-horizontal-reversed{flex-direction:row-reverse;align-items:center}rds-teaser-card.rds-card.rds-card-teaser-card{border:1px solid var(--rds-color-chips-1-stroke-enabled);background:var(--rds-color-bg-base-box)}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-header-title-container .rds-card-header-action{display:none}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content-container{padding:32px}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{margin-top:12px}@media (max-width: 767.999999px) and (max-width: 767.999999px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:16px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 768px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:16px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 1024px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:16px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 1440px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:18px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px) and (min-width: 1672px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-content{font-size:18px;font-weight:300;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row{display:flex;flex-wrap:wrap;align-items:center;gap:16px}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row button{flex-shrink:0;width:100%}@media (min-width: 768px){rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row button{width:auto}}rds-teaser-card.rds-card.rds-card-teaser-card .rds-card-bottom-row:not(:empty){margin-top:48px}\n"] }]
        }] });

class RdsCardExtraContentDirective {
    constructor() {
        this.class = 'rds-card-extra-content';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardExtraContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCardExtraContentDirective, isStandalone: true, selector: "rds-card-extra-content", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardExtraContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-card-extra-content',
                    standalone: true,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const ELEMENTS$9 = [
    RdsBasicCardComponent,
    RdsDashboardCardComponent,
    RdsStoryTeaserCardComponent,
    RdsTeaserCardComponent,
    RdsVisualCardComponent,
    RdsCardComponent,
    RdsCardBottomTextDirective,
    RdsCardContentDirective,
    RdsCardHeaderComponent,
    RdsCardImageDirective,
    RdsCardLabelDirective,
    RdsCardOverlineDirective,
    RdsCardSelectableDirective,
    RdsCardTitleDirective,
    RdsCardExtraContentDirective,
];
class RdsCardModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsCardModule, imports: [RdsBasicCardComponent,
            RdsDashboardCardComponent,
            RdsStoryTeaserCardComponent,
            RdsTeaserCardComponent,
            RdsVisualCardComponent,
            RdsCardComponent,
            RdsCardBottomTextDirective,
            RdsCardContentDirective,
            RdsCardHeaderComponent,
            RdsCardImageDirective,
            RdsCardLabelDirective,
            RdsCardOverlineDirective,
            RdsCardSelectableDirective,
            RdsCardTitleDirective,
            RdsCardExtraContentDirective], exports: [RdsBasicCardComponent,
            RdsDashboardCardComponent,
            RdsStoryTeaserCardComponent,
            RdsTeaserCardComponent,
            RdsVisualCardComponent,
            RdsCardComponent,
            RdsCardBottomTextDirective,
            RdsCardContentDirective,
            RdsCardHeaderComponent,
            RdsCardImageDirective,
            RdsCardLabelDirective,
            RdsCardOverlineDirective,
            RdsCardSelectableDirective,
            RdsCardTitleDirective,
            RdsCardExtraContentDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardModule, imports: [RdsCardHeaderComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...ELEMENTS$9],
                    exports: [...ELEMENTS$9],
                }]
        }] });

class RdsCarouselItemDirective {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.class = true;
        this._shown = false;
    }
    _hide() {
        if (this._shown) {
            this._shown = false;
            this.cdr.markForCheck();
        }
    }
    _show() {
        if (!this._shown) {
            this._shown = true;
            this.cdr.markForCheck();
        }
    }
    isShown() {
        return this._shown;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCarouselItemDirective, selector: "rds-carousel-item", host: { properties: { "class.rds-carousel__item": "this.class", "class.rds-carousel__item--visible": "this._shown" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-carousel-item',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class.rds-carousel__item']
            }], _shown: [{
                type: HostBinding,
                args: ['class.rds-carousel__item--visible']
            }] } });

const INITIAL_AUTOPLAY_DELAY = 2000;
class RdsCarouselComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.indexOfActiveCarouselItem = 0;
        this.hostClass = 'rds-carousel';
        this.autoplay = false;
        this.autoplayDelay = INITIAL_AUTOPLAY_DELAY;
        this.showButtons = false;
        this.destroyTimeout$ = new Subject();
    }
    get indexOfLastElement() {
        return this.carouselItems.length - 1;
    }
    ngAfterContentInit() {
        this.selectActiveItem();
        this.carouselItems.changes
            .pipe(delay(0), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.selectActiveItem());
    }
    ngOnChanges(changes) {
        if (changes['autoplay'] || changes['autoplayDelay']) {
            this.defineAutoplayInterval();
        }
    }
    ngOnDestroy() {
        this.destroyTimeout$.next();
        this.destroyTimeout$.complete();
    }
    prev() {
        this.hideCurrentVisibleCarouselItem();
        let indexOfNewCarouselItemToShow = this.indexOfActiveCarouselItem - 1;
        if (this.indexOfActiveCarouselItem === 0) {
            indexOfNewCarouselItemToShow = this.indexOfLastElement;
        }
        this.indexOfActiveCarouselItem = indexOfNewCarouselItemToShow;
        this.showCarouselItemMatchedWithIndexOfActive();
        this.defineAutoplayInterval();
    }
    next() {
        this.hideCurrentVisibleCarouselItem();
        let indexOfNewCarouselItemToShow = this.indexOfActiveCarouselItem + 1;
        if (this.indexOfActiveCarouselItem === this.indexOfLastElement) {
            indexOfNewCarouselItemToShow = 0;
        }
        this.indexOfActiveCarouselItem = indexOfNewCarouselItemToShow;
        this.showCarouselItemMatchedWithIndexOfActive();
        this.defineAutoplayInterval();
    }
    _changeActive({ index }) {
        this.hideCurrentVisibleCarouselItem();
        this.indexOfActiveCarouselItem = index;
        this.showCarouselItemMatchedWithIndexOfActive();
    }
    _isMobile() {
        return BreakpointUtil.isMobile();
    }
    defineAutoplayInterval() {
        this.destroyTimeout$.next();
        if (this.autoplay) {
            interval(this.autoplayDelay)
                .pipe(tap(() => this.next()), takeUntil(this.destroyTimeout$), takeUntilDestroyed(this.destroyRef))
                .subscribe();
        }
    }
    showCarouselItemMatchedWithIndexOfActive() {
        const carouselItemToShow = this.carouselItems.get(this.indexOfActiveCarouselItem);
        if (carouselItemToShow) {
            carouselItemToShow._show();
            timer(0)
                .pipe(tap(() => this.cdr.markForCheck()))
                .subscribe();
        }
    }
    hideCurrentVisibleCarouselItem() {
        const carouselItemToHide = this.carouselItems.get(this.indexOfActiveCarouselItem);
        if (carouselItemToHide) {
            carouselItemToHide._hide();
        }
    }
    selectActiveItem() {
        this.indexOfActiveCarouselItem = Math.max(this.carouselItems.toArray().findIndex((item) => item.isShown()), 0);
        this.carouselItems.forEach((item, index) => {
            if (index !== this.indexOfActiveCarouselItem && item.isShown()) {
                item._hide();
            }
        });
        this.showCarouselItemMatchedWithIndexOfActive();
        this.defineAutoplayInterval();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCarouselComponent, selector: "rds-carousel", inputs: { autoplay: ["autoplay", "autoplay", booleanAttribute], autoplayDelay: ["autoplayDelay", "autoplayDelay", (v) => numberAttribute(v, INITIAL_AUTOPLAY_DELAY)], showButtons: ["showButtons", "showButtons", booleanAttribute] }, host: { properties: { "class": "this.hostClass" } }, queries: [{ propertyName: "carouselItems", predicate: RdsCarouselItemDirective }], exportAs: ["rdsCarousel"], usesOnChanges: true, ngImport: i0, template: `
    <div class="rds-carousel__carousel-items">
      <ng-content />
    </div>
    <div class="rds-carousel__carousel-pagination">
      @if (showButtons) {
        <div
          class="rds-carousel__carousel-navigation-button-wrapper rds-carousel__carousel-navigation-button-wrapper--left"
        >
          <button
            rds-icon-button
            (click)="prev()"
            [size]="_isMobile() ? 's' : 'm'"
          >
            <rds-icon namespace="filled" icon="chevron_left" />
          </button>
        </div>
      }
      <div class="rds-carousel__carousel-pagination--text">
        {{ indexOfActiveCarouselItem + 1 }}/{{ carouselItems.length || 0 }}
      </div>
      @if (showButtons) {
        <div
          class="rds-carousel__carousel-navigation-button-wrapper rds-carousel__carousel-navigation-button-wrapper--right"
        >
          <button
            rds-icon-button
            (click)="next()"
            [size]="_isMobile() ? 's' : 'm'"
          >
            <rds-icon namespace="filled" icon="chevron_right" />
          </button>
        </div>
      }
    </div>
  `, isInline: true, styles: ["@keyframes fade{0%{opacity:.1}to{opacity:1}}.rds-carousel{position:relative;flex-direction:column;display:flex;overflow:hidden;margin:0 auto;padding-left:96px;padding-right:96px;width:100%}.rds-carousel .rds-carousel__carousel-items{align-items:center;justify-content:center;display:flex}.rds-carousel .rds-carousel__item{display:none;animation:fade .4s;width:100%}.rds-carousel .rds-carousel__item.rds-carousel__item--visible{align-items:center;justify-content:center;display:flex}.rds-carousel__carousel-pagination{display:flex;justify-content:center;align-items:center;margin-top:32px;height:40px}.rds-carousel__carousel-pagination .rds-carousel__carousel-pagination--text{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);padding-left:24px;padding-right:24px}.rds-carousel__carousel-pagination .rds-carousel__carousel-navigation-button-wrapper{display:flex}@media (max-width: 767.999999px){.rds-carousel{padding-left:20px;padding-right:20px}.rds-carousel__carousel-pagination{height:36px}.rds-carousel__carousel-pagination .rds-carousel__carousel-pagination--text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-carousel', template: `
    <div class="rds-carousel__carousel-items">
      <ng-content />
    </div>
    <div class="rds-carousel__carousel-pagination">
      @if (showButtons) {
        <div
          class="rds-carousel__carousel-navigation-button-wrapper rds-carousel__carousel-navigation-button-wrapper--left"
        >
          <button
            rds-icon-button
            (click)="prev()"
            [size]="_isMobile() ? 's' : 'm'"
          >
            <rds-icon namespace="filled" icon="chevron_left" />
          </button>
        </div>
      }
      <div class="rds-carousel__carousel-pagination--text">
        {{ indexOfActiveCarouselItem + 1 }}/{{ carouselItems.length || 0 }}
      </div>
      @if (showButtons) {
        <div
          class="rds-carousel__carousel-navigation-button-wrapper rds-carousel__carousel-navigation-button-wrapper--right"
        >
          <button
            rds-icon-button
            (click)="next()"
            [size]="_isMobile() ? 's' : 'm'"
          >
            <rds-icon namespace="filled" icon="chevron_right" />
          </button>
        </div>
      }
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'rdsCarousel', styles: ["@keyframes fade{0%{opacity:.1}to{opacity:1}}.rds-carousel{position:relative;flex-direction:column;display:flex;overflow:hidden;margin:0 auto;padding-left:96px;padding-right:96px;width:100%}.rds-carousel .rds-carousel__carousel-items{align-items:center;justify-content:center;display:flex}.rds-carousel .rds-carousel__item{display:none;animation:fade .4s;width:100%}.rds-carousel .rds-carousel__item.rds-carousel__item--visible{align-items:center;justify-content:center;display:flex}.rds-carousel__carousel-pagination{display:flex;justify-content:center;align-items:center;margin-top:32px;height:40px}.rds-carousel__carousel-pagination .rds-carousel__carousel-pagination--text{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);padding-left:24px;padding-right:24px}.rds-carousel__carousel-pagination .rds-carousel__carousel-navigation-button-wrapper{display:flex}@media (max-width: 767.999999px){.rds-carousel{padding-left:20px;padding-right:20px}.rds-carousel__carousel-pagination{height:36px}.rds-carousel__carousel-pagination .rds-carousel__carousel-pagination--text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}\n"] }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], autoplay: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoplayDelay: [{
                type: Input,
                args: [{
                        transform: (v) => numberAttribute(v, INITIAL_AUTOPLAY_DELAY),
                    }]
            }], showButtons: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], carouselItems: [{
                type: ContentChildren,
                args: [RdsCarouselItemDirective]
            }] } });

const ELEMENTS$8 = [RdsCarouselComponent, RdsCarouselItemDirective];
class RdsCarouselModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselModule, declarations: [RdsCarouselComponent, RdsCarouselItemDirective], imports: [CommonModule, RdsIconComponent, RdsButtonModule], exports: [RdsCarouselComponent, RdsCarouselItemDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselModule, imports: [CommonModule, RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCarouselModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsIconComponent, RdsButtonModule],
                    declarations: [...ELEMENTS$8],
                    exports: [...ELEMENTS$8],
                }]
        }] });

const RDS_DATE_LOCALE = new InjectionToken('RDS_DATE_LOCALE', {
    providedIn: 'root',
    factory: RDS_DATE_LOCALE_FACTORY,
});
function RDS_DATE_LOCALE_FACTORY() {
    return inject(LOCALE_ID);
}
class DateAdapter {
    constructor() {
        this._localeChanges = new Subject();
        this.localeChanges = this._localeChanges;
    }
    getValidDateOrNull(obj) {
        return this.isDateInstance(obj) && this.isValid(obj)
            ? obj
            : null;
    }
    deserialize(value) {
        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {
            return value;
        }
        return this.invalid();
    }
    setLocale(locale) {
        this.locale = locale;
        this._localeChanges.next();
    }
    compareDate(first, second, granularity = 'day') {
        if (granularity === 'year') {
            return this.getYear(first) - this.getYear(second);
        }
        else if (granularity === 'month') {
            return (this.compareDate(first, second, 'year') ||
                this.getMonth(first) - this.getMonth(second));
        }
        else {
            return (this.compareDate(first, second, 'month') ||
                this.getDate(first) - this.getDate(second));
        }
    }
    sameDate(first, second, granularity = 'day') {
        if (first && second) {
            const firstValid = this.isValid(first);
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second, granularity);
            }
            return firstValid == secondValid;
        }
        return first == second;
    }
    clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    }
}

/* eslint-disable @typescript-eslint/no-explicit-any */
const RDS_DATE_FORMATS = new InjectionToken('RDS_DATE_FORMATS');
/* eslint-disable @typescript-eslint/no-explicit-any */

const RDS_CALENDAR_VIEW_ORDERED = [
    'month',
    'year',
    'multi-year',
];

let SUPPORTS_INTL_API;
try {
    SUPPORTS_INTL_API = typeof Intl != 'undefined';
}
catch {
    SUPPORTS_INTL_API = false;
}
const DEFAULT_MONTH_NAMES = {
    long: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ],
    short: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
    ],
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
};
const DEFAULT_DATE_NAMES = range(31, (i) => String(i + 1));
const DEFAULT_DAY_OF_WEEK_NAMES = {
    long: [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
    ],
    short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
};
const ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
function range(length, valueFunction) {
    const valuesArray = Array(length);
    for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
class NativeDateAdapter extends DateAdapter {
    constructor() {
        super();
        this.rdsDateLocale = inject(RDS_DATE_LOCALE, {
            optional: true,
        });
        this.platform = inject(Platform);
        this.useUtcForDisplay = true;
        super.setLocale(this.rdsDateLocale);
        this.useUtcForDisplay = !this.platform.TRIDENT;
        this._clampDate = this.platform.TRIDENT || this.platform.EDGE;
    }
    getYear(date) {
        return date.getFullYear();
    }
    getMonth(date) {
        return date.getMonth();
    }
    getDate(date) {
        return date.getDate();
    }
    getDayOfWeek(date) {
        return date.getDay();
    }
    getMonthNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                month: style,
                timeZone: 'utc',
            });
            return range(12, (i) => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));
        }
        return DEFAULT_MONTH_NAMES[style];
    }
    getDateNames() {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                day: 'numeric',
                timeZone: 'utc',
            });
            return range(31, (i) => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DATE_NAMES;
    }
    getDayOfWeekNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                weekday: style,
                timeZone: 'utc',
            });
            return range(7, (i) => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DAY_OF_WEEK_NAMES[style];
    }
    getYearName(date) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                year: 'numeric',
                timeZone: 'utc',
            });
            return this._stripDirectionalityCharacters(this._format(dtf, date));
        }
        return String(this.getYear(date));
    }
    getFirstDayOfWeek() {
        return 0;
    }
    getNumDaysInMonth(date) {
        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
    }
    clone(date) {
        return new Date(date.getTime());
    }
    createDate(year, month, date) {
        if (month < 0 || month > 11) {
            throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
        }
        if (date < 1) {
            throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
        const result = this._createDateWithOverflow(year, month, date);
        if (result.getMonth() != month) {
            throw Error(`Invalid date "${date}" for month with index "${month}".`);
        }
        return result;
    }
    today() {
        return new Date();
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    parse(value) {
        if (typeof value == 'number') {
            return new Date(value);
        }
        return value ? new Date(Date.parse(value)) : null;
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    format(date, displayFormat, availableViews = RDS_CALENDAR_VIEW_ORDERED) {
        if (!this.isValid(date)) {
            throw Error('NativeDateAdapter: Cannot format invalid date.');
        }
        if (SUPPORTS_INTL_API) {
            if (this._clampDate &&
                (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                date = this.clone(date);
                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
            }
            displayFormat = { ...displayFormat, timeZone: 'utc' };
            if (!availableViews.includes('multi-year')) {
                displayFormat.year = undefined;
            }
            if (!availableViews.includes('year')) {
                displayFormat.month = undefined;
            }
            if (!availableViews.includes('month')) {
                displayFormat.day = undefined;
            }
            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
            return this._stripDirectionalityCharacters(this._format(dtf, date));
        }
        return this._stripDirectionalityCharacters(date.toDateString());
    }
    placeholderFormat(displayFormat, availableViews = RDS_CALENDAR_VIEW_ORDERED) {
        if (SUPPORTS_INTL_API) {
            const dateFormat = new Intl.DateTimeFormat(this.locale, displayFormat);
            const resolvedOptions = dateFormat.resolvedOptions();
            let year = '';
            if (availableViews.includes('multi-year')) {
                switch (resolvedOptions.year) {
                    case 'numeric': {
                        year = 'YYYY';
                        break;
                    }
                    case '2-digit': {
                        year = 'YY';
                        break;
                    }
                }
            }
            let month = '';
            if (availableViews.includes('year')) {
                switch (resolvedOptions.month) {
                    case '2-digit':
                    // eslint-disable-next-line no-fallthrough
                    case 'numeric': {
                        month = 'MM';
                        break;
                    }
                    case 'short': {
                        month = 'MMM';
                        break;
                    }
                    case 'long': {
                        month = 'MMMM';
                        break;
                    }
                }
            }
            let day = '';
            if (availableViews.includes('month')) {
                switch (resolvedOptions.day) {
                    case '2-digit':
                    // eslint-disable-next-line no-fallthrough
                    case 'numeric': {
                        day = 'DD';
                        break;
                    }
                }
            }
            const parts = dateFormat.formatToParts();
            return parts
                .map((p) => {
                switch (p.type) {
                    case 'day':
                        return day;
                    case 'month':
                        return month;
                    case 'year':
                        return year;
                    default:
                        return p.value;
                }
            })
                .join('')
                .trim();
        }
        else {
            return '';
        }
    }
    addCalendarYears(date, years) {
        return this.addCalendarMonths(date, years * 12);
    }
    addCalendarMonths(date, months) {
        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
        if (this.getMonth(newDate) !=
            (((this.getMonth(date) + months) % 12) + 12) % 12) {
            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
        }
        return newDate;
    }
    addCalendarDays(date, days) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
    }
    toIso8601(date) {
        return [
            date.getUTCFullYear(),
            this._2digit(date.getUTCMonth() + 1),
            this._2digit(date.getUTCDate()),
        ].join('-');
    }
    deserialize(value) {
        if (typeof value === 'string') {
            if (!value) {
                return null;
            }
            if (ISO_8601_REGEX.test(value)) {
                const date = new Date(value);
                if (this.isValid(date)) {
                    return date;
                }
            }
        }
        return super.deserialize(value);
    }
    isDateInstance(obj) {
        return obj instanceof Date;
    }
    isValid(date) {
        return !isNaN(date.getTime());
    }
    invalid() {
        return new Date(NaN);
    }
    _createDateWithOverflow(year, month, date) {
        const d = new Date();
        d.setFullYear(year, month, date);
        d.setHours(0, 0, 0, 0);
        return d;
    }
    _2digit(n) {
        return ('00' + n).slice(-2);
    }
    _stripDirectionalityCharacters(str) {
        return str.replace(/[\u200e\u200f]/g, '');
    }
    _format(dtf, date) {
        const d = new Date();
        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
        return dtf.format(d);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateAdapter, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateAdapter }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });

const RDS_NATIVE_DATE_FORMATS = {
    parse: {
        dateInput: null,
    },
    display: {
        dateInput: {
            year: 'numeric',
            month: 'short',
            day: 'numeric',
        },
        monthYearLabel: { year: 'numeric', month: 'short' },
        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
        monthYearA11yLabel: { year: 'numeric', month: 'long' },
    },
};
const RDS_NATIVE_LOCALE_DATE_FORMATS = {
    parse: {
        dateInput: null,
    },
    display: {
        dateInput: {},
        monthYearLabel: { year: 'numeric', month: 'short' },
        dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },
        monthYearA11yLabel: { year: 'numeric', month: 'long' },
    },
};

class NativeDateModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: NativeDateModule, imports: [PlatformModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateModule, providers: [
            { provide: DateAdapter, useClass: NativeDateAdapter },
            { provide: LOCALE_ID, useValue: 'en-GB' },
        ], imports: [PlatformModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [PlatformModule],
                    providers: [
                        { provide: DateAdapter, useClass: NativeDateAdapter },
                        { provide: LOCALE_ID, useValue: 'en-GB' },
                    ],
                }]
        }] });

class RdsNativeDateModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsNativeDateModule, imports: [NativeDateModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNativeDateModule, providers: [{ provide: RDS_DATE_FORMATS, useValue: RDS_NATIVE_DATE_FORMATS }], imports: [NativeDateModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNativeDateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NativeDateModule],
                    providers: [{ provide: RDS_DATE_FORMATS, useValue: RDS_NATIVE_DATE_FORMATS }],
                }]
        }] });

function createMissingDateImplError(provider) {
    return Error(`RdsDatepicker: No provider found for ${provider}. You must import RdsNativeDateModule` +
        `, or provide a custom implementation.`);
}

class RdsDatepickerIntl {
    constructor() {
        this.changes = new Subject();
        this.calendarLabel = 'Calendar';
        this.openCalendarLabel = 'Open calendar';
        this.closeCalendarLabel = 'Close calendar';
        this.prevMonthLabel = 'Previous month';
        this.nextMonthLabel = 'Next month';
        this.prevYearLabel = 'Previous year';
        this.nextYearLabel = 'Next year';
        this.prevMultiYearLabel = 'Previous 20 years';
        this.nextMultiYearLabel = 'Next 20 years';
        this.switchToMonthViewLabel = 'Choose date';
        this.switchToMultiYearViewLabel = 'Choose month and year';
        this.monthLabel = 'Weekly';
        this.yearLabel = 'Monthly';
        this.multiYearLabel = 'Yearly';
    }
    formatYearRange(start, end) {
        return `${start} \u2013 ${end}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerIntl, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

/* eslint-disable-next-line @typescript-eslint/no-explicit-any */
class RdsCalendarCell {
    constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, rawValue, compareValue = value) {
        this.value = value;
        this.displayValue = displayValue;
        this.ariaLabel = ariaLabel;
        this.enabled = enabled;
        this.cssClasses = cssClasses;
        this.rawValue = rawValue;
        this.compareValue = compareValue;
    }
}
class RdsCalendarBodyComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.ngZone = inject(NgZone);
        this._skipNextFocus = null;
        this.class = 'rds-calendar-body';
        this.role = 'grid';
        this.ariaReadonly = 'true';
        this.label = null;
        this.rows = null;
        this.todayValue = null;
        this.startValue = null;
        this.endValue = null;
        this.labelMinRequiredCells = null;
        this.numCols = 7;
        this.activeCell = null;
        this.isRange = false;
        this.cellAspectRatio = 1;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this.previewStart = null;
        this.previewEnd = null;
        this.selectedValueChange = new EventEmitter();
        this.previewChange = new EventEmitter();
        this._firstRowOffset = null;
        this._cellPadding = null;
        this._cellWidth = null;
        this._enterHandler = (event) => {
            if (this._skipNextFocus && event.type === 'focus') {
                this._skipNextFocus = false;
                return;
            }
            if (event.target && this.isRange) {
                const cell = this._getCellFromElement(event.target);
                if (cell) {
                    this.ngZone.run(() => this.previewChange.emit({ value: cell.enabled ? cell : null, event }));
                }
            }
        };
        this._leaveHandler = (event) => {
            if (this.previewEnd !== null && this.isRange) {
                if (event.target && isTableCell(event.target)) {
                    this.ngZone.run(() => this.previewChange.emit({ value: null, event }));
                }
            }
        };
        this.ngZone.runOutsideAngular(() => {
            const element = this.elementRef.nativeElement;
            element.addEventListener('mouseenter', this._enterHandler, true);
            element.addEventListener('focus', this._enterHandler, true);
            element.addEventListener('mouseleave', this._leaveHandler, true);
            element.addEventListener('blur', this._leaveHandler, true);
        });
    }
    _cellClicked(cell, event) {
        if (cell.enabled) {
            this.selectedValueChange.emit({ value: cell, event });
        }
    }
    _isSelected(value) {
        return this.startValue === value || this.endValue === value;
    }
    ngOnChanges(changes) {
        const columnChanges = changes['numCols'];
        const { rows, numCols } = this;
        if (changes['rows'] || columnChanges) {
            this._firstRowOffset =
                rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;
        }
        if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {
            this._cellPadding = `${(50 * this.cellAspectRatio) / numCols}%`;
        }
        if (columnChanges || !this._cellWidth) {
            this._cellWidth = `${100 / numCols}%`;
        }
    }
    ngOnDestroy() {
        const element = this.elementRef.nativeElement;
        element.removeEventListener('mouseenter', this._enterHandler, true);
        element.removeEventListener('focus', this._enterHandler, true);
        element.removeEventListener('mouseleave', this._leaveHandler, true);
        element.removeEventListener('blur', this._leaveHandler, true);
    }
    _isActiveCell(item) {
        return this.activeCell === item;
    }
    _focusActiveCell(movePreview = true) {
        this.ngZone.runOutsideAngular(() => {
            this.ngZone.onStable.pipe(take(1)).subscribe(() => {
                const activeCell = this.elementRef.nativeElement.querySelector('.rds-calendar-body-active');
                if (activeCell) {
                    if (!movePreview) {
                        this._skipNextFocus = true;
                    }
                    activeCell.focus();
                }
            });
        });
    }
    _isRangeStart(value) {
        return isStart(value, this.startValue, this.endValue);
    }
    _isRangeEnd(value) {
        return isEnd(value, this.startValue, this.endValue);
    }
    _isInRange(value) {
        return isInRange(value, this.startValue, this.endValue, this.isRange);
    }
    _isComparisonStart(value) {
        return isStart(value, this.comparisonStart, this.comparisonEnd);
    }
    _isComparisonBridgeStart(value, rowIndex, colIndex) {
        if (!this._isComparisonStart(value) ||
            this._isRangeStart(value) ||
            !this._isInRange(value)) {
            return false;
        }
        let previousCell = this.rows
            ? this.rows[rowIndex][colIndex - 1]
            : null;
        if (!previousCell && this.rows) {
            const previousRow = this.rows[rowIndex - 1];
            previousCell = previousRow && previousRow[previousRow.length - 1];
        }
        return previousCell ? !this._isRangeEnd(previousCell.compareValue) : false;
    }
    _isComparisonBridgeEnd(value, rowIndex, colIndex) {
        if (!this._isComparisonEnd(value) ||
            this._isRangeEnd(value) ||
            !this._isInRange(value)) {
            return false;
        }
        let nextCell = this.rows
            ? this.rows[rowIndex][colIndex + 1]
            : null;
        if (!nextCell && this.rows) {
            const nextRow = this.rows[rowIndex + 1];
            nextCell = nextRow && nextRow[0];
        }
        return nextCell ? !this._isRangeStart(nextCell.compareValue) : false;
    }
    _isComparisonEnd(value) {
        return isEnd(value, this.comparisonStart, this.comparisonEnd);
    }
    _isInComparisonRange(value) {
        return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);
    }
    _isComparisonIdentical(value) {
        return (this.comparisonStart === this.comparisonEnd &&
            value === this.comparisonStart);
    }
    _isPreviewStart(value) {
        return isStart(value, this.previewStart, this.previewEnd);
    }
    _isPreviewEnd(value) {
        return isEnd(value, this.previewStart, this.previewEnd);
    }
    _isInPreview(value) {
        return isInRange(value, this.previewStart, this.previewEnd, this.isRange);
    }
    _getCellFromElement(element) {
        let cell;
        if (isTableCell(element)) {
            cell = element;
        }
        else if (isTableCell(element.parentNode)) {
            cell = element.parentNode;
        }
        if (cell) {
            const row = cell.getAttribute('data-rds-row');
            const col = cell.getAttribute('data-rds-col');
            if (row && col && this.rows) {
                return this.rows[parseInt(row)][parseInt(col)];
            }
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarBodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: { label: "label", rows: "rows", todayValue: "todayValue", startValue: "startValue", endValue: "endValue", labelMinRequiredCells: "labelMinRequiredCells", numCols: "numCols", activeCell: "activeCell", isRange: ["isRange", "isRange", booleanAttribute], cellAspectRatio: "cellAspectRatio", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd", previewStart: "previewStart", previewEnd: "previewEnd" }, outputs: { selectedValueChange: "selectedValueChange", previewChange: "previewChange" }, host: { properties: { "class": "this.class", "attr.role": "this.role", "attr.aria-readonly": "this.ariaReadonly" } }, exportAs: ["rdsCalendarBody"], usesOnChanges: true, ngImport: i0, template: "@for (row of rows; track row; let rowIndex = $index) {\n  <tr role=\"row\">\n    @if (rowIndex === 0 && _firstRowOffset) {\n      <td\n        aria-hidden=\"true\"\n        class=\"rds-calendar-body-label\"\n        [attr.colspan]=\"_firstRowOffset\"\n        [style.paddingTop]=\"_cellPadding\"\n        [style.paddingBottom]=\"_cellPadding\"\n      ></td>\n    }\n    @for (item of row; track item; let colIndex = $index) {\n      <td\n        role=\"gridcell\"\n        class=\"rds-calendar-body-cell\"\n        [ngClass]=\"item.cssClasses\"\n        [tabindex]=\"_isActiveCell(item) ? 0 : -1\"\n        [attr.data-rds-row]=\"rowIndex\"\n        [attr.data-rds-col]=\"colIndex\"\n        [class.rds-calendar-body-disabled]=\"!item.enabled\"\n        [class.rds-calendar-body-active]=\"_isActiveCell(item)\"\n        [class.rds-calendar-body-range-start]=\"_isRangeStart(item.compareValue)\"\n        [class.rds-calendar-body-range-end]=\"_isRangeEnd(item.compareValue)\"\n        [class.rds-calendar-body-in-range]=\"_isInRange(item.compareValue)\"\n        [class.rds-calendar-body-comparison-bridge-start]=\"\n          _isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\n        \"\n        [class.rds-calendar-body-comparison-bridge-end]=\"\n          _isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\n        \"\n        [class.rds-calendar-body-comparison-start]=\"\n          _isComparisonStart(item.compareValue)\n        \"\n        [class.rds-calendar-body-comparison-end]=\"\n          _isComparisonEnd(item.compareValue)\n        \"\n        [class.rds-calendar-body-in-comparison-range]=\"\n          _isInComparisonRange(item.compareValue)\n        \"\n        [class.rds-calendar-body-preview-start]=\"\n          _isPreviewStart(item.compareValue)\n        \"\n        [class.rds-calendar-body-preview-end]=\"_isPreviewEnd(item.compareValue)\"\n        [class.rds-calendar-body-in-preview]=\"_isInPreview(item.compareValue)\"\n        [attr.aria-label]=\"item.ariaLabel\"\n        [attr.aria-disabled]=\"!item.enabled || null\"\n        [attr.aria-selected]=\"_isSelected(item.compareValue)\"\n        (click)=\"_cellClicked(item, $event)\"\n        [style.paddingTop]=\"_cellPadding\"\n        [style.paddingBottom]=\"_cellPadding\"\n      >\n        <div\n          class=\"rds-calendar-body-cell-content rds-focus-indicator\"\n          [class.rds-calendar-body-cell-content-disabled]=\"!item.enabled\"\n          [class.rds-calendar-body-selected]=\"_isSelected(item.compareValue)\"\n          [class.rds-calendar-body-comparison-identical]=\"\n            _isComparisonIdentical(item.compareValue)\n          \"\n          [class.rds-calendar-body-today]=\"todayValue === item.compareValue\"\n        >\n          {{ item.displayValue }}\n        </div>\n        <div class=\"rds-calendar-body-cell-preview\"></div>\n      </td>\n    }\n  </tr>\n}\n", styles: [".rds-calendar-body{min-width:280px}.rds-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.rds-calendar-body-cell{position:relative;height:40px;width:40px;line-height:0;text-align:center;outline:none;cursor:pointer;margin-top:4px}.rds-calendar-body-cell:before,.rds-calendar-body-cell:after,.rds-calendar-body-cell-preview{content:\"\";position:absolute;top:4px;left:0;z-index:0;box-sizing:border-box;height:100%;width:100%}.rds-calendar-body-range-start:not(.rds-calendar-body-in-comparison-range):before,.rds-calendar-body-range-start:after,.rds-calendar-body-comparison-start:not(.rds-calendar-body-comparison-bridge-start):before,.rds-calendar-body-comparison-start:after,.rds-calendar-body-preview-start .rds-calendar-body-cell-preview{left:0;width:100%;border-top-left-radius:2px;border-bottom-left-radius:2px}[dir=rtl] .rds-calendar-body-range-start:not(.rds-calendar-body-in-comparison-range):before,[dir=rtl] .rds-calendar-body-range-start:after,[dir=rtl] .rds-calendar-body-comparison-start:not(.rds-calendar-body-comparison-bridge-start):before,[dir=rtl] .rds-calendar-body-comparison-start:after,[dir=rtl] .rds-calendar-body-preview-start .rds-calendar-body-cell-preview{left:0;border-radius:0 2px 2px 0}.rds-calendar-body-range-end:not(.rds-calendar-body-in-comparison-range):before,.rds-calendar-body-range-end:after,.rds-calendar-body-comparison-end:not(.rds-calendar-body-comparison-bridge-end):before,.rds-calendar-body-comparison-end:after,.rds-calendar-body-preview-end .rds-calendar-body-cell-preview{width:100%;border-top-right-radius:2px;border-bottom-right-radius:2px}[dir=rtl] .rds-calendar-body-range-end:not(.rds-calendar-body-in-comparison-range):before,[dir=rtl] .rds-calendar-body-range-end:after,[dir=rtl] .rds-calendar-body-comparison-end:not(.rds-calendar-body-comparison-bridge-end):before,[dir=rtl] .rds-calendar-body-comparison-end:after,[dir=rtl] .rds-calendar-body-preview-end .rds-calendar-body-cell-preview{left:0;border-radius:2px 0 0 2px}[dir=rtl] .rds-calendar-body-comparison-bridge-start.rds-calendar-body-range-end:after,[dir=rtl] .rds-calendar-body-comparison-bridge-end.rds-calendar-body-range-start:after{width:100%;border-top-right-radius:2px;border-bottom-right-radius:2px}.rds-calendar-body-comparison-start.rds-calendar-body-range-end:after,[dir=rtl] .rds-calendar-body-comparison-start.rds-calendar-body-range-end:after,.rds-calendar-body-comparison-end.rds-calendar-body-range-start:after,[dir=rtl] .rds-calendar-body-comparison-end.rds-calendar-body-range-start:after{width:100%}.rds-calendar-body-cell.rds-calendar-body-in-preview .rds-calendar-body-cell-preview,.rds-calendar-body-cell.rds-calendar-body-preview-start .rds-calendar-body-cell-preview,.rds-calendar-body-cell.rds-calendar-body-preview-end .rds-calendar-body-cell-preview{background:var(--rds-color-datepicker-item-bg-hover)}.rds-calendar-body-cell.rds-calendar-body-in-preview .rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.rds-calendar-body-cell.rds-calendar-body-preview-start .rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.rds-calendar-body-cell.rds-calendar-body-preview-end .rds-calendar-body-cell-content:not(.rds-calendar-body-selected){color:var(--rds-color-on-light-surface)}.rds-calendar-body-disabled{cursor:default}.rds-calendar-body-cell-content{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;top:4px;left:0;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%;color:var(--rds-color-high-contrast);line-height:1;border-color:transparent;border-width:2px;border-style:solid;border-radius:2px}.rds-calendar-body-cell-content.rds-focus-indicator{position:absolute}.rds-calendar-body-cell-content:hover:not(.rds-calendar-body-selected,.rds-calendar-body-cell-content-disabled){background:var(--rds-color-datepicker-item-bg-hover);border-color:var(--rds-color-datepicker-item-bg-hover);color:var(--rds-color-on-light-surface)}.rds-calendar-body-cell-content.rds-calendar-body-today:not(.rds-calendar-body-selected),.rds-calendar-body-cell-content:hover.rds-calendar-body-today:not(.rds-calendar-body-selected,.rds-calendar-body-cell-content-disabled){border:1px solid var(--rds-color-stroke-enabled)}.rds-calendar-body-cell-content.rds-calendar-body-selected{color:var(--rds-color-on-dark-surface);background:var(--rds-color-bg-informative);border-width:0}.rds-calendar-body-cell-content.rds-calendar-body-cell-content-disabled{color:var(--rds-color-disabled)}.rds-calendar-body-cell-prev-month .rds-calendar-body-cell-content,.rds-calendar-body-cell-next-month .rds-calendar-body-cell-content{color:var(--rds-color-low-contrast)}.rds-calendar-body-cell-prev-month .rds-calendar-body-cell-content.rds-calendar-body-selected,.rds-calendar-body-cell-next-month .rds-calendar-body-cell-content.rds-calendar-body-selected{color:var(--rds-color-on-dark-surface)}.rds-calendar-body-cell-prev-month .rds-calendar-body-cell-content.rds-calendar-body-cell-content-disabled,.rds-calendar-body-cell-next-month .rds-calendar-body-cell-content.rds-calendar-body-cell-content-disabled{color:var(--rds-color-disabled)}.rds-datepicker-dialog{width:unset!important;min-width:unset!important;max-width:unset!important}.rds-datepicker-dialog .rds-dialog-container{position:relative;overflow:visible}.cdk-keyboard-focused .rds-calendar-body-active>.rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.cdk-program-focused .rds-calendar-body-active>.rds-calendar-body-cell-content:not(.rds-calendar-body-selected){border:2px solid var(--rds-color-stroke-active-focus)}[dir=rtl] .rds-calendar-body-label{text-align:right}@media (hover: none){.rds-calendar-body-cell:not(.rds-calendar-body-disabled):hover>.rds-calendar-body-cell-content:not(.rds-calendar-body-selected){background-color:transparent}}.rds-calendar-body-in-range:before{background:var(--rds-color-datepicker-item-bg-hover)}.rds-calendar-body-in-range .rds-calendar-body-cell-content:not(.rds-calendar-body-selected){color:var(--rds-color-on-light-surface)}.rds-calendar-body-comparison-identical,.rds-calendar-body-in-comparison-range:before{background:var(--rds-color-datepicker-item-bg-comparison)}.rds-calendar-body-comparison-identical .rds-calendar-body-cell-content,.rds-calendar-body-in-comparison-range .rds-calendar-body-cell-content{color:var(--rds-color-on-light-surface)}.rds-calendar-body-comparison-bridge-start:before,[dir=rtl] .rds-calendar-body-comparison-bridge-end:before{background:linear-gradient(to right,var(--rds-color-datepicker-item-bg-hover) 50%,var(--rds-color-datepicker-item-bg-comparison) 50%)}.rds-calendar-body-comparison-bridge-end:before,[dir=rtl] .rds-calendar-body-comparison-bridge-start:before{background:linear-gradient(to left,var(--rds-color-datepicker-item-bg-hover) 50%,var(--rds-color-datepicker-item-bg-comparison) 50%)}.rds-calendar-body-comparison-bridge-start,[dir=rtl] .rds-calendar-body-comparison-bridge-end,.rds-calendar-body-comparison-bridge-end,[dir=rtl] .rds-calendar-body-comparison-bridge-start{color:var(--rds-color-on-light-surface)}.rds-calendar-body-in-range>.rds-calendar-body-comparison-identical,.rds-calendar-body-in-comparison-range.rds-calendar-body-in-range:after{background:var(--rds-color-datepicker-item-bg-overlap)}.rds-calendar-body-in-range>.rds-calendar-body-comparison-identical .rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.rds-calendar-body-in-comparison-range.rds-calendar-body-in-range .rds-calendar-body-cell-content:not(.rds-calendar-body-selected){color:var(--rds-color-on-light-surface)}.rds-calendar-body-comparison-identical.rds-calendar-body-selected,.rds-calendar-body-in-comparison-range>.rds-calendar-body-selected{background:var(--rds-color-datepicker-item-bg-overlap-selected);color:var(--rds-color-on-dark-surface)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarBodyComponent, decorators: [{
            type: Component,
            args: [{ selector: '[rdsCalendarBody], [rds-calendar-body]', exportAs: 'rdsCalendarBody', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "@for (row of rows; track row; let rowIndex = $index) {\n  <tr role=\"row\">\n    @if (rowIndex === 0 && _firstRowOffset) {\n      <td\n        aria-hidden=\"true\"\n        class=\"rds-calendar-body-label\"\n        [attr.colspan]=\"_firstRowOffset\"\n        [style.paddingTop]=\"_cellPadding\"\n        [style.paddingBottom]=\"_cellPadding\"\n      ></td>\n    }\n    @for (item of row; track item; let colIndex = $index) {\n      <td\n        role=\"gridcell\"\n        class=\"rds-calendar-body-cell\"\n        [ngClass]=\"item.cssClasses\"\n        [tabindex]=\"_isActiveCell(item) ? 0 : -1\"\n        [attr.data-rds-row]=\"rowIndex\"\n        [attr.data-rds-col]=\"colIndex\"\n        [class.rds-calendar-body-disabled]=\"!item.enabled\"\n        [class.rds-calendar-body-active]=\"_isActiveCell(item)\"\n        [class.rds-calendar-body-range-start]=\"_isRangeStart(item.compareValue)\"\n        [class.rds-calendar-body-range-end]=\"_isRangeEnd(item.compareValue)\"\n        [class.rds-calendar-body-in-range]=\"_isInRange(item.compareValue)\"\n        [class.rds-calendar-body-comparison-bridge-start]=\"\n          _isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\n        \"\n        [class.rds-calendar-body-comparison-bridge-end]=\"\n          _isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\n        \"\n        [class.rds-calendar-body-comparison-start]=\"\n          _isComparisonStart(item.compareValue)\n        \"\n        [class.rds-calendar-body-comparison-end]=\"\n          _isComparisonEnd(item.compareValue)\n        \"\n        [class.rds-calendar-body-in-comparison-range]=\"\n          _isInComparisonRange(item.compareValue)\n        \"\n        [class.rds-calendar-body-preview-start]=\"\n          _isPreviewStart(item.compareValue)\n        \"\n        [class.rds-calendar-body-preview-end]=\"_isPreviewEnd(item.compareValue)\"\n        [class.rds-calendar-body-in-preview]=\"_isInPreview(item.compareValue)\"\n        [attr.aria-label]=\"item.ariaLabel\"\n        [attr.aria-disabled]=\"!item.enabled || null\"\n        [attr.aria-selected]=\"_isSelected(item.compareValue)\"\n        (click)=\"_cellClicked(item, $event)\"\n        [style.paddingTop]=\"_cellPadding\"\n        [style.paddingBottom]=\"_cellPadding\"\n      >\n        <div\n          class=\"rds-calendar-body-cell-content rds-focus-indicator\"\n          [class.rds-calendar-body-cell-content-disabled]=\"!item.enabled\"\n          [class.rds-calendar-body-selected]=\"_isSelected(item.compareValue)\"\n          [class.rds-calendar-body-comparison-identical]=\"\n            _isComparisonIdentical(item.compareValue)\n          \"\n          [class.rds-calendar-body-today]=\"todayValue === item.compareValue\"\n        >\n          {{ item.displayValue }}\n        </div>\n        <div class=\"rds-calendar-body-cell-preview\"></div>\n      </td>\n    }\n  </tr>\n}\n", styles: [".rds-calendar-body{min-width:280px}.rds-calendar-body-label{height:0;line-height:0;text-align:left;padding-left:4.7142857143%;padding-right:4.7142857143%}.rds-calendar-body-cell{position:relative;height:40px;width:40px;line-height:0;text-align:center;outline:none;cursor:pointer;margin-top:4px}.rds-calendar-body-cell:before,.rds-calendar-body-cell:after,.rds-calendar-body-cell-preview{content:\"\";position:absolute;top:4px;left:0;z-index:0;box-sizing:border-box;height:100%;width:100%}.rds-calendar-body-range-start:not(.rds-calendar-body-in-comparison-range):before,.rds-calendar-body-range-start:after,.rds-calendar-body-comparison-start:not(.rds-calendar-body-comparison-bridge-start):before,.rds-calendar-body-comparison-start:after,.rds-calendar-body-preview-start .rds-calendar-body-cell-preview{left:0;width:100%;border-top-left-radius:2px;border-bottom-left-radius:2px}[dir=rtl] .rds-calendar-body-range-start:not(.rds-calendar-body-in-comparison-range):before,[dir=rtl] .rds-calendar-body-range-start:after,[dir=rtl] .rds-calendar-body-comparison-start:not(.rds-calendar-body-comparison-bridge-start):before,[dir=rtl] .rds-calendar-body-comparison-start:after,[dir=rtl] .rds-calendar-body-preview-start .rds-calendar-body-cell-preview{left:0;border-radius:0 2px 2px 0}.rds-calendar-body-range-end:not(.rds-calendar-body-in-comparison-range):before,.rds-calendar-body-range-end:after,.rds-calendar-body-comparison-end:not(.rds-calendar-body-comparison-bridge-end):before,.rds-calendar-body-comparison-end:after,.rds-calendar-body-preview-end .rds-calendar-body-cell-preview{width:100%;border-top-right-radius:2px;border-bottom-right-radius:2px}[dir=rtl] .rds-calendar-body-range-end:not(.rds-calendar-body-in-comparison-range):before,[dir=rtl] .rds-calendar-body-range-end:after,[dir=rtl] .rds-calendar-body-comparison-end:not(.rds-calendar-body-comparison-bridge-end):before,[dir=rtl] .rds-calendar-body-comparison-end:after,[dir=rtl] .rds-calendar-body-preview-end .rds-calendar-body-cell-preview{left:0;border-radius:2px 0 0 2px}[dir=rtl] .rds-calendar-body-comparison-bridge-start.rds-calendar-body-range-end:after,[dir=rtl] .rds-calendar-body-comparison-bridge-end.rds-calendar-body-range-start:after{width:100%;border-top-right-radius:2px;border-bottom-right-radius:2px}.rds-calendar-body-comparison-start.rds-calendar-body-range-end:after,[dir=rtl] .rds-calendar-body-comparison-start.rds-calendar-body-range-end:after,.rds-calendar-body-comparison-end.rds-calendar-body-range-start:after,[dir=rtl] .rds-calendar-body-comparison-end.rds-calendar-body-range-start:after{width:100%}.rds-calendar-body-cell.rds-calendar-body-in-preview .rds-calendar-body-cell-preview,.rds-calendar-body-cell.rds-calendar-body-preview-start .rds-calendar-body-cell-preview,.rds-calendar-body-cell.rds-calendar-body-preview-end .rds-calendar-body-cell-preview{background:var(--rds-color-datepicker-item-bg-hover)}.rds-calendar-body-cell.rds-calendar-body-in-preview .rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.rds-calendar-body-cell.rds-calendar-body-preview-start .rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.rds-calendar-body-cell.rds-calendar-body-preview-end .rds-calendar-body-cell-content:not(.rds-calendar-body-selected){color:var(--rds-color-on-light-surface)}.rds-calendar-body-disabled{cursor:default}.rds-calendar-body-cell-content{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;top:4px;left:0;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%;color:var(--rds-color-high-contrast);line-height:1;border-color:transparent;border-width:2px;border-style:solid;border-radius:2px}.rds-calendar-body-cell-content.rds-focus-indicator{position:absolute}.rds-calendar-body-cell-content:hover:not(.rds-calendar-body-selected,.rds-calendar-body-cell-content-disabled){background:var(--rds-color-datepicker-item-bg-hover);border-color:var(--rds-color-datepicker-item-bg-hover);color:var(--rds-color-on-light-surface)}.rds-calendar-body-cell-content.rds-calendar-body-today:not(.rds-calendar-body-selected),.rds-calendar-body-cell-content:hover.rds-calendar-body-today:not(.rds-calendar-body-selected,.rds-calendar-body-cell-content-disabled){border:1px solid var(--rds-color-stroke-enabled)}.rds-calendar-body-cell-content.rds-calendar-body-selected{color:var(--rds-color-on-dark-surface);background:var(--rds-color-bg-informative);border-width:0}.rds-calendar-body-cell-content.rds-calendar-body-cell-content-disabled{color:var(--rds-color-disabled)}.rds-calendar-body-cell-prev-month .rds-calendar-body-cell-content,.rds-calendar-body-cell-next-month .rds-calendar-body-cell-content{color:var(--rds-color-low-contrast)}.rds-calendar-body-cell-prev-month .rds-calendar-body-cell-content.rds-calendar-body-selected,.rds-calendar-body-cell-next-month .rds-calendar-body-cell-content.rds-calendar-body-selected{color:var(--rds-color-on-dark-surface)}.rds-calendar-body-cell-prev-month .rds-calendar-body-cell-content.rds-calendar-body-cell-content-disabled,.rds-calendar-body-cell-next-month .rds-calendar-body-cell-content.rds-calendar-body-cell-content-disabled{color:var(--rds-color-disabled)}.rds-datepicker-dialog{width:unset!important;min-width:unset!important;max-width:unset!important}.rds-datepicker-dialog .rds-dialog-container{position:relative;overflow:visible}.cdk-keyboard-focused .rds-calendar-body-active>.rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.cdk-program-focused .rds-calendar-body-active>.rds-calendar-body-cell-content:not(.rds-calendar-body-selected){border:2px solid var(--rds-color-stroke-active-focus)}[dir=rtl] .rds-calendar-body-label{text-align:right}@media (hover: none){.rds-calendar-body-cell:not(.rds-calendar-body-disabled):hover>.rds-calendar-body-cell-content:not(.rds-calendar-body-selected){background-color:transparent}}.rds-calendar-body-in-range:before{background:var(--rds-color-datepicker-item-bg-hover)}.rds-calendar-body-in-range .rds-calendar-body-cell-content:not(.rds-calendar-body-selected){color:var(--rds-color-on-light-surface)}.rds-calendar-body-comparison-identical,.rds-calendar-body-in-comparison-range:before{background:var(--rds-color-datepicker-item-bg-comparison)}.rds-calendar-body-comparison-identical .rds-calendar-body-cell-content,.rds-calendar-body-in-comparison-range .rds-calendar-body-cell-content{color:var(--rds-color-on-light-surface)}.rds-calendar-body-comparison-bridge-start:before,[dir=rtl] .rds-calendar-body-comparison-bridge-end:before{background:linear-gradient(to right,var(--rds-color-datepicker-item-bg-hover) 50%,var(--rds-color-datepicker-item-bg-comparison) 50%)}.rds-calendar-body-comparison-bridge-end:before,[dir=rtl] .rds-calendar-body-comparison-bridge-start:before{background:linear-gradient(to left,var(--rds-color-datepicker-item-bg-hover) 50%,var(--rds-color-datepicker-item-bg-comparison) 50%)}.rds-calendar-body-comparison-bridge-start,[dir=rtl] .rds-calendar-body-comparison-bridge-end,.rds-calendar-body-comparison-bridge-end,[dir=rtl] .rds-calendar-body-comparison-bridge-start{color:var(--rds-color-on-light-surface)}.rds-calendar-body-in-range>.rds-calendar-body-comparison-identical,.rds-calendar-body-in-comparison-range.rds-calendar-body-in-range:after{background:var(--rds-color-datepicker-item-bg-overlap)}.rds-calendar-body-in-range>.rds-calendar-body-comparison-identical .rds-calendar-body-cell-content:not(.rds-calendar-body-selected),.rds-calendar-body-in-comparison-range.rds-calendar-body-in-range .rds-calendar-body-cell-content:not(.rds-calendar-body-selected){color:var(--rds-color-on-light-surface)}.rds-calendar-body-comparison-identical.rds-calendar-body-selected,.rds-calendar-body-in-comparison-range>.rds-calendar-body-selected{background:var(--rds-color-datepicker-item-bg-overlap-selected);color:var(--rds-color-on-dark-surface)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], ariaReadonly: [{
                type: HostBinding,
                args: ['attr.aria-readonly']
            }], label: [{
                type: Input
            }], rows: [{
                type: Input
            }], todayValue: [{
                type: Input
            }], startValue: [{
                type: Input
            }], endValue: [{
                type: Input
            }], labelMinRequiredCells: [{
                type: Input
            }], numCols: [{
                type: Input
            }], activeCell: [{
                type: Input
            }], isRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], cellAspectRatio: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], previewStart: [{
                type: Input
            }], previewEnd: [{
                type: Input
            }], selectedValueChange: [{
                type: Output
            }], previewChange: [{
                type: Output
            }] } });
function isTableCell(node) {
    return node.nodeName === 'TD';
}
function isStart(value, start, end) {
    return end !== null && start !== end && value < end && value === start;
}
function isEnd(value, start, end) {
    return start !== null && start !== end && value >= start && value === end;
}
function isInRange(value, start, end, rangeEnabled) {
    return (rangeEnabled &&
        start !== null &&
        end !== null &&
        start !== end &&
        value >= start &&
        value <= end);
}

class DateRange {
    constructor(start, end) {
        this.start = start;
        this.end = end;
    }
}
class RdsDateSelectionModel {
    constructor(_dateAdapter) {
        this._dateAdapter = _dateAdapter;
        this._selectionChanged = new Subject();
        this.selection = null;
        this.selectionChanged = this._selectionChanged;
    }
    updateSelection(value, source) {
        const oldValue = this.selection;
        this.selection = value;
        this._selectionChanged.next({
            selection: value,
            source,
            oldValue: oldValue,
        });
    }
    ngOnDestroy() {
        this._selectionChanged.complete();
    }
    _isValidDateInstance(date) {
        return (this._dateAdapter.isDateInstance(date) && this._dateAdapter.isValid(date));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateSelectionModel, deps: [{ token: DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateSelectionModel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateSelectionModel, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: DateAdapter }] });
class RdsSingleDateSelectionModel extends RdsDateSelectionModel {
    constructor(adapter) {
        super(adapter);
        this.selection = null;
    }
    add(date) {
        super.updateSelection(date, this);
    }
    isValid() {
        return this.selection != null && this._isValidDateInstance(this.selection);
    }
    isComplete() {
        return this.selection != null;
    }
    clone() {
        const clone = new RdsSingleDateSelectionModel(this._dateAdapter);
        clone.updateSelection(this.selection, this);
        return clone;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleDateSelectionModel, deps: [{ token: DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleDateSelectionModel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleDateSelectionModel, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: DateAdapter }] });
class RdsRangeDateSelectionModel extends RdsDateSelectionModel {
    constructor(dateAdapter) {
        super(dateAdapter);
        this.selection = new DateRange(null, null);
    }
    add(date) {
        let { start, end } = this.selection;
        if (start == null) {
            start = date;
        }
        else if (end == null) {
            end = date;
        }
        else {
            start = date;
            end = null;
        }
        super.updateSelection(new DateRange(start, end), this);
    }
    isValid() {
        const { start, end } = this.selection;
        // Empty ranges are valid.
        if (start == null && end == null) {
            return true;
        }
        // Complete ranges are only valid if both dates are valid and the start is before the end.
        if (start != null && end != null) {
            return (this._isValidDateInstance(start) &&
                this._isValidDateInstance(end) &&
                this._dateAdapter.compareDate(start, end) <= 0);
        }
        // Partial ranges are valid if the start/end is valid.
        return ((start == null || this._isValidDateInstance(start)) &&
            (end == null || this._isValidDateInstance(end)));
    }
    isComplete() {
        return this.selection.start != null && this.selection.end != null;
    }
    clone() {
        const clone = new RdsRangeDateSelectionModel(this._dateAdapter);
        clone.updateSelection(this.selection, this);
        return clone;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRangeDateSelectionModel, deps: [{ token: DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRangeDateSelectionModel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRangeDateSelectionModel, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: DateAdapter }] });
function RDS_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, dateAdapter) {
    return parent || new RdsSingleDateSelectionModel(dateAdapter);
}
const RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {
    provide: RdsDateSelectionModel,
    deps: [[new Optional(), new SkipSelf(), RdsDateSelectionModel], DateAdapter],
    useFactory: RDS_SINGLE_DATE_SELECTION_MODEL_FACTORY,
};
function RDS_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, dateAdapter) {
    return parent || new RdsRangeDateSelectionModel(dateAdapter);
}
const RDS_RANGE_DATE_SELECTION_MODEL_PROVIDER = {
    provide: RdsDateSelectionModel,
    deps: [[new Optional(), new SkipSelf(), RdsDateSelectionModel], DateAdapter],
    useFactory: RDS_RANGE_DATE_SELECTION_MODEL_FACTORY,
};

const RDS_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('RDS_DATE_RANGE_SELECTION_STRATEGY');
class DefaultRdsCalendarRangeStrategy {
    constructor() {
        this.dateAdapter = inject(DateAdapter);
    }
    selectionFinished(date, currentRange) {
        let { start, end } = currentRange;
        if (start == null) {
            start = date;
        }
        else if (end == null &&
            date &&
            this.dateAdapter.compareDate(date, start) >= 0) {
            end = date;
        }
        else {
            start = date;
            end = null;
        }
        return new DateRange(start, end);
    }
    createPreview(activeDate, currentRange) {
        let start = null;
        let end = null;
        if (currentRange.start && !currentRange.end && activeDate) {
            start = currentRange.start;
            end = activeDate;
        }
        return new DateRange(start, end);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DefaultRdsCalendarRangeStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DefaultRdsCalendarRangeStrategy }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DefaultRdsCalendarRangeStrategy, decorators: [{
            type: Injectable
        }] });
function RDS_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent) {
    return parent || new DefaultRdsCalendarRangeStrategy();
}
const RDS_CALENDAR_RANGE_STRATEGY_PROVIDER = {
    provide: RDS_DATE_RANGE_SELECTION_STRATEGY,
    deps: [
        [new Optional(), new SkipSelf(), RDS_DATE_RANGE_SELECTION_STRATEGY],
        DateAdapter,
    ],
    useFactory: RDS_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,
};

const DAYS_PER_WEEK = 7;
class RdsMonthViewComponent {
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
        this._setRanges(this._selected);
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dir = inject(Directionality, { optional: true });
        this.rangeStrategy = inject(RDS_DATE_RANGE_SELECTION_STRATEGY, { optional: true });
        this._rerenderSubscription = Subscription.EMPTY;
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this.selectedChange = new EventEmitter();
        this._userSelection = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this._rdsCalendarBody = null;
        this._monthLabel = null;
        this._weeks = null;
        this._firstWeekOffset = null;
        this._rangeStart = null;
        this._rangeEnd = null;
        this._comparisonRangeStart = null;
        this._comparisonRangeEnd = null;
        this._previewStart = null;
        this._previewEnd = null;
        this._isRange = false;
        this._todayDate = null;
        this._weekdays = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._activeDate = this.dateAdapter.today();
    }
    ngAfterContentInit() {
        this._rerenderSubscription = this.dateAdapter.localeChanges
            .pipe(startWith(null))
            .subscribe(() => this._init());
    }
    ngOnChanges(changes) {
        const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];
        if (comparisonChange && !comparisonChange.firstChange) {
            this._setRanges(this.selected);
        }
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    _onDateSelected(event) {
        this._dateSelected({
            value: this.dateAdapter.clone(event.value.rawValue),
            event: event.event,
        });
    }
    _dateSelected(event) {
        let rangeStartDate;
        let rangeEndDate;
        if (this._selected instanceof DateRange) {
            rangeStartDate = this._selected.start;
            rangeEndDate = this._selected.end;
        }
        else {
            rangeStartDate = rangeEndDate = this._selected;
        }
        if (!this.dateAdapter.sameDate(rangeStartDate, event.value) ||
            !this.dateAdapter.sameDate(rangeEndDate, event.value)) {
            this.selectedChange.emit(event.value);
        }
        this._userSelection.emit({ value: event.value, event: event.event });
        this._previewStart = this._previewEnd = null;
        this.cdr.markForCheck();
    }
    _handleCalendarBodyKeydown(event) {
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);
                break;
            case DOWN_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);
                break;
            case HOME:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 1 - this.dateAdapter.getDate(this._activeDate));
                break;
            case END:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, this.dateAdapter.getNumDaysInMonth(this._activeDate) -
                    this.dateAdapter.getDate(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = event.altKey
                    ? this.dateAdapter.addCalendarYears(this._activeDate, -1)
                    : this.dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this.activeDate = event.altKey
                    ? this.dateAdapter.addCalendarYears(this._activeDate, 1)
                    : this.dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
            case SPACE:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                    this._dateSelected({
                        value: this.dateAdapter.createDate(this.dateAdapter.getYear(this._activeDate), this.dateAdapter.getMonth(this._activeDate), this.dateAdapter.getDate(this._activeDate)),
                        event,
                    });
                    event.preventDefault();
                }
                return;
            case ESCAPE:
                if (this._previewEnd != null && !hasModifierKey(event)) {
                    this._previewStart = this._previewEnd = null;
                    this.selectedChange.emit(null);
                    this._userSelection.emit({ value: null, event });
                    event.preventDefault();
                    event.stopPropagation();
                }
                return;
            default:
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        event.preventDefault();
    }
    _init() {
        this._setRanges(this.selected);
        this._todayDate = this._getCellCompareValue(this.dateAdapter.today());
        this._monthLabel = this.dateFormats.display.monthLabel
            ? this.dateAdapter.format(this.activeDate, this.dateFormats.display.monthLabel)
            : this.dateAdapter
                .getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();
        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), 1);
        this._firstWeekOffset =
            (DAYS_PER_WEEK +
                this.dateAdapter.getDayOfWeek(firstOfMonth) -
                this.dateAdapter.getFirstDayOfWeek()) %
                DAYS_PER_WEEK;
        this._initWeekdays();
        this._createWeekCells();
        this.cdr.markForCheck();
    }
    _focusActiveCell(movePreview) {
        this._rdsCalendarBody?._focusActiveCell(movePreview);
    }
    _previewChanged({ event, value: cell, }) {
        if (this.rangeStrategy) {
            const value = cell && cell.rawValue ? cell.rawValue : null;
            const previewRange = this.rangeStrategy.createPreview(value, this.selected, event);
            this._previewStart = this._getCellCompareValue(previewRange.start);
            this._previewEnd = this._getCellCompareValue(previewRange.end);
            this.cdr.detectChanges();
        }
    }
    _getActiveCell() {
        if (this._weeks) {
            for (let i = 0; i < this._weeks.length; i++) {
                for (let j = 0; j < this._weeks[i].length; j++) {
                    const cell = this._weeks[i][j];
                    if (cell &&
                        this.dateAdapter.sameDate(cell.rawValue, this.activeDate)) {
                        return cell;
                    }
                }
            }
        }
        return null;
    }
    _initWeekdays() {
        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();
        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');
        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');
        const weekdays = longWeekdays.map((long, i) => {
            return { long, narrow: narrowWeekdays[i] };
        });
        this._weekdays = weekdays
            .slice(firstDayOfWeek)
            .concat(weekdays.slice(0, firstDayOfWeek));
    }
    _createWeekCells() {
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);
        const dateNames = this.dateAdapter.getDateNames();
        this._weeks = [[]];
        // previous month
        for (let i = this._firstWeekOffset || 0; i > 0; i--) {
            const date = this._getPreviousMonthDate(i - 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
            const cellClasses = this._getClasses(date, [
                'rds-calendar-body-cell-prev-month',
            ]);
            this._weeks[this._weeks.length - 1].push(new RdsCalendarCell(this.dateAdapter.getDate(date), dateNames[this.dateAdapter.getDate(date) - 1], ariaLabel, enabled, cellClasses, date, this._getCellCompareValue(date)));
        }
        // current month
        for (let i = 0, cell = this._firstWeekOffset || 0; i < daysInMonth; i++, cell++) {
            if (cell == DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            const date = this._getCurrentMonthDate(i + 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
            const cellClasses = this._getClasses(date);
            this._weeks[this._weeks.length - 1].push(new RdsCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, date, this._getCellCompareValue(date)));
        }
        // next month
        const nextMonthDays = DAYS_PER_WEEK -
            this._weeks[this._weeks.length - 1].length +
            (this._weeks.length < 6 ? DAYS_PER_WEEK : 0);
        for (let i = 0; i < nextMonthDays; i++) {
            if (this._weeks[this._weeks.length - 1].length == DAYS_PER_WEEK) {
                this._weeks.push([]);
            }
            const date = this._getNextMonthDate(i + 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
            const cellClasses = this._getClasses(date, [
                'rds-calendar-body-cell-next-month',
            ]);
            this._weeks[this._weeks.length - 1].push(new RdsCalendarCell(this.dateAdapter.getDate(date), dateNames[this.dateAdapter.getDate(date) - 1], ariaLabel, enabled, cellClasses, date, this._getCellCompareValue(date)));
        }
    }
    _shouldEnableDate(date) {
        return (!!date &&
            (!this.minDate ||
                this.dateAdapter.compareDate(date, this.minDate) >= 0) &&
            (!this.maxDate ||
                this.dateAdapter.compareDate(date, this.maxDate) <= 0) &&
            (!this.dateFilter || this.dateFilter(date)));
    }
    _hasSameMonthAndYear(d1, d2) {
        return !!(d1 &&
            d2 &&
            this.dateAdapter.getMonth(d1) == this.dateAdapter.getMonth(d2) &&
            this.dateAdapter.getYear(d1) == this.dateAdapter.getYear(d2));
    }
    _getCellCompareValue(date) {
        if (date) {
            const year = this.dateAdapter.getYear(date);
            const month = this.dateAdapter.getMonth(date);
            const day = this.dateAdapter.getDate(date);
            return new Date(year, month, day).getTime();
        }
        return null;
    }
    _isRtl() {
        return !!(this.dir && this.dir.value === 'rtl');
    }
    _setRanges(selectedValue) {
        if (selectedValue instanceof DateRange) {
            this._rangeStart = this._getCellCompareValue(selectedValue.start);
            this._rangeEnd = this._getCellCompareValue(selectedValue.end);
            this._isRange = true;
        }
        else {
            this._rangeStart = this._rangeEnd =
                this._getCellCompareValue(selectedValue);
            this._isRange = false;
        }
        this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);
        this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);
    }
    _getCurrentMonthDate(day) {
        return this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), day);
    }
    _getPreviousMonthDate(minusDays) {
        let year = this.dateAdapter.getYear(this.activeDate);
        let month = this.dateAdapter.getMonth(this.activeDate);
        if (month - 1 === -1) {
            year--;
            month = 11;
        }
        else {
            month--;
        }
        const day = this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1)) - minusDays;
        return this.dateAdapter.createDate(year, month, day);
    }
    _getNextMonthDate(day) {
        let year = this.dateAdapter.getYear(this.activeDate);
        let month = this.dateAdapter.getMonth(this.activeDate);
        if (month + 1 === 12) {
            year++;
            month = 0;
        }
        else {
            month++;
        }
        return this.dateAdapter.createDate(year, month, day);
    }
    _getClasses(date, cssClasses = []) {
        const classes = this.dateClass ? this.dateClass(date, 'month') : undefined;
        if (classes instanceof Set) {
            cssClasses.forEach((c) => classes.add(c));
            return classes;
        }
        else if (classes instanceof Array) {
            cssClasses.forEach((c) => classes.push(c));
            return classes;
        }
        else if (typeof classes === 'string') {
            return classes + ' ' + cssClasses.join(' ');
        }
        else if (typeof classes === 'object') {
            cssClasses.forEach((c) => (classes[c] = true));
            return cssClasses;
        }
        else {
            return cssClasses;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMonthViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMonthViewComponent, selector: "rds-month-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd" }, outputs: { selectedChange: "selectedChange", _userSelection: "_userSelection", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_rdsCalendarBody", first: true, predicate: RdsCalendarBodyComponent, descendants: true }], exportAs: ["rdsMonthView"], usesOnChanges: true, ngImport: i0, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      @for (day of _weekdays; track day) {\n        <th scope=\"col\" [attr.aria-label]=\"day.long\">\n          {{ day.narrow }}\n        </th>\n      }\n    </tr>\n    <tr>\n      <th\n        class=\"rds-calendar-table-header-divider\"\n        colspan=\"7\"\n        aria-hidden=\"true\"\n      ></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_monthLabel\"\n    [rows]=\"_weeks\"\n    [todayValue]=\"_todayDate\"\n    [startValue]=\"_rangeStart\"\n    [endValue]=\"_rangeEnd\"\n    [comparisonStart]=\"_comparisonRangeStart\"\n    [comparisonEnd]=\"_comparisonRangeEnd\"\n    [previewStart]=\"_previewStart\"\n    [previewEnd]=\"_previewEnd\"\n    [isRange]=\"_isRange\"\n    [labelMinRequiredCells]=\"3\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onDateSelected($event)\"\n    (previewChange)=\"_previewChanged($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n", dependencies: [{ kind: "component", type: RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: ["label", "rows", "todayValue", "startValue", "endValue", "labelMinRequiredCells", "numCols", "activeCell", "isRange", "cellAspectRatio", "comparisonStart", "comparisonEnd", "previewStart", "previewEnd"], outputs: ["selectedValueChange", "previewChange"], exportAs: ["rdsCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMonthViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-month-view', exportAs: 'rdsMonthView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      @for (day of _weekdays; track day) {\n        <th scope=\"col\" [attr.aria-label]=\"day.long\">\n          {{ day.narrow }}\n        </th>\n      }\n    </tr>\n    <tr>\n      <th\n        class=\"rds-calendar-table-header-divider\"\n        colspan=\"7\"\n        aria-hidden=\"true\"\n      ></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_monthLabel\"\n    [rows]=\"_weeks\"\n    [todayValue]=\"_todayDate\"\n    [startValue]=\"_rangeStart\"\n    [endValue]=\"_rangeEnd\"\n    [comparisonStart]=\"_comparisonRangeStart\"\n    [comparisonEnd]=\"_comparisonRangeEnd\"\n    [previewStart]=\"_previewStart\"\n    [previewEnd]=\"_previewEnd\"\n    [isRange]=\"_isRange\"\n    [labelMinRequiredCells]=\"3\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onDateSelected($event)\"\n    (previewChange)=\"_previewChanged($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n" }]
        }], ctorParameters: () => [], propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _rdsCalendarBody: [{
                type: ViewChild,
                args: [RdsCalendarBodyComponent]
            }] } });

const yearsPerPage = 28;
const yearsPerRow = 4;
class RdsMultiYearViewComponent {
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!isSameMultiYearView(this.dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {
            this._init();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
        this._setSelectedYear(value);
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dir = inject(Directionality, { optional: true });
        this._rerenderSubscription = Subscription.EMPTY;
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.selectedChange = new EventEmitter();
        this.yearSelected = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this._rdsCalendarBody = null;
        this._years = null;
        this._todayYear = null;
        this._selectedYear = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._activeDate = this.dateAdapter.today();
    }
    ngAfterContentInit() {
        this._rerenderSubscription = this.dateAdapter.localeChanges
            .pipe(startWith(null))
            .subscribe(() => this._init());
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    _init() {
        this._todayYear = this.dateAdapter.getYear(this.dateAdapter.today());
        const activeYear = this.dateAdapter.getYear(this._activeDate);
        const minYearOfPage = activeYear -
            getActiveOffset(this.dateAdapter, this.activeDate, this.minDate, this.maxDate);
        this._years = [];
        for (let i = 0, row = []; i < yearsPerPage; i++) {
            row.push(minYearOfPage + i);
            if (row.length == yearsPerRow) {
                this._years.push(row.map((year) => this._createCellForYear(year)));
                row = [];
            }
        }
        this.cdr.markForCheck();
    }
    _onYearSelected(event) {
        this._yearSelected({
            value: this.dateAdapter.clone(event.value.rawValue),
            event: event.event,
        });
    }
    _yearSelected(event) {
        const month = this.dateAdapter.getMonth(this.activeDate);
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), month, 1));
        const date = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), month, Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth));
        this.yearSelected.emit({ value: date, event: event.event });
        this.selectedChange.emit(date);
    }
    _handleCalendarBodyKeydown(event) {
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case DOWN_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case HOME:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this.dateAdapter, this.activeDate, this.minDate, this.maxDate));
                break;
            case END:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerPage -
                    getActiveOffset(this.dateAdapter, this.activeDate, this.minDate, this.maxDate) -
                    1);
                break;
            case PAGE_UP:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;
            case PAGE_DOWN:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;
            case ENTER:
            case SPACE:
                this._yearSelected({
                    value: this.dateAdapter.createDate(this.dateAdapter.getYear(this._activeDate), 0, 1),
                    event,
                });
                break;
            default:
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        event.preventDefault();
    }
    _getActiveCell() {
        if (this._years) {
            for (let i = 0; i < this._years.length; i++) {
                for (let j = 0; j < this._years[i].length; j++) {
                    const cell = this._years[i][j];
                    if (cell &&
                        this.dateAdapter.sameDate(cell.rawValue, this.activeDate, 'year')) {
                        return cell;
                    }
                }
            }
        }
        return null;
    }
    _focusActiveCell() {
        this._rdsCalendarBody?._focusActiveCell();
    }
    _createCellForYear(year) {
        const date = this.dateAdapter.createDate(year, 0, 1);
        const yearName = this.dateAdapter.getYearName(date);
        const cellClasses = this.dateClass
            ? this.dateClass(date, 'multi-year')
            : undefined;
        return new RdsCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses, date);
    }
    _shouldEnableYear(year) {
        if (year === undefined ||
            year === null ||
            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||
            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {
            return false;
        }
        if (!this.dateFilter) {
            return true;
        }
        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);
        for (let date = firstOfYear; this.dateAdapter.getYear(date) == year; date = this.dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    _isRtl() {
        return !!(this.dir && this.dir.value === 'rtl');
    }
    _setSelectedYear(value) {
        this._selectedYear = null;
        if (value instanceof DateRange) {
            const displayValue = value.start || value.end;
            if (displayValue) {
                this._selectedYear = this.dateAdapter.getYear(displayValue);
            }
        }
        else if (value) {
            this._selectedYear = this.dateAdapter.getYear(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiYearViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsMultiYearViewComponent, selector: "rds-multi-year-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_rdsCalendarBody", first: true, predicate: RdsCalendarBodyComponent, descendants: true }], exportAs: ["rdsMultiYearView"], ngImport: i0, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [rows]=\"_years\"\n    [todayValue]=\"_todayYear\"\n    [startValue]=\"_selectedYear\"\n    [endValue]=\"_selectedYear\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onYearSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n", dependencies: [{ kind: "component", type: RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: ["label", "rows", "todayValue", "startValue", "endValue", "labelMinRequiredCells", "numCols", "activeCell", "isRange", "cellAspectRatio", "comparisonStart", "comparisonEnd", "previewStart", "previewEnd"], outputs: ["selectedValueChange", "previewChange"], exportAs: ["rdsCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiYearViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-multi-year-view', exportAs: 'rdsMultiYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [rows]=\"_years\"\n    [todayValue]=\"_todayYear\"\n    [startValue]=\"_selectedYear\"\n    [endValue]=\"_selectedYear\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onYearSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n" }]
        }], ctorParameters: () => [], propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _rdsCalendarBody: [{
                type: ViewChild,
                args: [RdsCalendarBodyComponent]
            }] } });
function isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {
    const year1 = dateAdapter.getYear(date1);
    const year2 = dateAdapter.getYear(date2);
    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);
    return (Math.floor((year1 - startingYear) / yearsPerPage) ===
        Math.floor((year2 - startingYear) / yearsPerPage));
}
function getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {
    const activeYear = dateAdapter.getYear(activeDate);
    return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);
}
function getStartingYear(dateAdapter, minDate, maxDate) {
    let startingYear = 0;
    if (maxDate) {
        const maxYear = dateAdapter.getYear(maxDate);
        startingYear = maxYear - yearsPerPage + 1;
    }
    else if (minDate) {
        startingYear = dateAdapter.getYear(minDate);
    }
    return startingYear;
}
function euclideanModulo(a, b) {
    return ((a % b) + b) % b;
}

class RdsYearViewComponent {
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (this.dateAdapter.getYear(oldActiveDate) !==
            this.dateAdapter.getYear(this._activeDate)) {
            this._init();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
        this._setSelectedMonth(value);
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dir = inject(Directionality, { optional: true });
        this._rerenderSubscription = Subscription.EMPTY;
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.selectedChange = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this._rdsCalendarBody = null;
        this._months = null;
        this._yearLabel = null;
        this._todayMonth = null;
        this._selectedMonth = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._activeDate = this.dateAdapter.today();
    }
    ngAfterContentInit() {
        this._rerenderSubscription = this.dateAdapter.localeChanges
            .pipe(startWith(null))
            .subscribe(() => this._init());
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    _onMonthSelected(event) {
        this._monthSelected({
            value: this.dateAdapter.clone(event.value.rawValue),
            event: event.event,
        });
    }
    _monthSelected(event) {
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(event.value);
        const date = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), this.dateAdapter.getMonth(event.value), Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth));
        this.monthSelected.emit({ value: date, event: event.event });
        this.selectedChange.emit(date);
    }
    _handleCalendarBodyKeydown(event) {
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -4);
                break;
            case DOWN_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, 4);
                break;
            case HOME:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -this.dateAdapter.getMonth(this._activeDate));
                break;
            case END:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, 11 - this.dateAdapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
            case SPACE:
                this._monthSelected({
                    value: this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), Math.min(this.dateAdapter.getDate(this.activeDate), this.dateAdapter.getNumDaysInMonth(this.activeDate))),
                    event,
                });
                break;
            default:
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        event.preventDefault();
    }
    _init() {
        this._setSelectedMonth(this.selected);
        this._todayMonth = this._getMonthInCurrentYear(this.dateAdapter.today());
        this._yearLabel = this.dateAdapter.getYearName(this.activeDate);
        const monthNames = this.dateAdapter.getMonthNames('short');
        this._months = [
            [0, 1, 2, 3],
            [4, 5, 6, 7],
            [8, 9, 10, 11],
        ].map((row) => row.map((month) => this._createCellForMonth(month, monthNames[month])));
        this.cdr.markForCheck();
    }
    _focusActiveCell() {
        this._rdsCalendarBody?._focusActiveCell();
    }
    _getActiveCell() {
        if (this._months) {
            for (let i = 0; i < this._months.length; i++) {
                for (let j = 0; j < this._months[i].length; j++) {
                    const cell = this._months[i][j];
                    if (cell &&
                        this.dateAdapter.sameDate(cell.rawValue, this.activeDate, 'month')) {
                        return cell;
                    }
                }
            }
        }
        return null;
    }
    _getMonthInCurrentYear(date) {
        return date &&
            this.dateAdapter.getYear(date) ==
                this.dateAdapter.getYear(this.activeDate)
            ? this.dateAdapter.getMonth(date)
            : null;
    }
    _createCellForMonth(month, monthName) {
        const date = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);
        const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.monthYearA11yLabel);
        const cellClasses = this.dateClass
            ? this.dateClass(date, 'year')
            : undefined;
        return new RdsCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses, date);
    }
    _shouldEnableMonth(month) {
        const activeYear = this.dateAdapter.getYear(this.activeDate);
        if (month === undefined ||
            month === null ||
            this._isYearAndMonthAfterMaxDate(activeYear, month) ||
            this._isYearAndMonthBeforeMinDate(activeYear, month)) {
            return false;
        }
        if (!this.dateFilter) {
            return true;
        }
        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);
        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) == month; date = this.dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    _isYearAndMonthAfterMaxDate(year, month) {
        if (this.maxDate) {
            const maxYear = this.dateAdapter.getYear(this.maxDate);
            const maxMonth = this.dateAdapter.getMonth(this.maxDate);
            return year > maxYear || (year === maxYear && month > maxMonth);
        }
        return false;
    }
    _isYearAndMonthBeforeMinDate(year, month) {
        if (this.minDate) {
            const minYear = this.dateAdapter.getYear(this.minDate);
            const minMonth = this.dateAdapter.getMonth(this.minDate);
            return year < minYear || (year === minYear && month < minMonth);
        }
        return false;
    }
    _isRtl() {
        return !!(this.dir && this.dir.value === 'rtl');
    }
    _setSelectedMonth(value) {
        if (value instanceof DateRange) {
            this._selectedMonth =
                this._getMonthInCurrentYear(value.start) ||
                    this._getMonthInCurrentYear(value.end);
        }
        else {
            this._selectedMonth = this._getMonthInCurrentYear(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsYearViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsYearViewComponent, selector: "rds-year-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass" }, outputs: { selectedChange: "selectedChange", monthSelected: "monthSelected", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_rdsCalendarBody", first: true, predicate: RdsCalendarBodyComponent, descendants: true }], exportAs: ["rdsYearView"], ngImport: i0, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_yearLabel\"\n    [rows]=\"_months\"\n    [todayValue]=\"_todayMonth\"\n    [startValue]=\"_selectedMonth\"\n    [endValue]=\"_selectedMonth\"\n    [labelMinRequiredCells]=\"2\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onMonthSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n", dependencies: [{ kind: "component", type: RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: ["label", "rows", "todayValue", "startValue", "endValue", "labelMinRequiredCells", "numCols", "activeCell", "isRange", "cellAspectRatio", "comparisonStart", "comparisonEnd", "previewStart", "previewEnd"], outputs: ["selectedValueChange", "previewChange"], exportAs: ["rdsCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsYearViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-year-view', exportAs: 'rdsYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_yearLabel\"\n    [rows]=\"_months\"\n    [todayValue]=\"_todayMonth\"\n    [startValue]=\"_selectedMonth\"\n    [endValue]=\"_selectedMonth\"\n    [labelMinRequiredCells]=\"2\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onMonthSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n" }]
        }], ctorParameters: () => [], propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _rdsCalendarBody: [{
                type: ViewChild,
                args: [RdsCalendarBodyComponent]
            }] } });

class RdsToggleButtonComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this._showSeparator = false;
        this.tabindex = 0;
        this.hostTabindex = TAB_INDEX_NOT_FOCUSABLE;
        this.checked = false;
        this.disabled = false;
        this.changed = new EventEmitter();
    }
    get showSeparator() {
        return this._showSeparator;
    }
    set showSeparator(value) {
        this._showSeparator = booleanAttribute(value);
        this.cdr.markForCheck();
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    onButtonClick() {
        this.changed.emit({
            buttonToggle: this,
            checked: !this.checked,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsToggleButtonComponent, selector: "rds-toggle-button", inputs: { ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], value: "value", checked: ["checked", "checked", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, outputs: { changed: "changed" }, host: { properties: { "tabIndex": "this.hostTabindex" } }, ngImport: i0, template: `
    <button
      class="rds-toggle__button"
      [class.rds-toggle__button--checked]="checked"
      type="button"
      [attr.disabled]="disabled ? 'disabled' : null"
      [attr.tabindex]="disabled ? -1 : tabindex"
      [attr.aria-pressed]="checked"
      [attr.aria-label]="ariaLabel"
      [attr.aria-labelledby]="ariaLabelledby"
      (click)="onButtonClick()"
    >
      <ng-content />
    </button>
    @if (showSeparator) {
      <div class="rds-toggle__separator"></div>
    }
  `, isInline: true, styles: [".rds-toggle{position:relative;flex-direction:row;display:inline-flex;height:36px;border-radius:2px;border-width:1px;border-style:solid;border-color:var(--rds-color-stroke-enabled);background:transparent}.rds-toggle rds-toggle-button{position:relative;display:flex;margin-top:-1px;margin-bottom:-1px;border-radius:2px}.rds-toggle rds-toggle-button:first-child{margin-left:-1px}.rds-toggle rds-toggle-button:last-child{margin-right:-1px}.rds-toggle rds-toggle-button:focus{outline:none}.rds-toggle rds-toggle-button .rds-toggle__separator{position:absolute;right:0;top:0;height:20px;margin-top:8px;border-left:1px solid var(--rds-color-grey-2)}.rds-toggle rds-toggle-button.cdk-focused.cdk-keyboard-focused:not([disabled]){z-index:2;outline:2px solid var(--rds-color-stroke-active-focus)}.rds-toggle rds-toggle-button.cdk-focused.cdk-keyboard-focused:not([disabled]) .rds-toggle__separator{border-left-color:transparent}.rds-toggle rds-toggle-button.cdk-focused.cdk-keyboard-focused:not([disabled]) .rds-toggle__button{border-color:var(--rds-color-stroke-enabled)}.rds-toggle .rds-toggle__button{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;align-items:center;align-self:stretch;display:flex;outline:none;border:1px solid transparent;border-radius:2px;padding:8px 15px;background:transparent;color:var(--rds-color-high-contrast)}.rds-toggle .rds-toggle__button[disabled]{color:var(--rds-color-disabled)}.rds-toggle .rds-toggle__button[disabled]:hover{cursor:not-allowed}.rds-toggle:not(.rds-toggle--disabled) .rds-toggle__button:hover:not([disabled]){cursor:pointer;color:var(--rds-color-informative)}.rds-toggle:not(.rds-toggle--disabled) .rds-toggle__button--checked:not([disabled]){background:transparent;color:var(--rds-color-informative);border-color:var(--rds-color-informative)}.rds-toggle.rds-toggle--disabled{background:var(--rds-color-bg-disabled);border-color:var(--rds-color-disabled)}.rds-toggle.rds-toggle--disabled .rds-toggle__button{color:var(--rds-color-disabled)}.rds-toggle.rds-toggle--disabled .rds-toggle__button:hover{cursor:not-allowed}.rds-toggle.rds-toggle--disabled .rds-toggle__button--checked{background:var(--rds-color-bg-solid-pressed);border-color:var(--rds-color-stroke-selected-disabled)}.rds-toggle.rds-toggle--basic{border:none}.rds-toggle.rds-toggle--basic rds-toggle-button.cdk-focused.cdk-keyboard-focused{outline:none}.rds-toggle.rds-toggle--basic rds-toggle-button.cdk-focused.cdk-keyboard-focused .rds-toggle__button{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px}.rds-toggle.rds-toggle--basic rds-toggle-button.cdk-focused.cdk-keyboard-focused .rds-toggle__separator{border-left-color:var(--rds-color-grey-2)}.rds-toggle.rds-toggle--basic rds-toggle-button .rds-toggle__button{padding-left:0;padding-right:0;border:none}.rds-toggle.rds-toggle--basic .rds-toggle__separator{position:relative;margin-left:16px;padding-left:16px}.rds-toggle.rds-toggle--basic.rds-toggle--disabled{background:transparent}.rds-toggle.rds-toggle--basic.rds-toggle--disabled .rds-toggle__button--checked{background:transparent;color:var(--rds-color-low-contrast)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-toggle-button', template: `
    <button
      class="rds-toggle__button"
      [class.rds-toggle__button--checked]="checked"
      type="button"
      [attr.disabled]="disabled ? 'disabled' : null"
      [attr.tabindex]="disabled ? -1 : tabindex"
      [attr.aria-pressed]="checked"
      [attr.aria-label]="ariaLabel"
      [attr.aria-labelledby]="ariaLabelledby"
      (click)="onButtonClick()"
    >
      <ng-content />
    </button>
    @if (showSeparator) {
      <div class="rds-toggle__separator"></div>
    }
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-toggle{position:relative;flex-direction:row;display:inline-flex;height:36px;border-radius:2px;border-width:1px;border-style:solid;border-color:var(--rds-color-stroke-enabled);background:transparent}.rds-toggle rds-toggle-button{position:relative;display:flex;margin-top:-1px;margin-bottom:-1px;border-radius:2px}.rds-toggle rds-toggle-button:first-child{margin-left:-1px}.rds-toggle rds-toggle-button:last-child{margin-right:-1px}.rds-toggle rds-toggle-button:focus{outline:none}.rds-toggle rds-toggle-button .rds-toggle__separator{position:absolute;right:0;top:0;height:20px;margin-top:8px;border-left:1px solid var(--rds-color-grey-2)}.rds-toggle rds-toggle-button.cdk-focused.cdk-keyboard-focused:not([disabled]){z-index:2;outline:2px solid var(--rds-color-stroke-active-focus)}.rds-toggle rds-toggle-button.cdk-focused.cdk-keyboard-focused:not([disabled]) .rds-toggle__separator{border-left-color:transparent}.rds-toggle rds-toggle-button.cdk-focused.cdk-keyboard-focused:not([disabled]) .rds-toggle__button{border-color:var(--rds-color-stroke-enabled)}.rds-toggle .rds-toggle__button{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;align-items:center;align-self:stretch;display:flex;outline:none;border:1px solid transparent;border-radius:2px;padding:8px 15px;background:transparent;color:var(--rds-color-high-contrast)}.rds-toggle .rds-toggle__button[disabled]{color:var(--rds-color-disabled)}.rds-toggle .rds-toggle__button[disabled]:hover{cursor:not-allowed}.rds-toggle:not(.rds-toggle--disabled) .rds-toggle__button:hover:not([disabled]){cursor:pointer;color:var(--rds-color-informative)}.rds-toggle:not(.rds-toggle--disabled) .rds-toggle__button--checked:not([disabled]){background:transparent;color:var(--rds-color-informative);border-color:var(--rds-color-informative)}.rds-toggle.rds-toggle--disabled{background:var(--rds-color-bg-disabled);border-color:var(--rds-color-disabled)}.rds-toggle.rds-toggle--disabled .rds-toggle__button{color:var(--rds-color-disabled)}.rds-toggle.rds-toggle--disabled .rds-toggle__button:hover{cursor:not-allowed}.rds-toggle.rds-toggle--disabled .rds-toggle__button--checked{background:var(--rds-color-bg-solid-pressed);border-color:var(--rds-color-stroke-selected-disabled)}.rds-toggle.rds-toggle--basic{border:none}.rds-toggle.rds-toggle--basic rds-toggle-button.cdk-focused.cdk-keyboard-focused{outline:none}.rds-toggle.rds-toggle--basic rds-toggle-button.cdk-focused.cdk-keyboard-focused .rds-toggle__button{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px}.rds-toggle.rds-toggle--basic rds-toggle-button.cdk-focused.cdk-keyboard-focused .rds-toggle__separator{border-left-color:var(--rds-color-grey-2)}.rds-toggle.rds-toggle--basic rds-toggle-button .rds-toggle__button{padding-left:0;padding-right:0;border:none}.rds-toggle.rds-toggle--basic .rds-toggle__separator{position:relative;margin-left:16px;padding-left:16px}.rds-toggle.rds-toggle--basic.rds-toggle--disabled{background:transparent}.rds-toggle.rds-toggle--basic.rds-toggle--disabled .rds-toggle__button--checked{background:transparent;color:var(--rds-color-low-contrast)}\n"] }]
        }], propDecorators: { hostTabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], value: [{
                type: Input
            }], checked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], changed: [{
                type: Output
            }] } });

class RdsToggleDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.errorHandler = inject(ErrorHandler);
        this._changedDestroy$ = new Subject();
        this.type = 'basic';
        this.hostRole = 'group';
        this._disabled = false;
        this.valueChange = new EventEmitter();
    }
    get hostClass() {
        return ['rds-toggle', `rds-toggle--${this.type}`];
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this.buttonToggles) {
            this.buttonToggles.forEach((item) => (item.disabled = this._disabled));
        }
    }
    get disabled() {
        return this._disabled;
    }
    ngAfterContentInit() {
        Promise.resolve().then(() => {
            const valueItem = this.buttonToggles.find((b) => b.value === this.value);
            if (valueItem) {
                this.selected = valueItem;
                valueItem.checked = true;
                const checkedButtons = this.buttonToggles.filter((b) => b.checked && b.value !== this.value);
                if (checkedButtons.length > 0) {
                    checkedButtons.forEach((b) => (b.checked = false));
                }
            }
            else {
                const checkedToggles = this.buttonToggles.filter((b) => b.checked);
                if (checkedToggles.length > 1) {
                    this.errorHandler.handleError(new Error('Invalid status, more than one toggle is checked'));
                }
                const firstCheckedToggle = checkedToggles[0];
                if (firstCheckedToggle) {
                    firstCheckedToggle.checked = true;
                    this.rawValue = firstCheckedToggle.value;
                    this.selected = firstCheckedToggle;
                }
                if (this.disabled) {
                    this.buttonToggles.forEach((item) => (item.disabled = this.disabled));
                }
            }
            this.refreshSeparators();
            this.refreshChangeListener();
        });
        this.buttonToggles.changes
            .pipe(delay(0, asyncScheduler), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.refreshChangeListener();
            this.refreshSeparators();
        });
    }
    ngOnChanges(changes) {
        if (changes['value'] &&
            changes['value'].previousValue !== changes['value'].currentValue &&
            this.buttonToggles &&
            this.buttonToggles.some((bc) => bc.value === this.value)) {
            this.buttonToggles.find((bc) => bc.value === this.value)?.onButtonClick();
        }
        this.refreshSeparators();
    }
    ngOnDestroy() {
        this._changedDestroy$.next();
        this._changedDestroy$.complete();
    }
    handleToggleButtonChange(toggleChangedEvent) {
        const { buttonToggle, checked } = toggleChangedEvent;
        if (this.selected === buttonToggle) {
            return; // cannot deselect
        }
        if (this.selected) {
            this.selected.checked = false;
        }
        buttonToggle.checked = checked;
        this.rawValue = buttonToggle.value;
        this.selected = buttonToggle;
    }
    refreshSeparators() {
        if (this.buttonToggles && this.type === 'outlined') {
            this.buttonToggles.forEach((item, index, array) => {
                if (item.disabled) {
                    item.showSeparator = true;
                }
                else if (index === array.length - 1) {
                    item.showSeparator = false;
                }
                else if (index !== array.length - 1) {
                    item.showSeparator = !item.checked;
                }
                else if (item.showSeparator) {
                    item.showSeparator = false;
                }
                if (item.checked && index > 0) {
                    array[index - 1].showSeparator = false;
                }
            });
        }
        else if (this.buttonToggles && this.type === 'basic') {
            this.buttonToggles.forEach((item, index, array) => {
                item.showSeparator = index !== array.length - 1;
            });
        }
    }
    refreshChangeListener() {
        this._changedDestroy$.next();
        merge(...this.buttonToggles.map((toggle) => toggle.changed))
            .pipe(filter((event) => event.checked), takeUntil(this._changedDestroy$))
            .subscribe((toggleChangedEvent) => {
            this.handleToggleButtonChange(toggleChangedEvent);
            this.valueChange.emit(this.rawValue);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsToggleDirective, selector: "rds-toggle", inputs: { type: "type", disabled: "disabled", value: "value" }, outputs: { valueChange: "valueChange" }, host: { properties: { "attr.role": "this.hostRole", "class": "this.hostClass", "attr.aria-disabled": "this.disabled", "class.rds-toggle--disabled": "this.disabled" } }, queries: [{ propertyName: "buttonToggles", predicate: RdsToggleButtonComponent }], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-toggle',
                }]
        }], propDecorators: { type: [{
                type: Input
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: HostBinding,
                args: ['class.rds-toggle--disabled']
            }, {
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], buttonToggles: [{
                type: ContentChildren,
                args: [RdsToggleButtonComponent]
            }] } });

let uniqueId$1 = 0;
class RdsCalendarComponent {
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    set showToggle(value) {
        const newValue = booleanAttribute(value);
        if (this._showToggle !== newValue) {
            this._showToggle = newValue;
            this.stateChanges.next();
            this.cdr.markForCheck();
        }
    }
    get showToggle() {
        return this._showToggle;
    }
    get activeDate() {
        return this._clampedActiveDate;
    }
    set activeDate(value) {
        this._clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);
        this.stateChanges.next();
        this.cdr.markForCheck();
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(value) {
        const viewChangedResult = this._currentView !== value ? value : null;
        this._currentView = value;
        this._moveFocusOnNextTick = true;
        this.cdr.markForCheck();
        if (viewChangedResult) {
            this.viewChanged.emit(viewChangedResult);
        }
    }
    get availableViews() {
        return this._availableViews;
    }
    set availableViews(value) {
        this._availableViews = value;
        this._moveFocusOnNextTick = true;
        this.cdr.markForCheck();
    }
    constructor() {
        this.intl = inject(RdsDatepickerIntl);
        this.cdr = inject(ChangeDetectorRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this.class = 'rds-calendar';
        this.headerComponent = null;
        this._calendarHeaderPortal = null;
        this._moveFocusOnNextTick = false;
        this._startAt = null;
        this.startView = 'month';
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this.isMonthDisabled = false;
        this.isMultiYearDisabled = false;
        this.isYearDisabled = false;
        this.selectedChange = new EventEmitter();
        this.yearSelected = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this.viewChanged = new EventEmitter(true);
        this._userSelection = new EventEmitter();
        this.monthView = null;
        this.yearView = null;
        this.multiYearView = null;
        this._clampedActiveDate = null;
        this._currentView = null;
        this._availableViews = ['month', 'year', 'multi-year'];
        this._showToggle = null;
        this.stateChanges = new Subject();
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._intlChanges = this.intl.changes.subscribe(() => {
            this.cdr.markForCheck();
            this.stateChanges.next();
        });
    }
    ngAfterContentInit() {
        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || RdsCalendarHeaderComponent);
        this.activeDate = this.startAt || this.dateAdapter.today();
        this._currentView = this.startView;
    }
    ngAfterViewChecked() {
        if (this._moveFocusOnNextTick) {
            this._moveFocusOnNextTick = false;
            this.focusActiveCell();
        }
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
        this.stateChanges.complete();
    }
    ngOnChanges(changes) {
        const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];
        if (change && !change.firstChange) {
            const view = this._getCurrentViewComponent();
            if (view) {
                this.cdr.detectChanges();
                view._init();
            }
        }
        this.stateChanges.next();
    }
    focusActiveCell() {
        this._getCurrentViewComponent()?._focusActiveCell(false);
    }
    updateTodaysDate() {
        const currentView = this.currentView;
        let view;
        if (currentView === 'month') {
            view = this.monthView;
        }
        else if (currentView === 'year') {
            view = this.yearView;
        }
        else {
            view = this.multiYearView;
        }
        view?._init();
    }
    _dateSelected(event) {
        const date = event.value;
        if (date &&
            !this.dateAdapter.sameDate(this.activeDate, date, 'month') &&
            !(this.selected instanceof DateRange)) {
            this.activeDate = date;
        }
        if (this.selected instanceof DateRange ||
            (date && !this.dateAdapter.sameDate(date, this.selected))) {
            this.selectedChange.emit(date);
        }
        this._userSelection.emit(event);
    }
    _yearSelectedInMultiYearView(event) {
        const normalizedYear = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), 0, 1);
        this.yearSelected.emit(normalizedYear);
        this._goToDateInViewIfAvailable(event, normalizedYear, 'year');
    }
    _monthSelectedInYearView(event) {
        const normalizedMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), this.dateAdapter.getMonth(event.value), 1);
        this.monthSelected.emit(normalizedMonth);
        this._goToDateInViewIfAvailable(event, normalizedMonth, 'month');
    }
    _goToDateInViewIfAvailable(event, normalizedDate, view) {
        this.activeDate = event.value;
        if (view && this.availableViews.includes(view)) {
            this.currentView = view;
        }
        else {
            this._dateSelected({
                value: this.dateAdapter.clone(normalizedDate),
                event: event.event,
            });
        }
    }
    _getCurrentViewComponent() {
        return this.monthView || this.yearView || this.multiYearView;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCalendarComponent, selector: "rds-calendar", inputs: { headerComponent: "headerComponent", startAt: "startAt", startView: "startView", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd", isMonthDisabled: ["isMonthDisabled", "isMonthDisabled", booleanAttribute], isMultiYearDisabled: ["isMultiYearDisabled", "isMultiYearDisabled", booleanAttribute], isYearDisabled: ["isYearDisabled", "isYearDisabled", booleanAttribute], showToggle: "showToggle", availableViews: "availableViews" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", monthSelected: "monthSelected", viewChanged: "viewChanged", _userSelection: "_userSelection" }, host: { properties: { "class": "this.class" } }, providers: [RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER], viewQueries: [{ propertyName: "monthView", first: true, predicate: RdsMonthViewComponent, descendants: true }, { propertyName: "yearView", first: true, predicate: RdsYearViewComponent, descendants: true }, { propertyName: "multiYearView", first: true, predicate: RdsMultiYearViewComponent, descendants: true }], exportAs: ["rdsCalendar"], usesOnChanges: true, ngImport: i0, template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\" />\n\n<div class=\"rds-calendar-content\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  @switch (currentView) {\n    @case ('month') {\n      <rds-month-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        [comparisonStart]=\"comparisonStart\"\n        [comparisonEnd]=\"comparisonEnd\"\n        (_userSelection)=\"_dateSelected($event)\"\n      />\n    }\n    @case ('year') {\n      <rds-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n      />\n    }\n    @case ('multi-year') {\n      <rds-multi-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      />\n    }\n  }\n</div>\n", styles: [".rds-calendar{display:block;background:var(--rds-color-bg-base-box)}.rds-calendar-header{padding:16px 16px 0;border-bottom:1px solid var(--rds-color-grey-2);margin-bottom:12px}.rds-calendar-header .rds-calendar-controls-button-wrapper{display:inline-flex}.rds-calendar-content{padding:0 16px;outline:none}.rds-calendar-controls{display:flex;justify-content:flex-start;margin-bottom:16px;align-items:center}.rds-calendar-controls.rds-calendar-view-mode{justify-content:flex-start;margin-top:0}.rds-calendar-controls.rds-calendar-period-arrows{display:flex;justify-content:space-between}.rds-calendar-spacer{flex:1 1 auto}.rds-calendar-period-button{min-width:0}.rds-calendar-period-button-text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.rds-calendar-arrow.rds-calendar-invert{transform:rotate(180deg)}[dir=rtl] .rds-calendar-arrow{margin:0 5px 0 0}.rds-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.rds-calendar-table-header th{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);text-align:center;padding:0;height:40px}.rds-calendar-table-header th.rds-calendar-table-header-divider{position:relative;height:0}.rds-calendar-table-header th.rds-calendar-table-header-divider:after{content:\"\";position:absolute;top:0;left:-16px;right:-16px;height:0}.rds-calendar-previous-button{margin-right:12px}\n"], dependencies: [{ kind: "directive", type: i1$5.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"], exportAs: ["cdkMonitorFocus"] }, { kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "component", type: RdsMonthViewComponent, selector: "rds-month-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter", "dateClass", "comparisonStart", "comparisonEnd"], outputs: ["selectedChange", "_userSelection", "activeDateChange"], exportAs: ["rdsMonthView"] }, { kind: "component", type: RdsYearViewComponent, selector: "rds-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter", "dateClass"], outputs: ["selectedChange", "monthSelected", "activeDateChange"], exportAs: ["rdsYearView"] }, { kind: "component", type: RdsMultiYearViewComponent, selector: "rds-multi-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter", "dateClass"], outputs: ["selectedChange", "yearSelected", "activeDateChange"], exportAs: ["rdsMultiYearView"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-calendar', exportAs: 'rdsCalendar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER], template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\" />\n\n<div class=\"rds-calendar-content\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  @switch (currentView) {\n    @case ('month') {\n      <rds-month-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        [comparisonStart]=\"comparisonStart\"\n        [comparisonEnd]=\"comparisonEnd\"\n        (_userSelection)=\"_dateSelected($event)\"\n      />\n    }\n    @case ('year') {\n      <rds-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n      />\n    }\n    @case ('multi-year') {\n      <rds-multi-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      />\n    }\n  }\n</div>\n", styles: [".rds-calendar{display:block;background:var(--rds-color-bg-base-box)}.rds-calendar-header{padding:16px 16px 0;border-bottom:1px solid var(--rds-color-grey-2);margin-bottom:12px}.rds-calendar-header .rds-calendar-controls-button-wrapper{display:inline-flex}.rds-calendar-content{padding:0 16px;outline:none}.rds-calendar-controls{display:flex;justify-content:flex-start;margin-bottom:16px;align-items:center}.rds-calendar-controls.rds-calendar-view-mode{justify-content:flex-start;margin-top:0}.rds-calendar-controls.rds-calendar-period-arrows{display:flex;justify-content:space-between}.rds-calendar-spacer{flex:1 1 auto}.rds-calendar-period-button{min-width:0}.rds-calendar-period-button-text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.rds-calendar-arrow.rds-calendar-invert{transform:rotate(180deg)}[dir=rtl] .rds-calendar-arrow{margin:0 5px 0 0}.rds-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.rds-calendar-table-header th{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);text-align:center;padding:0;height:40px}.rds-calendar-table-header th.rds-calendar-table-header-divider{position:relative;height:0}.rds-calendar-table-header th.rds-calendar-table-header-divider:after{content:\"\";position:absolute;top:0;left:-16px;right:-16px;height:0}.rds-calendar-previous-button{margin-right:12px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], headerComponent: [{
                type: Input
            }], startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], isMonthDisabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isMultiYearDisabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isYearDisabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showToggle: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], monthView: [{
                type: ViewChild,
                args: [RdsMonthViewComponent]
            }], yearView: [{
                type: ViewChild,
                args: [RdsYearViewComponent]
            }], multiYearView: [{
                type: ViewChild,
                args: [RdsMultiYearViewComponent]
            }], availableViews: [{
                type: Input
            }] } });
class RdsCalendarHeaderComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.intl = inject(RdsDatepickerIntl);
        this.calendar = inject(forwardRef(() => RdsCalendarComponent));
        this.dateAdapter = inject(DateAdapter);
        this.dateFormats = inject(RDS_DATE_FORMATS);
        this._buttonDescriptionId = `rds-calendar-button-${uniqueId$1++}`;
        this.calendar.stateChanges.subscribe(() => this.cdr.markForCheck());
    }
    get periodButtonText() {
        if (this.calendar.currentView === 'month') {
            return this.dateAdapter.format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);
        }
        if (this.calendar.currentView === 'year') {
            return this.dateAdapter.getYearName(this.calendar.activeDate);
        }
        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);
        const minYearOfPage = activeYear -
            getActiveOffset(this.dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);
        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;
        const minYearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(minYearOfPage, 0, 1));
        const maxYearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(maxYearOfPage, 0, 1));
        return this.intl.formatYearRange(minYearName, maxYearName);
    }
    get periodButtonLabel() {
        return this.calendar.currentView === 'month'
            ? this.intl.switchToMultiYearViewLabel
            : this.intl.switchToMonthViewLabel;
    }
    get prevButtonLabel() {
        return {
            month: this.intl.prevMonthLabel,
            year: this.intl.prevYearLabel,
            'multi-year': this.intl.prevMultiYearLabel,
        }[this.calendar.currentView];
    }
    get nextButtonLabel() {
        return {
            month: this.intl.nextMonthLabel,
            year: this.intl.nextYearLabel,
            'multi-year': this.intl.nextMultiYearLabel,
        }[this.calendar.currentView];
    }
    currentPeriodClicked() {
        this.calendar.currentView =
            this.calendar.currentView == 'month' ? 'multi-year' : 'month';
    }
    previousClicked() {
        this.calendar.activeDate =
            this.calendar.currentView === 'month'
                ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)
                : this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage);
    }
    nextClicked() {
        this.calendar.activeDate =
            this.calendar.currentView === 'month'
                ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)
                : this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? 1 : yearsPerPage);
    }
    previousEnabled() {
        if (!this.calendar.minDate) {
            return true;
        }
        return (!this.calendar.minDate ||
            !this._isSameView(this.calendar.activeDate, this.calendar.minDate));
    }
    nextEnabled() {
        return (!this.calendar.maxDate ||
            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate));
    }
    _isSameView(date1, date2) {
        if (this.calendar.currentView === 'month') {
            return (this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&
                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2));
        }
        if (this.calendar.currentView === 'year') {
            return (this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2));
        }
        return isSameMultiYearView(this.dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCalendarHeaderComponent, selector: "rds-calendar-header", exportAs: ["rdsCalendarHeader"], ngImport: i0, template: "<div class=\"rds-calendar-header\">\n  @if (calendar.showToggle) {\n    <div class=\"rds-calendar-controls rds-calendar-view-mode\">\n      <rds-toggle\n        [(value)]=\"calendar.currentView\"\n        [attr.aria-label]=\"periodButtonLabel\"\n        [attr.aria-describedby]=\"_buttonDescriptionId\"\n        [attr.id]=\"_buttonDescriptionId\"\n        type=\"outlined\"\n        cdkAriaLive=\"polite\"\n      >\n        @if (calendar.availableViews.includes('month')) {\n          <rds-toggle-button [disabled]=\"calendar.isMonthDisabled\" value=\"month\"\n            >{{ intl.monthLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('year')) {\n          <rds-toggle-button [disabled]=\"calendar.isYearDisabled\" value=\"year\"\n            >{{ intl.yearLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('multi-year')) {\n          <rds-toggle-button\n            [disabled]=\"calendar.isMultiYearDisabled\"\n            value=\"multi-year\"\n            >{{ intl.multiYearLabel }}\n          </rds-toggle-button>\n        }\n      </rds-toggle>\n    </div>\n  }\n  <div class=\"rds-calendar-controls rds-calendar-period-arrows\">\n    <span\n      [attr.id]=\"_buttonDescriptionId\"\n      class=\"rds-calendar-period-button-text\"\n      >{{ periodButtonText }}</span\n    >\n    <div class=\"rds-calendar-controls-button-wrapper\">\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"prevButtonLabel\"\n        [disabled]=\"!previousEnabled()\"\n        (click)=\"previousClicked()\"\n        class=\"rds-calendar-previous-button\"\n      >\n        <rds-icon icon=\"chevron_left\" namespace=\"filled\" />\n      </button>\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"nextButtonLabel\"\n        [disabled]=\"!nextEnabled()\"\n        (click)=\"nextClicked()\"\n        class=\"rds-calendar-next-button\"\n      >\n        <rds-icon icon=\"chevron_right\" namespace=\"filled\" />\n      </button>\n    </div>\n    <ng-content />\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: i1$5.CdkAriaLive, selector: "[cdkAriaLive]", inputs: ["cdkAriaLive", "cdkAriaLiveDuration"], exportAs: ["cdkAriaLive"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsToggleButtonComponent, selector: "rds-toggle-button", inputs: ["aria-label", "aria-labelledby", "value", "checked", "disabled"], outputs: ["changed"] }, { kind: "directive", type: RdsToggleDirective, selector: "rds-toggle", inputs: ["type", "disabled", "value"], outputs: ["valueChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-calendar-header', exportAs: 'rdsCalendarHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"rds-calendar-header\">\n  @if (calendar.showToggle) {\n    <div class=\"rds-calendar-controls rds-calendar-view-mode\">\n      <rds-toggle\n        [(value)]=\"calendar.currentView\"\n        [attr.aria-label]=\"periodButtonLabel\"\n        [attr.aria-describedby]=\"_buttonDescriptionId\"\n        [attr.id]=\"_buttonDescriptionId\"\n        type=\"outlined\"\n        cdkAriaLive=\"polite\"\n      >\n        @if (calendar.availableViews.includes('month')) {\n          <rds-toggle-button [disabled]=\"calendar.isMonthDisabled\" value=\"month\"\n            >{{ intl.monthLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('year')) {\n          <rds-toggle-button [disabled]=\"calendar.isYearDisabled\" value=\"year\"\n            >{{ intl.yearLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('multi-year')) {\n          <rds-toggle-button\n            [disabled]=\"calendar.isMultiYearDisabled\"\n            value=\"multi-year\"\n            >{{ intl.multiYearLabel }}\n          </rds-toggle-button>\n        }\n      </rds-toggle>\n    </div>\n  }\n  <div class=\"rds-calendar-controls rds-calendar-period-arrows\">\n    <span\n      [attr.id]=\"_buttonDescriptionId\"\n      class=\"rds-calendar-period-button-text\"\n      >{{ periodButtonText }}</span\n    >\n    <div class=\"rds-calendar-controls-button-wrapper\">\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"prevButtonLabel\"\n        [disabled]=\"!previousEnabled()\"\n        (click)=\"previousClicked()\"\n        class=\"rds-calendar-previous-button\"\n      >\n        <rds-icon icon=\"chevron_left\" namespace=\"filled\" />\n      </button>\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"nextButtonLabel\"\n        [disabled]=\"!nextEnabled()\"\n        (click)=\"nextClicked()\"\n        class=\"rds-calendar-next-button\"\n      >\n        <rds-icon icon=\"chevron_right\" namespace=\"filled\" />\n      </button>\n    </div>\n    <ng-content />\n  </div>\n</div>\n" }]
        }], ctorParameters: () => [] });

// if you changed this value then adjust $rds-dialog-margin accordingly (dialog-container.component.scss)
const DialogTotalInlineMargin = 128;
var DialogSizeWidth;
(function (DialogSizeWidth) {
    DialogSizeWidth[DialogSizeWidth["xl"] = 1608] = "xl";
    DialogSizeWidth[DialogSizeWidth["l"] = 1104] = "l";
    DialogSizeWidth[DialogSizeWidth["m"] = 852] = "m";
    DialogSizeWidth[DialogSizeWidth["s"] = 600] = "s";
})(DialogSizeWidth || (DialogSizeWidth = {}));
class RdsDialogConfig {
    constructor() {
        this.closeOnNavigation = true;
        this.data = null;
        this.disableClose = false;
        this.hasBackdrop = true;
        this.height = '';
        this.maxHeight = '684px';
        this.panelClass = '';
        this.role = 'dialog';
        this.size = 'm';
    }
}

let uniqueId = 0;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
class RdsDialogRef {
    constructor(overlayRef, dialogContainer, id = `rds-dialog-${uniqueId++}`) {
        this.overlayRef = overlayRef;
        this.dialogContainer = dialogContainer;
        this.id = id;
        this.afterOpened$ = new Subject();
        this.afterClosed$ = new Subject();
        this.beforeClosed$ = new Subject();
        this.dialogState = 0 /* RdsDialogState.OPEN */;
        this.disableClose = this.dialogContainer.config.disableClose;
        this.dialogContainer.id = id;
        // Emit when opening animation completes
        this.dialogContainer.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'enter'), take(1))
            .subscribe(() => {
            this.afterOpened$.next();
            this.afterOpened$.complete();
        });
        dialogContainer.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'exit'), take(1))
            .subscribe(() => {
            if (this.closeFallbackTimeout) {
                clearTimeout(this.closeFallbackTimeout);
            }
            this.finishDialogClose();
        });
        overlayRef.detachments().subscribe(() => {
            this.beforeClosed$.next(this.result);
            this.beforeClosed$.complete();
            this.afterClosed$.next(this.result);
            this.afterClosed$.complete();
            this.componentInstance = null;
            this.overlayRef.dispose();
        });
        overlayRef
            .keydownEvents()
            .pipe(filter((event) => event.keyCode === ESCAPE &&
            !this.disableClose &&
            !hasModifierKey(event)))
            .subscribe((event) => {
            event.preventDefault();
            this.close();
        });
        overlayRef.backdropClick().subscribe(() => {
            if (this.disableClose) {
                this.dialogContainer.recaptureFocus();
            }
            else {
                this.close();
            }
        });
    }
    close(dialogResult) {
        this.result = dialogResult;
        this.dialogContainer.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'start'), take(1))
            .subscribe((event) => {
            this.beforeClosed$.next(dialogResult);
            this.beforeClosed$.complete();
            this.overlayRef.detachBackdrop();
            this.closeFallbackTimeout = setTimeout(() => this.finishDialogClose(), event.totalTime + 100);
        });
        this.dialogContainer.startExitAnimation();
        this.dialogState = 1 /* RdsDialogState.CLOSING */;
    }
    afterOpened() {
        return this.afterOpened$.asObservable();
    }
    afterClosed() {
        return this.afterClosed$.asObservable();
    }
    beforeClosed() {
        return this.beforeClosed$.asObservable();
    }
    backdropClick() {
        return this.overlayRef.backdropClick();
    }
    centerDialog() {
        const positionStrategy = this.getPositionStrategy();
        positionStrategy.centerHorizontally();
        positionStrategy.centerVertically();
    }
    changeSize(width = '', height = '') {
        this.getPositionStrategy().width(width).height(height);
    }
    updateOverlayPosition() {
        this.overlayRef.updatePosition();
    }
    finishDialogClose() {
        this.dialogState = 2 /* RdsDialogState.CLOSED */;
        this.overlayRef.dispose();
    }
    getPositionStrategy() {
        return this.overlayRef.getConfig()
            .positionStrategy;
    }
}

class RdsDialogActionsContainerDirective {
    constructor() {
        this.hostClasses = 'rds-dialog__actions-container';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogActionsContainerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogActionsContainerDirective, selector: "[rds-dialog-actions-container], [rdsDialogActionsContainer]", host: { properties: { "class": "this.hostClasses" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogActionsContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[rds-dialog-actions-container], [rdsDialogActionsContainer]`,
                }]
        }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }] } });

function getClosestDialog(element, openDialogs) {
    let parent = element.nativeElement.parentElement;
    while (parent && !parent.classList.contains('rds-dialog')) {
        parent = parent.parentElement;
    }
    return parent
        ? openDialogs.find((dialog) => dialog.id === parent?.id) || null
        : null;
}

const animations = {
    dialogComponent: trigger('dialogContainer', [
        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),
        state('enter', style({ transform: 'none' })),
        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),
        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),
    ]),
};
class RdsDialogContainerComponent extends BasePortalOutlet {
    constructor() {
        super(...arguments);
        this.elementRef = inject(ElementRef);
        this.focusTrapFactory = inject(ConfigurableFocusTrapFactory);
        this.cdr = inject(ChangeDetectorRef);
        this.document = inject(DOCUMENT);
        this.config = inject(RdsDialogConfig);
        this.ariaLabelledBy = this.config.ariaLabelledBy || null;
        this.animationState = 'enter';
        this.animationStateChanged = new EventEmitter();
        this.hostClass = 'rds-dialog';
        this.hostTabindex = TAB_INDEX_NOT_FOCUSABLE;
        this.hostAriaDialog = true;
        this.attachDomPortal = (portal) => {
            if (this.portalOutlet.hasAttached()) {
                this.throwCannotAttachError();
            }
            this.setupFocusTrap();
            return this.portalOutlet.attachDomPortal(portal);
        };
    }
    get hostId() {
        return this.id;
    }
    get hostSize() {
        return this.config.size;
    }
    get hostRole() {
        return this.config.role;
    }
    get hostAriaLabelledby() {
        return this.config.ariaLabel ? null : this.ariaLabelledBy;
    }
    get hostAriaLabel() {
        return this.config.ariaLabel || null;
    }
    get hostAriaDescribedby() {
        return this.config.ariaDescribedBy || null;
    }
    get hostDialogContainer() {
        return this.animationState;
    }
    onAnimationStart($event) {
        this.animationStateChanged.emit($event);
    }
    onAnimationDone(event) {
        if (event.toState === 'enter') {
            this.trapFocus();
        }
        else if (event.toState === 'exit') {
            this.restoreFocus();
        }
        this.animationStateChanged.emit(event);
    }
    attachComponentPortal(portal) {
        if (this.portalOutlet.hasAttached()) {
            this.throwCannotAttachError();
        }
        this.setupFocusTrap();
        return this.portalOutlet.attachComponentPortal(portal);
    }
    attachTemplatePortal(portal) {
        if (this.portalOutlet.hasAttached()) {
            this.throwCannotAttachError();
        }
        this.setupFocusTrap();
        return this.portalOutlet.attachTemplatePortal(portal);
    }
    startExitAnimation() {
        this.animationState = 'exit';
        this.cdr.markForCheck();
    }
    recaptureFocus() {
        if (!this.isFocusInsideDialog()) {
            const focusContainer = !this.focusTrap.focusInitialElement();
            if (focusContainer) {
                this.elementRef.nativeElement.focus();
            }
        }
    }
    trapFocus() {
        this.focusTrap.focusInitialElementWhenReady();
    }
    restoreFocus() {
        const elementToFocus = this.elementFocusedBeforeDialogWasOpened;
        // extra check, because IE can set the `activeElement` to null
        if (elementToFocus && typeof elementToFocus.focus === 'function') {
            const activeElement = this.document.activeElement;
            const hostNativeElement = this.elementRef.nativeElement;
            // Make sure that focus is still inside the dialog or is on the body
            if (!activeElement ||
                activeElement === this.document.body ||
                activeElement === hostNativeElement ||
                hostNativeElement.contains(activeElement)) {
                elementToFocus.focus();
            }
        }
        if (this.focusTrap) {
            this.focusTrap.destroy();
        }
    }
    setupFocusTrap() {
        if (!this.focusTrap) {
            this.focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
        }
        if (this.document) {
            this.elementFocusedBeforeDialogWasOpened = this.document
                .activeElement;
        }
    }
    isFocusInsideDialog() {
        const element = this.elementRef.nativeElement;
        const activeElement = this.document.activeElement;
        return element === activeElement || element.contains(activeElement);
    }
    throwCannotAttachError() {
        throw Error('Attempting to attach dialog content after content is already attached');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogContainerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogContainerComponent, selector: "rds-dialog", host: { listeners: { "@dialogContainer.start": "onAnimationStart($event)", "@dialogContainer.done": "onAnimationDone($event)" }, properties: { "class": "this.hostClass", "tabIndex": "this.hostTabindex", "attr.aria-dialog": "this.hostAriaDialog", "attr.id": "this.hostId", "attr.size": "this.hostSize", "attr.role": "this.hostRole", "attr.aria-labelledby": "this.hostAriaLabelledby", "attr.aria-label": "this.hostAriaLabel", "attr.aria-describedby": "this.hostAriaDescribedby", "@dialogContainer": "this.hostDialogContainer" } }, viewQueries: [{ propertyName: "portalOutlet", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: ` <ng-template cdkPortalOutlet /> `, isInline: true, styles: [".rds-dialog{background-color:var(--rds-color-bg-base-elevated);border-radius:2px;position:relative;width:100%;outline:none;margin:64px;overflow:hidden}.rds-dialog .rds-dialog__header{font-size:20px;font-weight:600;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;justify-content:space-between;padding:24px;row-gap:16px;color:var(--rds-color-high-contrast)}.rds-dialog .rds-dialog__icon-placeholder{top:24px;right:0;position:absolute;align-items:center;justify-content:flex-end;display:inline-flex;margin-right:24px;background:transparent;color:var(--rds-color-low-contrast)}.rds-dialog .rds-dialog__icon-placeholder .rds-button{margin-right:16px}.rds-dialog .rds-dialog__icon-placeholder .rds-button:last-of-type{margin-right:0}.rds-dialog .rds-dialog__content{padding-inline:24px;padding-block:0 24px;overflow-y:auto;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-dialog .rds-dialog__content{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-dialog .rds-dialog__actions-container{display:flex;justify-content:flex-end;gap:16px;width:100%;padding:24px}.rds-dialog.rds-dialog--scrollable .rds-dialog__content{padding-right:12px}.rds-dialog.rds-dialog--scrollable .rds-dialog__actions-container{border-top:1px solid var(--rds-color-grey-2)}@media (max-width: 767.999999px){.rds-dialog{margin:16px}}\n"], dependencies: [{ kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], animations: [animations.dialogComponent], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-dialog', template: ` <ng-template cdkPortalOutlet /> `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [animations.dialogComponent], styles: [".rds-dialog{background-color:var(--rds-color-bg-base-elevated);border-radius:2px;position:relative;width:100%;outline:none;margin:64px;overflow:hidden}.rds-dialog .rds-dialog__header{font-size:20px;font-weight:600;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;justify-content:space-between;padding:24px;row-gap:16px;color:var(--rds-color-high-contrast)}.rds-dialog .rds-dialog__icon-placeholder{top:24px;right:0;position:absolute;align-items:center;justify-content:flex-end;display:inline-flex;margin-right:24px;background:transparent;color:var(--rds-color-low-contrast)}.rds-dialog .rds-dialog__icon-placeholder .rds-button{margin-right:16px}.rds-dialog .rds-dialog__icon-placeholder .rds-button:last-of-type{margin-right:0}.rds-dialog .rds-dialog__content{padding-inline:24px;padding-block:0 24px;overflow-y:auto;color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-dialog .rds-dialog__content{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-dialog .rds-dialog__content{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-dialog .rds-dialog__actions-container{display:flex;justify-content:flex-end;gap:16px;width:100%;padding:24px}.rds-dialog.rds-dialog--scrollable .rds-dialog__content{padding-right:12px}.rds-dialog.rds-dialog--scrollable .rds-dialog__actions-container{border-top:1px solid var(--rds-color-grey-2)}@media (max-width: 767.999999px){.rds-dialog{margin:16px}}\n"] }]
        }], propDecorators: { portalOutlet: [{
                type: ViewChild,
                args: [CdkPortalOutlet, { static: true }]
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostTabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], hostAriaDialog: [{
                type: HostBinding,
                args: ['attr.aria-dialog']
            }], hostId: [{
                type: HostBinding,
                args: ['attr.id']
            }], hostSize: [{
                type: HostBinding,
                args: ['attr.size']
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostAriaLabelledby: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], hostAriaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], hostAriaDescribedby: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], hostDialogContainer: [{
                type: HostBinding,
                args: ['@dialogContainer']
            }], onAnimationStart: [{
                type: HostListener,
                args: ['@dialogContainer.start', ['$event']]
            }], onAnimationDone: [{
                type: HostListener,
                args: ['@dialogContainer.done', ['$event']]
            }] } });

const RDS_DIALOG_DATA = new InjectionToken('RDS_DIALOG_DATA');

class RdsDialogService {
    constructor() {
        this.overlay = inject(Overlay);
        this.injector = inject(Injector);
        this.scrollStrategyOptions = inject(ScrollStrategyOptions);
        this.parentDialogService = inject(RdsDialogService, {
            optional: true,
            skipSelf: true,
        });
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.dialogsOpenAtCurrentLevel = [];
        this.afterAllClosedAtCurrentLevel = new Subject();
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.afterOpenedAtCurrentLevel = new Subject();
        this.scrollStrategy = () => this.scrollStrategyOptions.block();
        this.afterAllClosed = defer(() => this.openDialogs.length
            ? this._afterAllClosed
            : this._afterAllClosed.pipe(startWith([undefined])));
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get openDialogs() {
        return this.parentDialogService
            ? this.parentDialogService.openDialogs
            : this.dialogsOpenAtCurrentLevel;
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get afterOpened() {
        return this.parentDialogService
            ? this.parentDialogService.afterOpened
            : this.afterOpenedAtCurrentLevel;
    }
    get _afterAllClosed() {
        const parent = this.parentDialogService;
        return parent ? parent._afterAllClosed : this.afterAllClosedAtCurrentLevel;
    }
    ngOnDestroy() {
        this.closeDialogs(this.dialogsOpenAtCurrentLevel);
        this.afterAllClosedAtCurrentLevel.complete();
        this.afterOpenedAtCurrentLevel.complete();
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    open(componentOrTemplateRef, dialogConfig) {
        const mergedDialogConfig = this.mergeDialogConfigWithDefaultDialogConfigValues(dialogConfig);
        if (mergedDialogConfig.id && this.getDialogById(mergedDialogConfig.id)) {
            throw Error(`Dialog with id "${mergedDialogConfig.id}" exists already. The dialog id must be unique.`);
        }
        const overlayRef = this.createOverlayRef(mergedDialogConfig);
        const dialogContainer = this.attachDialogContainer(overlayRef, mergedDialogConfig);
        const dialogRef = this.attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, mergedDialogConfig);
        this.openDialogs.push(dialogRef);
        dialogRef.afterClosed().subscribe(() => this.removeDialogRef(dialogRef));
        this.afterOpened.next(dialogRef);
        return dialogRef;
    }
    closeAll() {
        this.closeDialogs(this.openDialogs);
    }
    createOverlayRef(dialogConfig) {
        const overlayConfig = this.buildOverlayConfig({
            panelClass: dialogConfig.panelClass,
            hasBackdrop: dialogConfig.hasBackdrop,
            size: dialogConfig.size,
            minHeight: dialogConfig.minHeight,
            maxHeight: dialogConfig.maxHeight,
            closeOnNavigation: dialogConfig.closeOnNavigation,
            role: dialogConfig.role,
        });
        return this.overlay.create(overlayConfig);
    }
    getDialogById(id) {
        return this.openDialogs.find((dialog) => dialog.id === id);
    }
    buildOverlayConfig({ panelClass, hasBackdrop, size, minHeight, maxHeight, closeOnNavigation, }) {
        return new OverlayConfig({
            positionStrategy: this.overlay.position().global(),
            scrollStrategy: this.scrollStrategy(),
            panelClass,
            hasBackdrop,
            minWidth: '0px',
            maxWidth: `${DialogSizeWidth[size]}px`,
            minHeight,
            maxHeight,
            disposeOnNavigation: closeOnNavigation,
        });
    }
    attachDialogContainer(overlayRef, dialogConfig) {
        const userInjector = dialogConfig.viewContainerRef && dialogConfig.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: RdsDialogConfig, useValue: dialogConfig }],
        });
        const containerPortal = new ComponentPortal(RdsDialogContainerComponent, dialogConfig.viewContainerRef, injector, dialogConfig.componentFactoryResolver);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, dialogConfig) {
        const dialogRef = new RdsDialogRef(overlayRef, dialogContainer, dialogConfig.id);
        if (componentOrTemplateRef instanceof TemplateRef) {
            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, 
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            { $implicit: dialogConfig.data, dialogRef }));
        }
        else {
            const injector = this.createInjector(dialogConfig, dialogRef, dialogContainer);
            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, dialogConfig.viewContainerRef, injector));
            dialogRef.componentInstance = contentRef.instance;
        }
        dialogRef.changeSize(`${DialogSizeWidth[dialogConfig.size]}px`, dialogConfig.height);
        dialogRef.centerDialog();
        dialogRef.updateOverlayPosition();
        return dialogRef;
    }
    createInjector(dialogConfig, dialogRef, dialogContainer) {
        const userInjector = dialogConfig.viewContainerRef && dialogConfig.viewContainerRef.injector;
        const providers = [
            { provide: RdsDialogContainerComponent, useValue: dialogContainer },
            { provide: RDS_DIALOG_DATA, useValue: dialogConfig.data },
            { provide: RdsDialogRef, useValue: dialogRef },
        ];
        return Injector.create({
            parent: userInjector || this.injector,
            providers,
        });
    }
    removeDialogRef(dialogRef) {
        const index = this.openDialogs.indexOf(dialogRef);
        if (index > -1) {
            this.openDialogs.splice(index, 1);
        }
    }
    closeDialogs(dialogs) {
        let i = dialogs.length;
        while (i--) {
            dialogs[i].close();
        }
    }
    mergeDialogConfigWithDefaultDialogConfigValues(dialogConfig) {
        const config = { ...new RdsDialogConfig(), ...dialogConfig };
        if (!config.panelClass) {
            config.panelClass = 'rds-dialog-overlay';
        }
        else if (typeof config.panelClass === 'string') {
            config.panelClass = ['rds-dialog-overlay', config.panelClass];
        }
        else {
            config.panelClass = ['rds-dialog-overlay', ...config.panelClass];
        }
        return config;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class RdsDialogCloseDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.dialogService = inject(RdsDialogService);
        this.dialogRef = inject(RdsDialogRef, {
            optional: true,
        });
        this._type = 'button';
    }
    get hostType() {
        return this._type;
    }
    set hostType(newValue) {
        this._type = newValue;
    }
    onHostClick() {
        this.dialogRef?.close(this.dialogResult);
    }
    ngOnInit() {
        if (!this.dialogRef) {
            this.dialogRef = getClosestDialog(this.elementRef, this.dialogService.openDialogs);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogCloseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogCloseDirective, selector: "[rds-dialog-close], [rdsDialogClose]", inputs: { dialogResult: ["rds-dialog-close", "dialogResult"], hostType: ["type", "hostType"] }, host: { listeners: { "click": "onHostClick()" }, properties: { "attr.type": "this.hostType" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-dialog-close], [rdsDialogClose]',
                }]
        }], propDecorators: { dialogResult: [{
                type: Input,
                args: ['rds-dialog-close']
            }], hostType: [{
                type: Input,
                args: ['type']
            }, {
                type: HostBinding,
                args: ['attr.type']
            }], onHostClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class RdsDialogIconPlaceholderDirective {
    constructor() {
        this.hostClass = 'rds-dialog__icon-placeholder';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogIconPlaceholderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogIconPlaceholderDirective, selector: "[rds-dialog-icon-placeholder], [rdsDialogIconPlaceholder]", host: { properties: { "class": "this.hostClass" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogIconPlaceholderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[rds-dialog-icon-placeholder], [rdsDialogIconPlaceholder]`,
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

const HEADER_SELECTOR = '.rds-dialog__header';
const SCROLLABLE_CLASS = 'rds-dialog--scrollable';
const ACTIONS_SELECTOR = '.rds-dialog__actions-container';
class RdsDialogContentDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.destroyRef = inject(DestroyRef);
        this.renderer = inject(Renderer2);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.contentObserver = inject(ContentObserver);
        this.dimensionsObserver = inject(DimensionsObserver);
        this._height = '100%';
        this.hostClass = 'rds-dialog__content';
    }
    get hostHeight() {
        return this._height;
    }
    ngAfterContentInit() {
        const refreshTriggers$ = merge(this.dimensionsObserver.observe(this.nativeElement), this.contentObserver.observe(this.nativeElement));
        // thanks to this concat we debounce all but first emission
        concat(refreshTriggers$.pipe(take(1)), refreshTriggers$.pipe(debounceTime(200)))
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.ngZone.runOutsideAngular(() => {
                this._refreshHeight();
            });
        });
    }
    _refreshHeight() {
        const parentElement = this.nativeElement.parentElement;
        this.toggleScrollableClass();
        const header = parentElement.querySelector(HEADER_SELECTOR);
        const actionsContainer = parentElement.querySelector(ACTIONS_SELECTOR);
        const actionsContainerHeight = actionsContainer?.scrollHeight || 0;
        Promise.resolve().then(() => {
            const headerHeight = header?.scrollHeight || 0;
            const newHeight = `calc(100% - ${headerHeight}px - ${actionsContainerHeight}px)`;
            if (this._height !== newHeight) {
                this.ngZone.run(() => {
                    this._height = newHeight;
                    this.cdr.markForCheck();
                });
            }
        });
    }
    toggleScrollableClass() {
        const rdsDialog = this.nativeElement.parentElement?.parentElement;
        if (!rdsDialog) {
            return;
        }
        if (this.nativeElement.scrollHeight > this.nativeElement.offsetHeight) {
            this.renderer.addClass(rdsDialog, SCROLLABLE_CLASS);
        }
        else {
            this.renderer.removeChild(rdsDialog, SCROLLABLE_CLASS);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogContentDirective, selector: "[rds-dialog-content], [rdsDialogContent]", host: { properties: { "class": "this.hostClass", "style.height": "this.hostHeight" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[rds-dialog-content], [rdsDialogContent]`,
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostHeight: [{
                type: HostBinding,
                args: ['style.height']
            }] } });

let nextId$3 = 0;
class RdsDialogHeaderDirective {
    constructor() {
        this.dialogService = inject(RdsDialogService);
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.contentObserver = inject(ContentObserver);
        this.dialogRef = inject(RdsDialogRef, {
            optional: true,
        });
        this._id = `rds-dialog-header-${nextId$3++}`;
        this._width = '100%';
        this.hostClass = 'rds-dialog__header';
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        this._id = newValue;
    }
    ngOnInit() {
        if (!this.dialogRef) {
            const dialogRef = getClosestDialog(this.elementRef, this.dialogService.openDialogs);
            if (dialogRef) {
                this.dialogRef = dialogRef;
            }
        }
        if (this.dialogRef) {
            Promise.resolve().then(() => {
                if (this.dialogRef && !this.dialogRef.dialogContainer.ariaLabelledBy) {
                    this.dialogRef.dialogContainer.ariaLabelledBy = this.id;
                }
            });
        }
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => this._refreshWidth());
        this.contentObserver
            .observe(this.elementRef)
            .pipe(debounceTime$1(50), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._refreshWidth());
    }
    _refreshWidth() {
        const contentElement = this.elementRef.nativeElement;
        const parentElement = contentElement.parentElement;
        const iconPlaceholder = parentElement.querySelector('.rds-dialog__icon-placeholder');
        const iconsWidth = iconPlaceholder?.clientWidth || 0;
        Promise.resolve().then(() => {
            const newWidth = `calc(100% - ${iconsWidth}px)`;
            if (newWidth !== this._width) {
                this.ngZone.run(() => {
                    this._width = newWidth;
                    this.cdr.markForCheck();
                });
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogHeaderDirective, selector: "[rds-dialog-header], [rdsDialogHeader]", inputs: { id: "id" }, host: { properties: { "style.width": "this._width", "class": "this.hostClass", "id": "this.id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-dialog-header], [rdsDialogHeader]',
                }]
        }], propDecorators: { _width: [{
                type: HostBinding,
                args: ['style.width']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['id']
            }] } });

const ELEMENTS$7 = [
    RdsDialogHeaderDirective,
    RdsDialogActionsContainerDirective,
    RdsDialogContentDirective,
    RdsDialogIconPlaceholderDirective,
    RdsDialogCloseDirective,
];
class RdsDialogModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogModule, declarations: [RdsDialogContainerComponent, RdsDialogHeaderDirective,
            RdsDialogActionsContainerDirective,
            RdsDialogContentDirective,
            RdsDialogIconPlaceholderDirective,
            RdsDialogCloseDirective], imports: [CommonModule,
            PortalModule,
            A11yModule,
            OverlayModule,
            ObserversModule], exports: [RdsDialogHeaderDirective,
            RdsDialogActionsContainerDirective,
            RdsDialogContentDirective,
            RdsDialogIconPlaceholderDirective,
            RdsDialogCloseDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogModule, imports: [CommonModule,
            PortalModule,
            A11yModule,
            OverlayModule,
            ObserversModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PortalModule,
                        A11yModule,
                        OverlayModule,
                        ObserversModule,
                    ],
                    declarations: [RdsDialogContainerComponent, ...ELEMENTS$7],
                    exports: [...ELEMENTS$7],
                }]
        }] });

let datepickerUid = 0;
const RDS_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('RDS_DATEPICKER_SCROLL_STRATEGY');
function RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
const RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: RDS_DATEPICKER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY,
};
class RdsDatepickerContentBase {
    constructor() {
        this._elementRef = inject(ElementRef);
    }
}
class RdsDatepickerContentComponent extends RdsDatepickerContentBase {
    get isContentTouch() {
        return this.datepicker && this.datepicker.touchUi ? true : null;
    }
    get transformPanel() {
        return this._animationState;
    }
    _onAnimationDone() {
        this._animationDone.next();
    }
    constructor() {
        super();
        this._elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.globalModel = inject(RdsDateSelectionModel);
        this.dateAdapter = inject(DateAdapter);
        this.rangeSelectionStrategy = inject(RDS_DATE_RANGE_SELECTION_STRATEGY, { optional: true });
        this.intl = inject(RdsDatepickerIntl);
        this._subscriptions = new Subscription();
        this._model = null;
        this.class = 'rds-datepicker-content';
        this._calendar = null;
        this.datepicker = null;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this._animationState = 'enter';
        this._animationDone = new Subject();
        this._closeButtonText = null;
        this._closeButtonFocused = null;
        this._actionsPortal = null;
        this.intl.changes
            .pipe(startWith(this.intl.closeCalendarLabel), map(() => this.intl.closeCalendarLabel || 'Close calendar'), takeUntilDestroyed())
            .subscribe((value) => {
            this._closeButtonText = value;
            this.cdr.markForCheck();
        });
    }
    ngOnInit() {
        this._model = this._actionsPortal
            ? this.globalModel.clone()
            : this.globalModel;
    }
    ngAfterViewInit() {
        this._subscriptions.add(this.datepicker?.stateChanges.subscribe(() => {
            this.cdr.markForCheck();
        }));
        this._calendar?.focusActiveCell();
    }
    ngOnDestroy() {
        this._subscriptions.unsubscribe();
        this._animationDone.complete();
    }
    _handleUserSelection(event) {
        const selection = this._model?.selection;
        const value = event.value;
        const isRange = selection instanceof DateRange;
        if (isRange && this.rangeSelectionStrategy) {
            const newSelection = this.rangeSelectionStrategy.selectionFinished(value, selection, event.event);
            this._model?.updateSelection(newSelection, this);
        }
        else if (value &&
            (isRange || !this.dateAdapter.sameDate(value, selection))) {
            this._model?.add(value);
        }
        if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {
            this.datepicker?.close();
        }
    }
    _startExitAnimation() {
        this._animationState = 'void';
        this.cdr.markForCheck();
    }
    _getSelected() {
        return this._model?.selection || null;
    }
    _applyPendingSelection() {
        if (this._model !== this.globalModel) {
            this.globalModel.updateSelection(this._model?.selection, this);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerContentComponent, selector: "rds-datepicker-content", host: { listeners: { "@transformPanel.done": "_onAnimationDone()" }, properties: { "class": "this.class", "class.rds-datepicker-content-touch": "this.isContentTouch", "@transformPanel": "this.transformPanel" } }, viewQueries: [{ propertyName: "_calendar", first: true, predicate: i0.forwardRef(() => RdsCalendarComponent), descendants: true }], exportAs: ["rdsDatepickerContent"], usesInheritance: true, ngImport: i0, template: "<div\n  cdkTrapFocus\n  class=\"rds-datepicker-content-container\"\n  [class.rds-datepicker-content-container-with-actions]=\"_actionsPortal\"\n>\n  <rds-calendar\n    [id]=\"datepicker?.id|| ''\"\n    [ngClass]=\"datepicker?.panelClass || ''\"\n    [class.rds-datepicker-with-toggle]=\"datepicker?.showToggle\"\n    [startAt]=\"datepicker?.startAt || null\"\n    [startView]=\"datepicker?._getStartView() || 'month'\"\n    [availableViews]=\"datepicker?.availableViews || ['month', 'year', 'multi-year']\"\n    [minDate]=\"datepicker?._getMinDate() || null\"\n    [maxDate]=\"datepicker?._getMaxDate() || null\"\n    [dateFilter]=\"datepicker?._getDateFilter() || null\"\n    [headerComponent]=\"datepicker?.calendarHeaderComponent || null\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker?.dateClass || null\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [showToggle]=\"datepicker?.showToggle || null\"\n    [@fadeInCalendar]=\"'enter'\"\n    (yearSelected)=\"datepicker?._selectYear($event)\"\n    (monthSelected)=\"datepicker?._selectMonth($event)\"\n    (viewChanged)=\"datepicker?._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n  />\n\n  <ng-template [cdkPortalOutlet]=\"_actionsPortal\" />\n\n  <!--&lt;!&ndash;   Invisible close button for screen reader users. &ndash;&gt;-->\n  <button\n    type=\"button\"\n    rds-primary-button\n    class=\"rds-datepicker-close-button\"\n    [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n    (focus)=\"_closeButtonFocused = true\"\n    (blur)=\"_closeButtonFocused = false\"\n    (click)=\"datepicker?.close()\"\n  >\n    {{ _closeButtonText }}\n  </button>\n</div>\n", styles: [".rds-datepicker-content{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;display:block;border-radius:4px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar{width:312px;height:374px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar.rds-datepicker-with-toggle{height:428px;padding-bottom:16px}.rds-datepicker-content .rds-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .rds-datepicker-content .rds-datepicker-close-button{display:none}.rds-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.rds-datepicker-content-touch{display:block;max-height:80vh;overflow:auto}.rds-datepicker-content-touch .rds-calendar{width:100%;height:100%}@media all and (orientation: landscape){.rds-datepicker-content-touch .rds-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.rds-datepicker-content-touch .rds-datepicker-content-container{width:80vw;height:100vw}.rds-datepicker-content-touch .rds-datepicker-content-container-with-actions{height:115vw}}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: RdsButtonComponent, selector: "\n    button[rds-primary-button],\n    button[rds-warning-button],\n    button[rds-secondary-button],\n    button[rds-secondary-warning-button],\n    button[rdsPrimaryButton],\n    button[rdsWarningButton],\n    button[rdsSecondaryButton],\n    button[rdsSecondaryWarningButton],\n  " }, { kind: "directive", type: i1$5.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "component", type: RdsCalendarComponent, selector: "rds-calendar", inputs: ["headerComponent", "startAt", "startView", "selected", "minDate", "maxDate", "dateFilter", "dateClass", "comparisonStart", "comparisonEnd", "isMonthDisabled", "isMultiYearDisabled", "isYearDisabled", "showToggle", "availableViews"], outputs: ["selectedChange", "yearSelected", "monthSelected", "viewChanged", "_userSelection"], exportAs: ["rdsCalendar"] }], animations: [
            trigger('transformPanel', [
                state('void', style({
                    opacity: 0,
                    transform: 'scale(1, 0.8)',
                })),
                transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({
                    opacity: 1,
                    transform: 'scale(1, 1)',
                }))),
                transition('* => void', animate('100ms linear', style({ opacity: 0 }))),
            ]),
            trigger('fadeInCalendar', [
                state('void', style({ opacity: 0 })),
                state('enter', style({ opacity: 1 })),
                transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-datepicker-content', animations: [
                        trigger('transformPanel', [
                            state('void', style({
                                opacity: 0,
                                transform: 'scale(1, 0.8)',
                            })),
                            transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({
                                opacity: 1,
                                transform: 'scale(1, 1)',
                            }))),
                            transition('* => void', animate('100ms linear', style({ opacity: 0 }))),
                        ]),
                        trigger('fadeInCalendar', [
                            state('void', style({ opacity: 0 })),
                            state('enter', style({ opacity: 1 })),
                            transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),
                        ]),
                    ], exportAs: 'rdsDatepickerContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  cdkTrapFocus\n  class=\"rds-datepicker-content-container\"\n  [class.rds-datepicker-content-container-with-actions]=\"_actionsPortal\"\n>\n  <rds-calendar\n    [id]=\"datepicker?.id|| ''\"\n    [ngClass]=\"datepicker?.panelClass || ''\"\n    [class.rds-datepicker-with-toggle]=\"datepicker?.showToggle\"\n    [startAt]=\"datepicker?.startAt || null\"\n    [startView]=\"datepicker?._getStartView() || 'month'\"\n    [availableViews]=\"datepicker?.availableViews || ['month', 'year', 'multi-year']\"\n    [minDate]=\"datepicker?._getMinDate() || null\"\n    [maxDate]=\"datepicker?._getMaxDate() || null\"\n    [dateFilter]=\"datepicker?._getDateFilter() || null\"\n    [headerComponent]=\"datepicker?.calendarHeaderComponent || null\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker?.dateClass || null\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [showToggle]=\"datepicker?.showToggle || null\"\n    [@fadeInCalendar]=\"'enter'\"\n    (yearSelected)=\"datepicker?._selectYear($event)\"\n    (monthSelected)=\"datepicker?._selectMonth($event)\"\n    (viewChanged)=\"datepicker?._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n  />\n\n  <ng-template [cdkPortalOutlet]=\"_actionsPortal\" />\n\n  <!--&lt;!&ndash;   Invisible close button for screen reader users. &ndash;&gt;-->\n  <button\n    type=\"button\"\n    rds-primary-button\n    class=\"rds-datepicker-close-button\"\n    [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n    (focus)=\"_closeButtonFocused = true\"\n    (blur)=\"_closeButtonFocused = false\"\n    (click)=\"datepicker?.close()\"\n  >\n    {{ _closeButtonText }}\n  </button>\n</div>\n", styles: [".rds-datepicker-content{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;display:block;border-radius:4px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar{width:312px;height:374px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar.rds-datepicker-with-toggle{height:428px;padding-bottom:16px}.rds-datepicker-content .rds-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .rds-datepicker-content .rds-datepicker-close-button{display:none}.rds-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.rds-datepicker-content-touch{display:block;max-height:80vh;overflow:auto}.rds-datepicker-content-touch .rds-calendar{width:100%;height:100%}@media all and (orientation: landscape){.rds-datepicker-content-touch .rds-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.rds-datepicker-content-touch .rds-datepicker-content-container{width:80vw;height:100vw}.rds-datepicker-content-touch .rds-datepicker-content-container-with-actions{height:115vw}}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], isContentTouch: [{
                type: HostBinding,
                args: ['class.rds-datepicker-content-touch']
            }], transformPanel: [{
                type: HostBinding,
                args: ['@transformPanel']
            }], _calendar: [{
                type: ViewChild,
                args: [forwardRef(() => RdsCalendarComponent)]
            }], _onAnimationDone: [{
                type: HostListener,
                args: ['@transformPanel.done']
            }] } });
class RdsDatepickerBaseDirective {
    get startAt() {
        return (this._startAt ||
            (this.datepickerInput ? this.datepickerInput.getStartValue() : null));
    }
    set startAt(value) {
        this._startAt = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    set touchUi(value) {
        const isTouchUi = booleanAttribute(value);
        if (isTouchUi !== this._touchUi) {
            this._touchUi = isTouchUi;
            this.stateChanges.next();
        }
    }
    get touchUi() {
        return this._touchUi;
    }
    set disabled(value) {
        const newValue = booleanAttribute(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this.stateChanges.next();
        }
    }
    get disabled() {
        return this._disabled === null && this.datepickerInput
            ? this.datepickerInput.disabled
            : !!this._disabled;
    }
    set availableViews(newViews) {
        const views = RDS_CALENDAR_VIEW_ORDERED.filter((view) => newViews.includes(view));
        if (views.join('') !== this._availableViews.join('')) {
            this._availableViews = views;
            this._updateShowToggleIfNeeded();
            this.stateChanges.next();
        }
    }
    get availableViews() {
        return this._availableViews;
    }
    set showToggle(value) {
        const newValue = value === null ? value : coerceBooleanProperty(value);
        if (this._originalShowToggle !== newValue) {
            this._originalShowToggle = newValue;
            this._updateShowToggleIfNeeded();
            this.stateChanges.next();
        }
    }
    get showToggle() {
        return this._showToggle;
    }
    set opened(value) {
        booleanAttribute(value) ? this.open() : this.close();
    }
    get opened() {
        return this._opened;
    }
    _getStartView() {
        return this.availableViews.includes(this.startView)
            ? this.startView
            : this.availableViews[0];
    }
    _getMinDate() {
        return this.datepickerInput && this.datepickerInput.min;
    }
    _getMaxDate() {
        return this.datepickerInput && this.datepickerInput.max;
    }
    _getDateFilter() {
        return this.datepickerInput && this.datepickerInput.dateFilter;
    }
    constructor() {
        this.dialog = inject(RdsDialogService);
        this.overlay = inject(Overlay);
        this.ngZone = inject(NgZone);
        this.viewContainerRef = inject(ViewContainerRef);
        this.scrollStrategy = inject(RDS_DATEPICKER_SCROLL_STRATEGY);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.document = inject(DOCUMENT, { optional: true });
        this.model = inject(RdsDateSelectionModel);
        this._originalShowToggle = null;
        this._inputStateChanges = Subscription.EMPTY;
        this.calendarHeaderComponent = null;
        this._startAt = null;
        this.startView = 'month';
        this._touchUi = false;
        this._disabled = null;
        this._availableViews = RDS_CALENDAR_VIEW_ORDERED;
        this._showToggle = true;
        this.xPosition = 'start';
        this.yPosition = 'below';
        this.restoreFocus = true;
        this.yearSelected = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this.viewChanged = new EventEmitter(true);
        this.dateClass = null;
        this.openedStream = new EventEmitter();
        this.closedStream = new EventEmitter();
        this.panelClass = '';
        this._opened = false;
        this.id = `rds-datepicker-${datepickerUid++}`;
        this._popupRef = null;
        this._dialogRef = null;
        this._popupComponentRef = null;
        this._focusedElementBeforeOpen = null;
        this._backdropHarnessClass = `${this.id}-backdrop`;
        this._actionsPortal = null;
        this.stateChanges = new Subject();
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
    }
    ngOnChanges(changes) {
        const positionChange = changes['xPosition'] || changes['yPosition'];
        if (positionChange && !positionChange.firstChange && this._popupRef) {
            this._setConnectedPositions(this._popupRef.getConfig()
                .positionStrategy);
            if (this.opened) {
                this._popupRef.updatePosition();
            }
        }
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this._destroyPopup();
        this.close();
        this._inputStateChanges.unsubscribe();
        this.stateChanges.complete();
    }
    select(date) {
        this.model.add(date);
    }
    _selectYear(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    _selectMonth(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    _viewChanged(view) {
        this.viewChanged.emit(view);
    }
    registerInput(input) {
        if (this.datepickerInput) {
            throw Error('A RdsDatepicker can only be associated with a single input.');
        }
        this._inputStateChanges.unsubscribe();
        this.datepickerInput = input;
        this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));
        return this.model;
    }
    registerActions(portal) {
        if (this._actionsPortal) {
            throw Error('A RdsDatepicker can only be associated with a single actions row.');
        }
        this._actionsPortal = portal;
    }
    removeActions(portal) {
        if (portal === this._actionsPortal) {
            this._actionsPortal = null;
        }
    }
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this.datepickerInput) {
            throw Error('Attempted to open an RdsDatepicker with no associated input.');
        }
        if (this.document) {
            this._focusedElementBeforeOpen = this.document
                .activeElement;
        }
        this.touchUi ? this._openAsDialog() : this._openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    }
    close() {
        if (!this._opened) {
            return;
        }
        if (this._popupComponentRef && this._popupRef) {
            const instance = this._popupComponentRef.instance;
            instance._startExitAnimation();
            instance._animationDone
                .pipe(take(1))
                .subscribe(() => this._destroyPopup());
        }
        if (this._dialogRef) {
            this._dialogRef.close();
            this._dialogRef = null;
        }
        const completeClose = () => {
            if (this._opened) {
                this._opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        };
        if (this.restoreFocus &&
            this._focusedElementBeforeOpen &&
            typeof this._focusedElementBeforeOpen.focus === 'function') {
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    _applyPendingSelection() {
        const instance = this._popupComponentRef?.instance || this._dialogRef?.componentInstance;
        instance?._applyPendingSelection();
    }
    _updateShowToggleIfNeeded() {
        const shouldShowToggle = this._originalShowToggle === null
            ? this._availableViews.length > 1
            : coerceBooleanProperty(this._originalShowToggle);
        if (this._showToggle !== shouldShowToggle) {
            this._showToggle = shouldShowToggle;
        }
    }
    _openAsDialog() {
        if (this._dialogRef) {
            this._dialogRef.close();
        }
        this._dialogRef = this.dialog.open(RdsDatepickerContentComponent, {
            viewContainerRef: this.viewContainerRef,
            panelClass: 'rds-datepicker-dialog',
            hasBackdrop: true,
            disableClose: false,
            size: 'xl',
            height: '',
            minHeight: '',
            maxHeight: '',
        });
        this._dialogRef.afterClosed().subscribe(() => this.close());
        if (this._dialogRef.componentInstance) {
            this._forwardContentValues(this._dialogRef.componentInstance);
        }
    }
    _openAsPopup() {
        const portal = new ComponentPortal(RdsDatepickerContentComponent, this.viewContainerRef);
        this._destroyPopup();
        this._createPopup();
        this._popupComponentRef = this._popupRef.attach(portal);
        this._forwardContentValues(this._popupComponentRef?.instance);
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            this._popupRef?.updatePosition();
        });
    }
    _forwardContentValues(instance) {
        instance.datepicker = this;
        instance._actionsPortal = this._actionsPortal;
    }
    _createPopup() {
        const positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.rds-datepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition();
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._setConnectedPositions(positionStrategy),
            hasBackdrop: true,
            backdropClass: [
                'rds-overlay-transparent-backdrop',
                this._backdropHarnessClass,
            ],
            scrollStrategy: this.scrollStrategy(),
            panelClass: 'rds-datepicker-popup',
        });
        this._popupRef = this.overlay.create(overlayConfig);
        this._popupRef.overlayElement.setAttribute('role', 'dialog');
        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((event) => {
            return ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||
                (this.datepickerInput &&
                    hasModifierKey(event, 'altKey') &&
                    event.keyCode === UP_ARROW));
        }))).subscribe((event) => {
            if (event) {
                event.preventDefault();
            }
            this.close();
        });
    }
    _destroyPopup() {
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupRef = this._popupComponentRef = null;
        }
    }
    _setConnectedPositions(strategy) {
        const primaryX = this.xPosition === 'end' ? 'end' : 'start';
        const secondaryX = primaryX === 'start' ? 'end' : 'start';
        const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';
        const secondaryY = primaryY === 'top' ? 'bottom' : 'top';
        return strategy.withPositions([
            {
                originX: primaryX,
                originY: secondaryY,
                overlayX: primaryX,
                overlayY: primaryY,
            },
            {
                originX: primaryX,
                originY: primaryY,
                overlayX: primaryX,
                overlayY: secondaryY,
            },
            {
                originX: secondaryX,
                originY: secondaryY,
                overlayX: secondaryX,
                overlayY: primaryY,
            },
            {
                originX: secondaryX,
                originY: primaryY,
                overlayX: secondaryX,
                overlayY: secondaryY,
            },
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerBaseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsDatepickerBaseDirective, inputs: { calendarHeaderComponent: "calendarHeaderComponent", startAt: "startAt", startView: "startView", touchUi: "touchUi", disabled: "disabled", availableViews: "availableViews", showToggle: "showToggle", xPosition: "xPosition", yPosition: "yPosition", restoreFocus: ["restoreFocus", "restoreFocus", booleanAttribute], dateClass: "dateClass", panelClass: ["panelClass", "panelClass", coerceStringArray], opened: "opened" }, outputs: { yearSelected: "yearSelected", monthSelected: "monthSelected", viewChanged: "viewChanged", openedStream: "openedStream", closedStream: "closedStream" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { calendarHeaderComponent: [{
                type: Input
            }], startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], touchUi: [{
                type: Input
            }], disabled: [{
                type: Input
            }], availableViews: [{
                type: Input
            }], showToggle: [{
                type: Input
            }], xPosition: [{
                type: Input
            }], yPosition: [{
                type: Input
            }], restoreFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], dateClass: [{
                type: Input
            }], openedStream: [{
                type: Output
            }], closedStream: [{
                type: Output
            }], panelClass: [{
                type: Input,
                args: [{ transform: coerceStringArray }]
            }], opened: [{
                type: Input
            }] } });

class RdsDatepickerComponent extends RdsDatepickerBaseDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerComponent, selector: "rds-datepicker", providers: [
            RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER,
            {
                provide: RdsDatepickerBaseDirective,
                useExisting: RdsDatepickerComponent,
            },
        ], exportAs: ["rdsDatepicker"], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-datepicker',
                    template: '',
                    exportAs: 'rdsDatepicker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER,
                        {
                            provide: RdsDatepickerBaseDirective,
                            useExisting: RdsDatepickerComponent,
                        },
                    ],
                }]
        }] });

class RdsDatepickerInputEvent {
    constructor(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
class RdsDatepickerInputBaseDirective {
    get value() {
        return this._model
            ? this._getValueFromModel(this._model.selection)
            : this._pendingValue;
    }
    set value(value) {
        this._assignValueProgrammatically(value);
    }
    set disabled(value) {
        const newValue = booleanAttribute(value);
        const element = this.elementRef.nativeElement;
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this.stateChanges.next();
        }
        if (newValue && this._isInitialized && element.blur) {
            element.blur();
        }
    }
    get disabled() {
        return this._disabled || this._parentDisabled();
    }
    _getValidators() {
        return [
            this._parseValidator,
            this._minValidator,
            this._maxValidator,
            this._filterValidator,
        ];
    }
    _registerModel(model) {
        this._model = model;
        this._valueChangesSubscription.unsubscribe();
        if (this._pendingValue) {
            this._assignValue(this._pendingValue);
        }
        this._valueChangesSubscription = this._model.selectionChanged.subscribe((event) => {
            if (this._shouldHandleChangeEvent(event)) {
                const value = this._getValueFromModel(event.selection);
                this._lastValueValid = this._isValidValue(value);
                this._cvaOnChange(value);
                this._onTouched();
                this._formatValue(value);
                this.dateInput.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
                this.dateChange.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
            }
        });
    }
    constructor() {
        this.elementRef = inject(ElementRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this._isInitialized = false;
        this._valueChangesSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        this.dateChange = new EventEmitter();
        this.dateInput = new EventEmitter();
        this.stateChanges = new Subject();
        this._onTouched = noop;
        this._validatorOnChange = noop;
        this._cvaOnChange = noop;
        this._pendingValue = null;
        this._lastValueValid = false;
        this._parseValidator = () => {
            return this._lastValueValid
                ? null
                : { rdsDatepickerParse: { text: this.elementRef.nativeElement.value } };
        };
        this._filterValidator = (control) => {
            const controlValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return !controlValue || this._matchesFilter(controlValue)
                ? null
                : { rdsDatepickerFilter: true };
        };
        this._minValidator = (control) => {
            const controlValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const min = this._getMinDate();
            return !min ||
                !controlValue ||
                this.dateAdapter.compareDate(min, controlValue) <= 0
                ? null
                : { rdsDatepickerMin: { min: min, actual: controlValue } };
        };
        this._maxValidator = (control) => {
            const controlValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const max = this._getMaxDate();
            return !max ||
                !controlValue ||
                this.dateAdapter.compareDate(max, controlValue) >= 0
                ? null
                : { rdsDatepickerMax: { max: max, actual: controlValue } };
        };
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._localeSubscription = this.dateAdapter.localeChanges.subscribe(() => {
            this._assignValueProgrammatically(this.value);
        });
    }
    ngAfterViewInit() {
        this._isInitialized = true;
    }
    ngOnChanges(changes) {
        if (dateInputsHaveChanged(changes, this.dateAdapter)) {
            this.stateChanges.next(undefined);
        }
    }
    ngOnDestroy() {
        this._valueChangesSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this.stateChanges.complete();
    }
    registerOnValidatorChange(fn) {
        this._validatorOnChange = fn;
    }
    validate(c) {
        return this._validator ? this._validator(c) : null;
    }
    writeValue(value) {
        this._assignValueProgrammatically(value);
    }
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _onKeydown(event) {
        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;
        if (isAltDownArrow && !this.elementRef.nativeElement.readOnly) {
            this._openPopup();
            event.preventDefault();
        }
    }
    _onInput(value) {
        const lastValueWasValid = this._lastValueValid;
        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);
        this._lastValueValid = this._isValidValue(date);
        date = this.dateAdapter.getValidDateOrNull(date);
        if (!this.dateAdapter.sameDate(date, this.value)) {
            this._assignValue(date);
            this._cvaOnChange(date);
            this.dateInput.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
        }
        else {
            // Call the CVA change handler for invalid values
            // since this is what marks the control as dirty.
            if (value && !this.value) {
                this._cvaOnChange(date);
            }
            if (lastValueWasValid !== this._lastValueValid) {
                this._validatorOnChange();
            }
        }
    }
    _onChange() {
        this.dateChange.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
    }
    _onBlur() {
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    _formatValue(value) {
        this.elementRef.nativeElement.value = value
            ? this.dateAdapter.format(value, this.dateFormats.display.dateInput)
            : '';
    }
    _assignValue(value) {
        if (this._model) {
            this._assignValueToModel(value);
            this._pendingValue = null;
        }
        else {
            this._pendingValue = value;
        }
    }
    _isValidValue(value) {
        return !value || this.dateAdapter.isValid(value);
    }
    _parentDisabled() {
        return false;
    }
    _assignValueProgrammatically(value) {
        value = this.dateAdapter.deserialize(value);
        this._lastValueValid = this._isValidValue(value);
        value = this.dateAdapter.getValidDateOrNull(value);
        this._assignValue(value);
        this._formatValue(value);
    }
    _matchesFilter(value) {
        const filter = this._getDateFilter();
        return !filter || filter(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputBaseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerInputBaseDirective, inputs: { value: "value", disabled: "disabled" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }] } });
function dateInputsHaveChanged(changes, adapter) {
    const keys = Object.keys(changes);
    for (const key of keys) {
        const { previousValue, currentValue } = changes[key];
        if (adapter.isDateInstance(previousValue) &&
            adapter.isDateInstance(currentValue)) {
            if (!adapter.sameDate(previousValue, currentValue)) {
                return true;
            }
        }
        else {
            return true;
        }
    }
    return false;
}

const RDS_DATEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => RdsDatepickerInputDirective),
    multi: true,
};
const RDS_DATEPICKER_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => RdsDatepickerInputDirective),
    multi: true,
};
const RDS_INPUT_VALUE_ACCESSOR = new InjectionToken('RDS_INPUT_VALUE_ACCESSOR');
class RdsDatepickerInputDirective extends RdsDatepickerInputBaseDirective {
    constructor() {
        super(...arguments);
        this.renderer = inject(Renderer2);
        this.destroyRef = inject(DestroyRef);
        this.formField = inject(RDS_FORM_FIELD, { optional: true });
        this._destroyDatepickerSubscriptions$ = new Subject();
        this.class = 'rds-datepicker-input';
        this._min = null;
        this._max = null;
        this._validator = Validators.compose(super._getValidators());
    }
    get ariaHasPopup() {
        return this._datepicker ? 'dialog' : null;
    }
    get ariaOwns() {
        return (this._datepicker?.opened && this._datepicker.id) || null;
    }
    get attrMin() {
        return this.min ? this.dateAdapter.toIso8601(this.min) : null;
    }
    get attrMax() {
        return this.max ? this.dateAdapter.toIso8601(this.max) : null;
    }
    get attrDataRdsCalendar() {
        return this._datepicker ? this._datepicker.id : null;
    }
    get attrDisabled() {
        return this.disabled ? true : null;
    }
    set rdsDatepicker(datepicker) {
        this._destroyDatepickerSubscriptions$.next();
        if (datepicker) {
            this._datepicker = datepicker;
            this._datepicker.closedStream
                .pipe(takeUntil(this._destroyDatepickerSubscriptions$), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this._onTouched());
            this._registerModel(datepicker.registerInput(this));
            merge(this._datepicker.stateChanges, this.dateAdapter.localeChanges)
                .pipe(takeUntil(this._destroyDatepickerSubscriptions$), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this._setDefaultPlaceholder();
                this._formatValue(this.value);
            });
        }
    }
    get min() {
        return this._min;
    }
    set min(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._min)) {
            this._min = validValue;
            this._validatorOnChange();
        }
    }
    get max() {
        return this._max;
    }
    set max(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._max)) {
            this._max = validValue;
            this._validatorOnChange();
        }
    }
    get dateFilter() {
        return this._dateFilter;
    }
    set dateFilter(value) {
        const wasMatchingValue = this._matchesFilter(this.value);
        this._dateFilter = value;
        if (this._matchesFilter(this.value) !== wasMatchingValue) {
            this._validatorOnChange();
        }
    }
    onInput($event) {
        this._onInput($event.target.value);
    }
    _onChange() {
        super._onChange();
    }
    _onBlur() {
        super._onBlur();
    }
    _onKeydown($event) {
        super._onKeydown($event);
    }
    getConnectedOverlayOrigin() {
        return this.formField
            ? this.formField.getConnectedOverlayOrigin()
            : this.elementRef;
    }
    getStartValue() {
        return this.value;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._setDefaultPlaceholder();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._destroyDatepickerSubscriptions$.complete();
    }
    _formatValue(value) {
        this.elementRef.nativeElement.value = value
            ? this.dateAdapter.format(value, this.dateFormats.display.dateInput, this._datepicker?.availableViews)
            : '';
    }
    _openPopup() {
        if (this._datepicker) {
            this._datepicker.open();
        }
    }
    _getValueFromModel(modelValue) {
        return modelValue;
    }
    _assignValueToModel(value) {
        if (this._model) {
            this._model.updateSelection(value, this);
        }
    }
    _getMinDate() {
        return this._min;
    }
    _getMaxDate() {
        return this._max;
    }
    _getDateFilter() {
        return this._dateFilter;
    }
    _shouldHandleChangeEvent(event) {
        return event.source !== this;
    }
    _setDefaultPlaceholder() {
        if (this.elementRef && this.elementRef.nativeElement) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'date-placeholder', this._calculateDefaultPlaceholder());
        }
    }
    _calculateDefaultPlaceholder() {
        return this.dateAdapter.placeholderFormat(this.dateFormats.display.dateInput, this._datepicker?.availableViews);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerInputDirective, selector: "input[rdsDatepicker], input[rds-datepicker]", inputs: { rdsDatepicker: "rdsDatepicker", min: "min", max: "max", dateFilter: ["rdsDatepickerFilter", "dateFilter"] }, host: { listeners: { "input": "onInput($event)", "change": "_onChange()", "blur": "_onBlur()", "keydown": "_onKeydown($event)" }, properties: { "class": "this.class", "attr.aria-haspopup": "this.ariaHasPopup", "attr.aria-owns": "this.ariaOwns", "attr.min": "this.attrMin", "attr.max": "this.attrMax", "attr.data-rds-calendar": "this.attrDataRdsCalendar", "disabled": "this.attrDisabled" } }, providers: [
            RDS_DATEPICKER_VALUE_ACCESSOR,
            RDS_DATEPICKER_VALIDATORS,
            {
                provide: RDS_INPUT_VALUE_ACCESSOR,
                useExisting: RdsDatepickerInputDirective,
            },
        ], exportAs: ["rdsDatepickerInput"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsDatepicker], input[rds-datepicker]',
                    providers: [
                        RDS_DATEPICKER_VALUE_ACCESSOR,
                        RDS_DATEPICKER_VALIDATORS,
                        {
                            provide: RDS_INPUT_VALUE_ACCESSOR,
                            useExisting: RdsDatepickerInputDirective,
                        },
                    ],
                    exportAs: 'rdsDatepickerInput',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], ariaHasPopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], attrMin: [{
                type: HostBinding,
                args: ['attr.min']
            }], attrMax: [{
                type: HostBinding,
                args: ['attr.max']
            }], attrDataRdsCalendar: [{
                type: HostBinding,
                args: ['attr.data-rds-calendar']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['disabled']
            }], rdsDatepicker: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], dateFilter: [{
                type: Input,
                args: ['rdsDatepickerFilter']
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], _onChange: [{
                type: HostListener,
                args: ['change']
            }], _onBlur: [{
                type: HostListener,
                args: ['blur']
            }], _onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class RdsDatepickerToggleIconDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerToggleIconDirective, selector: "[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]',
                }]
        }] });
class RdsDatepickerToggleComponent {
    get classes() {
        const classes = ['rds-datepicker-toggle'];
        if (this.forDatepicker && this.forDatepicker.opened) {
            classes.push('rds-datepicker-toggle-active');
        }
        return classes;
    }
    get dataRdsCalendar() {
        return this.forDatepicker ? this.forDatepicker.id : null;
    }
    set disabled(value) {
        const newValue = value === undefined ? undefined : booleanAttribute(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this.cdr.markForCheck();
        }
    }
    get disabled() {
        if (this._disabled === undefined && this.forDatepicker) {
            return this.forDatepicker.disabled;
        }
        return this._disabled || false;
    }
    get _buttonSize() {
        if (this.formField) {
            return this.formField?.size !== 'l' ? this.formField?.size : 'm';
        }
        else {
            return 's';
        }
    }
    _onClick($event) {
        this._open($event);
    }
    constructor(tabIndex) {
        this.intl = inject(RdsDatepickerIntl);
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.formField = inject(forwardRef(() => RdsFormFieldComponent), { optional: true });
        this._stateChanges = Subscription.EMPTY;
        this._tabIndex = null;
        this.ariaLabel = '';
        this._customIcon = null;
        const parsedTabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
        this.tabIndex =
            parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    ngOnChanges(changes) {
        if (changes['datepicker']) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this._watchStateChanges();
        if (this.formField) {
            this.formField.control.stateChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this.cdr.markForCheck());
        }
    }
    _open(event) {
        if (this.forDatepicker && !this.disabled) {
            this.forDatepicker.open();
            event.stopPropagation();
        }
    }
    _watchStateChanges() {
        const datepickerStateChanged = this.forDatepicker
            ? this.forDatepicker.stateChanges.asObservable()
            : of(null);
        const inputStateChanged = this.forDatepicker && this.forDatepicker.datepickerInput
            ? this.forDatepicker.datepickerInput.stateChanges
            : of(null);
        const datepickerToggled = this.forDatepicker
            ? merge(this.forDatepicker.openedStream, this.forDatepicker.closedStream)
            : of(null);
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this.intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this.cdr.markForCheck());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDatepickerToggleComponent, selector: "rds-datepicker-toggle", inputs: { forDatepicker: "forDatepicker", tabIndex: ["tabIndex", "tabIndex", numberAttribute], ariaLabel: ["aria-label", "ariaLabel"], disabled: "disabled" }, host: { listeners: { "click": "_onClick($event)" }, properties: { "class": "this.classes", "attr.data-rds-calendar": "this.dataRdsCalendar", "attr.tabindex": "this._tabIndex" } }, queries: [{ propertyName: "_customIcon", first: true, predicate: RdsDatepickerToggleIconDirective, descendants: true }], exportAs: ["rdsDatepickerToggle"], usesOnChanges: true, ngImport: i0, template: "<button\n  rds-icon-button\n  type=\"button\"\n  [size]=\"_buttonSize\"\n  [ngClass]=\"{ active: forDatepicker?.opened }\"\n  class=\"rds-button--with-only-icon\"\n  [attr.aria-haspopup]=\"forDatepicker ? 'dialog' : null\"\n  [attr.aria-label]=\"ariaLabel || intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n>\n  @if (!_customIcon) {\n    <rds-icon\n      class=\"rds-datepicker-toggle-default-icon\"\n      icon=\"calendar\"\n      namespace=\"outlined\"\n    />\n  }\n  <ng-content\n    select=\"[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]\"\n  />\n</button>\n", styles: [".rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle{display:flex}.rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.rds-form-field .rds-form-field__content-prefix .rds-icon-button .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-icon-button .rds-datepicker-toggle-default-icon{margin:auto}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-datepicker-toggle', exportAs: 'rdsDatepickerToggle', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n  rds-icon-button\n  type=\"button\"\n  [size]=\"_buttonSize\"\n  [ngClass]=\"{ active: forDatepicker?.opened }\"\n  class=\"rds-button--with-only-icon\"\n  [attr.aria-haspopup]=\"forDatepicker ? 'dialog' : null\"\n  [attr.aria-label]=\"ariaLabel || intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n>\n  @if (!_customIcon) {\n    <rds-icon\n      class=\"rds-datepicker-toggle-default-icon\"\n      icon=\"calendar\"\n      namespace=\"outlined\"\n    />\n  }\n  <ng-content\n    select=\"[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]\"\n  />\n</button>\n", styles: [".rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle{display:flex}.rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.rds-form-field .rds-form-field__content-prefix .rds-icon-button .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-icon-button .rds-datepicker-toggle-default-icon{margin:auto}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], dataRdsCalendar: [{
                type: HostBinding,
                args: ['attr.data-rds-calendar']
            }], _tabIndex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], forDatepicker: [{
                type: Input
            }], tabIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], disabled: [{
                type: Input
            }], _customIcon: [{
                type: ContentChild,
                args: [RdsDatepickerToggleIconDirective]
            }], _onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

const RDS_DATE_RANGE_INPUT_PARENT = new InjectionToken('RDS_DATE_RANGE_INPUT_PARENT');
class RdsDateRangeInputPartBaseDirective extends RdsDatepickerInputBaseDirective {
    constructor() {
        super(...arguments);
        this.rangeInput = inject(RDS_DATE_RANGE_INPUT_PARENT);
        this.defaultErrorStateMatcher = inject(ErrorStateMatcher);
        this.injector = inject(Injector);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.errorStateMatcher = null;
        this.errorState = false;
    }
    ngOnInit() {
        try {
            const ngControl = this.injector.get(NgControl, null, { self: true });
            if (ngControl) {
                this.ngControl = ngControl;
            }
        }
        catch (e) {
            //do nothing
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            const oldState = this.errorState;
            this.errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl?.control ?? null, this.errorStateMatcher || this.defaultErrorStateMatcher);
            if (this.errorState !== oldState) {
                this.stateChanges.next();
            }
        }
    }
    isEmpty() {
        return this.elementRef.nativeElement.value.length === 0;
    }
    _getPlaceholder() {
        return this.elementRef.nativeElement.placeholder;
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
    _onInput(value) {
        super._onInput(value);
        this.rangeInput._handleChildValueChange();
    }
    _openPopup() {
        this.rangeInput._openDatepicker();
    }
    _getMinDate() {
        return this.rangeInput.min;
    }
    _getMaxDate() {
        return this.rangeInput.max;
    }
    _getDateFilter() {
        return this.rangeInput.dateFilter;
    }
    _parentDisabled() {
        return this.rangeInput._groupDisabled;
    }
    _shouldHandleChangeEvent({ source, }) {
        return (source !== this.rangeInput._startInput &&
            source !== this.rangeInput._endInput);
    }
    _assignValueProgrammatically(value) {
        super._assignValueProgrammatically(value);
        const opposite = (this === this.rangeInput._startInput
            ? this.rangeInput._endInput
            : this.rangeInput._startInput);
        opposite?._validatorOnChange();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputPartBaseDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDateRangeInputPartBaseDirective, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputPartBaseDirective, decorators: [{
            type: Directive
        }] });
class RdsStartDateDirective extends RdsDateRangeInputPartBaseDirective {
    get isDisabled() {
        return this.disabled ? true : null;
    }
    get id() {
        return `${this.rangeInput.id}-start`;
    }
    get hasPopup() {
        return this.rangeInput.rangePicker ? 'dialog' : null;
    }
    get ariaOwns() {
        return ((this.rangeInput.rangePicker?.opened && this.rangeInput.rangePicker.id) ||
            null);
    }
    get min() {
        return this._getMinDate()
            ? this.dateAdapter.toIso8601(this._getMinDate())
            : null;
    }
    get max() {
        return this._getMaxDate()
            ? this.dateAdapter.toIso8601(this._getMaxDate())
            : null;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    set required(value) {
        const isRequired = booleanAttribute(value);
        if (isRequired !== this._required) {
            this._required = isRequired;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    onBlur() {
        this._onBlur();
    }
    onChange() {
        this._onChange();
    }
    onKeydown($event) {
        this._onInput($event.target.value);
    }
    onInput($event) {
        this._onKeydown($event);
    }
    constructor() {
        super();
        this._validator = null;
        this.stateChanges = new Subject();
        this.errorStateMatcher = null;
        this.dateChange = new EventEmitter();
        this.dateInput = new EventEmitter();
        this.class = 'rds-start-date rds-date-range-input-inner';
        this.type = 'text';
        this._startValidator = (control) => {
            const start = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const end = this._model ? this._model.selection?.end : null;
            return !start ||
                !end ||
                (this.dateAdapter && this.dateAdapter.compareDate(start, end) <= 0)
                ? null
                : { rdsStartDateInvalid: { end: end, actual: start } };
        };
        this._validator = Validators.compose([
            ...super._getValidators(),
            this._startValidator,
        ]);
    }
    ngOnInit() {
        super.ngOnInit();
    }
    ngDoCheck() {
        super.ngDoCheck();
    }
    _getValueFromModel(modelValue) {
        return modelValue.start;
    }
    _shouldHandleChangeEvent(change) {
        if (!super._shouldHandleChangeEvent(change)) {
            return false;
        }
        else {
            return !change.oldValue?.start
                ? !!change.selection.start
                : !change.selection.start ||
                    !!this.dateAdapter.compareDate(change.oldValue.start, change.selection.start);
        }
    }
    _assignValueToModel(value) {
        if (this._model) {
            const range = new DateRange(value, this._model.selection?.end);
            this._model.updateSelection(range, this);
        }
    }
    _formatValue(value) {
        super._formatValue(value);
        // Any time the input value is reformatted we need to tell the parent.
        this.rangeInput._handleChildValueChange();
    }
    /** Gets the value that should be used when mirroring the input's size. */
    getMirrorValue() {
        const element = this.elementRef.nativeElement;
        const value = element.value;
        return value.length > 0 ? value : element.placeholder;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStartDateDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsStartDateDirective, selector: "input[rdsStartDate], input[rds-start-date]", inputs: { errorStateMatcher: "errorStateMatcher", required: "required" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, host: { listeners: { "blur": "onBlur()", "change": "onChange()", "input": "onKeydown($event)", "keydown": "onInput($event)" }, properties: { "class": "this.class", "attr.type": "this.type", "disabled": "this.isDisabled", "attr.id": "this.id", "attr.aria-haspopup": "this.hasPopup", "attr.aria-owns": "this.ariaOwns", "attr.min": "this.min", "attr.max": "this.max", "attr.required": "this.attrRequired" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: RdsStartDateDirective,
                multi: true,
            },
            { provide: NG_VALIDATORS, useExisting: RdsStartDateDirective, multi: true },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStartDateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsStartDate], input[rds-start-date]',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RdsStartDateDirective,
                            multi: true,
                        },
                        { provide: NG_VALIDATORS, useExisting: RdsStartDateDirective, multi: true },
                    ],
                }]
        }], ctorParameters: () => [], propDecorators: { errorStateMatcher: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], type: [{
                type: HostBinding,
                args: ['attr.type']
            }], isDisabled: [{
                type: HostBinding,
                args: ['disabled']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], hasPopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], min: [{
                type: HostBinding,
                args: ['attr.min']
            }], max: [{
                type: HostBinding,
                args: ['attr.max']
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onChange: [{
                type: HostListener,
                args: ['change']
            }], onKeydown: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onInput: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
class RdsEndDateDirective extends RdsDateRangeInputPartBaseDirective {
    constructor() {
        super(...arguments);
        this.stateChanges = new Subject();
        this.errorStateMatcher = null;
        this.dateChange = new EventEmitter();
        this.dateInput = new EventEmitter();
        this.class = 'rds-end-date rds-date-range-input-inner';
        this.type = 'text';
        this._endValidator = (control) => {
            const end = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const start = this._model ? this._model.selection?.start : null;
            return !end || !start || this.dateAdapter.compareDate(end, start) >= 0
                ? null
                : { rdsEndDateInvalid: { start: start, actual: end } };
        };
        this._validator = Validators.compose([
            ...super._getValidators(),
            this._endValidator,
        ]);
    }
    get isDisabled() {
        return this.disabled ? true : null;
    }
    get id() {
        return `${this.rangeInput.id}-end`;
    }
    get hasPopup() {
        return this.rangeInput.rangePicker ? 'dialog' : null;
    }
    get ariaOwns() {
        return ((this.rangeInput.rangePicker?.opened && this.rangeInput.rangePicker.id) ||
            null);
    }
    get min() {
        return this._getMinDate()
            ? this.dateAdapter.toIso8601(this._getMinDate())
            : null;
    }
    get max() {
        return this._getMaxDate()
            ? this.dateAdapter.toIso8601(this._getMaxDate())
            : null;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    set required(value) {
        const isRequired = booleanAttribute(value);
        if (isRequired !== this._required) {
            this._required = isRequired;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    onBlur() {
        this._onBlur();
    }
    onChange() {
        this._onChange();
    }
    onKeydown($event) {
        this._onInput($event.target.value);
    }
    onInput($event) {
        this._onKeydown($event);
    }
    ngOnInit() {
        super.ngOnInit();
    }
    ngDoCheck() {
        super.ngDoCheck();
    }
    _getValueFromModel(modelValue) {
        return modelValue.end;
    }
    _shouldHandleChangeEvent(change) {
        if (!super._shouldHandleChangeEvent(change)) {
            return false;
        }
        else {
            return !change.oldValue?.end
                ? !!change.selection.end
                : !change.selection.end ||
                    !!this.dateAdapter.compareDate(change.oldValue.end, change.selection.end);
        }
    }
    _assignValueToModel(value) {
        if (this._model) {
            const range = new DateRange(this._model.selection?.start, value);
            this._model.updateSelection(range, this);
        }
    }
    _onKeydown(event) {
        // If the user is pressing backspace on an empty end input, move focus back to the start.
        if (event.keyCode === BACKSPACE && !this.elementRef.nativeElement.value) {
            this.rangeInput._startInput.focus();
        }
        super._onKeydown(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEndDateDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEndDateDirective, selector: "input[rdsEndDate], input[rds-end-date]", inputs: { errorStateMatcher: "errorStateMatcher", required: "required" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, host: { listeners: { "blur": "onBlur()", "change": "onChange()", "input": "onKeydown($event)", "keydown": "onInput($event)" }, properties: { "class": "this.class", "attr.type": "this.type", "disabled": "this.isDisabled", "attr.id": "this.id", "attr.aria-haspopup": "this.hasPopup", "attr.aria-owns": "this.ariaOwns", "attr.min": "this.min", "attr.max": "this.max", "attr.required": "this.attrRequired" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: RdsEndDateDirective,
                multi: true,
            },
            { provide: NG_VALIDATORS, useExisting: RdsEndDateDirective, multi: true },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEndDateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsEndDate], input[rds-end-date]',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RdsEndDateDirective,
                            multi: true,
                        },
                        { provide: NG_VALIDATORS, useExisting: RdsEndDateDirective, multi: true },
                    ],
                }]
        }], propDecorators: { errorStateMatcher: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], type: [{
                type: HostBinding,
                args: ['attr.type']
            }], isDisabled: [{
                type: HostBinding,
                args: ['disabled']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], hasPopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], min: [{
                type: HostBinding,
                args: ['attr.min']
            }], max: [{
                type: HostBinding,
                args: ['attr.max']
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onChange: [{
                type: HostListener,
                args: ['change']
            }], onKeydown: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onInput: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

let nextUniqueId$3 = 0;
class RdsDateRangeInputComponent extends RdsAbstractFormFieldControl {
    get classes() {
        const classes = ['rds-date-range-input'];
        if (this._shouldHidePlaceholders()) {
            classes.push('rds-date-range-input-hide-placeholders');
        }
        if (this.required) {
            classes.push('rds-date-range-input-required');
        }
        if (this.disabled) {
            classes.push('rds-date-range-input-disabled');
        }
        return classes;
    }
    get _ariaLabelledby() {
        return this._getAriaLabelledby();
    }
    get dataRdsCalendar() {
        return this.rangePicker ? this.rangePicker.id : null;
    }
    get value() {
        return this._model?.selection;
    }
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    get placeholder() {
        const start = this._startInput?._getPlaceholder() || '';
        const end = this._endInput?._getPlaceholder() || '';
        return start || end ? `${start} ${this.separator} ${end}` : '';
    }
    get rangePicker() {
        return this._rangePicker;
    }
    set rangePicker(rangePicker) {
        if (rangePicker) {
            this._model = rangePicker.registerInput(this);
            this._rangePicker = rangePicker;
            this._closedSubscription.unsubscribe();
            this._closedSubscription = rangePicker.closedStream.subscribe(() => {
                this._startInput?._onTouched();
                this._endInput?._onTouched();
            });
            if (this._model) {
                this._registerModel(this._model);
            }
        }
    }
    get attrRequired() {
        if (this.isBoolean(this._required) && this._required) {
            this.stateChanges.next();
            return this._required;
        }
        else if (this.ngControl?.control) {
            this.stateChanges.next();
            return this.ngControl?.control?.hasValidator(Validators.required);
        }
        else if (this._startInput &&
            this._endInput &&
            this.isBoolean(this._startInput.attrRequired) &&
            this.isBoolean(this._endInput.attrRequired) &&
            (this._startInput.attrRequired || this._endInput.attrRequired)) {
            this.stateChanges.next();
            return this._startInput.attrRequired || this._endInput.attrRequired;
        }
        else {
            return null;
        }
    }
    set required(value) {
        const isRequired = booleanAttribute(value);
        if (isRequired !== this._required) {
            this._required = isRequired;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    get dateFilter() {
        return this._dateFilter;
    }
    set dateFilter(value) {
        const start = this._startInput;
        const end = this._endInput;
        const wasMatchingStart = start && start._matchesFilter(start.value);
        const wasMatchingEnd = end && end._matchesFilter(start.value);
        this._dateFilter = value;
        if (start && start._matchesFilter(start.value) !== wasMatchingStart) {
            start._validatorOnChange();
        }
        if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {
            end._validatorOnChange();
        }
    }
    get min() {
        return this._min;
    }
    set min(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._min)) {
            this._min = validValue;
            this._revalidate();
        }
    }
    get max() {
        return this._max;
    }
    set max(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._max)) {
            this._max = validValue;
            this._revalidate();
        }
    }
    get disabled() {
        return this._startInput && this._endInput
            ? this._startInput.disabled && this._endInput.disabled
            : this._groupDisabled;
    }
    set disabled(value) {
        const newValue = booleanAttribute(value);
        if (newValue !== this._groupDisabled) {
            this._groupDisabled = newValue;
            this.stateChanges.next();
        }
    }
    get errorState() {
        if (this._startInput && this._endInput) {
            return this._startInput.errorState || this._endInput.errorState;
        }
        return false;
    }
    get empty() {
        const startEmpty = this._startInput ? this._startInput.isEmpty() : false;
        const endEmpty = this._endInput ? this._endInput.isEmpty() : false;
        return startEmpty && endEmpty;
    }
    constructor() {
        super();
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.formField = inject(RDS_FORM_FIELD, {
            optional: true,
        });
        this._closedSubscription = Subscription.EMPTY;
        this._id = `rds-date-range-input-${nextUniqueId$3++}`;
        this.idAttr = null;
        this.role = 'group';
        this.controlType = 'date-range';
        this._dateFilter = null;
        this._min = null;
        this._max = null;
        this._rangePicker = null;
        this._groupDisabled = false;
        this._ariaDescribedBy = null;
        this.separator = '–';
        this.comparisonStart = null;
        this.comparisonEnd = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
    }
    setDescribedByIds(ids) {
        this._ariaDescribedBy = ids.length ? ids.join(' ') : null;
    }
    onContainerClick() {
        if (!this.focused && !this.disabled) {
            if (!this._model || !this._model.selection?.start) {
                this._startInput?.focus();
            }
            else {
                this._endInput?.focus();
            }
        }
    }
    ngAfterContentInit() {
        if (!this._startInput) {
            throw Error('rds-date-range-input must contain a rdsStartDate input');
        }
        if (!this._endInput) {
            throw Error('rds-date-range-input must contain a rdsEndDate input');
        }
        if (this._model) {
            this._registerModel(this._model);
        }
        merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {
            this.stateChanges.next(undefined);
        });
    }
    ngOnChanges(changes) {
        if (this.dateAdapter && dateInputsHaveChanged(changes, this.dateAdapter)) {
            this.stateChanges.next(undefined);
        }
    }
    ngOnDestroy() {
        this._closedSubscription.unsubscribe();
        this.stateChanges.complete();
    }
    getStartValue() {
        return this.value ? this.value.start : null;
    }
    getConnectedOverlayOrigin() {
        return this.formField
            ? this.formField.getConnectedOverlayOrigin()
            : this.elementRef;
    }
    _getInputMirrorValue() {
        return this._startInput ? this._startInput.getMirrorValue() : '';
    }
    _shouldHidePlaceholders() {
        if (this.formField?.labelPosition !== 'floating') {
            return false;
        }
        return this._startInput
            ? !this.focused && this._startInput.isEmpty()
            : !this.focused;
    }
    _handleChildValueChange() {
        this.stateChanges.next(undefined);
        this.cdr.markForCheck();
    }
    _openDatepicker() {
        if (this._rangePicker) {
            this._rangePicker.open();
        }
    }
    _shouldHideSeparator() {
        return !this.focused && this.empty;
    }
    _getAriaLabelledby() {
        return this.formField?.labelId;
    }
    _updateFocus(origin) {
        this._focused = origin !== null;
        this.stateChanges.next();
    }
    _revalidate() {
        if (this._startInput) {
            this._startInput._validatorOnChange();
        }
        if (this._endInput) {
            this._endInput._validatorOnChange();
        }
    }
    _registerModel(model) {
        if (this._startInput) {
            this._startInput._registerModel(model);
        }
        if (this._endInput) {
            this._endInput._registerModel(model);
        }
    }
    isBoolean(value) {
        return value === true || value === false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDateRangeInputComponent, selector: "rds-date-range-input", inputs: { rangePicker: "rangePicker", required: "required", dateFilter: "dateFilter", min: "min", max: "max", disabled: "disabled", separator: "separator", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd" }, host: { properties: { "class": "this.classes", "attr.id": "this.idAttr", "attr.role": "this.role", "attr.aria-labelledby": "this._ariaLabelledby", "attr.data-rds-calendar": "this.dataRdsCalendar", "attr.required": "this.attrRequired", "attr.aria-describedby": "this._ariaDescribedBy" } }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: RdsDateRangeInputComponent,
            },
            {
                provide: RDS_DATE_RANGE_INPUT_PARENT,
                useExisting: RdsDateRangeInputComponent,
            },
        ], queries: [{ propertyName: "_startInput", first: true, predicate: RdsStartDateDirective, descendants: true }, { propertyName: "_endInput", first: true, predicate: RdsEndDateDirective, descendants: true }], exportAs: ["rdsDateRangeInput"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"rds-date-range-input-container\"\n  cdkMonitorSubtreeFocus\n  (cdkFocusChange)=\"_updateFocus($event)\"\n>\n  <div class=\"rds-date-range-input-start-wrapper\">\n    <ng-content select=\"input[rdsStartDate]\" />\n    <span class=\"rds-date-range-input-mirror\" aria-hidden=\"true\">{{\n      _getInputMirrorValue()\n    }}</span>\n  </div>\n\n  <span\n    class=\"rds-date-range-input-separator\"\n    [class.rds-date-range-input-separator-hidden]=\"_shouldHideSeparator()\"\n    >{{ separator }}</span\n  >\n\n  <div class=\"rds-date-range-input-end-wrapper\">\n    <ng-content select=\"input[rdsEndDate]\" />\n  </div>\n</div>\n", styles: [".rds-date-range-input{position:relative;display:flex;margin-top:16px;border:none;background:transparent;outline:none;color:var(--rds-color-high-contrast);width:100%}.rds-form-field--static-label .rds-date-range-input,.rds-form-field--no-label .rds-date-range-input{margin-top:0;display:flex}.rds-date-range-input-container{display:flex;align-items:center}.rds-date-range-input-separator{transition:opacity .4s .1333333333333s cubic-bezier(.25,.8,.25,1);margin:0 4px;color:var(--rds-color-high-contrast)}.rds-date-range-input-disabled .rds-date-range-input-separator{color:var(--rds-color-disabled)}.rds-date-range-input-inner{font:inherit;background:transparent;color:var(--rds-color-high-contrast);border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.rds-date-range-input-inner::-ms-clear,.rds-date-range-input-inner::-ms-reveal{display:none}.rds-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.rds-date-range-input-inner::placeholder{transition:color .4s .1333333333333s cubic-bezier(.25,.8,.25,1)}.rds-form-field-hide-placeholder .rds-date-range-input-inner::placeholder,.rds-date-range-input-hide-placeholders .rds-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.rds-date-range-input-inner[disabled]{color:var(--rds-color-disabled)}.rds-date-range-input-mirror{visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.rds-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px);text-align:left}.rds-date-range-input-start-wrapper .rds-date-range-input-inner{position:absolute;top:0;left:0}.rds-date-range-input-end-wrapper{text-align:left;flex-grow:1;max-width:calc(50% - 4px)}.rds-form-field-type-rds-date-range-input .rds-form-field-infix{width:200px}.rds-form-field--floating-label .rds-date-range-input-separator-hidden{opacity:0;transition:none}\n"], dependencies: [{ kind: "directive", type: i1$5.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"], exportAs: ["cdkMonitorFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-date-range-input', exportAs: 'rdsDateRangeInput', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: RdsDateRangeInputComponent,
                        },
                        {
                            provide: RDS_DATE_RANGE_INPUT_PARENT,
                            useExisting: RdsDateRangeInputComponent,
                        },
                    ], template: "<div\n  class=\"rds-date-range-input-container\"\n  cdkMonitorSubtreeFocus\n  (cdkFocusChange)=\"_updateFocus($event)\"\n>\n  <div class=\"rds-date-range-input-start-wrapper\">\n    <ng-content select=\"input[rdsStartDate]\" />\n    <span class=\"rds-date-range-input-mirror\" aria-hidden=\"true\">{{\n      _getInputMirrorValue()\n    }}</span>\n  </div>\n\n  <span\n    class=\"rds-date-range-input-separator\"\n    [class.rds-date-range-input-separator-hidden]=\"_shouldHideSeparator()\"\n    >{{ separator }}</span\n  >\n\n  <div class=\"rds-date-range-input-end-wrapper\">\n    <ng-content select=\"input[rdsEndDate]\" />\n  </div>\n</div>\n", styles: [".rds-date-range-input{position:relative;display:flex;margin-top:16px;border:none;background:transparent;outline:none;color:var(--rds-color-high-contrast);width:100%}.rds-form-field--static-label .rds-date-range-input,.rds-form-field--no-label .rds-date-range-input{margin-top:0;display:flex}.rds-date-range-input-container{display:flex;align-items:center}.rds-date-range-input-separator{transition:opacity .4s .1333333333333s cubic-bezier(.25,.8,.25,1);margin:0 4px;color:var(--rds-color-high-contrast)}.rds-date-range-input-disabled .rds-date-range-input-separator{color:var(--rds-color-disabled)}.rds-date-range-input-inner{font:inherit;background:transparent;color:var(--rds-color-high-contrast);border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.rds-date-range-input-inner::-ms-clear,.rds-date-range-input-inner::-ms-reveal{display:none}.rds-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.rds-date-range-input-inner::placeholder{transition:color .4s .1333333333333s cubic-bezier(.25,.8,.25,1)}.rds-form-field-hide-placeholder .rds-date-range-input-inner::placeholder,.rds-date-range-input-hide-placeholders .rds-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.rds-date-range-input-inner[disabled]{color:var(--rds-color-disabled)}.rds-date-range-input-mirror{visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.rds-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px);text-align:left}.rds-date-range-input-start-wrapper .rds-date-range-input-inner{position:absolute;top:0;left:0}.rds-date-range-input-end-wrapper{text-align:left;flex-grow:1;max-width:calc(50% - 4px)}.rds-form-field-type-rds-date-range-input .rds-form-field-infix{width:200px}.rds-form-field--floating-label .rds-date-range-input-separator-hidden{opacity:0;transition:none}\n"] }]
        }], ctorParameters: () => [], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], idAttr: [{
                type: HostBinding,
                args: ['attr.id']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], _ariaLabelledby: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], dataRdsCalendar: [{
                type: HostBinding,
                args: ['attr.data-rds-calendar']
            }], rangePicker: [{
                type: Input
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabled: [{
                type: Input
            }], _ariaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], separator: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], _startInput: [{
                type: ContentChild,
                args: [RdsStartDateDirective]
            }], _endInput: [{
                type: ContentChild,
                args: [RdsEndDateDirective]
            }] } });

class RdsDateRangePickerComponent extends RdsDatepickerBaseDirective {
    _forwardContentValues(instance) {
        super._forwardContentValues(instance);
        const input = this.datepickerInput;
        if (input) {
            instance.comparisonStart = input.comparisonStart;
            instance.comparisonEnd = input.comparisonEnd;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangePickerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDateRangePickerComponent, selector: "rds-date-range-picker", providers: [
            RDS_RANGE_DATE_SELECTION_MODEL_PROVIDER,
            RDS_CALENDAR_RANGE_STRATEGY_PROVIDER,
            {
                provide: RdsDatepickerBaseDirective,
                useExisting: RdsDateRangePickerComponent,
            },
        ], exportAs: ["rdsDateRangePicker"], usesInheritance: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-date-range-picker',
                    template: '',
                    exportAs: 'rdsDateRangePicker',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        RDS_RANGE_DATE_SELECTION_MODEL_PROVIDER,
                        RDS_CALENDAR_RANGE_STRATEGY_PROVIDER,
                        {
                            provide: RdsDatepickerBaseDirective,
                            useExisting: RdsDateRangePickerComponent,
                        },
                    ],
                }]
        }] });

class RdsDatepickerApplyDirective {
    constructor() {
        this.datepicker = inject(RdsDatepickerBaseDirective);
    }
    _applySelection() {
        this.datepicker._applyPendingSelection();
        this.datepicker.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerApplyDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerApplyDirective, selector: "[rdsDatepickerApply], [rdsDateRangePickerApply], [rds-datepicker-apply], [rds-date-range-picker-apply]", host: { listeners: { "click": "_applySelection()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerApplyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDatepickerApply], [rdsDateRangePickerApply], [rds-datepicker-apply], [rds-date-range-picker-apply]',
                }]
        }], propDecorators: { _applySelection: [{
                type: HostListener,
                args: ['click']
            }] } });
class RdsDatepickerCancelDirective {
    constructor() {
        this.datepicker = inject(RdsDatepickerBaseDirective);
    }
    _applySelection() {
        this.datepicker.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerCancelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerCancelDirective, selector: "[rdsDatepickerCancel], [rdsDateRangePickerCancel], [rds-datepicker-cancel], [rds-date-range-picker-cancel]", host: { listeners: { "click": "_applySelection()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerCancelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDatepickerCancel], [rdsDateRangePickerCancel], [rds-datepicker-cancel], [rds-date-range-picker-cancel]',
                }]
        }], propDecorators: { _applySelection: [{
                type: HostListener,
                args: ['click']
            }] } });
class RdsDatepickerActionsComponent {
    constructor() {
        this.datepicker = inject(RdsDatepickerBaseDirective);
        this.viewContainerRef = inject(ViewContainerRef);
        this._template = null;
        this._portal = null;
    }
    ngAfterViewInit() {
        this._portal = new TemplatePortal(this._template, this.viewContainerRef);
        this.datepicker.registerActions(this._portal);
    }
    ngOnDestroy() {
        this.datepicker.removeActions(this._portal);
        if (this._portal && this._portal.isAttached) {
            this._portal?.detach();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerActionsComponent, selector: "rds-datepicker-actions, rds-date-range-picker-actions", viewQueries: [{ propertyName: "_template", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: `
    <ng-template>
      <div class="rds-datepicker-actions">
        <ng-content />
      </div>
    </ng-template>
  `, isInline: true, styles: [".rds-datepicker-actions{background:var(--rds-color-bg-base-box);display:flex;justify-content:flex-end;align-items:center;padding:16px;border-top:1px solid var(--rds-color-grey-2)}.rds-datepicker-actions .rds-button+.rds-button{margin-left:16px}[dir=rtl] .rds-datepicker-actions .rds-button+.rds-button{margin-left:0;margin-right:16px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-datepicker-actions, rds-date-range-picker-actions', template: `
    <ng-template>
      <div class="rds-datepicker-actions">
        <ng-content />
      </div>
    </ng-template>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-datepicker-actions{background:var(--rds-color-bg-base-box);display:flex;justify-content:flex-end;align-items:center;padding:16px;border-top:1px solid var(--rds-color-grey-2)}.rds-datepicker-actions .rds-button+.rds-button{margin-left:16px}[dir=rtl] .rds-datepicker-actions .rds-button+.rds-button{margin-left:0;margin-right:16px}\n"] }]
        }], propDecorators: { _template: [{
                type: ViewChild,
                args: [TemplateRef]
            }] } });

class RdsToggleButtonModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleButtonModule, declarations: [RdsToggleButtonComponent, RdsToggleDirective], imports: [CommonModule], exports: [RdsToggleButtonComponent, RdsToggleDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleButtonModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [RdsToggleButtonComponent, RdsToggleDirective],
                    exports: [RdsToggleButtonComponent, RdsToggleDirective],
                }]
        }] });

const ELEMENTS$6 = [
    RdsCalendarComponent,
    RdsCalendarHeaderComponent,
    RdsCalendarBodyComponent,
    RdsDatepickerComponent,
    RdsDatepickerContentComponent,
    RdsDatepickerInputDirective,
    RdsDatepickerToggleComponent,
    RdsDatepickerToggleIconDirective,
    RdsMonthViewComponent,
    RdsYearViewComponent,
    RdsMultiYearViewComponent,
    RdsDateRangeInputComponent,
    RdsStartDateDirective,
    RdsEndDateDirective,
    RdsDateRangePickerComponent,
    RdsDatepickerActionsComponent,
    RdsDatepickerCancelDirective,
    RdsDatepickerApplyDirective,
];
class RdsDatepickerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerModule, declarations: [RdsCalendarComponent,
            RdsCalendarHeaderComponent,
            RdsCalendarBodyComponent,
            RdsDatepickerComponent,
            RdsDatepickerContentComponent,
            RdsDatepickerInputDirective,
            RdsDatepickerToggleComponent,
            RdsDatepickerToggleIconDirective,
            RdsMonthViewComponent,
            RdsYearViewComponent,
            RdsMultiYearViewComponent,
            RdsDateRangeInputComponent,
            RdsStartDateDirective,
            RdsEndDateDirective,
            RdsDateRangePickerComponent,
            RdsDatepickerActionsComponent,
            RdsDatepickerCancelDirective,
            RdsDatepickerApplyDirective], imports: [CommonModule,
            RdsButtonModule,
            RdsDialogModule,
            OverlayModule,
            A11yModule,
            PortalModule,
            RdsIconComponent,
            RdsToggleButtonModule], exports: [CdkScrollableModule, OverlayModule, RdsCalendarComponent,
            RdsCalendarHeaderComponent,
            RdsCalendarBodyComponent,
            RdsDatepickerComponent,
            RdsDatepickerContentComponent,
            RdsDatepickerInputDirective,
            RdsDatepickerToggleComponent,
            RdsDatepickerToggleIconDirective,
            RdsMonthViewComponent,
            RdsYearViewComponent,
            RdsMultiYearViewComponent,
            RdsDateRangeInputComponent,
            RdsStartDateDirective,
            RdsEndDateDirective,
            RdsDateRangePickerComponent,
            RdsDatepickerActionsComponent,
            RdsDatepickerCancelDirective,
            RdsDatepickerApplyDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerModule, providers: [
            RdsDatepickerIntl,
            RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,
        ], imports: [CommonModule,
            RdsButtonModule,
            RdsDialogModule,
            OverlayModule,
            A11yModule,
            PortalModule,
            RdsToggleButtonModule, CdkScrollableModule, OverlayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RdsButtonModule,
                        RdsDialogModule,
                        OverlayModule,
                        A11yModule,
                        PortalModule,
                        RdsIconComponent,
                        RdsToggleButtonModule,
                    ],
                    exports: [CdkScrollableModule, OverlayModule, ...ELEMENTS$6],
                    declarations: [...ELEMENTS$6],
                    providers: [
                        RdsDatepickerIntl,
                        RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,
                    ],
                }]
        }] });

class RdsDividerComponent {
    constructor() {
        this.hostRole = 'separator';
        this.class = 'rds-divider';
        this.vertical = false;
    }
    get orientation() {
        return this.vertical ? 'vertical' : 'horizontal';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDividerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsDividerComponent, selector: "rds-divider", inputs: { vertical: ["vertical", "vertical", booleanAttribute] }, host: { properties: { "attr.role": "this.hostRole", "class": "this.class", "attr.aria-orientation": "this.orientation", "class.rds-divider-vertical": "this.vertical" } }, ngImport: i0, template: '', isInline: true, styles: [".rds-divider{display:block;width:100%;border-bottom:1px solid var(--rds-color-grey-2);margin:0}.rds-divider.rds-divider-vertical{border-bottom:0;border-right:1px solid var(--rds-color-grey-2);height:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDividerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-divider', template: '', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".rds-divider{display:block;width:100%;border-bottom:1px solid var(--rds-color-grey-2);margin:0}.rds-divider.rds-divider-vertical{border-bottom:0;border-right:1px solid var(--rds-color-grey-2);height:100%}\n"] }]
        }], propDecorators: { hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], orientation: [{
                type: HostBinding,
                args: ['attr.aria-orientation']
            }], vertical: [{
                type: HostBinding,
                args: ['class.rds-divider-vertical']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsDividerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDividerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsDividerModule, declarations: [RdsDividerComponent], imports: [CommonModule], exports: [RdsDividerComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDividerModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDividerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RdsDividerComponent],
                    exports: [RdsDividerComponent],
                    imports: [CommonModule],
                }]
        }] });

class RdsDrawerActionsDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerActionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDrawerActionsDirective, isStandalone: true, selector: "rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerActionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]',
                    standalone: true,
                }]
        }] });

const rdsDrawerAnimations = {
    expandDrawer: trigger('transform', [
        state('open, open-instant', style({
            transform: 'none',
            visibility: 'visible',
        })),
        state('void', style({
            'box-shadow': 'none',
            visibility: 'hidden',
        })),
        transition('void => open-instant', animate('0ms')),
        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
    ]),
};

class RdsDrawerComponent {
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = value;
        this.updateFocusTrapState();
        this._modeChanged.next();
    }
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value === 'end' ? 'end' : 'start';
        this.positionChanged.emit(this._position);
    }
    set expanded(value) {
        this.toggle(booleanAttribute(value));
    }
    get expanded() {
        return this.isOpened;
    }
    set autoFocus(value) {
        if (value === 'true' || value === 'false' || value == null) {
            value = booleanAttribute(value);
        }
        this._autoFocus = value;
    }
    get autoFocus() {
        const value = this._autoFocus;
        if (value == null) {
            if (this.mode === 'side') {
                return 'dialog';
            }
            else {
                return 'first-tabbable';
            }
        }
        return value;
    }
    get class() {
        const classes = ['rds-drawer', `rds-drawer-${this.size}`];
        if (this.mode === 'overlay') {
            classes.push('rds-drawer-overlay');
        }
        if (this.position === 'end') {
            classes.push('rds-drawer-end');
        }
        else {
            classes.push('rds-drawer-start');
        }
        return classes;
    }
    get transform() {
        return this._animationState;
    }
    get isOpened() {
        return this._isOpened$.getValue();
    }
    get isOpened$() {
        return this._isOpened$.asObservable();
    }
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.contentObserver = inject(ContentObserver);
        this.ngZone = inject(NgZone);
        this.focusTrapFactory = inject(ConfigurableFocusTrapFactory);
        this.focusMonitor = inject(FocusMonitor);
        this.document = inject(DOCUMENT);
        this.interactivityChecker = inject(InteractivityChecker);
        this.platformId = inject(PLATFORM_ID);
        this._modeChanged = new Subject();
        this._animationStarted = new Subject();
        this._animationEnd = new Subject();
        this._animationState = 'void';
        this._animating = null;
        this._isOpened$ = new BehaviorSubject(false);
        this._elementFocusedBeforeDrawerWasOpened = null;
        this.size = 'm';
        this.closeBtnAriaLabel = 'Close';
        this._mode = 'overlay';
        this._position = 'start';
        this.closable = true;
        this.disableClose = false;
        this.closeDrawer = new EventEmitter();
        this.openDrawer = new EventEmitter();
        this.positionChanged = new EventEmitter();
        this.body = { nativeElement: undefined };
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.scrollable = false;
        this.ngZone.runOutsideAngular(() => {
            if (isPlatformBrowser(this.platformId)) {
                fromEvent(window, 'keydown')
                    .pipe(filter$1((event) => event.keyCode === ESCAPE &&
                    !this.disableClose &&
                    !hasModifierKey(event)), takeUntilDestroyed())
                    .subscribe((event) => this.ngZone.run(() => {
                    this.close();
                    event.stopPropagation();
                    event.preventDefault();
                }));
            }
        });
    }
    ngAfterViewInit() {
        this._focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
        this.updateFocusTrapState();
    }
    ngAfterContentInit() {
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.scrollable = this.isScrollable();
            this.cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
        this._animationStarted.complete();
        this._animationEnd.complete();
        this._modeChanged.complete();
    }
    transformStart(event) {
        if (event.toState === 'void') {
            this._animating = 'collapsing';
        }
        else if (event.toState === 'open') {
            this._animating = 'expanding';
        }
        this._animationStarted.next(event);
    }
    transformEnd(event) {
        this._animating = null;
        this._animationEnd.next(event);
        // animation.done changes opened value
        const isOpened = event.toState === 'open' || event.toState === 'open-instant';
        if (isOpened) {
            if (this.document) {
                this._elementFocusedBeforeDrawerWasOpened = this.document
                    .activeElement;
            }
            this.takeFocus();
        }
        else if (this.isFocusWithinDrawer()) {
            this.restoreFocus(this._openedVia || 'program');
        }
        this._isOpened$.next(isOpened);
        if (event.fromState !== event.toState) {
            if (isOpened) {
                this.openDrawer.emit();
            }
            else {
                this.closeDrawer.emit();
            }
        }
        this.scrollable = this.isScrollable();
    }
    toggle(expanded = !this._isOpened$.getValue(), openedVia) {
        if (expanded && openedVia) {
            this._openedVia = openedVia;
        }
        if (this.isOpened !== expanded) {
            if (expanded) {
                this.open();
            }
            else {
                this.close();
            }
        }
    }
    open() {
        this._animationState = 'open';
    }
    close() {
        this._animationState = 'void';
    }
    forceFocus(element, options) {
        if (!this.interactivityChecker.isFocusable(element)) {
            element.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
            this.ngZone.runOutsideAngular(() => {
                const callback = () => {
                    element.removeEventListener('blur', callback);
                    element.removeEventListener('mousedown', callback);
                    element.removeAttribute('tabindex');
                };
                element.addEventListener('blur', callback);
                element.addEventListener('mousedown', callback);
            });
        }
        element.focus(options);
    }
    focusByCssSelector(selector, options) {
        const elementToFocus = this.elementRef.nativeElement.querySelector(selector);
        if (elementToFocus) {
            this.forceFocus(elementToFocus, options);
        }
    }
    takeFocus() {
        if (!this._focusTrap) {
            return;
        }
        const element = this.elementRef.nativeElement;
        switch (this.autoFocus) {
            case false:
            case 'dialog':
                return;
            case true:
            case 'first-tabbable':
                this._focusTrap.focusInitialElementWhenReady().then((hasMovedFocus) => {
                    if (!hasMovedFocus &&
                        typeof this.elementRef.nativeElement.focus === 'function') {
                        element.focus();
                    }
                });
                break;
            case 'first-heading':
                this.focusByCssSelector('rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]');
                break;
            default:
                this.focusByCssSelector(this.autoFocus);
                break;
        }
    }
    restoreFocus(focusOrigin) {
        if (this.autoFocus === 'dialog') {
            return;
        }
        else if (this._elementFocusedBeforeDrawerWasOpened) {
            this.focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);
        }
        else {
            this.elementRef.nativeElement.blur();
        }
        this._elementFocusedBeforeDrawerWasOpened = null;
    }
    isFocusWithinDrawer() {
        const activeEl = this.document.activeElement;
        return !!activeEl && this.elementRef.nativeElement.contains(activeEl);
    }
    updateFocusTrapState() {
        if (this._focusTrap) {
            this._focusTrap.enabled = this.expanded && this.mode !== 'side';
        }
    }
    isScrollable() {
        return (this.body.nativeElement.scrollHeight >
            this.body.nativeElement.clientHeight);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDrawerComponent, isStandalone: true, selector: "rds-drawer", inputs: { size: "size", closeBtnAriaLabel: "closeBtnAriaLabel", mode: "mode", position: "position", closable: ["closable", "closable", booleanAttribute], expanded: "expanded", disableClose: ["disableClose", "disableClose", booleanAttribute], autoFocus: "autoFocus" }, outputs: { closeDrawer: "closeDrawer", openDrawer: "openDrawer", positionChanged: "positionChanged" }, host: { listeners: { "@transform.start": "transformStart($event)", "@transform.done": "transformEnd($event)" }, properties: { "class": "this.class", "tabIndex": "this.tabIndex", "@transform": "this.transform", "class.rds-drawer-scrollable": "this.scrollable" } }, queries: [{ propertyName: "actions", first: true, predicate: RdsDrawerActionsDirective, descendants: true }], viewQueries: [{ propertyName: "body", first: true, predicate: ["body"], descendants: true }], ngImport: i0, template: "<div class=\"rds-drawer-header\">\n  <ng-content\n    select=\"rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]\"\n  />\n  @if (closable) {\n    <button\n      rds-icon-button\n      size=\"m\"\n      (click)=\"toggle(false)\"\n      [attr.aria-label]=\"closeBtnAriaLabel\"\n    >\n      <rds-icon icon=\"close\" />\n    </button>\n  }\n</div>\n<div class=\"rds-drawer-body\" #body>\n  <ng-content />\n</div>\n<div [class.rds-drawer-actions]=\"actions\">\n  <ng-content\n    select=\"rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]\"\n  />\n</div>\n", styles: [".rds-drawer{background-color:var(--rds-color-bg-base-elevated);border-radius:2px;position:absolute;z-index:3;top:0;bottom:0;outline:0;display:flex;flex-direction:column;box-sizing:border-box;height:100%}.rds-drawer.rds-drawer-s{width:360px}.rds-drawer.rds-drawer-m{width:512px}.rds-drawer.rds-drawer-l{width:736px}.rds-drawer[style*=\"visibility: hidden\"]{display:none}.rds-drawer.rds-drawer-end{transform:translate3d(100%,0,0);order:1;right:0}.rds-drawer.rds-drawer-start{transform:translate3d(-100%,0,0);left:0}.rds-drawer.rds-drawer-overlay{position:absolute;z-index:4}.rds-drawer .rds-drawer-header{font-size:20px;font-weight:600;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;justify-content:space-between;padding:24px;row-gap:16px;color:var(--rds-color-high-contrast)}.rds-drawer .rds-drawer-body{padding-inline:24px;padding-block:0 24px;overflow-y:auto;color:var(--rds-color-high-contrast);width:100%;height:100%}@media (max-width: 767.999999px){.rds-drawer .rds-drawer-body{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-drawer .rds-drawer-actions{display:flex;justify-content:flex-end;gap:16px;width:100%;padding:24px}.rds-drawer.rds-drawer-scrollable .rds-drawer-body{padding-right:12px}.rds-drawer.rds-drawer-scrollable .rds-drawer-actions{border-top:1px solid var(--rds-color-grey-2)}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], animations: [rdsDrawerAnimations.expandDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-drawer', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [rdsDrawerAnimations.expandDrawer], standalone: true, imports: [RdsIconComponent, RdsButtonModule], template: "<div class=\"rds-drawer-header\">\n  <ng-content\n    select=\"rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]\"\n  />\n  @if (closable) {\n    <button\n      rds-icon-button\n      size=\"m\"\n      (click)=\"toggle(false)\"\n      [attr.aria-label]=\"closeBtnAriaLabel\"\n    >\n      <rds-icon icon=\"close\" />\n    </button>\n  }\n</div>\n<div class=\"rds-drawer-body\" #body>\n  <ng-content />\n</div>\n<div [class.rds-drawer-actions]=\"actions\">\n  <ng-content\n    select=\"rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]\"\n  />\n</div>\n", styles: [".rds-drawer{background-color:var(--rds-color-bg-base-elevated);border-radius:2px;position:absolute;z-index:3;top:0;bottom:0;outline:0;display:flex;flex-direction:column;box-sizing:border-box;height:100%}.rds-drawer.rds-drawer-s{width:360px}.rds-drawer.rds-drawer-m{width:512px}.rds-drawer.rds-drawer-l{width:736px}.rds-drawer[style*=\"visibility: hidden\"]{display:none}.rds-drawer.rds-drawer-end{transform:translate3d(100%,0,0);order:1;right:0}.rds-drawer.rds-drawer-start{transform:translate3d(-100%,0,0);left:0}.rds-drawer.rds-drawer-overlay{position:absolute;z-index:4}.rds-drawer .rds-drawer-header{font-size:20px;font-weight:600;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;justify-content:space-between;padding:24px;row-gap:16px;color:var(--rds-color-high-contrast)}.rds-drawer .rds-drawer-body{padding-inline:24px;padding-block:0 24px;overflow-y:auto;color:var(--rds-color-high-contrast);width:100%;height:100%}@media (max-width: 767.999999px){.rds-drawer .rds-drawer-body{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-drawer .rds-drawer-actions{display:flex;justify-content:flex-end;gap:16px;width:100%;padding:24px}.rds-drawer.rds-drawer-scrollable .rds-drawer-body{padding-right:12px}.rds-drawer.rds-drawer-scrollable .rds-drawer-actions{border-top:1px solid var(--rds-color-grey-2)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { size: [{
                type: Input
            }], closeBtnAriaLabel: [{
                type: Input
            }], mode: [{
                type: Input
            }], position: [{
                type: Input
            }], closable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], expanded: [{
                type: Input
            }], disableClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoFocus: [{
                type: Input
            }], closeDrawer: [{
                type: Output
            }], openDrawer: [{
                type: Output
            }], positionChanged: [{
                type: Output
            }], actions: [{
                type: ContentChild,
                args: [RdsDrawerActionsDirective]
            }], body: [{
                type: ViewChild,
                args: ['body']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], transform: [{
                type: HostBinding,
                args: ['@transform']
            }], scrollable: [{
                type: HostBinding,
                args: ['class.rds-drawer-scrollable']
            }], transformStart: [{
                type: HostListener,
                args: ['@transform.start', ['$event']]
            }], transformEnd: [{
                type: HostListener,
                args: ['@transform.done', ['$event']]
            }] } });

class RdsDrawerContainerComponent {
    constructor() {
        this.ngZone = inject(NgZone);
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.renderer = inject(Renderer2);
        this.class = [
            'rds-drawer-container',
            'rds-drawer-overlay',
        ];
        this.backdropClick = new EventEmitter();
        this._contentMargin$ = new BehaviorSubject({
            left: 0,
            right: 0,
        });
        this.contentMargins$ = this._contentMargin$.asObservable();
        this._backdrop = false;
    }
    set backdrop(value) {
        if (value !== 'transparent') {
            value = booleanAttribute(value);
        }
        this._backdrop = value;
    }
    get backdrop() {
        if (this._backdrop == null) {
            return !this.start || !this.end;
        }
        return this._backdrop;
    }
    ngAfterContentInit() {
        this.watchDrawerToggle();
        merge(this.drawer.positionChanged, this.drawer._modeChanged)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.updateContentMargins());
    }
    ngOnDestroy() {
        this._contentMargin$.complete();
    }
    /** for internal purposes only */
    _onBackdropClicked() {
        this.drawer.toggle(false);
        this.backdropClick.emit();
    }
    isShowingBackdrop() {
        return this.isDrawerOpen() && !!this.backdrop;
    }
    updateContentMargins() {
        let left = 0;
        let right = 0;
        if (this.drawer &&
            this.drawer._animating === 'expanding' &&
            this.drawer.position == 'start') {
            if (this.drawer.mode == 'side') {
                left += this.getDrawerWidth();
            }
            else if (this.drawer.mode == 'push') {
                const width = this.getDrawerWidth();
                left += width;
                right -= width;
            }
        }
        if (this.drawer &&
            this.drawer._animating === 'expanding' &&
            this.drawer.position == 'end') {
            if (this.drawer.mode == 'side') {
                right += this.getDrawerWidth();
            }
            else if (this.drawer.mode == 'push') {
                const width = this.getDrawerWidth();
                right += width;
                left -= width;
            }
        }
        this.ngZone.run(() => this._contentMargin$.next({ left, right }));
    }
    isDrawerOpen() {
        return (this.drawer != null &&
            (this.drawer._animating !== null || this.drawer.expanded));
    }
    watchDrawerToggle() {
        this.drawer._animationStarted
            .pipe(filter$1((event) => event.fromState !== event.toState), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            if (event.toState !== 'open-instant') {
                this.renderer.addClass(this.elementRef.nativeElement, 'rds-drawer-transition');
            }
            this.updateContentMargins();
        });
    }
    getDrawerWidth() {
        return this.drawerElement?.nativeElement?.offsetWidth ?? 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDrawerContainerComponent, isStandalone: true, selector: "rds-drawer-container", inputs: { backdrop: "backdrop" }, outputs: { backdropClick: "backdropClick" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "drawer", first: true, predicate: RdsDrawerComponent, descendants: true }, { propertyName: "drawerElement", first: true, predicate: RdsDrawerComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "@if (backdrop) {\n  <div\n    (click)=\"_onBackdropClicked()\"\n    class=\"rds-drawer-backdrop\"\n    [class.cdk-overlay-dark-backdrop]=\"backdrop !== 'transparent'\"\n    [class.rds-drawer-backdrop--transparent]=\"backdrop === 'transparent'\"\n    [class.rds-drawer-shown]=\"isShowingBackdrop()\"\n  ></div>\n}\n<ng-content select=\"rds-drawer\" />\n<ng-content select=\"rds-drawer-content\" />\n", styles: [".rds-drawer-container{position:relative;display:flex;flex-direction:row;align-items:flex-start;overflow:hidden;width:100%;height:100%}.rds-drawer-container.rds-drawer-transition .rds-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.rds-drawer-backdrop{position:absolute;z-index:3;inset:0;display:block;visibility:hidden}.rds-drawer-backdrop.rds-drawer-shown{visibility:visible}.rds-drawer-backdrop.rds-drawer-backdrop--transparent{background-color:transparent}\n"], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-drawer-container', encapsulation: ViewEncapsulation.None, standalone: true, template: "@if (backdrop) {\n  <div\n    (click)=\"_onBackdropClicked()\"\n    class=\"rds-drawer-backdrop\"\n    [class.cdk-overlay-dark-backdrop]=\"backdrop !== 'transparent'\"\n    [class.rds-drawer-backdrop--transparent]=\"backdrop === 'transparent'\"\n    [class.rds-drawer-shown]=\"isShowingBackdrop()\"\n  ></div>\n}\n<ng-content select=\"rds-drawer\" />\n<ng-content select=\"rds-drawer-content\" />\n", styles: [".rds-drawer-container{position:relative;display:flex;flex-direction:row;align-items:flex-start;overflow:hidden;width:100%;height:100%}.rds-drawer-container.rds-drawer-transition .rds-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.rds-drawer-backdrop{position:absolute;z-index:3;inset:0;display:block;visibility:hidden}.rds-drawer-backdrop.rds-drawer-shown{visibility:visible}.rds-drawer-backdrop.rds-drawer-backdrop--transparent{background-color:transparent}\n"] }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], drawer: [{
                type: ContentChild,
                args: [RdsDrawerComponent, { descendants: true }]
            }], drawerElement: [{
                type: ContentChild,
                args: [RdsDrawerComponent, { descendants: true, read: ElementRef }]
            }], backdropClick: [{
                type: Output
            }], backdrop: [{
                type: Input
            }] } });

class RdsDrawerContentComponent extends CdkScrollable {
    get marginRight() {
        return this.contentMargins.right ?? 0;
    }
    get marginLeft() {
        return this.contentMargins.left ?? 0;
    }
    constructor() {
        super(inject(ElementRef), inject(ScrollDispatcher), inject(NgZone));
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.container = inject(forwardRef(() => RdsDrawerContainerComponent));
        this.class = 'rds-drawer-content';
    }
    ngAfterContentInit() {
        this.container.contentMargins$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((m) => {
            this.contentMargins = m;
            this.cdr.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDrawerContentComponent, isStandalone: true, selector: "rds-drawer-content", host: { properties: { "class": "this.class", "style.margin-right.px": "this.marginRight", "style.margin-left.px": "this.marginLeft" } }, usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, styles: [".rds-drawer-content{width:100%;height:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-drawer-content', template: '<ng-content />', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, styles: [".rds-drawer-content{width:100%;height:100%}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], marginRight: [{
                type: HostBinding,
                args: ['style.margin-right.px']
            }], marginLeft: [{
                type: HostBinding,
                args: ['style.margin-left.px']
            }] } });

class RdsDrawerHeaderDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDrawerHeaderDirective, isStandalone: true, selector: "rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]',
                    standalone: true,
                }]
        }] });

const RDS_DRAWER_DIRECTIVES = [
    RdsDrawerContainerComponent,
    RdsDrawerContentComponent,
    RdsDrawerComponent,
    RdsDrawerHeaderDirective,
    RdsDrawerActionsDirective,
];
class RdsDrawerModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerModule, imports: [RdsDrawerContainerComponent,
            RdsDrawerContentComponent,
            RdsDrawerComponent,
            RdsDrawerHeaderDirective,
            RdsDrawerActionsDirective], exports: [RdsDrawerContainerComponent,
            RdsDrawerContentComponent,
            RdsDrawerComponent,
            RdsDrawerHeaderDirective,
            RdsDrawerActionsDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerModule, imports: [RdsDrawerComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [...RDS_DRAWER_DIRECTIVES],
                    exports: [...RDS_DRAWER_DIRECTIVES],
                }]
        }] });

class RdsDropdownToggleDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.toggle = new Subject();
        this._isOpen = false;
        this._eventsDestroyer$ = new Subject();
        this.trigger = 'click';
        this.class = 'rds-dropdown-toggle';
        this.disabled = false;
    }
    static { this.TRIGGER_SPLITTER = ', '; }
    get isOpen() {
        return this._isOpen;
    }
    set isOpen(isOpen) {
        this._isOpen = isOpen;
    }
    onEnter($event) {
        this.toggle.next($event);
    }
    ngOnChanges(changes) {
        if (changes['trigger'] && !changes['trigger'].isFirstChange()) {
            this._refreshEvents();
        }
    }
    ngAfterContentInit() {
        this._refreshEvents();
    }
    ngOnDestroy() {
        this._eventsDestroyer$.next();
        this._eventsDestroyer$.complete();
    }
    _refreshEvents() {
        this._eventsDestroyer$.next();
        if (this.trigger === null || this.trigger === undefined) {
            this.trigger = 'click';
        }
        this.trigger
            .split(RdsDropdownToggleDirective.TRIGGER_SPLITTER)
            .forEach((trigger) => fromEvent(this.elementRef.nativeElement, trigger)
            .pipe(takeUntil(this._eventsDestroyer$), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => this.toggle.next(event)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDropdownToggleDirective, selector: "[rdsDropdownToggle], [rds-dropdown-toggle]", inputs: { trigger: "trigger", isOpen: "isOpen" }, host: { listeners: { "keydown.enter": "onEnter($event)" }, properties: { "class": "this.class", "disabled": "this.disabled", "attr.aria-expanded": "this.isOpen" } }, exportAs: ["rdsDropdownToggle"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDropdownToggle], [rds-dropdown-toggle]',
                    exportAs: 'rdsDropdownToggle',
                }]
        }], propDecorators: { trigger: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['disabled']
            }], isOpen: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });

class RdsDropdownMenuDirective {
    constructor() {
        this.templateRef = inject(TemplateRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownMenuDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDropdownMenuDirective, selector: "[rdsDropdownMenu], [rds-dropdown-menu]", exportAs: ["rdsDropdownMenu"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownMenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDropdownMenu], [rds-dropdown-menu]',
                    exportAs: 'rdsDropdownMenu',
                }]
        }] });

class RdsDropdownContainerComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDropdownContainerComponent, selector: "rds-dropdown-container", inputs: { templateRef: "templateRef" }, ngImport: i0, template: '<ng-container *ngTemplateOutlet="templateRef" />', isInline: true, styles: [":host{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;border-radius:2px;min-width:180px;background:var(--rds-color-bg-base-1)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-dropdown-container', template: '<ng-container *ngTemplateOutlet="templateRef" />', styles: [":host{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;border-radius:2px;min-width:180px;background:var(--rds-color-bg-base-1)}\n"] }]
        }], propDecorators: { templateRef: [{
                type: Input
            }] } });

const SECONDARY_MOUSE_BUTTON_CLICK = 2;
class RdsDropdownDirective {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.ngZone = inject(NgZone);
        this.elementRef = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this.overlay = inject(Overlay);
        this.autoClose = true;
        this.placement = 'bottom-left';
        this.disabled = false;
        this.backdrop = false;
        this.openChanged = new EventEmitter();
        this.shown = new EventEmitter();
        this.hidden = new EventEmitter();
        this._open = false;
        this._overlayRef = null;
        this._closed$ = new Subject();
    }
    onHover() {
        this._handleMouseOver(this.elementRef);
    }
    onLeave() {
        this._handleMouseLeave(this.elementRef);
    }
    ngAfterContentInit() {
        const target = this.elementRef.nativeElement.firstElementChild;
        if (target) {
            fromEvent(target, 'focus')
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this._handleFocus(this.elementRef);
            });
            fromEvent(target, 'blur')
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this._handleBlur(this.elementRef);
            });
        }
        this.ngZone.onStable
            .pipe(take(1), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this._open) {
                this._setCloseHandlers();
            }
        });
        this._toggle.toggle
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            if (this._toggle.trigger === 'mouseenter, mouseleave') {
                if (event.type === 'mouseenter' && !this.isOpen()) {
                    this.show();
                }
                else if (event.type === 'mouseleave' && this.isOpen()) {
                    const hideObserver = {
                        next: noop,
                        error: () => this.hide(),
                    };
                    if (this._overlayRef) {
                        fromEvent(this._overlayRef.overlayElement, 'mouseenter')
                            .pipe(take(1), tap(() => {
                            if (this._overlayRef) {
                                fromEvent(this._overlayRef.overlayElement, 'mouseleave')
                                    .pipe(take(1), switchMap(() => fromEvent(this._toggle.elementRef.nativeElement, 'mouseenter').pipe(take(1), timeout(1), takeUntil(this._closed$))), takeUntil(this._closed$))
                                    .subscribe(hideObserver);
                            }
                        }), timeout(1), takeUntil(this._closed$))
                            .subscribe(hideObserver);
                    }
                }
            }
            else {
                this.toggle();
            }
        });
        this._toggle.disabled = this.disabled;
    }
    ngOnChanges(changes) {
        if (changes['backdrop']) {
            this._checkToggle();
            this.hide();
            this._overlayRef = null;
        }
        if (changes['placement']) {
            if (this.placement === null || this.placement === undefined) {
                this.placement = 'bottom-left';
            }
            if (this._overlayRef !== null) {
                this._overlayRef.updatePositionStrategy(this._getPositionStrategy());
            }
        }
        if (this._toggle &&
            changes['disabled'] &&
            changes['disabled'].previousValue !== changes['disabled'].currentValue) {
            this._toggle.disabled = this.disabled;
            if (this.disabled) {
                this.hide();
            }
        }
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.detach();
        }
        this._closed$.next();
        this._closed$.complete();
    }
    isOpen() {
        return this._open;
    }
    show() {
        if (!this.disabled && !this._open) {
            this._checkToggle();
            this._open = true;
            if (!this._overlayRef) {
                this._overlayRef = this.overlay.create({
                    hasBackdrop: this.backdrop !== false,
                    backdropClass: this.backdrop === 'transparent'
                        ? 'cdk-overlay-transparent-backdrop'
                        : undefined,
                    positionStrategy: this._getPositionStrategy(),
                });
                this._overlayRef.backdropClick().subscribe(() => this.hide());
                this._portal = new ComponentPortal(RdsDropdownContainerComponent, null);
            }
            const dropdownContainerComponentRef = this._overlayRef.attach(this._portal);
            dropdownContainerComponentRef.instance.templateRef =
                this._menu.templateRef;
            dropdownContainerComponentRef.changeDetectorRef.markForCheck();
            this.openChanged.emit(true);
            this.shown.emit();
            this._setCloseHandlers();
            if (this._toggle) {
                this._toggle.isOpen = true;
                this._toggle.elementRef.nativeElement.focus();
            }
        }
    }
    hide() {
        if (this._open) {
            this._open = false;
            this._toggle.isOpen = false;
            if (this._overlayRef) {
                this._overlayRef.detach();
            }
            this._closed$.next();
            this.openChanged.emit(false);
            this.hidden.emit();
            this.cdr.markForCheck();
        }
    }
    toggle() {
        if (this.isOpen()) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    _getPlacement() {
        return this.placement !== null && this.placement !== undefined
            ? this.placement
            : 'bottom-left';
    }
    _setCloseHandlers() {
        if (this.autoClose) {
            this.ngZone.runOutsideAngular(() => {
                const shouldCloseOnClick = (event) => {
                    const element = event.target;
                    if (event.button === SECONDARY_MOUSE_BUTTON_CLICK ||
                        this._toggle.elementRef.nativeElement.contains(element)) {
                        return false;
                    }
                    if (this.autoClose === 'inside') {
                        return this._overlayRef?.overlayElement.contains(element) || true;
                    }
                    else if (this.autoClose === 'outside') {
                        return !this._overlayRef?.overlayElement.contains(element) || false;
                    }
                    else {
                        return true;
                    }
                };
                const escapes$ = fromEvent(document, 'keydown').pipe(filter((e) => e.key === 'Escape'), tap((e) => e.preventDefault()), takeUntil(this._closed$));
                const mouseDowns$ = fromEvent(document, 'mousedown').pipe(map((e) => shouldCloseOnClick(e)), takeUntil(this._closed$));
                const closeableClicks$ = fromEvent(document, 'mouseup').pipe(withLatestFrom(mouseDowns$), 
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                filter(([_, shouldClose]) => shouldClose), delay(0), takeUntil(this._closed$));
                race([
                    escapes$.pipe(map(() => 'ESCAPE')),
                    closeableClicks$.pipe(map(() => 'CLICK')),
                ])
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe((source) => this.ngZone.run(() => {
                    this.hide();
                    if (source === 'ESCAPE') {
                        this._toggle.elementRef.nativeElement.focus();
                    }
                }));
            });
        }
    }
    _handleMouseOver(el) {
        this.handleIsPrevButton();
        this.handleIsPrevFocused();
        this.renderer.addClass(el.nativeElement, 'rds-dropdown--hover');
    }
    _handleMouseLeave(el) {
        this.handleIsPrevButton();
        this.handleIsPrevFocused();
        this.renderer.removeClass(el.nativeElement, 'rds-dropdown--hover');
    }
    _handleFocus(el) {
        this.handleIsPrevButton();
        this.renderer.addClass(el.nativeElement, 'rds-dropdown--focused');
    }
    _handleBlur(el) {
        this.handleIsPrevButton();
        this.renderer.removeClass(el.nativeElement, 'rds-dropdown--focused');
    }
    _getPositions() {
        const placement = this._getPlacement();
        const positions = {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 0,
        };
        if (placement.includes('top')) {
            positions.originY = 'top';
            positions.overlayY = 'bottom';
        }
        if (placement.includes('center')) {
            positions.originX = 'center';
            positions.overlayX = 'center';
        }
        if (placement.includes('right')) {
            positions.originX = placement.includes('start') ? 'start' : 'end';
            positions.overlayX = 'end';
        }
        else if (placement.includes('end')) {
            positions.originX = 'end';
        }
        return positions;
    }
    _getPositionStrategy() {
        const overlayOrigin = new CdkOverlayOrigin(this._toggle.elementRef);
        return this.overlay
            .position()
            .flexibleConnectedTo(overlayOrigin.elementRef)
            .withPositions([this._getPositions()]);
    }
    _checkToggle() {
        if (this.backdrop && this._toggle && this._toggle.trigger !== 'click') {
            throw new Error(`Backdrop is only allowed for 'click' trigger`);
        }
    }
    handleIsPrevButton() {
        const isPrevButton = this.elementRef?.nativeElement?.nextElementSibling?.tagName === 'BUTTON';
        if (isPrevButton) {
            this.renderer.addClass(this.elementRef.nativeElement, 'rds-dropdown--prev-button');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'rds-dropdown--prev-button');
        }
    }
    handleIsPrevFocused() {
        const input = this.elementRef.nativeElement.nextElementSibling?.querySelector('input');
        if (input) {
            if (input.parentElement?.classList.contains('rds-form-field_content-infix--focused')) {
                this.renderer.addClass(this.elementRef.nativeElement, 'rds-dropdown--prev-focused');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'rds-dropdown--prev-focused');
            }
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'rds-dropdown--prev-focused');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsDropdownDirective, selector: "[rdsDropdown], [rds-dropdown]", inputs: { autoClose: "autoClose", placement: "placement", disabled: ["disabled", "disabled", booleanAttribute], backdrop: "backdrop" }, outputs: { openChanged: "openChanged", shown: "shown", hidden: "hidden" }, host: { listeners: { "mouseover": "onHover()", "mouseleave": "onLeave()" } }, queries: [{ propertyName: "_menu", first: true, predicate: RdsDropdownMenuDirective, descendants: true }, { propertyName: "_toggle", first: true, predicate: RdsDropdownToggleDirective, descendants: true }], exportAs: ["rdsDropdown"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDropdown], [rds-dropdown]',
                    exportAs: 'rdsDropdown',
                }]
        }], propDecorators: { _menu: [{
                type: ContentChild,
                args: [RdsDropdownMenuDirective, { static: false }]
            }], _toggle: [{
                type: ContentChild,
                args: [RdsDropdownToggleDirective, { static: false }]
            }], autoClose: [{
                type: Input
            }], placement: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], backdrop: [{
                type: Input
            }], openChanged: [{
                type: Output
            }], shown: [{
                type: Output
            }], hidden: [{
                type: Output
            }], onHover: [{
                type: HostListener,
                args: ['mouseover']
            }], onLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });

class RdsDropdownToggleButtonComponent extends RdsDropdownToggleDirective {
    constructor() {
        super(...arguments);
        this.focusMonitor = inject(FocusMonitor);
        this.cdr = inject(ChangeDetectorRef);
        this.icon = 'caret_down';
        this.showIcon = !this._isIconButton();
        this._size = this._getDefaultSize();
        this.class = '';
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm' && size !== 'l') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    get isDisabled() {
        return this.disabled ? 'disabled' : null;
    }
    get isOpen() {
        return this._isOpen;
    }
    set isOpen(isOpen) {
        this._isOpen = isOpen;
        this.icon = this.isOpen ? 'caret_up' : 'caret_down';
        this.class = this._getCssClass();
        this.cdr.markForCheck();
    }
    onEnter($event) {
        this.toggle.next($event);
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.showIcon = !this._isIconButton();
        this.class = this._getCssClass();
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this.class = this._getCssClass();
    }
    ngAfterViewInit() {
        super.ngAfterContentInit();
        this.focusMonitor.monitor(this.elementRef, true);
        this.class = this._getCssClass();
    }
    ngAfterContentChecked() {
        super.ngAfterContentInit();
        this.class = this._getCssClass();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.hostElement, origin, options);
    }
    _isDefault() {
        return (this.hostElement.hasAttribute('rdsDropdownToggleButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-button'));
    }
    _isBorderless() {
        return (this.hostElement.hasAttribute('rdsDropdownToggleBorderlessButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-borderless-button'));
    }
    _isPrimary() {
        return (this.hostElement.hasAttribute('rdsDropdownTogglePrimaryButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-primary-button'));
    }
    _isSecondary() {
        return (this.hostElement.hasAttribute('rdsDropdownToggleSecondaryButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-secondary-button'));
    }
    _isText() {
        return (this.hostElement.hasAttribute('rdsDropdownToggleTextButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-text-button'));
    }
    _isWarning() {
        return (this.hostElement.hasAttribute('rdsDropdownToggleWarningButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-warning-button'));
    }
    _isIconButton() {
        return (this.hostElement.hasAttribute('rdsDropdownToggleIconButton') ||
            this.hostElement.hasAttribute('rds-dropdown-toggle-icon-button'));
    }
    _getCssClass() {
        const classes = [
            'rds-dropdown-toggle-button',
            `rds-dropdown-toggle-button--${this.size}`,
        ];
        if (this._isSecondary()) {
            classes.push('rds-dropdown-toggle-button--secondary');
        }
        if (this._isIconButton()) {
            classes.push('rds-dropdown-toggle-button--icon');
        }
        if (this._isPrimary()) {
            classes.push('rds-dropdown-toggle-button--primary');
        }
        if (this._isBorderless()) {
            classes.push('rds-dropdown-toggle-button--borderless');
        }
        if (this._isText()) {
            classes.push('rds-dropdown-toggle-button--text');
        }
        if (this._isWarning()) {
            classes.push('rds-dropdown-toggle-button--warning');
        }
        if (this._isDefault()) {
            classes.push('rds-dropdown-toggle-button--default');
        }
        if (this.isOpen) {
            classes.push('rds-dropdown-toggle-button--open');
        }
        return classes.join(' ');
    }
    get hostElement() {
        return this.elementRef.nativeElement;
    }
    _getDefaultSize() {
        return 'm';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownToggleButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDropdownToggleButtonComponent, selector: "\n    button[rdsDropdownToggleButton], button[rds-dropdown-toggle-button],\n    button[rdsDropdownToggleBorderlessButton], button[rds-dropdown-toggle-borderless-button],\n    button[rdsDropdownTogglePrimaryButton], button[rds-dropdown-toggle-primary-button],\n    button[rdsDropdownToggleSecondaryButton], button[rds-dropdown-toggle-secondary-button],\n    button[rdsDropdownToggleTextButton], button[rds-dropdown-toggle-text-button],\n    button[rdsDropdownToggleWarningButton], button[rds-dropdown-toggle-warning-button],\n    button[rdsDropdownToggleIconButton], button[rds-dropdown-toggle-icon-button],\n  ", inputs: { size: "size", isOpen: "isOpen" }, host: { listeners: { "keydown.enter": "onEnter($event)" }, properties: { "class": "this.class", "attr.disabled": "this.isDisabled", "attr.aria-expanded": "this.isOpen" } }, providers: [
            {
                provide: RdsDropdownToggleDirective,
                useExisting: forwardRef(() => RdsDropdownToggleButtonComponent),
            },
        ], viewQueries: [{ propertyName: "imageWrapper", first: true, predicate: ["imageWrapper"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <span class="rds-dropdown-toggle-button__content">
      @if (!showIcon) {
        <ng-content select="rds-icon" />
      }
      @if (showIcon) {
        <ng-content />
      }
    </span>
    @if (showIcon) {
      <rds-icon
        class="rds-dropdown-toggle-button__icon"
        namespace="filled"
        [icon]="icon"
      />
    }
  `, isInline: true, styles: [".rds-dropdown-toggle-button{position:relative;align-items:center;justify-content:center;display:inline-flex;cursor:pointer}.rds-dropdown-toggle-button:hover,.rds-dropdown-toggle-button:focus{outline:none}.rds-dropdown-toggle-button[disabled]{cursor:default;pointer-events:none}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:48px;padding-left:15px;padding-right:11px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l .rds-dropdown-toggle-button__content{display:inline-flex;justify-content:flex-start;align-items:center;padding-right:8px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l.rds-dropdown-toggle-button--icon{width:48px;padding:11px;display:flex}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content{padding:0}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content rds-icon{height:24px;width:24px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:36px;padding-left:15px;padding-right:11px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m .rds-dropdown-toggle-button__content{display:inline-flex;justify-content:flex-start;align-items:center;padding-right:8px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m.rds-dropdown-toggle-button--icon{width:36px;padding:5px;display:flex}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content{padding:0}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content rds-icon{height:18px;width:18px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:28px;padding-left:7px;padding-right:3px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s .rds-dropdown-toggle-button__content{display:inline-flex;justify-content:flex-start;align-items:center;padding-right:4px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s.rds-dropdown-toggle-button--icon{width:28px;padding:5px;display:flex}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content{padding:0}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content rds-icon{height:18px;width:18px}.rds-dropdown-toggle-button--default{border:1px solid var(--rds-color-stroke-enabled);border-radius:2px;background:var(--rds-color-bg-base-1);color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--default:hover,.rds-dropdown-toggle-button--default:focus{outline:none}.rds-dropdown-toggle-button--default .rds-dropdown-toggle-button__icon{color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--default:hover:not([disabled]){border-color:var(--rds-color-stroke-hover)}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:none;border-color:var(--rds-color-stroke-active-focus);border-width:2px}.rds-dropdown-toggle-button--default.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-stroke-active-focus);color:var(--rds-color-informative)}.rds-dropdown-toggle-button--default.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--default[disabled]{border-color:var(--rds-color-stroke-enabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--default[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--l{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--m{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--s{padding-left:6px;padding-right:2px}.rds-dropdown-toggle-button--borderless{border:1px solid transparent;border-radius:2px;background:var(--rds-color-bg-base-1);color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--borderless:hover,.rds-dropdown-toggle-button--borderless:focus{outline:none}.rds-dropdown-toggle-button--borderless .rds-dropdown-toggle-button__icon{color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--borderless:hover:not([disabled]){background:var(--rds-color-bg-transparent-hover-select)}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:none;border-color:var(--rds-color-stroke-active-focus);border-width:2px}.rds-dropdown-toggle-button--borderless.rds-dropdown-toggle-button--open:not([disabled]){background:var(--rds-color-bg-transparent-pressed);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--borderless.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--borderless[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--borderless[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--l{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--m{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--s{padding-left:6px;padding-right:2px}.rds-dropdown-toggle-button--primary{border:1px solid var(--rds-color-bg-informative);border-radius:2px;background:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--primary:hover,.rds-dropdown-toggle-button--primary:focus{outline:none}.rds-dropdown-toggle-button--primary .rds-dropdown-toggle-button__icon{color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--primary:hover:not([disabled]){border-color:var(--rds-color-bg-informative-hover);background:var(--rds-color-bg-informative-hover)}.rds-dropdown-toggle-button--primary:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);border-color:var(--rds-color-bg-base-1)}.rds-dropdown-toggle-button--primary.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-bg-informative-pressed);background:var(--rds-color-bg-informative-pressed)}.rds-dropdown-toggle-button--primary[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--primary[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--secondary{border:1px solid var(--rds-color-informative);border-radius:2px;background:transparent;color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary:hover,.rds-dropdown-toggle-button--secondary:focus{outline:none}.rds-dropdown-toggle-button--secondary .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary:hover:not([disabled]){border-color:var(--rds-color-informative-hover);color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--secondary:hover:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--secondary:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);border-color:transparent;color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--secondary:focus:not([disabled]).cdk-focused.cdk-keyboard-focused .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--secondary.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-informative-pressed);color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary[disabled]{border-color:var(--rds-color-stroke-enabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--secondary[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--text{border:1px solid transparent;border-radius:2px;background:transparent;color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text:hover,.rds-dropdown-toggle-button--text:focus{outline:none}.rds-dropdown-toggle-button--text .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text:hover:not([disabled]){color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--text:hover:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--text:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--text:focus:not([disabled]).cdk-focused.cdk-keyboard-focused .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--text.rds-dropdown-toggle-button--open:not([disabled]){color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text[disabled]{border-color:transparent;background:transparent;color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--text[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--warning{border:1px solid var(--rds-color-bg-error);border-radius:2px;background:var(--rds-color-bg-error);color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--warning:hover,.rds-dropdown-toggle-button--warning:focus{outline:none}.rds-dropdown-toggle-button--warning .rds-dropdown-toggle-button__icon{color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--warning:hover:not([disabled]){border-color:var(--rds-color-bg-error-hover);background:var(--rds-color-bg-error-hover)}.rds-dropdown-toggle-button--warning:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);border-color:var(--rds-color-bg-base-1)}.rds-dropdown-toggle-button--warning.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-bg-error-pressed);background:var(--rds-color-bg-error-pressed)}.rds-dropdown-toggle-button--warning[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--warning[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--icon{border:1px solid transparent;border-radius:2px;background:var(--rds-color-bg-base-1);color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--icon:hover,.rds-dropdown-toggle-button--icon:focus{outline:none}.rds-dropdown-toggle-button--icon:hover:not([disabled]){background:var(--rds-color-bg-transparent-hover-select);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon:hover:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon:focus:not([disabled]).cdk-focused.cdk-keyboard-focused .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon.rds-dropdown-toggle-button--open:not([disabled]){background:var(--rds-color-bg-transparent-pressed);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownToggleButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: `
    button[rdsDropdownToggleButton], button[rds-dropdown-toggle-button],
    button[rdsDropdownToggleBorderlessButton], button[rds-dropdown-toggle-borderless-button],
    button[rdsDropdownTogglePrimaryButton], button[rds-dropdown-toggle-primary-button],
    button[rdsDropdownToggleSecondaryButton], button[rds-dropdown-toggle-secondary-button],
    button[rdsDropdownToggleTextButton], button[rds-dropdown-toggle-text-button],
    button[rdsDropdownToggleWarningButton], button[rds-dropdown-toggle-warning-button],
    button[rdsDropdownToggleIconButton], button[rds-dropdown-toggle-icon-button],
  `, template: `
    <span class="rds-dropdown-toggle-button__content">
      @if (!showIcon) {
        <ng-content select="rds-icon" />
      }
      @if (showIcon) {
        <ng-content />
      }
    </span>
    @if (showIcon) {
      <rds-icon
        class="rds-dropdown-toggle-button__icon"
        namespace="filled"
        [icon]="icon"
      />
    }
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        {
                            provide: RdsDropdownToggleDirective,
                            useExisting: forwardRef(() => RdsDropdownToggleButtonComponent),
                        },
                    ], styles: [".rds-dropdown-toggle-button{position:relative;align-items:center;justify-content:center;display:inline-flex;cursor:pointer}.rds-dropdown-toggle-button:hover,.rds-dropdown-toggle-button:focus{outline:none}.rds-dropdown-toggle-button[disabled]{cursor:default;pointer-events:none}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:48px;padding-left:15px;padding-right:11px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l .rds-dropdown-toggle-button__content{display:inline-flex;justify-content:flex-start;align-items:center;padding-right:8px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l.rds-dropdown-toggle-button--icon{width:48px;padding:11px;display:flex}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content{padding:0}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--l.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content rds-icon{height:24px;width:24px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:36px;padding-left:15px;padding-right:11px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m .rds-dropdown-toggle-button__content{display:inline-flex;justify-content:flex-start;align-items:center;padding-right:8px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m.rds-dropdown-toggle-button--icon{width:36px;padding:5px;display:flex}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content{padding:0}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--m.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content rds-icon{height:18px;width:18px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:28px;padding-left:7px;padding-right:3px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s .rds-dropdown-toggle-button__content{display:inline-flex;justify-content:flex-start;align-items:center;padding-right:4px}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s.rds-dropdown-toggle-button--icon{width:28px;padding:5px;display:flex}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content{padding:0}.rds-dropdown-toggle-button.rds-dropdown-toggle-button--s.rds-dropdown-toggle-button--icon .rds-dropdown-toggle-button__content rds-icon{height:18px;width:18px}.rds-dropdown-toggle-button--default{border:1px solid var(--rds-color-stroke-enabled);border-radius:2px;background:var(--rds-color-bg-base-1);color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--default:hover,.rds-dropdown-toggle-button--default:focus{outline:none}.rds-dropdown-toggle-button--default .rds-dropdown-toggle-button__icon{color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--default:hover:not([disabled]){border-color:var(--rds-color-stroke-hover)}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:none;border-color:var(--rds-color-stroke-active-focus);border-width:2px}.rds-dropdown-toggle-button--default.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-stroke-active-focus);color:var(--rds-color-informative)}.rds-dropdown-toggle-button--default.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--default[disabled]{border-color:var(--rds-color-stroke-enabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--default[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--l{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--m{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--default:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--s{padding-left:6px;padding-right:2px}.rds-dropdown-toggle-button--borderless{border:1px solid transparent;border-radius:2px;background:var(--rds-color-bg-base-1);color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--borderless:hover,.rds-dropdown-toggle-button--borderless:focus{outline:none}.rds-dropdown-toggle-button--borderless .rds-dropdown-toggle-button__icon{color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--borderless:hover:not([disabled]){background:var(--rds-color-bg-transparent-hover-select)}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:none;border-color:var(--rds-color-stroke-active-focus);border-width:2px}.rds-dropdown-toggle-button--borderless.rds-dropdown-toggle-button--open:not([disabled]){background:var(--rds-color-bg-transparent-pressed);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--borderless.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--borderless[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--borderless[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--l{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--m{padding-left:14px;padding-right:10px}.rds-dropdown-toggle-button--borderless:focus:not([disabled]).cdk-focused.cdk-keyboard-focused.rds-dropdown-toggle-button--s{padding-left:6px;padding-right:2px}.rds-dropdown-toggle-button--primary{border:1px solid var(--rds-color-bg-informative);border-radius:2px;background:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--primary:hover,.rds-dropdown-toggle-button--primary:focus{outline:none}.rds-dropdown-toggle-button--primary .rds-dropdown-toggle-button__icon{color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--primary:hover:not([disabled]){border-color:var(--rds-color-bg-informative-hover);background:var(--rds-color-bg-informative-hover)}.rds-dropdown-toggle-button--primary:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);border-color:var(--rds-color-bg-base-1)}.rds-dropdown-toggle-button--primary.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-bg-informative-pressed);background:var(--rds-color-bg-informative-pressed)}.rds-dropdown-toggle-button--primary[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--primary[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--secondary{border:1px solid var(--rds-color-informative);border-radius:2px;background:transparent;color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary:hover,.rds-dropdown-toggle-button--secondary:focus{outline:none}.rds-dropdown-toggle-button--secondary .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary:hover:not([disabled]){border-color:var(--rds-color-informative-hover);color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--secondary:hover:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--secondary:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);border-color:transparent;color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--secondary:focus:not([disabled]).cdk-focused.cdk-keyboard-focused .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--secondary.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-informative-pressed);color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--secondary[disabled]{border-color:var(--rds-color-stroke-enabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--secondary[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--text{border:1px solid transparent;border-radius:2px;background:transparent;color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text:hover,.rds-dropdown-toggle-button--text:focus{outline:none}.rds-dropdown-toggle-button--text .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text:hover:not([disabled]){color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--text:hover:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-hover)}.rds-dropdown-toggle-button--text:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--text:focus:not([disabled]).cdk-focused.cdk-keyboard-focused .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative-pressed)}.rds-dropdown-toggle-button--text.rds-dropdown-toggle-button--open:not([disabled]){color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-informative)}.rds-dropdown-toggle-button--text[disabled]{border-color:transparent;background:transparent;color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--text[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--warning{border:1px solid var(--rds-color-bg-error);border-radius:2px;background:var(--rds-color-bg-error);color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--warning:hover,.rds-dropdown-toggle-button--warning:focus{outline:none}.rds-dropdown-toggle-button--warning .rds-dropdown-toggle-button__icon{color:var(--rds-color-on-dark-surface)}.rds-dropdown-toggle-button--warning:hover:not([disabled]){border-color:var(--rds-color-bg-error-hover);background:var(--rds-color-bg-error-hover)}.rds-dropdown-toggle-button--warning:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);border-color:var(--rds-color-bg-base-1)}.rds-dropdown-toggle-button--warning.rds-dropdown-toggle-button--open:not([disabled]){border-color:var(--rds-color-bg-error-pressed);background:var(--rds-color-bg-error-pressed)}.rds-dropdown-toggle-button--warning[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--warning[disabled] .rds-dropdown-toggle-button__icon{color:var(--rds-color-disabled)}.rds-dropdown-toggle-button--icon{border:1px solid transparent;border-radius:2px;background:var(--rds-color-bg-base-1);color:var(--rds-color-low-contrast)}.rds-dropdown-toggle-button--icon:hover,.rds-dropdown-toggle-button--icon:focus{outline:none}.rds-dropdown-toggle-button--icon:hover:not([disabled]){background:var(--rds-color-bg-transparent-hover-select);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon:hover:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon:focus:not([disabled]).cdk-focused.cdk-keyboard-focused .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon.rds-dropdown-toggle-button--open:not([disabled]){background:var(--rds-color-bg-transparent-pressed);color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon.rds-dropdown-toggle-button--open:not([disabled]) .rds-dropdown-toggle-button__icon{color:var(--rds-color-high-contrast)}.rds-dropdown-toggle-button--icon[disabled]{border-color:var(--rds-color-bg-disabled);background:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}\n"] }]
        }], propDecorators: { imageWrapper: [{
                type: ViewChild,
                args: ['imageWrapper', { static: true }]
            }], size: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], isDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], isOpen: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });

const COMPONENTS$1 = [
    RdsDropdownContainerComponent,
    RdsDropdownToggleButtonComponent,
];
const DIRECTIVES = [
    RdsDropdownDirective,
    RdsDropdownMenuDirective,
    RdsDropdownToggleDirective,
];
class RdsDropdownModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownModule, declarations: [RdsDropdownContainerComponent,
            RdsDropdownToggleButtonComponent, RdsDropdownDirective,
            RdsDropdownMenuDirective,
            RdsDropdownToggleDirective], imports: [CommonModule, OverlayModule, RdsIconComponent], exports: [RdsDropdownContainerComponent,
            RdsDropdownToggleButtonComponent, RdsDropdownDirective,
            RdsDropdownMenuDirective,
            RdsDropdownToggleDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownModule, imports: [CommonModule, OverlayModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...COMPONENTS$1, ...DIRECTIVES],
                    exports: [...COMPONENTS$1, ...DIRECTIVES],
                    imports: [CommonModule, OverlayModule, RdsIconComponent],
                }]
        }] });

class RdsEmptyStateButtonDirective {
    constructor() {
        this.class = 'rds-empty-state-button';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateButtonDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEmptyStateButtonDirective, selector: "[rds-empty-state-button], [rdsEmptyStateButton]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateButtonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-empty-state-button], [rdsEmptyStateButton]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsEmptyStateIconDirective {
    constructor() {
        this.class = 'rds-empty-state-icon';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEmptyStateIconDirective, selector: "rds-icon[rds-empty-state-icon], rds-icon[rdsEmptyStateIcon]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-icon[rds-empty-state-icon], rds-icon[rdsEmptyStateIcon]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsEmptyStateImageDirective {
    constructor() {
        this.class = 'rds-empty-state-image';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateImageDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEmptyStateImageDirective, selector: "[rds-empty-state-image], [rdsEmptyStateImage]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateImageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-empty-state-image], [rdsEmptyStateImage]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsEmptyStateSubtitleDirective {
    constructor() {
        this.class = 'rds-empty-state-subtitle';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateSubtitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEmptyStateSubtitleDirective, selector: "rds-empty-state-subtitle", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateSubtitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-empty-state-subtitle',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsEmptyStateTitleDirective {
    constructor() {
        this.class = 'rds-empty-state-title';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEmptyStateTitleDirective, selector: "rds-empty-state-title", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-empty-state-title',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsEmptyStateComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this._image = null;
        this.button = null;
        this._size = 'l';
        this.alignment = 'left';
    }
    set size(value) {
        this._size = value;
        if (this.button) {
            if (this._size === 'l') {
                this.button.size = 'm';
            }
            else {
                this.button.size = 's';
            }
        }
    }
    get size() {
        return this._size;
    }
    get class() {
        const classList = ['rds-empty-state-container'];
        if (this.size) {
            classList.push(`rds-empty-state--${this.size}`);
        }
        if (this.alignment) {
            classList.push(`rds-empty-state--${this.alignment}`);
        }
        return classList;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsEmptyStateComponent, selector: "rds-empty-state", inputs: { size: "size", alignment: "alignment" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "_image", first: true, predicate: RdsEmptyStateImageDirective, descendants: true }, { propertyName: "button", first: true, predicate: RdsButtonComponent, descendants: true }], ngImport: i0, template: "<div\n  class=\"rds-empty-state-image-container\"\n  (cdkObserveContent)=\"cdr.markForCheck()\"\n>\n  <ng-content select=\"[rds-empty-state-image], [rdsEmptyStateImage]\" />\n</div>\n<ng-content\n  select=\"rds-icon[rds-empty-state-icon], rds-icon[rdsEmptyStateIcon]\"\n/>\n@if (size !== 'xs' && _image && alignment !== 'center') {\n  <div class=\"rds-empty-state-divider\">\n    <rds-divider vertical=\"true\" />\n  </div>\n}\n<div class=\"rds-empty-state-items-container\">\n  <ng-content select=\"rds-empty-state-title\" />\n  <ng-content select=\"rds-empty-state-subtitle\" />\n  <ng-content select=\"[rds-empty-state-button], [rdsEmptyStateButton]\" />\n</div>\n", styles: [".rds-empty-state-container.rds-empty-state--left{display:flex;flex-direction:row;align-items:center}.rds-empty-state-container.rds-empty-state--left .rds-empty-state-items-container{align-items:start}.rds-empty-state-container.rds-empty-state--left .rds-empty-state-divider{width:1px;height:100%}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--left{flex-direction:column;align-items:start}.rds-empty-state-container.rds-empty-state--left .rds-empty-state-image-container{margin-bottom:24px}}.rds-empty-state-container.rds-empty-state--center{display:flex;flex-direction:column;align-items:center}.rds-empty-state-container.rds-empty-state--center .rds-empty-state-items-container{align-items:center}.rds-empty-state-container.rds-empty-state--center .rds-empty-state-image-container{margin-bottom:24px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--center,.rds-empty-state-container.rds-empty-state--center .rds-empty-state-items-container{align-items:start}}.rds-empty-state-container .rds-empty-state-image-container img,.rds-empty-state-container .rds-empty-state-image-container svg{max-width:100%;height:auto}.rds-empty-state-container .rds-empty-state-items-container{display:flex;flex-direction:column}.rds-empty-state-container.rds-empty-state--l.rds-empty-state--left{column-gap:64px;height:100%}.rds-empty-state-container.rds-empty-state--l.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:160px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--l.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-title{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-title+.rds-empty-state-subtitle{margin-top:8px}.rds-empty-state-container.rds-empty-state--l *+.rds-empty-state-button{margin-top:24px}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-icon{display:none;width:0;height:0}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-image-container img,.rds-empty-state-container.rds-empty-state--l .rds-empty-state-image-container svg{max-width:160px;max-height:160px}.rds-empty-state-container.rds-empty-state--m.rds-empty-state--left{column-gap:48px;height:100%}.rds-empty-state-container.rds-empty-state--m.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:120px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--m.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-title{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-title+.rds-empty-state-subtitle{margin-top:8px}.rds-empty-state-container.rds-empty-state--m *+.rds-empty-state-button{margin-top:24px}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-icon{display:none;width:0;height:0}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-image-container img,.rds-empty-state-container.rds-empty-state--m .rds-empty-state-image-container svg{max-width:120px;max-height:120px}.rds-empty-state-container.rds-empty-state--s.rds-empty-state--left{column-gap:32px;height:100%}.rds-empty-state-container.rds-empty-state--s.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:64px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--s.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-title+.rds-empty-state-subtitle{margin-top:4px}.rds-empty-state-container.rds-empty-state--s *+.rds-empty-state-button{margin-top:24px}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-icon{display:none;width:0;height:0}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-image-container img,.rds-empty-state-container.rds-empty-state--s .rds-empty-state-image-container svg{max-width:64px;max-height:64px}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--left{height:100%}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-title{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--left .rds-empty-state-icon{margin-right:16px;color:var(--rds-color-informative)}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--center .rds-empty-state-icon{margin-bottom:8px;color:var(--rds-color-informative)}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--center{flex-direction:row;align-items:center}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--center .rds-empty-state-icon{margin-bottom:0}}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--xs{flex-direction:row;align-items:center}.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-icon{margin-right:16px;margin-bottom:0;color:var(--rds-color-informative)}}.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-image-container,.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-subtitle,.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-button{display:none}\n"], dependencies: [{ kind: "directive", type: i1$2.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }, { kind: "component", type: RdsDividerComponent, selector: "rds-divider", inputs: ["vertical"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-empty-state', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  class=\"rds-empty-state-image-container\"\n  (cdkObserveContent)=\"cdr.markForCheck()\"\n>\n  <ng-content select=\"[rds-empty-state-image], [rdsEmptyStateImage]\" />\n</div>\n<ng-content\n  select=\"rds-icon[rds-empty-state-icon], rds-icon[rdsEmptyStateIcon]\"\n/>\n@if (size !== 'xs' && _image && alignment !== 'center') {\n  <div class=\"rds-empty-state-divider\">\n    <rds-divider vertical=\"true\" />\n  </div>\n}\n<div class=\"rds-empty-state-items-container\">\n  <ng-content select=\"rds-empty-state-title\" />\n  <ng-content select=\"rds-empty-state-subtitle\" />\n  <ng-content select=\"[rds-empty-state-button], [rdsEmptyStateButton]\" />\n</div>\n", styles: [".rds-empty-state-container.rds-empty-state--left{display:flex;flex-direction:row;align-items:center}.rds-empty-state-container.rds-empty-state--left .rds-empty-state-items-container{align-items:start}.rds-empty-state-container.rds-empty-state--left .rds-empty-state-divider{width:1px;height:100%}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--left{flex-direction:column;align-items:start}.rds-empty-state-container.rds-empty-state--left .rds-empty-state-image-container{margin-bottom:24px}}.rds-empty-state-container.rds-empty-state--center{display:flex;flex-direction:column;align-items:center}.rds-empty-state-container.rds-empty-state--center .rds-empty-state-items-container{align-items:center}.rds-empty-state-container.rds-empty-state--center .rds-empty-state-image-container{margin-bottom:24px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--center,.rds-empty-state-container.rds-empty-state--center .rds-empty-state-items-container{align-items:start}}.rds-empty-state-container .rds-empty-state-image-container img,.rds-empty-state-container .rds-empty-state-image-container svg{max-width:100%;height:auto}.rds-empty-state-container .rds-empty-state-items-container{display:flex;flex-direction:column}.rds-empty-state-container.rds-empty-state--l.rds-empty-state--left{column-gap:64px;height:100%}.rds-empty-state-container.rds-empty-state--l.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:160px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--l.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-title{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-empty-state-container.rds-empty-state--l .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-title+.rds-empty-state-subtitle{margin-top:8px}.rds-empty-state-container.rds-empty-state--l *+.rds-empty-state-button{margin-top:24px}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-icon{display:none;width:0;height:0}.rds-empty-state-container.rds-empty-state--l .rds-empty-state-image-container img,.rds-empty-state-container.rds-empty-state--l .rds-empty-state-image-container svg{max-width:160px;max-height:160px}.rds-empty-state-container.rds-empty-state--m.rds-empty-state--left{column-gap:48px;height:100%}.rds-empty-state-container.rds-empty-state--m.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:120px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--m.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-title{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-empty-state-container.rds-empty-state--m .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-title+.rds-empty-state-subtitle{margin-top:8px}.rds-empty-state-container.rds-empty-state--m *+.rds-empty-state-button{margin-top:24px}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-icon{display:none;width:0;height:0}.rds-empty-state-container.rds-empty-state--m .rds-empty-state-image-container img,.rds-empty-state-container.rds-empty-state--m .rds-empty-state-image-container svg{max-width:120px;max-height:120px}.rds-empty-state-container.rds-empty-state--s.rds-empty-state--left{column-gap:32px;height:100%}.rds-empty-state-container.rds-empty-state--s.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:64px}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--s.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-title{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-empty-state-container.rds-empty-state--s .rds-empty-state-subtitle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-title+.rds-empty-state-subtitle{margin-top:4px}.rds-empty-state-container.rds-empty-state--s *+.rds-empty-state-button{margin-top:24px}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-icon{display:none;width:0;height:0}.rds-empty-state-container.rds-empty-state--s .rds-empty-state-image-container img,.rds-empty-state-container.rds-empty-state--s .rds-empty-state-image-container svg{max-width:64px;max-height:64px}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--left{height:100%}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--left .rds-empty-state-divider>rds-divider{min-height:0;height:0}}.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-title{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--left .rds-empty-state-icon{margin-right:16px;color:var(--rds-color-informative)}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--center .rds-empty-state-icon{margin-bottom:8px;color:var(--rds-color-informative)}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--center{flex-direction:row;align-items:center}.rds-empty-state-container.rds-empty-state--xs.rds-empty-state--center .rds-empty-state-icon{margin-bottom:0}}@media (max-width: 767.999999px){.rds-empty-state-container.rds-empty-state--xs{flex-direction:row;align-items:center}.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-icon{margin-right:16px;margin-bottom:0;color:var(--rds-color-informative)}}.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-image-container,.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-subtitle,.rds-empty-state-container.rds-empty-state--xs .rds-empty-state-button{display:none}\n"] }]
        }], propDecorators: { _image: [{
                type: ContentChild,
                args: [RdsEmptyStateImageDirective, { static: false }]
            }], button: [{
                type: ContentChild,
                args: [RdsButtonComponent, { static: false }]
            }], size: [{
                type: Input
            }], alignment: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const ELEMENTS$5 = [
    RdsEmptyStateComponent,
    RdsEmptyStateButtonDirective,
    RdsEmptyStateImageDirective,
    RdsEmptyStateSubtitleDirective,
    RdsEmptyStateTitleDirective,
    RdsEmptyStateIconDirective,
];
class RdsEmptyStateModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateModule, declarations: [RdsEmptyStateComponent,
            RdsEmptyStateButtonDirective,
            RdsEmptyStateImageDirective,
            RdsEmptyStateSubtitleDirective,
            RdsEmptyStateTitleDirective,
            RdsEmptyStateIconDirective], imports: [CommonModule, ObserversModule, RdsDividerModule], exports: [RdsEmptyStateComponent,
            RdsEmptyStateButtonDirective,
            RdsEmptyStateImageDirective,
            RdsEmptyStateSubtitleDirective,
            RdsEmptyStateTitleDirective,
            RdsEmptyStateIconDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateModule, imports: [CommonModule, ObserversModule, RdsDividerModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEmptyStateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...ELEMENTS$5],
                    exports: [...ELEMENTS$5],
                    imports: [CommonModule, ObserversModule, RdsDividerModule],
                }]
        }] });

class RdsFooterCaptionDirective {
    constructor() {
        this.class = 'rds-footer-caption';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCaptionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterCaptionDirective, selector: "rds-footer-caption", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCaptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-caption',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsFooterCustomContentDirective {
    constructor() {
        this.class = 'rds-footer-custom-content';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCustomContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterCustomContentDirective, selector: "rds-footer-custom-content", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCustomContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-custom-content',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsFooterDisclaimerDirective {
    constructor() {
        this.class = 'rds-footer-disclaimer';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterDisclaimerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterDisclaimerDirective, selector: "rds-footer-disclaimer", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterDisclaimerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-disclaimer',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsLinkComponent {
    get hostClasses() {
        const classes = ['rds-link'];
        if (this.standalone) {
            classes.push(`rds-link--${this.type}`, `rds-link-${this.size}`);
        }
        else if (this.elementRef) {
            classes.push(`rds-link-inline`);
        }
        return classes;
    }
    get hasFirstIcon() {
        return (this.elementRef?.nativeElement.firstChild?.tagName?.toUpperCase() ===
            'RDS-ICON');
    }
    get hasLastIcon() {
        return (this.elementRef?.nativeElement.lastChild?.tagName?.toUpperCase() ===
            'RDS-ICON');
    }
    set standalone(isStandalone) {
        this._standalone = booleanAttribute(isStandalone);
    }
    get standalone() {
        return (this._standalone ||
            this.elementRef.nativeElement.tagName === 'BUTTON' ||
            this.hasFirstIcon ||
            this.hasLastIcon);
    }
    get attrDisabled() {
        return this.disabled ? this.disabled : null;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.contentObserver = inject(ContentObserver);
        this.routerLink = inject(RouterLink, { optional: true });
        this._standalone = false;
        this.active = false;
        this.disabled = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.type = 'primary';
        this.size = 'l';
        this._preventDisabledLinkClick();
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true);
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr?.markForCheck());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    _preventDisabledLinkClick() {
        const link = this.routerLink;
        if (link) {
            const onClick = link.onClick;
            link.onClick = (...args) => {
                if (this.disabled) {
                    return !this.routerLink;
                }
                else {
                    return onClick.apply(link, args);
                }
            };
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsLinkComponent, isStandalone: true, selector: "a[rds-link], a[rdsLink], button[rds-link], button[rdsLink]", inputs: { standalone: "standalone", active: ["active", "active", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], tabIndex: "tabIndex", type: "type", size: "size" }, host: { properties: { "class": "this.hostClasses", "class.rds-link-before-icon": "this.hasFirstIcon", "class.rds-link-after-icon": "this.hasLastIcon", "class.rds-link-standalone": "this.standalone", "class.rds-link--active": "this.active", "attr.disabled": "this.attrDisabled", "attr.aria-disabled": "this.disabled", "tabIndex": "this.tabIndex" } }, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'a[rds-link], a[rdsLink], button[rds-link], button[rdsLink]',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                }]
        }], ctorParameters: () => [], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], hasFirstIcon: [{
                type: HostBinding,
                args: ['class.rds-link-before-icon']
            }], hasLastIcon: [{
                type: HostBinding,
                args: ['class.rds-link-after-icon']
            }], standalone: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.rds-link-standalone']
            }], active: [{
                type: HostBinding,
                args: ['class.rds-link--active']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], disabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input
            }], type: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

class RdsLinkModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkModule, imports: [RdsLinkComponent], exports: [RdsLinkComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RdsLinkComponent],
                    exports: [RdsLinkComponent],
                }]
        }] });

class RdsFooterLinkComponent extends RdsLinkComponent {
    constructor() {
        super(...arguments);
        this.class = 'rds-footer-link';
        this.type = 'secondary';
        this.size = 's';
        this._standalone = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterLinkComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterLinkComponent, selector: "rds-footer-link", host: { properties: { "class": "this.class" } }, usesInheritance: true, ngImport: i0, template: `<ng-content />`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterLinkComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-footer-link',
                    template: `<ng-content />`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsFooterNavigationDirective {
    constructor() {
        this.class = 'rds-footer-navigation';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterNavigationDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterNavigationDirective, selector: "rds-footer-navigation", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterNavigationDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-navigation',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsFooterSitemapSectionDirective {
    constructor() {
        this.class = 'rds-footer-sitemap-section';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterSitemapSectionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterSitemapSectionDirective, selector: "rds-footer-sitemap-section", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterSitemapSectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-sitemap-section',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });
class RdsFooterSitemapDirective {
    constructor() {
        this.class = 'rds-footer-sitemap';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterSitemapDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterSitemapDirective, selector: "rds-footer-sitemap", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterSitemapDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-sitemap',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsFooterTitleDirective {
    constructor() {
        this.class = 'rds-footer-title';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterTitleDirective, selector: "rds-footer-title", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-title',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsFooterIntl {
    constructor() {
        this.changes = new Subject();
        this._copyrightText = `© ${new Date().getFullYear()} F. Hoffmann-La Roche Ltd`;
    }
    get copyrightText() {
        return this._copyrightText;
    }
    set copyrightText(copyrightText) {
        this._copyrightText = copyrightText;
        this.changes.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterIntl, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class RdsFooterComponent {
    constructor() {
        this.intl = inject(RdsFooterIntl);
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.contentObserver = inject(ContentObserver);
        this.neutral = false;
    }
    ngAfterViewInit() {
        merge(this.intl.changes, this.contentObserver.observe(this.elementRef))
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsFooterComponent, selector: "rds-footer, footer[rds-footer], footer[rdsFooter]", inputs: { neutral: ["neutral", "neutral", booleanAttribute] }, queries: [{ propertyName: "_sitemap", first: true, predicate: RdsFooterSitemapDirective, descendants: true }, { propertyName: "_customContent", first: true, predicate: RdsFooterCustomContentDirective, descendants: true }, { propertyName: "_navigation", first: true, predicate: RdsFooterNavigationDirective, descendants: true }, { propertyName: "_disclaimer", first: true, predicate: RdsFooterDisclaimerDirective, descendants: true }], ngImport: i0, template: "<div class=\"rds-footer\" [class.rds-footer-neutral]=\"neutral\">\n  <div class=\"rds-footer-content\">\n    <ng-content select=\"rds-footer-sitemap\" />\n    @if (_sitemap) {\n      <div class=\"rds-footer-divider\"></div>\n    }\n    <ng-content select=\"rds-footer-custom-content\" />\n    @if (_customContent) {\n      <div class=\"rds-footer-divider\"></div>\n    }\n    <div class=\"rds-footer-basic\">\n      <div class=\"rds-footer-basic-content\">\n        <div class=\"rds-footer-copy-rights\">{{ intl.copyrightText }}</div>\n      </div>\n      <ng-content select=\"rds-footer-navigation\" />\n    </div>\n    <ng-content select=\"rds-footer-disclaimer\" />\n  </div>\n</div>\n", styles: [".rds-footer{width:100%;background-image:linear-gradient(136.47deg,var(--rds-color-bg-base-1) 35.41%,var(--rds-color-bg-gradient-4) 58%,var(--rds-color-bg-gradient-1) 128.14%);border-top:2px solid var(--rds-color-informative-hover)}.rds-footer.rds-footer-neutral{background-image:linear-gradient(144.84deg,var(--rds-color-bg-base-1) 54.87%,var(--rds-color-bg-gradient-3) 227.96%)}.rds-footer .rds-footer-divider{display:block;width:100%;border-bottom:1px solid var(--rds-color-grey-2)}.rds-footer .rds-footer-title{color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-footer .rds-footer-title{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-footer .rds-footer-caption{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-footer .rds-footer-link{word-break:break-word}.rds-footer .rds-footer-custom-content{display:block}.rds-footer .rds-footer-sitemap{display:grid;grid-template-columns:repeat(auto-fit,minmax(min(100%,max(200px,16.6666666667%)),1fr));align-items:flex-start;flex-wrap:wrap}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section{flex-direction:column;display:flex}.rds-footer-basic{display:flex;justify-content:space-between;align-items:center}.rds-footer-basic .rds-footer-basic-content{display:flex}.rds-footer-basic .rds-footer-basic-content .rds-footer-copy-rights{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-footer-basic .rds-footer-navigation{display:flex;flex-direction:row;align-items:flex-start;flex-wrap:wrap}.rds-footer .rds-footer-disclaimer{display:flex;justify-content:space-between;align-items:flex-start}@media (max-width: 767.999999px){.rds-footer{padding:32px 16px 0}.rds-footer .rds-footer-divider{padding-top:32px;margin-bottom:32px}.rds-footer .rds-footer-sitemap{grid-column-gap:16px;grid-row-gap:32px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:32px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse;flex-direction:column-reverse;flex-wrap:nowrap;align-items:flex-start}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px;margin-right:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation{display:grid;flex-direction:column;align-items:flex-start;padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-bottom:16px}}@media (min-width: 768px){.rds-footer{padding:32px 32px 0}.rds-footer .rds-footer-divider{padding-top:32px;margin-bottom:32px}.rds-footer .rds-footer-sitemap{grid-column-gap:24px;grid-row-gap:32px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:32px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px;margin-right:24px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:8px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:24px}}@media (min-width: 1024px){.rds-footer{padding:48px 64px 0}.rds-footer .rds-footer-divider{padding-top:48px;margin-bottom:48px}.rds-footer .rds-footer-sitemap{grid-column-gap:24px;grid-row-gap:48px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:48px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:48px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:48px;margin-right:24px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:24px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:24px}}@media (min-width: 1440px){.rds-footer{padding:48px 96px 0}.rds-footer .rds-footer-divider{padding-top:48px;margin-bottom:48px}.rds-footer .rds-footer-sitemap{grid-column-gap:32px;grid-row-gap:48px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:48px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:48px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:48px;margin-right:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px}}@media (min-width: 1672px){.rds-footer{padding:48px 220px 0}.rds-footer .rds-footer-divider{padding-top:48px;margin-bottom:48px}.rds-footer .rds-footer-sitemap{grid-column-gap:32px;grid-row-gap:48px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:48px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:48px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:48px;margin-right:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-footer, footer[rds-footer], footer[rdsFooter]', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"rds-footer\" [class.rds-footer-neutral]=\"neutral\">\n  <div class=\"rds-footer-content\">\n    <ng-content select=\"rds-footer-sitemap\" />\n    @if (_sitemap) {\n      <div class=\"rds-footer-divider\"></div>\n    }\n    <ng-content select=\"rds-footer-custom-content\" />\n    @if (_customContent) {\n      <div class=\"rds-footer-divider\"></div>\n    }\n    <div class=\"rds-footer-basic\">\n      <div class=\"rds-footer-basic-content\">\n        <div class=\"rds-footer-copy-rights\">{{ intl.copyrightText }}</div>\n      </div>\n      <ng-content select=\"rds-footer-navigation\" />\n    </div>\n    <ng-content select=\"rds-footer-disclaimer\" />\n  </div>\n</div>\n", styles: [".rds-footer{width:100%;background-image:linear-gradient(136.47deg,var(--rds-color-bg-base-1) 35.41%,var(--rds-color-bg-gradient-4) 58%,var(--rds-color-bg-gradient-1) 128.14%);border-top:2px solid var(--rds-color-informative-hover)}.rds-footer.rds-footer-neutral{background-image:linear-gradient(144.84deg,var(--rds-color-bg-base-1) 54.87%,var(--rds-color-bg-gradient-3) 227.96%)}.rds-footer .rds-footer-divider{display:block;width:100%;border-bottom:1px solid var(--rds-color-grey-2)}.rds-footer .rds-footer-title{color:var(--rds-color-high-contrast)}@media (max-width: 767.999999px){.rds-footer .rds-footer-title{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-footer .rds-footer-title{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-footer .rds-footer-caption{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-footer .rds-footer-link{word-break:break-word}.rds-footer .rds-footer-custom-content{display:block}.rds-footer .rds-footer-sitemap{display:grid;grid-template-columns:repeat(auto-fit,minmax(min(100%,max(200px,16.6666666667%)),1fr));align-items:flex-start;flex-wrap:wrap}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section{flex-direction:column;display:flex}.rds-footer-basic{display:flex;justify-content:space-between;align-items:center}.rds-footer-basic .rds-footer-basic-content{display:flex}.rds-footer-basic .rds-footer-basic-content .rds-footer-copy-rights{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-footer-basic .rds-footer-navigation{display:flex;flex-direction:row;align-items:flex-start;flex-wrap:wrap}.rds-footer .rds-footer-disclaimer{display:flex;justify-content:space-between;align-items:flex-start}@media (max-width: 767.999999px){.rds-footer{padding:32px 16px 0}.rds-footer .rds-footer-divider{padding-top:32px;margin-bottom:32px}.rds-footer .rds-footer-sitemap{grid-column-gap:16px;grid-row-gap:32px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:32px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse;flex-direction:column-reverse;flex-wrap:nowrap;align-items:flex-start}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px;margin-right:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation{display:grid;flex-direction:column;align-items:flex-start;padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-bottom:16px}}@media (min-width: 768px){.rds-footer{padding:32px 32px 0}.rds-footer .rds-footer-divider{padding-top:32px;margin-bottom:32px}.rds-footer .rds-footer-sitemap{grid-column-gap:24px;grid-row-gap:32px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:32px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px;margin-right:24px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:8px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:24px}}@media (min-width: 1024px){.rds-footer{padding:48px 64px 0}.rds-footer .rds-footer-divider{padding-top:48px;margin-bottom:48px}.rds-footer .rds-footer-sitemap{grid-column-gap:24px;grid-row-gap:48px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:48px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:48px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:48px;margin-right:24px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:24px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:24px}}@media (min-width: 1440px){.rds-footer{padding:48px 96px 0}.rds-footer .rds-footer-divider{padding-top:48px;margin-bottom:48px}.rds-footer .rds-footer-sitemap{grid-column-gap:32px;grid-row-gap:48px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:48px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:48px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:48px;margin-right:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px}}@media (min-width: 1672px){.rds-footer{padding:48px 220px 0}.rds-footer .rds-footer-divider{padding-top:48px;margin-bottom:48px}.rds-footer .rds-footer-sitemap{grid-column-gap:32px;grid-row-gap:48px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-title{padding-bottom:16px}.rds-footer .rds-footer-sitemap .rds-footer-sitemap-section .rds-footer-link+rds-footer-link{margin-top:16px}.rds-footer .rds-footer-disclaimer{padding-bottom:48px}.rds-footer .rds-footer-basic{align-items:flex-end;flex-wrap:wrap-reverse}.rds-footer .rds-footer-basic .rds-footer-basic-content{padding-bottom:48px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:48px;margin-right:32px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link:last-child{margin-right:0}.rds-footer .rds-footer-basic .rds-footer-navigation{padding-bottom:16px}.rds-footer .rds-footer-basic .rds-footer-navigation .rds-footer-link{margin-bottom:32px}}\n"] }]
        }], propDecorators: { _sitemap: [{
                type: ContentChild,
                args: [RdsFooterSitemapDirective, { static: false }]
            }], _customContent: [{
                type: ContentChild,
                args: [RdsFooterCustomContentDirective, { static: false }]
            }], _navigation: [{
                type: ContentChild,
                args: [RdsFooterNavigationDirective, { static: false }]
            }], _disclaimer: [{
                type: ContentChild,
                args: [RdsFooterDisclaimerDirective, { static: false }]
            }], neutral: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

const ELEMENTS$4 = [
    RdsFooterCaptionDirective,
    RdsFooterCustomContentDirective,
    RdsFooterComponent,
    RdsFooterNavigationDirective,
    RdsFooterLinkComponent,
    RdsFooterDisclaimerDirective,
    RdsFooterSitemapDirective,
    RdsFooterSitemapSectionDirective,
    RdsFooterTitleDirective,
];
class RdsFooterModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterModule, declarations: [RdsFooterCaptionDirective,
            RdsFooterCustomContentDirective,
            RdsFooterComponent,
            RdsFooterNavigationDirective,
            RdsFooterLinkComponent,
            RdsFooterDisclaimerDirective,
            RdsFooterSitemapDirective,
            RdsFooterSitemapSectionDirective,
            RdsFooterTitleDirective], imports: [CommonModule,
            FormsModule,
            ObserversModule,
            ReactiveFormsModule,
            RdsDividerModule,
            RdsFormFieldModule,
            RdsButtonModule], exports: [RdsFooterCaptionDirective,
            RdsFooterCustomContentDirective,
            RdsFooterComponent,
            RdsFooterNavigationDirective,
            RdsFooterLinkComponent,
            RdsFooterDisclaimerDirective,
            RdsFooterSitemapDirective,
            RdsFooterSitemapSectionDirective,
            RdsFooterTitleDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterModule, imports: [CommonModule,
            FormsModule,
            ObserversModule,
            ReactiveFormsModule,
            RdsDividerModule,
            RdsFormFieldModule,
            RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...ELEMENTS$4],
                    exports: [...ELEMENTS$4],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ObserversModule,
                        ReactiveFormsModule,
                        RdsDividerModule,
                        RdsFormFieldModule,
                        RdsButtonModule,
                    ],
                }]
        }] });

class RdsHeaderActionsDirective {
    constructor() {
        this.class = 'rds-header-actions';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderActionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderActionsDirective, selector: "rds-header-actions", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderActionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-actions',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsHeaderAppNameDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.class = 'rds-header-app-name';
        this.triggered = new EventEmitter();
    }
    get isTriggerable() {
        return this.triggered.observed;
    }
    get tabIndex() {
        return this.isTriggerable ? TAB_INDEX_DEFAULT : TAB_INDEX_NOT_FOCUSABLE;
    }
    ngOnInit() {
        this.focusMonitor.monitor(this.elementRef.nativeElement);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    onLogoClick(event) {
        if ((event instanceof KeyboardEvent &&
            !hasModifierKey(event, 'shiftKey', 'altKey', 'ctrlKey') &&
            (event.keyCode === SPACE || event.keyCode === ENTER)) ||
            event instanceof MouseEvent) {
            if (event instanceof KeyboardEvent && event.keyCode === SPACE) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.triggered.next(event);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderAppNameDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderAppNameDirective, selector: "rds-header-app-name", outputs: { triggered: "triggered" }, host: { listeners: { "click": "onLogoClick($event)", "keydown": "onLogoClick($event)" }, properties: { "class": "this.class", "class.rds-header-app-name-triggerable": "this.isTriggerable", "tabIndex": "this.tabIndex" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderAppNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-app-name',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], isTriggerable: [{
                type: HostBinding,
                args: ['class.rds-header-app-name-triggerable']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], triggered: [{
                type: Output
            }], onLogoClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class RdsHeaderLinkComponent extends RdsLinkComponent {
    constructor() {
        super(...arguments);
        this.class = 'rds-header-link';
        this.toggle = new EventEmitter();
        this._standalone = true;
    }
    ngOnInit() {
        this.type = 'secondary';
        this.size = 's';
    }
    onKeydown(event) {
        const code = event.keyCode;
        if ((code === ENTER || code === SPACE) && !hasModifierKey(event)) {
            this.toggle.next(!this.active);
            event.preventDefault();
        }
    }
    onClick() {
        if (!this.disabled) {
            this.toggle.next(!this.active);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderLinkComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderLinkComponent, selector: "rds-header-link", outputs: { toggle: "toggle" }, host: { listeners: { "keydown": "onKeydown($event)", "click": "onClick()" }, properties: { "class": "this.class" } }, usesInheritance: true, ngImport: i0, template: `<ng-content />`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderLinkComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-header-link',
                    template: `<ng-content />`,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], toggle: [{
                type: Output
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

class RdsHeaderNavigationPrimaryDirective {
    constructor() {
        this.class = [
            'rds-header-navigation',
            'rds-header-navigation--primary',
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderNavigationPrimaryDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderNavigationPrimaryDirective, selector: "rds-header-navigation-primary", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderNavigationPrimaryDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-navigation-primary',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsHeaderNavigationSecondaryDirective {
    constructor() {
        this.class = [
            'rds-header-navigation',
            'rds-header-navigation--secondary',
        ];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderNavigationSecondaryDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderNavigationSecondaryDirective, selector: "rds-header-navigation-secondary", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderNavigationSecondaryDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-navigation-secondary',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsHeaderSearchbarComponent {
    constructor() {
        this._defaultPlaceholder = 'Search for the products, page, document…';
        this.class = 'rds-header-search';
        this.searchValue = '';
        this.searchChange = new EventEmitter();
        this.closeSearch = new EventEmitter();
        this.search = new EventEmitter();
    }
    onInputChange(newValue) {
        this.searchValue = newValue;
        this.searchChange.next(this.searchValue);
    }
    onCloseSearch() {
        this.closeSearch.emit();
    }
    onKeyPress(event) {
        if (event.keyCode === ENTER && !hasModifierKey(event)) {
            this.emitValue();
        }
    }
    emitValue() {
        this.search.emit(this.searchValue);
    }
    focusSearch() {
        this.searchInput.nativeElement.focus();
    }
    getPlaceholder() {
        return this.placeholder || this._defaultPlaceholder;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderSearchbarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderSearchbarComponent, selector: "rds-header-searchbar", inputs: { placeholder: "placeholder", searchValue: "searchValue" }, outputs: { searchChange: "searchChange", closeSearch: "closeSearch", search: "search" }, host: { properties: { "class": "this.class" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["input"], descendants: true, static: true }], ngImport: i0, template: `
    <button
      rds-icon-button
      size="m"
      class="rds-header-search-search-icon"
      (click)="emitValue()"
    >
      <rds-icon namespace="outlined" icon="search" />
    </button>
    <input
      #input
      [ngModel]="searchValue"
      (ngModelChange)="onInputChange($event)"
      (keydown)="onKeyPress($event)"
      class="rds-header-search-input"
      [placeholder]="getPlaceholder()"
    />
    <button
      rds-icon-button
      (click)="onCloseSearch()"
      class="rds-header-search-close-icon"
    >
      <rds-icon namespace="outlined" icon="close" />
    </button>
  `, isInline: true, dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderSearchbarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-header-searchbar',
                    template: `
    <button
      rds-icon-button
      size="m"
      class="rds-header-search-search-icon"
      (click)="emitValue()"
    >
      <rds-icon namespace="outlined" icon="search" />
    </button>
    <input
      #input
      [ngModel]="searchValue"
      (ngModelChange)="onInputChange($event)"
      (keydown)="onKeyPress($event)"
      class="rds-header-search-input"
      [placeholder]="getPlaceholder()"
    />
    <button
      rds-icon-button
      (click)="onCloseSearch()"
      class="rds-header-search-close-icon"
    >
      <rds-icon namespace="outlined" icon="close" />
    </button>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], placeholder: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], closeSearch: [{
                type: Output
            }], search: [{
                type: Output
            }], searchInput: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }] } });

const HEADER_SEARCH_EXPANSION_TIMING_VALUE = 300;
const HEADER_SEARCH_EXPANSION_TIMING = `${HEADER_SEARCH_EXPANSION_TIMING_VALUE}ms ease-in`;
const rdsHeaderSearchAnimations = {
    searchExpansion: trigger('searchExpansion', [
        state('collapsed, void', style({ display: 'none', opacity: 0, transform: 'translateX(-100%)' })),
        state('expanded', style({ display: 'flex', opacity: 1, transform: 'translateX(0)' })),
        transition('expanded <=> collapsed, void => collapsed', animate(HEADER_SEARCH_EXPANSION_TIMING)),
    ]),
    headerCollapse: trigger('headerCollapse', [
        state('collapsed, void', style({ transform: 'translateX(-100%)', display: 'none', opacity: 0 })),
        state('expanded', style({ transform: 'translateX(0)', display: 'flex', opacity: 1 })),
        transition('expanded <=> collapsed, void => collapsed', animate(HEADER_SEARCH_EXPANSION_TIMING)),
    ]),
};

class RdsSearchIntl {
    constructor() {
        this._changes = new Subject();
        this._searchInputPlaceholder = 'Search...';
        this._searchButtonText = 'Search';
        this._emptyValue = '';
        this._ariaInputLabel = 'Global';
        this._ariaClearLabel = 'Clear search';
    }
    get changes() {
        return this._changes.asObservable();
    }
    get searchInputPlaceholder() {
        return this._searchInputPlaceholder;
    }
    set searchInputPlaceholder(placeholderText) {
        this._searchInputPlaceholder = placeholderText;
        this._changes.next();
    }
    get searchButtonText() {
        return this._searchButtonText;
    }
    set searchButtonText(buttonText) {
        this._searchButtonText = buttonText;
        this._changes.next();
    }
    get emptyValue() {
        return this._emptyValue;
    }
    set emptyValue(emptyValue) {
        this._emptyValue = emptyValue;
        this._changes.next();
    }
    get ariaInputLabel() {
        return this._ariaInputLabel;
    }
    set ariaInputLabel(ariaInputLabel) {
        this._ariaInputLabel = ariaInputLabel;
        this._changes.next();
    }
    get ariaClearLabel() {
        return this._ariaClearLabel;
    }
    set ariaClearLabel(ariaClearLabel) {
        this._ariaClearLabel = ariaClearLabel;
        this._changes.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchIntl, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class RdsAbstractSearchComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.intl = inject(RdsSearchIntl);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.disabled = false;
        this.includeButton = false;
        this.autoSearch = false;
        this.size = 'l';
        this._lastEmitted = new BehaviorSubject({
            query: '',
            trigger: 'input',
        });
        this.search = this._lastEmitted.pipe(skip(1));
        this.clear = new EventEmitter();
        this.role = 'search';
        this._onChange = noop;
        this._onTouched = noop;
    }
    get value() {
        return this._value;
    }
    ngOnInit() {
        this.setIntlValues();
        this.setNewValue(this.intl.emptyValue).subscribe();
        this.intl.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.setIntlValues();
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        if (changes['placeholder'] ||
            changes['buttonText'] ||
            changes['emptyValue'] ||
            changes['ariaClearLabel'] ||
            changes['ariaInputLabel']) {
            this.setIntlValues();
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._onTouched());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    writeValue(value) {
        this.setNewValue(value).subscribe(() => this.emitValue('form'));
    }
    onInput(event) {
        this.setNewValue(event.target.value).subscribe(() => this.emitValue('input', event));
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    isDirtyValue() {
        return this._value !== this.intl.emptyValue;
    }
    resetInput(event) {
        if (!this.disabled && this.isDirtyValue()) {
            this.setNewValue(this.intl.emptyValue).subscribe();
            this.emitValue('reset', event);
            this.clear.emit();
            this.searchInput.nativeElement.focus();
        }
    }
    emitValue(trigger, event) {
        if (this._lastEmitted.getValue().query !== this._value) {
            this._lastEmitted.next({ query: this._value, trigger, event });
            this._onChange(this._value);
        }
    }
    setIntlValues() {
        this.placeholder =
            this.placeholder && this.placeholder !== ''
                ? this.placeholder
                : this.intl.searchInputPlaceholder;
        this.buttonText =
            this.buttonText && this.buttonText !== ''
                ? this.buttonText
                : this.intl.searchButtonText;
        this.emptyValue = this.emptyValue || this.intl.emptyValue;
        this.ariaInputLabel =
            this.ariaInputLabel && this.ariaInputLabel !== ''
                ? this.ariaInputLabel
                : this.intl.ariaInputLabel;
        this.ariaClearLabel =
            this.ariaClearLabel && this.ariaClearLabel !== ''
                ? this.ariaClearLabel
                : this.intl.ariaClearLabel;
    }
    setNewValue(value) {
        if (value !== null &&
            value !== undefined &&
            this._value !== String(value)) {
            this._value = String(value);
            this.cdr.markForCheck();
            if (this.autoSearch) {
                return of(void 0);
            }
        }
        return EMPTY;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSearchComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAbstractSearchComponent, inputs: { placeholder: "placeholder", buttonText: "buttonText", emptyValue: "emptyValue", ariaClearLabel: "ariaClearLabel", disabled: ["disabled", "disabled", booleanAttribute], includeButton: ["includeButton", "includeButton", booleanAttribute], autoSearch: ["autoSearch", "autoSearch", booleanAttribute], size: "size", ariaInputLabel: "ariaInputLabel" }, outputs: { search: "search", clear: "clear" }, host: { properties: { "attr.role": "this.role", "attr.aria-label": "this.ariaInputLabel" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSearchComponent, decorators: [{
            type: Directive
        }], propDecorators: { placeholder: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], emptyValue: [{
                type: Input
            }], ariaClearLabel: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], includeButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoSearch: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], size: [{
                type: Input
            }], search: [{
                type: Output
            }], clear: [{
                type: Output
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], ariaInputLabel: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-label']
            }] } });

class RdsSearchComponent extends RdsAbstractSearchComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSearchComponent, selector: "rds-search", providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RdsSearchComponent),
                multi: true,
            },
        ], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"rds-search rds-search-{{ size }}\"\n  [class.rds-search--with-clear-button]=\"isDirtyValue()\"\n  (click)=\"searchInput.focus()\"\n>\n  <rds-form-field [size]=\"size\" labelPosition=\"none\">\n    <rds-icon\n      class=\"rds-search-icon\"\n      namespace=\"filled\"\n      icon=\"search\"\n      rds-control-prefix\n      aria-hidden=\"true\"\n    />\n    <input\n      [disabled]=\"disabled\"\n      [ngModel]=\"value\"\n      (input)=\"onInput($event)\"\n      type=\"search\"\n      #searchInput\n      rdsInput\n      (keydown.enter)=\"emitValue('input-enter-key', $event)\"\n      (search)=\"$event.preventDefault(); $event.stopPropagation()\"\n      [placeholder]=\"placeholder\"\n    />\n    <div class=\"rds-search-clear-button-container\">\n      @if (isDirtyValue()) {\n        <button\n          rds-icon-button\n          rds-control-suffix\n          [size]=\"'s'\"\n          [attr.aria-label]=\"ariaClearLabel\"\n          (click)=\"resetInput($event); $event.stopPropagation()\"\n          [disabled]=\"disabled\"\n          class=\"rds-search-reset-button\"\n        >\n          <rds-icon namespace=\"filled\" icon=\"close\" aria-hidden=\"true\" />\n        </button>\n      }\n    </div>\n  </rds-form-field>\n  @if (includeButton) {\n    <button\n      class=\"rds-search-button\"\n      rds-primary-button\n      [disabled]=\"disabled\"\n      [size]=\"size\"\n      (click)=\"emitValue('button', $event); $event.stopPropagation()\"\n    >\n      {{ buttonText }}\n    </button>\n  }\n</div>\n", styles: [".rds-search{display:flex}.rds-search .rds-search-icon{color:var(--rds-color-low-contrast)}.rds-search .rds-form-field{margin-bottom:0}.rds-search .rds-search-clear-button-container{display:flex;align-items:center;justify-content:flex-end}.rds-search .rds-search-clear-button-container .rds-search-reset-button{margin-left:4px}.rds-search rds-form-field{width:100%}.rds-search rds-form-field input[type=search]::-webkit-search-decoration,.rds-search rds-form-field input[type=search]::-webkit-search-cancel-button,.rds-search rds-form-field input[type=search]::-webkit-search-results-button,.rds-search rds-form-field input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}.rds-search.rds-search-l .rds-form-field .rds-form-field__control-container{padding-left:15px!important;padding-right:!important}.rds-search.rds-search-l .rds-form-field--focused .rds-form-field__control-container{padding-left:16px!important;padding-right:!important}.rds-search.rds-search-l.rds-search--with-clear-button .rds-form-field .rds-form-field__control-container{padding-right:11px}.rds-search.rds-search-l.rds-search--with-clear-button .rds-form-field--focused .rds-form-field__control-container{padding-right:12px}.rds-search.rds-search-l .rds-search-button{margin-left:16px}.rds-search.rds-search-m .rds-form-field .rds-form-field__control-container,.rds-search.rds-search-m .rds-form-field--focused .rds-form-field__control-container{padding-left:!important;padding-right:!important}.rds-search.rds-search-m .rds-search-button{margin-left:12px}.rds-search.rds-search-s .rds-form-field .rds-form-field__control-container{padding-left:11px!important;padding-right:11px!important}.rds-search.rds-search-s .rds-form-field--focused .rds-form-field__control-container{padding-left:12px!important;padding-right:12px!important}.rds-search.rds-search-s .rds-search-button{margin-left:12px}\n"], dependencies: [{ kind: "component", type: RdsFormFieldComponent, selector: "rds-form-field", inputs: ["hideRequiredMarker", "hideTextareaCharacterCounter", "labelPosition", "size", "labelWidth"] }, { kind: "directive", type: RdsInputDirective, selector: " input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]", inputs: ["id", "disabled", "required", "readonly", "type", "placeholder", "value"] }, { kind: "directive", type: RdsPrefixDirective, selector: "[rds-control-prefix], [rdsControlPrefix]" }, { kind: "directive", type: RdsSuffixDirective, selector: "[rds-control-suffix], [rdsControlSuffix]" }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: RdsButtonComponent, selector: "\n    button[rds-primary-button],\n    button[rds-warning-button],\n    button[rds-secondary-button],\n    button[rds-secondary-warning-button],\n    button[rdsPrimaryButton],\n    button[rdsWarningButton],\n    button[rdsSecondaryButton],\n    button[rdsSecondaryWarningButton],\n  " }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-search', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RdsSearchComponent),
                            multi: true,
                        },
                    ], template: "<div\n  class=\"rds-search rds-search-{{ size }}\"\n  [class.rds-search--with-clear-button]=\"isDirtyValue()\"\n  (click)=\"searchInput.focus()\"\n>\n  <rds-form-field [size]=\"size\" labelPosition=\"none\">\n    <rds-icon\n      class=\"rds-search-icon\"\n      namespace=\"filled\"\n      icon=\"search\"\n      rds-control-prefix\n      aria-hidden=\"true\"\n    />\n    <input\n      [disabled]=\"disabled\"\n      [ngModel]=\"value\"\n      (input)=\"onInput($event)\"\n      type=\"search\"\n      #searchInput\n      rdsInput\n      (keydown.enter)=\"emitValue('input-enter-key', $event)\"\n      (search)=\"$event.preventDefault(); $event.stopPropagation()\"\n      [placeholder]=\"placeholder\"\n    />\n    <div class=\"rds-search-clear-button-container\">\n      @if (isDirtyValue()) {\n        <button\n          rds-icon-button\n          rds-control-suffix\n          [size]=\"'s'\"\n          [attr.aria-label]=\"ariaClearLabel\"\n          (click)=\"resetInput($event); $event.stopPropagation()\"\n          [disabled]=\"disabled\"\n          class=\"rds-search-reset-button\"\n        >\n          <rds-icon namespace=\"filled\" icon=\"close\" aria-hidden=\"true\" />\n        </button>\n      }\n    </div>\n  </rds-form-field>\n  @if (includeButton) {\n    <button\n      class=\"rds-search-button\"\n      rds-primary-button\n      [disabled]=\"disabled\"\n      [size]=\"size\"\n      (click)=\"emitValue('button', $event); $event.stopPropagation()\"\n    >\n      {{ buttonText }}\n    </button>\n  }\n</div>\n", styles: [".rds-search{display:flex}.rds-search .rds-search-icon{color:var(--rds-color-low-contrast)}.rds-search .rds-form-field{margin-bottom:0}.rds-search .rds-search-clear-button-container{display:flex;align-items:center;justify-content:flex-end}.rds-search .rds-search-clear-button-container .rds-search-reset-button{margin-left:4px}.rds-search rds-form-field{width:100%}.rds-search rds-form-field input[type=search]::-webkit-search-decoration,.rds-search rds-form-field input[type=search]::-webkit-search-cancel-button,.rds-search rds-form-field input[type=search]::-webkit-search-results-button,.rds-search rds-form-field input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}.rds-search.rds-search-l .rds-form-field .rds-form-field__control-container{padding-left:15px!important;padding-right:!important}.rds-search.rds-search-l .rds-form-field--focused .rds-form-field__control-container{padding-left:16px!important;padding-right:!important}.rds-search.rds-search-l.rds-search--with-clear-button .rds-form-field .rds-form-field__control-container{padding-right:11px}.rds-search.rds-search-l.rds-search--with-clear-button .rds-form-field--focused .rds-form-field__control-container{padding-right:12px}.rds-search.rds-search-l .rds-search-button{margin-left:16px}.rds-search.rds-search-m .rds-form-field .rds-form-field__control-container,.rds-search.rds-search-m .rds-form-field--focused .rds-form-field__control-container{padding-left:!important;padding-right:!important}.rds-search.rds-search-m .rds-search-button{margin-left:12px}.rds-search.rds-search-s .rds-form-field .rds-form-field__control-container{padding-left:11px!important;padding-right:11px!important}.rds-search.rds-search-s .rds-form-field--focused .rds-form-field__control-container{padding-left:12px!important;padding-right:12px!important}.rds-search.rds-search-s .rds-search-button{margin-left:12px}\n"] }]
        }] });

class RdsHeaderComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.renderer = inject(Renderer2);
        this.elementRef = inject(ElementRef);
        this.ngZone = inject(NgZone);
        this.focusMonitor = inject(FocusMonitor);
        this.contentObserver = inject(ContentObserver);
        this.searchMode = false;
        this.searchValue = '';
        this.search = new EventEmitter();
        this.searchChange = new EventEmitter();
        this.logoTriggered = new EventEmitter();
        this.class = 'rds-header';
        this.minimalMargins = false;
        this._searchPosition = 'none';
    }
    get searchPosition() {
        return this._searchPosition;
    }
    set searchPosition(value) {
        this._searchPosition = value;
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            const scrollTarget = this.getScrollTarget();
            fromEvent(scrollTarget, 'scroll')
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                const scrollTop = scrollTarget instanceof HTMLElement
                    ? scrollTarget.scrollTop
                    : scrollTarget.scrollY;
                if (scrollTop === 0 &&
                    this.elementRef.nativeElement.classList.contains('rds-header-fixed')) {
                    this.ngZone.run(() => this.renderer.removeClass(this.elementRef.nativeElement, 'rds-header-fixed'));
                }
                else if (scrollTop !== 0 &&
                    !this.elementRef.nativeElement.classList.contains('rds-header-fixed')) {
                    this.ngZone.run(() => this.renderer.addClass(this.elementRef.nativeElement, 'rds-header-fixed'));
                }
            });
        });
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.logoElement.nativeElement, true);
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(tap(() => this.cdr.markForCheck()), takeUntilDestroyed(this.destroyRef))
            .subscribe();
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.logoElement.nativeElement);
    }
    startSearching() {
        this.searchMode = true;
    }
    endSearching() {
        this.searchMode = false;
    }
    getExpandedState() {
        return this.searchMode ? 'expanded' : 'collapsed';
    }
    getCollapsedState() {
        return this.searchMode ? 'collapsed' : 'expanded';
    }
    onSearch(value) {
        this.search.emit(value);
    }
    emitSearch(event) {
        if (event instanceof KeyboardEvent &&
            event.keyCode === ENTER &&
            !hasModifierKey(event)) {
            this.search.emit(this.searchValue);
        }
    }
    onLogoClick(event) {
        if ((event instanceof KeyboardEvent &&
            !hasModifierKey(event, 'shiftKey', 'altKey', 'ctrlKey') &&
            (event.keyCode === SPACE || event.keyCode === ENTER)) ||
            event instanceof MouseEvent) {
            if (event instanceof KeyboardEvent && event.keyCode === SPACE) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.logoTriggered.next(event);
        }
    }
    focusSearchInput(state) {
        if (this.searchbar && state.fromState !== 'void') {
            if (this.getExpandedState() === 'expanded') {
                Promise.resolve().then(() => this.searchbar.focusSearch());
            }
            else if (this.getExpandedState() === 'collapsed') {
                Promise.resolve().then(() => this.searchIcon?.focus());
            }
        }
    }
    getScrollTarget() {
        if (this.scrollTarget instanceof ElementRef) {
            return this.scrollTarget.nativeElement;
        }
        else if (this.scrollTarget instanceof HTMLElement) {
            return this.scrollTarget;
        }
        else if (typeof this.scrollTarget === 'string') {
            return document.querySelector(this.scrollTarget);
        }
        else if (this.scrollTarget === undefined || this.scrollTarget === null) {
            return window;
        }
        else {
            throw new Error('ScrollTarget for RdsHeader is provided in a wrong format, pass ElementRef, selector or null.');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsHeaderComponent, selector: "rds-header", inputs: { scrollTarget: "scrollTarget", searchbarPlaceholder: "searchbarPlaceholder", searchValue: "searchValue", searchPosition: "searchPosition", minimalMargins: ["minimalMargins", "minimalMargins", booleanAttribute] }, outputs: { search: "search", searchChange: "searchChange", logoTriggered: "logoTriggered" }, host: { properties: { "class": "this.class", "class.rds-header-minimal-margins": "this.minimalMargins" } }, viewQueries: [{ propertyName: "searchbar", first: true, predicate: RdsHeaderSearchbarComponent, descendants: true }, { propertyName: "searchIcon", first: true, predicate: ["searchIcon"], descendants: true }, { propertyName: "logoElement", first: true, predicate: ["logoElement"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"rds-header-container\">\n  <div class=\"rds-header-top\">\n    <div class=\"rds-header-base\" [@headerCollapse]=\"getCollapsedState()\">\n      <div class=\"rds-header-title\">\n        <div\n          class=\"rds-header-logo\"\n          [class.rds-header-logo-trigger]=\"logoTriggered.observed\"\n          [tabIndex]=\"logoTriggered.observed ? 0 : -1\"\n          #logoElement\n          (click)=\"onLogoClick($event)\"\n          (keydown)=\"onLogoClick($event)\"\n        >\n          <svg\n            height=\"32\"\n            viewBox=\"0 0 152 79\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M124.203 34.7693C123.519 33.3633 122.55 32.2994 121.315 31.5394C120.08 30.7794 118.655 30.3994 117.059 30.3994C115.463 30.3994 114.038 30.7794 112.803 31.5394C111.568 32.2994 110.599 33.3823 109.915 34.7693C109.231 36.1753 108.889 37.8092 108.889 39.6712V43.8701C108.889 45.732 109.231 47.366 109.915 48.772C110.599 50.1779 111.568 51.2419 112.803 52.0019C114.038 52.7619 115.463 53.1228 117.059 53.1228C118.655 53.1228 120.08 52.7429 121.315 52.0019C122.55 51.2419 123.31 50.3869 123.994 48.9809C124.317 48.316 124.602 47.48 124.754 46.625L120.84 45.732C120.669 46.568 120.384 47.366 119.947 47.917C119.244 48.8289 118.218 49.2279 117.059 49.2279C115.9 49.2279 114.874 48.8099 114.171 47.917C113.468 47.005 113.126 45.713 113.126 44.1171V42.5401H125.248V39.6522C125.229 37.7902 124.887 36.1753 124.203 34.7693ZM117.059 34.2943C118.218 34.2943 119.244 34.6933 119.947 35.5863C120.574 36.3843 120.916 37.6002 120.992 38.9872H113.126C113.183 37.6002 113.525 36.3843 114.171 35.5863C114.855 34.6933 115.881 34.2943 117.059 34.2943Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M94.0119 52.6287V38.3031C94.0119 37.1061 94.3539 36.1371 95.0189 35.4341C95.7029 34.7312 96.5389 34.3702 97.5839 34.3702C98.6099 34.3702 99.4649 34.7312 100.149 35.4341C100.833 36.1371 101.156 37.0871 101.156 38.3031V52.6287H105.393V37.4101C105.393 35.2061 104.823 33.4962 103.683 32.2612C102.543 31.0262 100.985 30.4183 99.0089 30.4183C97.9259 30.4183 96.9569 30.6273 96.0449 31.0642C95.1519 31.5012 94.4299 32.0712 94.0309 32.6792V21.7925H89.7939V52.6287H94.0119Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M74.632 44.0791C74.632 45.675 74.993 46.967 75.696 47.86C76.418 48.7529 77.444 49.1519 78.603 49.1519C80.693 49.1519 82.004 47.803 82.498 45.124L86.431 46.036C86.108 48.278 85.291 50.0259 83.98 51.2609C82.669 52.4959 80.883 53.1228 78.603 53.1228C76.133 53.1228 74.138 52.2869 72.637 50.6149C71.136 48.9429 70.376 46.663 70.376 43.8131V39.7092C70.376 36.8593 71.117 34.5793 72.637 32.9074C74.138 31.2354 76.133 30.3994 78.603 30.3994C80.883 30.3994 82.669 31.0264 83.98 32.2614C85.291 33.4963 86.108 35.2443 86.431 37.4862L82.498 38.3982C82.004 35.7193 80.712 34.3703 78.603 34.3703C77.444 34.3703 76.399 34.7693 75.696 35.6623C74.974 36.5553 74.632 37.8282 74.632 39.4432V44.0791Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M58.957 49.152C57.798 49.152 56.772 48.734 56.069 47.841C55.366 46.929 55.024 45.6371 55.024 44.0411V39.4432C55.024 37.8473 55.366 36.5553 56.069 35.6623C56.772 34.7693 57.798 34.3704 58.957 34.3704C60.116 34.3704 61.142 34.7693 61.845 35.6623C62.548 36.5553 62.89 37.8283 62.89 39.4432V44.0411C62.89 45.6371 62.548 46.929 61.845 47.841C61.142 48.753 60.116 49.152 58.957 49.152ZM58.957 53.1419C60.553 53.1419 61.978 52.7619 63.213 52.0209C64.448 51.2609 65.417 50.178 66.101 48.791C66.785 47.385 67.127 45.7511 67.127 43.8891V39.6902C67.127 37.8283 66.785 36.1943 66.101 34.7883C65.417 33.3824 64.448 32.3184 63.213 31.5584C61.978 30.7984 60.553 30.4185 58.957 30.4185C57.361 30.4185 55.936 30.7984 54.701 31.5584C53.466 32.3184 52.497 33.4014 51.813 34.7883C51.129 36.1943 50.787 37.8283 50.787 39.6902V43.8891C50.787 45.7511 51.129 47.385 51.813 48.791C52.497 50.197 53.466 51.2609 54.701 52.0209C55.936 52.7619 57.361 53.1419 58.957 53.1419Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M36.271 34.8073V25.8205H40.546C41.686 25.8205 42.579 26.1815 43.206 26.9225C43.833 27.6635 44.156 28.7845 44.156 30.3234C44.156 31.8434 43.833 32.9834 43.206 33.7243C42.579 34.4653 41.686 34.8263 40.546 34.8263L36.271 34.8073ZM36.271 52.6289V38.8732H39.9C40.945 38.8732 41.629 39.1202 42.085 39.5952C42.541 40.0702 42.788 40.8302 42.921 41.9131L44.118 52.6289H48.374L47.101 41.5141C46.949 40.1842 46.778 39.3102 46.246 38.5312C45.752 37.8282 45.049 37.2392 44.232 36.9733C45.524 36.3653 46.55 35.4913 47.291 34.3893C48.032 33.2873 48.412 31.7674 48.412 29.8294C48.412 27.3405 47.709 25.3645 46.322 23.9206C44.916 22.4766 42.997 21.7546 40.565 21.7546H32.053V52.6289H36.271Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M152 39.5L117.667 79H34.333L0 39.5L34.333 0H117.648L152 39.5ZM115.824 74.9911L146.68 39.5L115.824 4.0089H36.157L5.32 39.5L36.157 74.9911H115.824Z\"\n              fill=\"#0B41CD\"\n            />\n          </svg>\n        </div>\n        <ng-content\n          select=\"rds-divider[rds-header-start-divider], rds-header-app-name\"\n        />\n        @if (searchPosition === 'start') {\n          <ng-container [ngTemplateOutlet]=\"searchTemplate\" />\n        }\n      </div>\n\n      <div class=\"rds-header-right-section\">\n        @if (searchPosition === 'end') {\n          <ng-container [ngTemplateOutlet]=\"searchTemplate\" />\n        }\n        <div class=\"rds-header-actions-nav\">\n          <ng-content select=\"rds-header-navigation-primary\" />\n        </div>\n        <ng-content select=\"rds-divider[rds-header-end-divider]\" />\n        <div class=\"rds-header-actions\">\n          @if (searchPosition === 'animated') {\n            <button\n              #searchIcon\n              rds-icon-button\n              size=\"m\"\n              (click)=\"startSearching()\"\n              class=\"rds-header-action\"\n            >\n              <rds-icon namespace=\"outlined\" icon=\"search\" />\n            </button>\n          }\n          <div>\n            <ng-content select=\"rds-header-actions\" />\n          </div>\n        </div>\n      </div>\n    </div>\n    @if (searchPosition === 'animated') {\n      <div\n        [@searchExpansion]=\"getExpandedState()\"\n        (@searchExpansion.done)=\"focusSearchInput($event)\"\n        class=\"rds-header-searchbar-container\"\n      >\n        <rds-header-searchbar\n          (search)=\"onSearch($event)\"\n          (closeSearch)=\"endSearching()\"\n          [placeholder]=\"searchbarPlaceholder\"\n          [searchValue]=\"searchValue\"\n          (searchChange)=\"searchChange.emit($event)\"\n        />\n      </div>\n    }\n  </div>\n  <div>\n    <ng-content select=\"rds-header-navigation-secondary\" />\n  </div>\n</div>\n\n<ng-template #searchTemplate>\n  <rds-search\n    size=\"s\"\n    [(ngModel)]=\"searchValue\"\n    (ngModelChange)=\"searchChange.emit($event)\"\n    (keydown.enter)=\"emitSearch($event)\"\n    [placeholder]=\"searchbarPlaceholder\"\n    class=\"rds-header-search-input rds-header-search-position-{{\n      searchPosition\n    }}\"\n  />\n</ng-template>\n", styles: [".rds-header-title .rds-header-logo{margin-block:18px}.rds-header{display:flex;flex-direction:column;width:100%;background-color:var(--rds-color-bg-base-1);border-bottom:1px solid var(--rds-color-grey-1);transition:border-bottom-color .3s ease}.rds-header.rds-header-fixed{border-bottom-color:var(--rds-color-grey-1)}.rds-header .rds-header-container{width:100%}.rds-header .rds-header-container .rds-header-top{display:flex}.rds-header .rds-header-base{display:flex;justify-content:space-between;align-items:center;width:100%;padding-left:96px;padding-right:96px}.rds-header .rds-header-searchbar-container{width:100%}.rds-header .rds-header-title{display:flex;align-items:center}.rds-header .rds-header-title .rds-header-logo{height:32px;margin:20px 0;color:var(--rds-color-logo)}.rds-header .rds-header-title .rds-header-logo.rds-header-logo-trigger{cursor:pointer}.rds-header .rds-header-title .rds-header-logo.rds-header-logo-trigger.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px;border-radius:2px;border-width:0}.rds-header .rds-header-title .rds-header-logo svg{height:32px}.rds-header .rds-header-title .rds-header-logo svg path{fill:var(--rds-color-logo)}.rds-header .rds-header-title .rds-header-app-name{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;cursor:default;color:var(--rds-color-informative);white-space:nowrap;margin-left:24px}.rds-header .rds-header-title .rds-header-app-name.rds-header-app-name-triggerable{cursor:pointer}.rds-header .rds-header-title .rds-header-app-name.rds-header-app-name-triggerable.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px;border-radius:2px;border-width:0}.rds-header .rds-header-right-section{display:flex;align-items:center;margin:0 0 0 auto}.rds-header .rds-header-right-section .rds-header-actions-nav{display:flex;align-items:center}.rds-header .rds-header-right-section .rds-header-actions{display:flex;align-items:center;gap:24px}.rds-header .rds-header-navigation{display:flex;align-content:flex-end;align-items:center;gap:32px}.rds-header .rds-header-navigation .rds-header-link{display:flex;align-items:center;cursor:pointer;border-width:0}.rds-header .rds-header-navigation--primary .rds-header-link{margin:12px 0}.rds-header .rds-header-navigation--secondary{margin:2px 96px 0;gap:40px}.rds-header .rds-header-navigation--secondary .rds-header-link{border-bottom:2px solid transparent;padding-top:12px;padding-bottom:10px}.rds-header .rds-header-navigation--secondary .rds-header-link.rds-link--active:not(.rds-header-link--disabled){border-bottom:2px solid var(--rds-color-informative);color:var(--rds-color-secondary-link-hover)}.rds-header .rds-header-navigation--secondary .rds-header-link:hover:not(.rds-header-link--disabled):not(.rds-link--active){border-bottom:2px solid var(--rds-color-informative);color:var(--rds-color-secondary-link)}.rds-header .rds-header-search{display:flex;align-items:center;border:none;outline:none;width:100%;min-height:72px;padding:0 96px}.rds-header .rds-header-search .rds-header-search-input{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:none;width:100%;color:var(--rds-color-high-contrast);background-color:transparent}.rds-header .rds-header-search .rds-header-search-input:hover,.rds-header .rds-header-search .rds-header-search-input:focus{outline:none}.rds-header .rds-header-search .rds-header-search-input::placeholder{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}.rds-header .rds-header-search .rds-header-search-search-icon{margin-right:12px;color:var(--rds-color-low-contrast)}.rds-header .rds-header-search .rds-header-search-close-icon{margin-left:12px;width:18px;height:18px}.rds-header .rds-divider,.rds-header .rds-divider.rds-divider-vertical{margin-left:24px;margin-right:24px;width:1px;height:16px}.rds-header .rds-divider.rds-header-start-divider,.rds-header .rds-divider.rds-divider-vertical.rds-header-start-divider{margin-right:0}.rds-header-minimal-margins .rds-header-base,.rds-header-minimal-margins .rds-header-search{padding-inline:16px}.rds-header-minimal-margins .rds-header-navigation--secondary{margin-inline:16px}.rds-header-search-input.rds-header-search-position-start{margin-left:24px}.rds-header-search-input.rds-header-search-position-end{margin-right:24px}.rds-header-search-input .rds-search.rds-search-s .rds-form-field .rds-form-field__control-container{border-radius:36px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: RdsSearchComponent, selector: "rds-search" }, { kind: "component", type: RdsHeaderSearchbarComponent, selector: "rds-header-searchbar", inputs: ["placeholder", "searchValue"], outputs: ["searchChange", "closeSearch", "search"] }], animations: [
            rdsHeaderSearchAnimations.headerCollapse,
            rdsHeaderSearchAnimations.searchExpansion,
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-header', animations: [
                        rdsHeaderSearchAnimations.headerCollapse,
                        rdsHeaderSearchAnimations.searchExpansion,
                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"rds-header-container\">\n  <div class=\"rds-header-top\">\n    <div class=\"rds-header-base\" [@headerCollapse]=\"getCollapsedState()\">\n      <div class=\"rds-header-title\">\n        <div\n          class=\"rds-header-logo\"\n          [class.rds-header-logo-trigger]=\"logoTriggered.observed\"\n          [tabIndex]=\"logoTriggered.observed ? 0 : -1\"\n          #logoElement\n          (click)=\"onLogoClick($event)\"\n          (keydown)=\"onLogoClick($event)\"\n        >\n          <svg\n            height=\"32\"\n            viewBox=\"0 0 152 79\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M124.203 34.7693C123.519 33.3633 122.55 32.2994 121.315 31.5394C120.08 30.7794 118.655 30.3994 117.059 30.3994C115.463 30.3994 114.038 30.7794 112.803 31.5394C111.568 32.2994 110.599 33.3823 109.915 34.7693C109.231 36.1753 108.889 37.8092 108.889 39.6712V43.8701C108.889 45.732 109.231 47.366 109.915 48.772C110.599 50.1779 111.568 51.2419 112.803 52.0019C114.038 52.7619 115.463 53.1228 117.059 53.1228C118.655 53.1228 120.08 52.7429 121.315 52.0019C122.55 51.2419 123.31 50.3869 123.994 48.9809C124.317 48.316 124.602 47.48 124.754 46.625L120.84 45.732C120.669 46.568 120.384 47.366 119.947 47.917C119.244 48.8289 118.218 49.2279 117.059 49.2279C115.9 49.2279 114.874 48.8099 114.171 47.917C113.468 47.005 113.126 45.713 113.126 44.1171V42.5401H125.248V39.6522C125.229 37.7902 124.887 36.1753 124.203 34.7693ZM117.059 34.2943C118.218 34.2943 119.244 34.6933 119.947 35.5863C120.574 36.3843 120.916 37.6002 120.992 38.9872H113.126C113.183 37.6002 113.525 36.3843 114.171 35.5863C114.855 34.6933 115.881 34.2943 117.059 34.2943Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M94.0119 52.6287V38.3031C94.0119 37.1061 94.3539 36.1371 95.0189 35.4341C95.7029 34.7312 96.5389 34.3702 97.5839 34.3702C98.6099 34.3702 99.4649 34.7312 100.149 35.4341C100.833 36.1371 101.156 37.0871 101.156 38.3031V52.6287H105.393V37.4101C105.393 35.2061 104.823 33.4962 103.683 32.2612C102.543 31.0262 100.985 30.4183 99.0089 30.4183C97.9259 30.4183 96.9569 30.6273 96.0449 31.0642C95.1519 31.5012 94.4299 32.0712 94.0309 32.6792V21.7925H89.7939V52.6287H94.0119Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M74.632 44.0791C74.632 45.675 74.993 46.967 75.696 47.86C76.418 48.7529 77.444 49.1519 78.603 49.1519C80.693 49.1519 82.004 47.803 82.498 45.124L86.431 46.036C86.108 48.278 85.291 50.0259 83.98 51.2609C82.669 52.4959 80.883 53.1228 78.603 53.1228C76.133 53.1228 74.138 52.2869 72.637 50.6149C71.136 48.9429 70.376 46.663 70.376 43.8131V39.7092C70.376 36.8593 71.117 34.5793 72.637 32.9074C74.138 31.2354 76.133 30.3994 78.603 30.3994C80.883 30.3994 82.669 31.0264 83.98 32.2614C85.291 33.4963 86.108 35.2443 86.431 37.4862L82.498 38.3982C82.004 35.7193 80.712 34.3703 78.603 34.3703C77.444 34.3703 76.399 34.7693 75.696 35.6623C74.974 36.5553 74.632 37.8282 74.632 39.4432V44.0791Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M58.957 49.152C57.798 49.152 56.772 48.734 56.069 47.841C55.366 46.929 55.024 45.6371 55.024 44.0411V39.4432C55.024 37.8473 55.366 36.5553 56.069 35.6623C56.772 34.7693 57.798 34.3704 58.957 34.3704C60.116 34.3704 61.142 34.7693 61.845 35.6623C62.548 36.5553 62.89 37.8283 62.89 39.4432V44.0411C62.89 45.6371 62.548 46.929 61.845 47.841C61.142 48.753 60.116 49.152 58.957 49.152ZM58.957 53.1419C60.553 53.1419 61.978 52.7619 63.213 52.0209C64.448 51.2609 65.417 50.178 66.101 48.791C66.785 47.385 67.127 45.7511 67.127 43.8891V39.6902C67.127 37.8283 66.785 36.1943 66.101 34.7883C65.417 33.3824 64.448 32.3184 63.213 31.5584C61.978 30.7984 60.553 30.4185 58.957 30.4185C57.361 30.4185 55.936 30.7984 54.701 31.5584C53.466 32.3184 52.497 33.4014 51.813 34.7883C51.129 36.1943 50.787 37.8283 50.787 39.6902V43.8891C50.787 45.7511 51.129 47.385 51.813 48.791C52.497 50.197 53.466 51.2609 54.701 52.0209C55.936 52.7619 57.361 53.1419 58.957 53.1419Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M36.271 34.8073V25.8205H40.546C41.686 25.8205 42.579 26.1815 43.206 26.9225C43.833 27.6635 44.156 28.7845 44.156 30.3234C44.156 31.8434 43.833 32.9834 43.206 33.7243C42.579 34.4653 41.686 34.8263 40.546 34.8263L36.271 34.8073ZM36.271 52.6289V38.8732H39.9C40.945 38.8732 41.629 39.1202 42.085 39.5952C42.541 40.0702 42.788 40.8302 42.921 41.9131L44.118 52.6289H48.374L47.101 41.5141C46.949 40.1842 46.778 39.3102 46.246 38.5312C45.752 37.8282 45.049 37.2392 44.232 36.9733C45.524 36.3653 46.55 35.4913 47.291 34.3893C48.032 33.2873 48.412 31.7674 48.412 29.8294C48.412 27.3405 47.709 25.3645 46.322 23.9206C44.916 22.4766 42.997 21.7546 40.565 21.7546H32.053V52.6289H36.271Z\"\n              fill=\"#0B41CD\"\n            />\n            <path\n              d=\"M152 39.5L117.667 79H34.333L0 39.5L34.333 0H117.648L152 39.5ZM115.824 74.9911L146.68 39.5L115.824 4.0089H36.157L5.32 39.5L36.157 74.9911H115.824Z\"\n              fill=\"#0B41CD\"\n            />\n          </svg>\n        </div>\n        <ng-content\n          select=\"rds-divider[rds-header-start-divider], rds-header-app-name\"\n        />\n        @if (searchPosition === 'start') {\n          <ng-container [ngTemplateOutlet]=\"searchTemplate\" />\n        }\n      </div>\n\n      <div class=\"rds-header-right-section\">\n        @if (searchPosition === 'end') {\n          <ng-container [ngTemplateOutlet]=\"searchTemplate\" />\n        }\n        <div class=\"rds-header-actions-nav\">\n          <ng-content select=\"rds-header-navigation-primary\" />\n        </div>\n        <ng-content select=\"rds-divider[rds-header-end-divider]\" />\n        <div class=\"rds-header-actions\">\n          @if (searchPosition === 'animated') {\n            <button\n              #searchIcon\n              rds-icon-button\n              size=\"m\"\n              (click)=\"startSearching()\"\n              class=\"rds-header-action\"\n            >\n              <rds-icon namespace=\"outlined\" icon=\"search\" />\n            </button>\n          }\n          <div>\n            <ng-content select=\"rds-header-actions\" />\n          </div>\n        </div>\n      </div>\n    </div>\n    @if (searchPosition === 'animated') {\n      <div\n        [@searchExpansion]=\"getExpandedState()\"\n        (@searchExpansion.done)=\"focusSearchInput($event)\"\n        class=\"rds-header-searchbar-container\"\n      >\n        <rds-header-searchbar\n          (search)=\"onSearch($event)\"\n          (closeSearch)=\"endSearching()\"\n          [placeholder]=\"searchbarPlaceholder\"\n          [searchValue]=\"searchValue\"\n          (searchChange)=\"searchChange.emit($event)\"\n        />\n      </div>\n    }\n  </div>\n  <div>\n    <ng-content select=\"rds-header-navigation-secondary\" />\n  </div>\n</div>\n\n<ng-template #searchTemplate>\n  <rds-search\n    size=\"s\"\n    [(ngModel)]=\"searchValue\"\n    (ngModelChange)=\"searchChange.emit($event)\"\n    (keydown.enter)=\"emitSearch($event)\"\n    [placeholder]=\"searchbarPlaceholder\"\n    class=\"rds-header-search-input rds-header-search-position-{{\n      searchPosition\n    }}\"\n  />\n</ng-template>\n", styles: [".rds-header-title .rds-header-logo{margin-block:18px}.rds-header{display:flex;flex-direction:column;width:100%;background-color:var(--rds-color-bg-base-1);border-bottom:1px solid var(--rds-color-grey-1);transition:border-bottom-color .3s ease}.rds-header.rds-header-fixed{border-bottom-color:var(--rds-color-grey-1)}.rds-header .rds-header-container{width:100%}.rds-header .rds-header-container .rds-header-top{display:flex}.rds-header .rds-header-base{display:flex;justify-content:space-between;align-items:center;width:100%;padding-left:96px;padding-right:96px}.rds-header .rds-header-searchbar-container{width:100%}.rds-header .rds-header-title{display:flex;align-items:center}.rds-header .rds-header-title .rds-header-logo{height:32px;margin:20px 0;color:var(--rds-color-logo)}.rds-header .rds-header-title .rds-header-logo.rds-header-logo-trigger{cursor:pointer}.rds-header .rds-header-title .rds-header-logo.rds-header-logo-trigger.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px;border-radius:2px;border-width:0}.rds-header .rds-header-title .rds-header-logo svg{height:32px}.rds-header .rds-header-title .rds-header-logo svg path{fill:var(--rds-color-logo)}.rds-header .rds-header-title .rds-header-app-name{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;cursor:default;color:var(--rds-color-informative);white-space:nowrap;margin-left:24px}.rds-header .rds-header-title .rds-header-app-name.rds-header-app-name-triggerable{cursor:pointer}.rds-header .rds-header-title .rds-header-app-name.rds-header-app-name-triggerable.cdk-focused.cdk-keyboard-focused{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px;border-radius:2px;border-width:0}.rds-header .rds-header-right-section{display:flex;align-items:center;margin:0 0 0 auto}.rds-header .rds-header-right-section .rds-header-actions-nav{display:flex;align-items:center}.rds-header .rds-header-right-section .rds-header-actions{display:flex;align-items:center;gap:24px}.rds-header .rds-header-navigation{display:flex;align-content:flex-end;align-items:center;gap:32px}.rds-header .rds-header-navigation .rds-header-link{display:flex;align-items:center;cursor:pointer;border-width:0}.rds-header .rds-header-navigation--primary .rds-header-link{margin:12px 0}.rds-header .rds-header-navigation--secondary{margin:2px 96px 0;gap:40px}.rds-header .rds-header-navigation--secondary .rds-header-link{border-bottom:2px solid transparent;padding-top:12px;padding-bottom:10px}.rds-header .rds-header-navigation--secondary .rds-header-link.rds-link--active:not(.rds-header-link--disabled){border-bottom:2px solid var(--rds-color-informative);color:var(--rds-color-secondary-link-hover)}.rds-header .rds-header-navigation--secondary .rds-header-link:hover:not(.rds-header-link--disabled):not(.rds-link--active){border-bottom:2px solid var(--rds-color-informative);color:var(--rds-color-secondary-link)}.rds-header .rds-header-search{display:flex;align-items:center;border:none;outline:none;width:100%;min-height:72px;padding:0 96px}.rds-header .rds-header-search .rds-header-search-input{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;border:none;width:100%;color:var(--rds-color-high-contrast);background-color:transparent}.rds-header .rds-header-search .rds-header-search-input:hover,.rds-header .rds-header-search .rds-header-search-input:focus{outline:none}.rds-header .rds-header-search .rds-header-search-input::placeholder{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast)}.rds-header .rds-header-search .rds-header-search-search-icon{margin-right:12px;color:var(--rds-color-low-contrast)}.rds-header .rds-header-search .rds-header-search-close-icon{margin-left:12px;width:18px;height:18px}.rds-header .rds-divider,.rds-header .rds-divider.rds-divider-vertical{margin-left:24px;margin-right:24px;width:1px;height:16px}.rds-header .rds-divider.rds-header-start-divider,.rds-header .rds-divider.rds-divider-vertical.rds-header-start-divider{margin-right:0}.rds-header-minimal-margins .rds-header-base,.rds-header-minimal-margins .rds-header-search{padding-inline:16px}.rds-header-minimal-margins .rds-header-navigation--secondary{margin-inline:16px}.rds-header-search-input.rds-header-search-position-start{margin-left:24px}.rds-header-search-input.rds-header-search-position-end{margin-right:24px}.rds-header-search-input .rds-search.rds-search-s .rds-form-field .rds-form-field__control-container{border-radius:36px}\n"] }]
        }], propDecorators: { scrollTarget: [{
                type: Input
            }], searchbarPlaceholder: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], search: [{
                type: Output
            }], searchChange: [{
                type: Output
            }], logoTriggered: [{
                type: Output
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], searchbar: [{
                type: ViewChild,
                args: [RdsHeaderSearchbarComponent, { static: false }]
            }], searchIcon: [{
                type: ViewChild,
                args: ['searchIcon', { static: false }]
            }], logoElement: [{
                type: ViewChild,
                args: ['logoElement', { static: true }]
            }], searchPosition: [{
                type: Input
            }], minimalMargins: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-header-minimal-margins']
            }] } });

class RdsGlobalSearchComponent extends RdsAbstractSearchComponent {
    constructor() {
        super(...arguments);
        this.includeButton = true;
        this.btnFocused = false;
    }
    get active() {
        return this.formField?.control?.focused || this.btnFocused !== false;
    }
    setBtnFocused(btnName, eventType) {
        if (eventType === 'focus') {
            this.btnFocused = btnName;
        }
        else if (eventType === 'blur' && this.btnFocused === btnName) {
            this.btnFocused = false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsGlobalSearchComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsGlobalSearchComponent, selector: "rds-global-search", inputs: { includeButton: ["includeButton", "includeButton", booleanAttribute] }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RdsGlobalSearchComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "formField", first: true, predicate: RdsFormFieldComponent, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"rds-global-search rds-global-search-{{ size }}\"\n  [class.rds-global-search-active]=\"active\"\n  [class.rds-global-search-disabled]=\"disabled\"\n  (click)=\"searchInput.focus()\"\n>\n  <rds-form-field [size]=\"size\" labelPosition=\"none\">\n    <rds-icon\n      class=\"rds-global-search-icon\"\n      namespace=\"filled\"\n      icon=\"search\"\n      rds-control-prefix\n      aria-hidden=\"true\"\n    />\n    <input\n      [disabled]=\"disabled\"\n      [ngModel]=\"value\"\n      (input)=\"onInput($event)\"\n      type=\"search\"\n      #searchInput\n      rdsInput\n      (keydown.enter)=\"emitValue('input-enter-key', $event)\"\n      (search)=\"$event.preventDefault(); $event.stopPropagation()\"\n      [placeholder]=\"placeholder\"\n    />\n    @if (isDirtyValue()) {\n      <button\n        rds-icon-button\n        rds-control-suffix\n        [size]=\"'s'\"\n        [attr.aria-label]=\"ariaClearLabel\"\n        (click)=\"resetInput($event); $event.stopPropagation()\"\n        [disabled]=\"disabled\"\n        (focus)=\"setBtnFocused('reset', 'focus')\"\n        (blur)=\"setBtnFocused('reset', 'blur')\"\n        class=\"rds-global-search-reset-button\"\n      >\n        <rds-icon namespace=\"filled\" icon=\"close\" aria-hidden=\"true\" />\n      </button>\n    }\n  </rds-form-field>\n  @if (includeButton) {\n    <button\n      class=\"rds-global-search-button\"\n      rds-primary-button\n      (focus)=\"setBtnFocused('search', 'focus')\"\n      (blur)=\"setBtnFocused('search', 'blur')\"\n      [disabled]=\"disabled\"\n      [size]=\"size\"\n      (click)=\"emitValue('button', $event); $event.stopPropagation()\"\n    >\n      {{ buttonText }}\n    </button>\n  }\n</div>\n", styles: [":host .rds-global-search{display:flex;border-bottom:1px solid var(--rds-color-stroke-enabled)}:host .rds-global-search:hover:not(.rds-global-search-disabled){border-bottom-color:var(--rds-color-informative)}:host .rds-global-search.rds-global-search-active:not(.rds-global-search-disabled){border-bottom-color:var(--rds-color-informative)}:host .rds-global-search.rds-global-search-l{padding-bottom:11px}:host .rds-global-search.rds-global-search-l ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__control-container{border:none;padding-left:12px!important;padding-right:16px!important;background-color:transparent}:host .rds-global-search.rds-global-search-l ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px!important}:host .rds-global-search.rds-global-search-l ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:24px!important}:host .rds-global-search.rds-global-search-m{padding-bottom:7px}:host .rds-global-search.rds-global-search-m ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__control-container{border:none;padding-left:8px!important;padding-right:12px!important;background-color:transparent}:host .rds-global-search.rds-global-search-m ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px!important}:host .rds-global-search.rds-global-search-m ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:24px!important}:host .rds-global-search.rds-global-search-s{padding-bottom:7px}:host .rds-global-search.rds-global-search-s ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__control-container{border:none;padding-left:8px!important;padding-right:8px!important;background-color:transparent}:host .rds-global-search.rds-global-search-s ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:!important}:host .rds-global-search.rds-global-search-s ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:16px!important}:host .rds-global-search .rds-global-search-reset-button .rds-icon{width:18px;height:18px}:host .rds-global-search .rds-global-search-icon{color:var(--rds-color-low-contrast)}:host .rds-global-search ::ng-deep .rds-form-field{margin-bottom:0}:host .rds-global-search ::ng-deep .rds-form-field .rds-form-field__control-container{border-color:transparent!important}:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-decoration,:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-cancel-button,:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-results-button,:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}:host .rds-global-search rds-form-field{width:100%}:host .rds-global-search .rds-global-search-button{margin-left:12px}\n"], dependencies: [{ kind: "component", type: RdsFormFieldComponent, selector: "rds-form-field", inputs: ["hideRequiredMarker", "hideTextareaCharacterCounter", "labelPosition", "size", "labelWidth"] }, { kind: "directive", type: RdsInputDirective, selector: " input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]", inputs: ["id", "disabled", "required", "readonly", "type", "placeholder", "value"] }, { kind: "directive", type: RdsPrefixDirective, selector: "[rds-control-prefix], [rdsControlPrefix]" }, { kind: "directive", type: RdsSuffixDirective, selector: "[rds-control-suffix], [rdsControlSuffix]" }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: RdsButtonComponent, selector: "\n    button[rds-primary-button],\n    button[rds-warning-button],\n    button[rds-secondary-button],\n    button[rds-secondary-warning-button],\n    button[rdsPrimaryButton],\n    button[rdsWarningButton],\n    button[rdsSecondaryButton],\n    button[rdsSecondaryWarningButton],\n  " }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsGlobalSearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-global-search', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RdsGlobalSearchComponent),
                            multi: true,
                        },
                    ], template: "<div\n  class=\"rds-global-search rds-global-search-{{ size }}\"\n  [class.rds-global-search-active]=\"active\"\n  [class.rds-global-search-disabled]=\"disabled\"\n  (click)=\"searchInput.focus()\"\n>\n  <rds-form-field [size]=\"size\" labelPosition=\"none\">\n    <rds-icon\n      class=\"rds-global-search-icon\"\n      namespace=\"filled\"\n      icon=\"search\"\n      rds-control-prefix\n      aria-hidden=\"true\"\n    />\n    <input\n      [disabled]=\"disabled\"\n      [ngModel]=\"value\"\n      (input)=\"onInput($event)\"\n      type=\"search\"\n      #searchInput\n      rdsInput\n      (keydown.enter)=\"emitValue('input-enter-key', $event)\"\n      (search)=\"$event.preventDefault(); $event.stopPropagation()\"\n      [placeholder]=\"placeholder\"\n    />\n    @if (isDirtyValue()) {\n      <button\n        rds-icon-button\n        rds-control-suffix\n        [size]=\"'s'\"\n        [attr.aria-label]=\"ariaClearLabel\"\n        (click)=\"resetInput($event); $event.stopPropagation()\"\n        [disabled]=\"disabled\"\n        (focus)=\"setBtnFocused('reset', 'focus')\"\n        (blur)=\"setBtnFocused('reset', 'blur')\"\n        class=\"rds-global-search-reset-button\"\n      >\n        <rds-icon namespace=\"filled\" icon=\"close\" aria-hidden=\"true\" />\n      </button>\n    }\n  </rds-form-field>\n  @if (includeButton) {\n    <button\n      class=\"rds-global-search-button\"\n      rds-primary-button\n      (focus)=\"setBtnFocused('search', 'focus')\"\n      (blur)=\"setBtnFocused('search', 'blur')\"\n      [disabled]=\"disabled\"\n      [size]=\"size\"\n      (click)=\"emitValue('button', $event); $event.stopPropagation()\"\n    >\n      {{ buttonText }}\n    </button>\n  }\n</div>\n", styles: [":host .rds-global-search{display:flex;border-bottom:1px solid var(--rds-color-stroke-enabled)}:host .rds-global-search:hover:not(.rds-global-search-disabled){border-bottom-color:var(--rds-color-informative)}:host .rds-global-search.rds-global-search-active:not(.rds-global-search-disabled){border-bottom-color:var(--rds-color-informative)}:host .rds-global-search.rds-global-search-l{padding-bottom:11px}:host .rds-global-search.rds-global-search-l ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__control-container{border:none;padding-left:12px!important;padding-right:16px!important;background-color:transparent}:host .rds-global-search.rds-global-search-l ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px!important}:host .rds-global-search.rds-global-search-l ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:24px!important}:host .rds-global-search.rds-global-search-m{padding-bottom:7px}:host .rds-global-search.rds-global-search-m ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__control-container{border:none;padding-left:8px!important;padding-right:12px!important;background-color:transparent}:host .rds-global-search.rds-global-search-m ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px!important}:host .rds-global-search.rds-global-search-m ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:24px!important}:host .rds-global-search.rds-global-search-s{padding-bottom:7px}:host .rds-global-search.rds-global-search-s ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__control-container{border:none;padding-left:8px!important;padding-right:8px!important;background-color:transparent}:host .rds-global-search.rds-global-search-s ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:!important}:host .rds-global-search.rds-global-search-s ::ng-deep .rds-form-field .rds-form-field__container .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:16px!important}:host .rds-global-search .rds-global-search-reset-button .rds-icon{width:18px;height:18px}:host .rds-global-search .rds-global-search-icon{color:var(--rds-color-low-contrast)}:host .rds-global-search ::ng-deep .rds-form-field{margin-bottom:0}:host .rds-global-search ::ng-deep .rds-form-field .rds-form-field__control-container{border-color:transparent!important}:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-decoration,:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-cancel-button,:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-results-button,:host .rds-global-search ::ng-deep .rds-form-field input[type=search]::-webkit-search-results-decoration{-webkit-appearance:none}:host .rds-global-search rds-form-field{width:100%}:host .rds-global-search .rds-global-search-button{margin-left:12px}\n"] }]
        }], propDecorators: { formField: [{
                type: ViewChild,
                args: [RdsFormFieldComponent, { static: true }]
            }], includeButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

const COMPONENTS = [RdsSearchComponent, RdsGlobalSearchComponent];
class RdsSearchModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchModule, declarations: [RdsSearchComponent, RdsGlobalSearchComponent], imports: [RdsFormFieldModule, RdsIconComponent, FormsModule, RdsButtonModule], exports: [RdsSearchComponent, RdsGlobalSearchComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchModule, imports: [RdsFormFieldModule, FormsModule, RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RdsFormFieldModule, RdsIconComponent, FormsModule, RdsButtonModule],
                    declarations: [...COMPONENTS],
                    exports: [...COMPONENTS],
                }]
        }] });

class RdsHeaderStartDividerDirective {
    constructor() {
        this.divider = inject(forwardRef(() => RdsDividerComponent));
        this.class = 'rds-header-start-divider';
        this.divider.vertical = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderStartDividerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderStartDividerDirective, selector: "rds-divider[rds-header-start-divider]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderStartDividerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-divider[rds-header-start-divider]',
                }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsHeaderEndDividerDirective extends RdsHeaderStartDividerDirective {
    constructor() {
        super(...arguments);
        this.class = 'rds-header-end-divider';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderEndDividerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderEndDividerDirective, selector: "rds-divider[rds-header-end-divider]", host: { properties: { "class": "this.class" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderEndDividerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-divider[rds-header-end-divider]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const ELEMENTS$3 = [
    RdsHeaderComponent,
    RdsHeaderActionsDirective,
    RdsHeaderAppNameDirective,
    RdsHeaderLinkComponent,
    RdsHeaderNavigationPrimaryDirective,
    RdsHeaderNavigationSecondaryDirective,
    RdsHeaderSearchbarComponent,
    RdsHeaderStartDividerDirective,
    RdsHeaderEndDividerDirective,
];
class RdsHeaderModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderModule, declarations: [RdsHeaderComponent,
            RdsHeaderActionsDirective,
            RdsHeaderAppNameDirective,
            RdsHeaderLinkComponent,
            RdsHeaderNavigationPrimaryDirective,
            RdsHeaderNavigationSecondaryDirective,
            RdsHeaderSearchbarComponent,
            RdsHeaderStartDividerDirective,
            RdsHeaderEndDividerDirective], imports: [CommonModule,
            RdsIconComponent,
            OverlayModule,
            RdsFormFieldModule,
            RdsButtonModule,
            FormsModule,
            ObserversModule,
            RdsLinkComponent,
            RdsSearchModule,
            RdsDividerModule], exports: [RdsHeaderComponent,
            RdsHeaderActionsDirective,
            RdsHeaderAppNameDirective,
            RdsHeaderLinkComponent,
            RdsHeaderNavigationPrimaryDirective,
            RdsHeaderNavigationSecondaryDirective,
            RdsHeaderSearchbarComponent,
            RdsHeaderStartDividerDirective,
            RdsHeaderEndDividerDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderModule, imports: [CommonModule,
            OverlayModule,
            RdsFormFieldModule,
            RdsButtonModule,
            FormsModule,
            ObserversModule,
            RdsSearchModule,
            RdsDividerModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        RdsIconComponent,
                        OverlayModule,
                        RdsFormFieldModule,
                        RdsButtonModule,
                        FormsModule,
                        ObserversModule,
                        RdsLinkComponent,
                        RdsSearchModule,
                        RdsDividerModule,
                    ],
                    declarations: [...ELEMENTS$3],
                    exports: [...ELEMENTS$3],
                }]
        }] });

const rdsMenuAnimations = {
    transformMenu: trigger('transformMenu', [
        state('void', style({
            opacity: 0,
            transform: 'scale(0.8)',
        })),
        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({
            opacity: 1,
            transform: 'scale(1)',
        }))),
        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),
    ]),
    fadeInItems: trigger('fadeInItems', [
        state('showing', style({ opacity: 1 })),
        transition('void => *', [
            style({ opacity: 0 }),
            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};

const RDS_MENU_CONTENT = new InjectionToken('RDS_MENU_CONTENT');
class RdsMenuContentDirective {
    constructor() {
        this.template = inject(TemplateRef);
        this.componentFactoryResolver = inject(ComponentFactoryResolver);
        this.appRef = inject(ApplicationRef);
        this.injector = inject(Injector);
        this.viewContainerRef = inject(ViewContainerRef);
        this.document = inject(DOCUMENT);
        this.cdr = inject(ChangeDetectorRef, { optional: true });
        this._attached = new Subject();
    }
    attach(context = {}) {
        if (!this._portal) {
            this._portal = new TemplatePortal(this.template, this.viewContainerRef);
        }
        this.detach();
        if (!this._outlet) {
            this._outlet = new DomPortalOutlet(this.document.createElement('div'), this.componentFactoryResolver, this.appRef, this.injector);
        }
        const element = this.template.elementRef.nativeElement;
        if (element.parentNode) {
            element.parentNode.insertBefore(this._outlet.outletElement, element);
        }
        if (this.cdr) {
            this.cdr.markForCheck();
        }
        this._portal.attach(this._outlet, context);
        this._attached.next();
    }
    detach() {
        if (this._portal.isAttached) {
            this._portal.detach();
        }
    }
    ngOnDestroy() {
        if (this._outlet) {
            this._outlet.dispose();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsMenuContentDirective, selector: "ng-template[rds-menu-content], ng-template[rdsMenuContent]", providers: [
            { provide: RDS_MENU_CONTENT, useExisting: RdsMenuContentDirective },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[rds-menu-content], ng-template[rdsMenuContent]',
                    providers: [
                        { provide: RDS_MENU_CONTENT, useExisting: RdsMenuContentDirective },
                    ],
                }]
        }] });

function throwRdsMenuMissingError() {
    throw Error(`rdsMenuTriggerFor: must pass in an rds-menu instance.
    Example:
      <rds-menu-component #menu="rdsMenu"></rds-menu-component>
      <button [rdsMenuTriggerFor]="menu"></button>`);
}
function throwRdsMenuInvalidPositionX() {
    throw Error(`xPosition value must be either 'before' or after'.
      Example: <rds-menu xPosition="before" #menu="rdsMenu"></rds-menu>`);
}
function throwRdsMenuInvalidPositionY() {
    throw Error(`yPosition value must be either 'above' or below'.
      Example: <rds-menu yPosition="above" #menu="rdsMenu"></rds-menu>`);
}
function throwRdsMenuRecursiveError() {
    throw Error(`rdsMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +
        `not a parent of the trigger or move the trigger outside of the menu.`);
}

const RDS_MENU_PANEL = new InjectionToken('RDS_MENU_PANEL');

class RdsMenuItemComponent extends RdsNestableListItemComponent {
    constructor() {
        super(...arguments);
        this._parentMenu = inject(RDS_MENU_PANEL, { optional: true });
        this.focusMonitor = inject(FocusMonitor);
        this.rdsMenuItemClass = true;
        this._hovered = new Subject();
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, false);
    }
    ngOnDestroy() {
        this._hovered.complete();
        this._focused.complete();
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    handleMouseEnter() {
        this._hovered.next(this);
    }
    focus(origin, options) {
        if (this.focusMonitor && origin) {
            this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
        }
        else {
            super.focus();
        }
        this._focused.next(this);
    }
    blur() {
        this.markAsInactive();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMenuItemComponent, selector: "[rds-menu-item], [rdsMenuItem]", host: { listeners: { "mouseenter": "handleMouseEnter()", "blur": "blur()" }, properties: { "class.rds-menu-item": "this.rdsMenuItemClass" } }, exportAs: ["rdsMenuItem"], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n\n@if (hasChildItems) {\n  <rds-icon\n    namespace=\"outlined\"\n    icon=\"chevron_right\"\n    class=\"rds-list-item__has-child-items\"\n  />\n}", isInline: true, dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[rds-menu-item], [rdsMenuItem]',
                    exportAs: 'rdsMenuItem',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    template: RDS_NESTABLE_LIST_ITEM_TEMPLATE,
                }]
        }], propDecorators: { rdsMenuItemClass: [{
                type: HostBinding,
                args: ['class.rds-menu-item']
            }], handleMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }] } });

const RDS_MENU_DEFAULT_OPTIONS = new InjectionToken('RDS_MENU_DEFAULT_OPTIONS', {
    providedIn: 'root',
    factory: RDS_MENU_DEFAULT_OPTIONS_FACTORY,
});
function RDS_MENU_DEFAULT_OPTIONS_FACTORY() {
    return {
        overlapTrigger: false,
        xPosition: 'after',
        yPosition: 'below',
        backdrop: 'transparent',
    };
}
let menuPanelUid$1 = 0;
class RdsMenuComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.ngZone = inject(NgZone);
        this.defaultOptions = inject(RDS_MENU_DEFAULT_OPTIONS);
        this._xPosition = this.defaultOptions.xPosition;
        this._yPosition = this.defaultOptions.yPosition;
        this._size = 'm';
        this._elevationPrefix = 'rds-elevation-z';
        this._baseElevation = 4;
        this.attrAriaLabel = null;
        this.attrAriaLabelledBy = null;
        this.attrAriaDescribedBy = null;
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this._directDescendantItems = new QueryList();
        this._tabSubscription = Subscription.EMPTY;
        this._classList = {};
        this._panelAnimationState = 'void';
        this._animationDone = new Subject();
        this.overlayPanelClass = this.defaultOptions.overlayPanelClass || '';
        this.backdrop = this.defaultOptions.backdrop;
        this.ariaLabel = null;
        this.ariaLabelledby = null;
        this.ariaDescribedby = null;
        this.overlapTrigger = this.defaultOptions.overlapTrigger;
        this.closed = new EventEmitter();
        this.panelId = `rds-menu-panel-${menuPanelUid$1++}`;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
        this._allItems?.forEach((item) => (item.size = size));
    }
    get xPosition() {
        return this._xPosition;
    }
    set xPosition(value) {
        if (value !== 'before' && value !== 'after') {
            throwRdsMenuInvalidPositionX();
        }
        this._xPosition = value;
        this.setPositionClasses();
    }
    get yPosition() {
        return this._yPosition;
    }
    set yPosition(value) {
        if (value !== 'above' && value !== 'below') {
            throwRdsMenuInvalidPositionY();
        }
        this._yPosition = value;
        this.setPositionClasses();
    }
    /**
     * This method takes classes set on the host rds-menu-component element and applies them on the
     * menu template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing menu from outside the component.
     * @param classes list of class names
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set panelClass(classes) {
        const previousPanelClass = this._previousPanelClass;
        if (previousPanelClass && previousPanelClass.length) {
            previousPanelClass.split(' ').forEach((className) => {
                this._classList[className] = false;
            });
        }
        this._previousPanelClass = classes;
        if (classes && classes.length) {
            classes.split(' ').forEach((className) => {
                this._classList[className] = true;
            });
            this.elementRef.nativeElement.className = '';
        }
    }
    ngOnInit() {
        this.setPositionClasses();
    }
    ngAfterContentInit() {
        this._updateDirectDescendants();
        this._keyManager = new FocusKeyManager(this._directDescendantItems)
            .skipPredicate((i) => i.disabled)
            .withWrap()
            .withTypeAhead()
            .withHomeAndEnd();
        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));
        this._directDescendantItems.changes
            .pipe(startWith(this._directDescendantItems), tap(() => {
            this.tabIndex = this._directDescendantItems.filter((i) => !i.disabled)
                ? TAB_INDEX_DEFAULT
                : TAB_INDEX_NOT_FOCUSABLE;
        }), switchMap((items) => merge(...items.map((item) => item._focused))), takeUntilDestroyed(this.destroyRef))
            .subscribe((focusedItem) => {
            this._keyManager.updateActiveItem(focusedItem);
        });
    }
    ngOnDestroy() {
        this._directDescendantItems.destroy();
        this._tabSubscription.unsubscribe();
        this.closed.complete();
    }
    _hovered() {
        const itemChanges = this._directDescendantItems.changes;
        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap((items) => merge(...items.map((item) => item._hovered))));
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        const manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this.closed.emit('keydown');
                }
                break;
            case LEFT_ARROW:
                if (this.parentMenu && this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case RIGHT_ARROW:
                if (this.parentMenu && this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            default:
                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                    manager.setFocusOrigin('keyboard');
                }
                manager.onKeydown(event);
        }
    }
    focus() {
        if (!this._keyManager.activeItem) {
            this._keyManager.setFirstItemActive();
        }
        if (this._keyManager.activeItem) {
            const firstActivated = this._directDescendantItems
                .toArray()
                .findIndex((i) => i.activated);
            if (firstActivated) {
                this._directDescendantItems.get(firstActivated)?.focus('keyboard');
            }
            this._keyManager.activeItem.focus('keyboard');
            // this.ariaActiveDescendant = this._keyManager.activeItem.getLabel();
        }
    }
    focusFirstItem(origin = 'program') {
        if (this.lazyContent) {
            this.ngZone.onStable
                .pipe(take(1))
                .subscribe(() => this._focusFirstItem(origin));
        }
        else {
            this._focusFirstItem(origin);
        }
    }
    _focusFirstItem(origin) {
        const manager = this._keyManager;
        manager.setFocusOrigin(origin).setFirstItemActive();
        if (!manager.activeItem && this._directDescendantItems.length) {
            let element = this._directDescendantItems.first._getHostElement().parentElement;
            while (element) {
                if (element.getAttribute('role') === 'menu') {
                    element.focus();
                    break;
                }
                else {
                    element = element.parentElement;
                }
            }
        }
    }
    resetActiveItem() {
        this._keyManager.activeItem?.blur();
        this._keyManager.setActiveItem(-1);
    }
    setElevation(depth) {
        const elevation = Math.min(this._baseElevation + depth, 24);
        const newElevation = `${this._elevationPrefix}${elevation}`;
        const customElevation = Object.keys(this._classList).find((className) => {
            return className.startsWith(this._elevationPrefix);
        });
        if (!customElevation || customElevation === this._previousElevation) {
            if (this._previousElevation) {
                this._classList[this._previousElevation] = false;
            }
            this._classList[newElevation] = true;
            this._previousElevation = newElevation;
        }
    }
    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {
        const classes = this._classList;
        classes['rds-menu-before'] = posX === 'before';
        classes['rds-menu-after'] = posX === 'after';
        classes['rds-menu-above'] = posY === 'above';
        classes['rds-menu-below'] = posY === 'below';
    }
    _startAnimation() {
        this._panelAnimationState = 'enter';
    }
    _resetAnimation() {
        this._panelAnimationState = 'void';
    }
    _onAnimationDone(event) {
        this._animationDone.next(event);
        this._isAnimating = false;
    }
    _onAnimationStart(event) {
        this._isAnimating = true;
        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    }
    _updateDirectDescendants() {
        this._allItems.changes
            .pipe(startWith(this._allItems), takeUntilDestroyed(this.destroyRef))
            .subscribe((items) => {
            this._directDescendantItems.reset(items.filter((item) => item._parentMenu === this));
            this._directDescendantItems.notifyOnChanges();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsMenuComponent, selector: "rds-menu", inputs: { backdrop: "backdrop", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], size: "size", xPosition: "xPosition", yPosition: "yPosition", overlapTrigger: ["overlapTrigger", "overlapTrigger", booleanAttribute], panelClass: ["class", "panelClass"] }, outputs: { closed: "closed" }, host: { listeners: { "focus": "focus()" }, properties: { "attr.aria-label": "this.attrAriaLabel", "attr.aria-labelledby": "this.attrAriaLabelledBy", "attr.aria-describedby": "this.attrAriaDescribedBy", "tabIndex": "this.tabIndex" } }, providers: [{ provide: RDS_MENU_PANEL, useExisting: RdsMenuComponent }], queries: [{ propertyName: "lazyContent", first: true, predicate: RDS_MENU_CONTENT, descendants: true }, { propertyName: "_allItems", predicate: RdsMenuItemComponent, descendants: true }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: TemplateRef, descendants: true }], exportAs: ["rdsMenu"], ngImport: i0, template: ` <ng-template>
    <div
      class="rds-menu-panel rds-menu-panel--{{ size }}"
      [id]="panelId"
      [ngClass]="_classList"
      (keydown)="_handleKeydown($event)"
      (click)="closed.emit('click')"
      [@transformMenu]="_panelAnimationState"
      (@transformMenu.start)="_onAnimationStart($event)"
      (@transformMenu.done)="_onAnimationDone($event)"
      tabindex="-1"
      role="menu"
      [attr.aria-label]="ariaLabel || null"
      [attr.aria-labelledby]="ariaLabelledby || null"
      [attr.aria-describedby]="ariaDescribedby || null"
    >
      <div class="rds-menu-content">
        <ng-content />
      </div>
    </div>
  </ng-template>`, isInline: true, styles: ["rds-menu{display:none}.rds-menu-panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;min-width:104px;max-width:260px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 40px);border-radius:2px;outline:0;min-height:64px}.rds-menu-panel.ng-animating{pointer-events:none}.rds-menu-panel.rds-menu-panel--l .rds-menu-header,.rds-menu-panel.rds-menu-panel--m .rds-menu-header{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 16px}.rds-menu-panel.rds-menu-panel--s .rds-menu-header{font-size:12px;font-weight:400;line-height:16px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 12px}.rds-menu-content:not(:empty){padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-box)}.rds-menu-separator{height:1px;background:var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}.rds-menu-header{color:var(--rds-color-low-contrast);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}.rds-menu-item-submenu-trigger{padding-right:34px}[dir=rtl] .rds-menu-item-submenu-trigger{padding-right:10px;padding-left:34px}.rds-menu-submenu-icon{position:absolute;top:50%;right:10px;transform:translateY(-50%)}[dir=rtl] .rds-menu-submenu-icon{right:auto;left:10px;transform:translateY(-50%) scaleX(-1)}button.rds-menu-item{width:100%}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [rdsMenuAnimations.transformMenu, rdsMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-menu', template: ` <ng-template>
    <div
      class="rds-menu-panel rds-menu-panel--{{ size }}"
      [id]="panelId"
      [ngClass]="_classList"
      (keydown)="_handleKeydown($event)"
      (click)="closed.emit('click')"
      [@transformMenu]="_panelAnimationState"
      (@transformMenu.start)="_onAnimationStart($event)"
      (@transformMenu.done)="_onAnimationDone($event)"
      tabindex="-1"
      role="menu"
      [attr.aria-label]="ariaLabel || null"
      [attr.aria-labelledby]="ariaLabelledby || null"
      [attr.aria-describedby]="ariaDescribedby || null"
    >
      <div class="rds-menu-content">
        <ng-content />
      </div>
    </div>
  </ng-template>`, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'rdsMenu', animations: [rdsMenuAnimations.transformMenu, rdsMenuAnimations.fadeInItems], providers: [{ provide: RDS_MENU_PANEL, useExisting: RdsMenuComponent }], styles: ["rds-menu{display:none}.rds-menu-panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;min-width:104px;max-width:260px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 40px);border-radius:2px;outline:0;min-height:64px}.rds-menu-panel.ng-animating{pointer-events:none}.rds-menu-panel.rds-menu-panel--l .rds-menu-header,.rds-menu-panel.rds-menu-panel--m .rds-menu-header{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 16px}.rds-menu-panel.rds-menu-panel--s .rds-menu-header{font-size:12px;font-weight:400;line-height:16px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 12px}.rds-menu-content:not(:empty){padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-box)}.rds-menu-separator{height:1px;background:var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}.rds-menu-header{color:var(--rds-color-low-contrast);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}.rds-menu-item-submenu-trigger{padding-right:34px}[dir=rtl] .rds-menu-item-submenu-trigger{padding-right:10px;padding-left:34px}.rds-menu-submenu-icon{position:absolute;top:50%;right:10px;transform:translateY(-50%)}[dir=rtl] .rds-menu-submenu-icon{right:auto;left:10px;transform:translateY(-50%) scaleX(-1)}button.rds-menu-item{width:100%}\n"] }]
        }], propDecorators: { _allItems: [{
                type: ContentChildren,
                args: [RdsMenuItemComponent, { descendants: true }]
            }], attrAriaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], attrAriaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], attrAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], backdrop: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], size: [{
                type: Input
            }], xPosition: [{
                type: Input
            }], yPosition: [{
                type: Input
            }], templateRef: [{
                type: ViewChild,
                args: [TemplateRef]
            }], lazyContent: [{
                type: ContentChild,
                args: [RDS_MENU_CONTENT]
            }], overlapTrigger: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], panelClass: [{
                type: Input,
                args: ['class']
            }], closed: [{
                type: Output
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }] } });

const RDS_MENU_SCROLL_STRATEGY = new InjectionToken('RDS_MENU_SCROLL_STRATEGY');
function RDS_MENU_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
const RDS_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: RDS_MENU_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: RDS_MENU_SCROLL_STRATEGY_FACTORY,
};
const MENU_PANEL_TOP_PADDING = 8;
const passiveEventListenerOptions$1 = normalizePassiveListenerOptions({
    passive: true,
});
class RdsMenuTriggerDirective {
    get _ariaExpanded() {
        return this.menuOpen || null;
    }
    get _ariaControl() {
        return this.menuOpen ? this.menu.panelId : null;
    }
    get menu() {
        return this._menu;
    }
    set menu(menu) {
        if (menu === this._menu) {
            return;
        }
        this._menu = menu;
        this._menuCloseSubscription.unsubscribe();
        if (menu) {
            if (menu === this._parentMenu) {
                throwRdsMenuRecursiveError();
            }
            this._menuCloseSubscription = menu.closed.subscribe((reason) => {
                this._destroyMenu(reason);
                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {
                    this._parentMenu.closed.emit(reason);
                }
            });
        }
    }
    constructor() {
        this.overlay = inject(Overlay);
        this.element = inject(ElementRef);
        this.viewContainerRef = inject(ViewContainerRef);
        this.scrollStrategy = inject(RDS_MENU_SCROLL_STRATEGY);
        this.parentMenu = inject(RDS_MENU_PANEL, { optional: true });
        this.menuItemInstance = inject(RdsMenuItemComponent, {
            optional: true,
            self: true,
        });
        this._dir = inject(Directionality, {
            optional: true,
        });
        this.focusMonitor = inject(FocusMonitor, { optional: true });
        this.rdsMenuTriggerRestoreFocus = true;
        this.menuOpened = new EventEmitter();
        this.menuClosed = new EventEmitter();
        this._ariaHaspopup = true;
        this.class = 'rds-menu-trigger';
        this._openedBy = undefined;
        this._overlayRef = null;
        this._menuOpen = false;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._hoverSubscription = Subscription.EMPTY;
        this._menuCloseSubscription = Subscription.EMPTY;
        this._parentMenu = this.parentMenu instanceof RdsMenuComponent ? this.parentMenu : undefined;
        this._handleTouchStart = (event) => {
            if (!isFakeTouchstartFromScreenReader(event)) {
                this._openedBy = 'touch';
            }
        };
        this.element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions$1);
        if (this.menuItemInstance) {
            this.menuItemInstance.hasChildItems = this.triggersSubmenu();
        }
    }
    ngAfterContentInit() {
        this._checkMenu();
        this._handleHover();
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        this.element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions$1);
        this._menuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
        this._hoverSubscription.unsubscribe();
    }
    get menuOpen() {
        return this._menuOpen;
    }
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    triggersSubmenu() {
        return !!(this.menuItemInstance && this._parentMenu);
    }
    toggleMenu() {
        return this._menuOpen ? this.closeMenu() : this.openMenu();
    }
    openMenu() {
        if (this._menuOpen) {
            return;
        }
        this._checkMenu();
        const overlayRef = this._createOverlay();
        const overlayConfig = overlayRef.getConfig();
        this._setPosition(overlayConfig.positionStrategy);
        overlayConfig.hasBackdrop = !this.triggersSubmenu();
        overlayRef.attach(this._getPortal());
        if (this.menu.lazyContent) {
            this.menu.lazyContent.attach(this.rdsMenuTriggerData);
        }
        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());
        this._initMenu();
        if (this.menu instanceof RdsMenuComponent) {
            this.menu._startAnimation();
        }
    }
    closeMenu() {
        this.menu.closed.emit();
    }
    focus(origin, options) {
        if (this.focusMonitor && origin) {
            this.focusMonitor.focusVia(this.element, origin, options);
        }
        else {
            this.element.nativeElement.focus(options);
        }
    }
    updatePosition() {
        this._overlayRef?.updatePosition();
    }
    _destroyMenu(reason) {
        if (!this._overlayRef || !this.menuOpen) {
            return;
        }
        const menu = this.menu;
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
        if (this.rdsMenuTriggerRestoreFocus &&
            (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {
            this.focus(this._openedBy);
        }
        this._openedBy = undefined;
        if (menu instanceof RdsMenuComponent) {
            menu._resetAnimation();
            if (menu.lazyContent) {
                menu._animationDone
                    .pipe(filter((event) => event.toState === 'void'), take(1), takeUntil(menu.lazyContent._attached))
                    .subscribe({
                    next: () => menu.lazyContent.detach(),
                    complete: () => this._setIsMenuOpen(false),
                });
            }
            else {
                this._setIsMenuOpen(false);
            }
        }
        else {
            this._setIsMenuOpen(false);
            if (menu.lazyContent) {
                menu.lazyContent.detach();
            }
        }
    }
    _initMenu() {
        this.menu.parentMenu = this.triggersSubmenu()
            ? this._parentMenu
            : undefined;
        this.menu.direction = this.dir;
        this._setMenuElevation();
        this.menu.focusFirstItem(this._openedBy || 'program');
        this._setIsMenuOpen(true);
    }
    _setMenuElevation() {
        if (this.menu.setElevation) {
            let depth = 0;
            let parentMenu = this.menu.parentMenu;
            while (parentMenu) {
                depth++;
                parentMenu = parentMenu.parentMenu;
            }
            this.menu.setElevation(depth);
        }
    }
    _setIsMenuOpen(isOpen) {
        this._menuOpen = isOpen;
        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
        if (this.triggersSubmenu() && this.menuItemInstance) {
            this.menuItemInstance.activated = isOpen;
        }
    }
    _checkMenu() {
        if (!this.menu) {
            throwRdsMenuMissingError();
        }
    }
    _createOverlay() {
        const config = this._getOverlayConfig();
        if (!this._overlayRef ||
            this._overlayRef.getConfig().backdropClass !== config.backdropClass ||
            this._overlayRef.getConfig().panelClass !== config.panelClass ||
            this._overlayRef.getConfig().direction !== config.direction) {
            if (this._overlayRef) {
                this._overlayRef.dispose();
            }
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this.overlay.create(config);
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this.overlay
                .position()
                .flexibleConnectedTo(this.element)
                .withLockedPosition()
                .withGrowAfterOpen()
                .withTransformOriginOn('.rds-menu-panel, .rds-mdc-menu-panel'),
            backdropClass: this.menu.backdrop === 'transparent'
                ? 'cdk-overlay-transparent-backdrop'
                : undefined,
            panelClass: this.menu.overlayPanelClass,
            scrollStrategy: this.scrollStrategy(),
            direction: this._dir,
        });
    }
    _subscribeToPositions(position) {
        if (this.menu.setPositionClasses) {
            position.positionChanges.subscribe((change) => {
                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                if (this.menu.setPositionClasses) {
                    this.menu.setPositionClasses(posX, posY);
                }
            });
        }
    }
    _setPosition(positionStrategy) {
        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];
        const [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];
        let [originY, originFallbackY] = [overlayY, overlayFallbackY];
        let [overlayX, overlayFallbackX] = [originX, originFallbackX];
        let offsetY = 0;
        if (this.triggersSubmenu()) {
            overlayFallbackX = originX =
                this.menu.xPosition === 'before' ? 'start' : 'end';
            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
            offsetY =
                overlayY === 'bottom'
                    ? MENU_PANEL_TOP_PADDING
                    : -MENU_PANEL_TOP_PADDING;
        }
        else if (!this.menu.overlapTrigger) {
            originY = overlayY === 'top' ? 'bottom' : 'top';
            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        }
        positionStrategy.withPositions([
            { originX, originY, overlayX, overlayY, offsetY },
            {
                originX: originFallbackX,
                originY,
                overlayX: overlayFallbackX,
                overlayY,
                offsetY,
            },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY,
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY,
            },
        ]);
    }
    _menuClosingActions() {
        const backdrop = this._overlayRef
            ? this._overlayRef.backdropClick()
            : EMPTY;
        const detachments = this._overlayRef
            ? this._overlayRef.detachments()
            : EMPTY;
        const parentClose = this._parentMenu ? this._parentMenu.closed : of();
        const hover = this._parentMenu
            ? this._parentMenu._hovered().pipe(filter((active) => active !== this.menuItemInstance), filter(() => this._menuOpen))
            : of();
        return merge(backdrop, parentClose, hover, detachments);
    }
    _handleMousedown(event) {
        if (!isFakeMousedownFromScreenReader(event)) {
            this._openedBy = event.button === 0 ? 'mouse' : undefined;
            if (this.triggersSubmenu()) {
                event.preventDefault();
            }
        }
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        if (keyCode === ENTER || keyCode === SPACE) {
            this._openedBy = 'keyboard';
            if (!['BUTTON', 'A'].includes(this.element.nativeElement.tagName.toUpperCase())) {
                this.openMenu();
            }
        }
        if (this.triggersSubmenu() &&
            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||
                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {
            this._openedBy = 'keyboard';
            this.openMenu();
        }
    }
    _handleClick(event) {
        if (this.triggersSubmenu()) {
            event.stopPropagation();
            this.openMenu();
        }
        else {
            this.toggleMenu();
        }
    }
    _handleHover() {
        if (!this.triggersSubmenu() || !this._parentMenu) {
            return;
        }
        this._hoverSubscription = this._parentMenu
            ._hovered()
            .pipe(filter((active) => active === this.menuItemInstance && !active.disabled), delay(0, asapScheduler))
            .subscribe(() => {
            this._openedBy = 'mouse';
            if (this.menu instanceof RdsMenuComponent && this.menu._isAnimating) {
                const untilHovered = this._parentMenu
                    ? this._parentMenu._hovered()
                    : EMPTY;
                this.menu._animationDone
                    .pipe(take(1), delay(0, asapScheduler), takeUntil(untilHovered))
                    .subscribe(() => this.openMenu());
            }
            else {
                this.openMenu();
            }
        });
    }
    _getPortal() {
        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {
            this._portal = new TemplatePortal(this.menu.templateRef, this.viewContainerRef);
        }
        return this._portal;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsMenuTriggerDirective, selector: "[rds-menu-trigger-for], [rdsMenuTriggerFor]", inputs: { rdsMenuTriggerData: "rdsMenuTriggerData", rdsMenuTriggerRestoreFocus: ["rdsMenuTriggerRestoreFocus", "rdsMenuTriggerRestoreFocus", booleanAttribute], menu: ["rdsMenuTriggerFor", "menu"] }, outputs: { menuOpened: "menuOpened", menuClosed: "menuClosed" }, host: { listeners: { "mousedown": "_handleMousedown($event)", "keydown": "_handleKeydown($event)", "click": "_handleClick($event)" }, properties: { "attr.aria-haspopup": "this._ariaHaspopup", "class": "this.class", "attr.aria-expanded": "this._ariaExpanded", "attr.aria-controls": "this._ariaControl" } }, exportAs: ["rdsMenuTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[rds-menu-trigger-for], [rdsMenuTriggerFor]`,
                    exportAs: 'rdsMenuTrigger',
                }]
        }], ctorParameters: () => [], propDecorators: { rdsMenuTriggerData: [{
                type: Input
            }], rdsMenuTriggerRestoreFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], menuOpened: [{
                type: Output
            }], menuClosed: [{
                type: Output
            }], _ariaHaspopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], _ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _ariaControl: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], menu: [{
                type: Input,
                args: ['rdsMenuTriggerFor']
            }], _handleMousedown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], _handleClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class RdsMenuSeparatorDirective {
    constructor() {
        this.class = 'rds-menu-separator';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuSeparatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsMenuSeparatorDirective, selector: "[rds-menu-separator], [rdsMenuSeparator]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuSeparatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-menu-separator], [rdsMenuSeparator]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsMenuHeaderDirective {
    constructor() {
        this.class = 'rds-menu-header';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsMenuHeaderDirective, selector: "[rds-menu-header], [rdsMenuHeader]", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-menu-header], [rdsMenuHeader]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

const ELEMENTS$2 = [
    RdsMenuComponent,
    RdsMenuItemComponent,
    RdsMenuTriggerDirective,
    RdsMenuContentDirective,
    RdsMenuHeaderDirective,
    RdsMenuSeparatorDirective,
];
class RdsMenuModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuModule, declarations: [RdsMenuComponent,
            RdsMenuItemComponent,
            RdsMenuTriggerDirective,
            RdsMenuContentDirective,
            RdsMenuHeaderDirective,
            RdsMenuSeparatorDirective], imports: [CommonModule,
            BidiModule,
            OverlayModule,
            RdsIconComponent,
            RdsListItemModule], exports: [CdkScrollableModule, RdsMenuComponent,
            RdsMenuItemComponent,
            RdsMenuTriggerDirective,
            RdsMenuContentDirective,
            RdsMenuHeaderDirective,
            RdsMenuSeparatorDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuModule, providers: [RDS_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule,
            BidiModule,
            OverlayModule,
            RdsListItemModule, CdkScrollableModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BidiModule,
                        OverlayModule,
                        RdsIconComponent,
                        RdsListItemModule,
                    ],
                    declarations: [...ELEMENTS$2],
                    exports: [CdkScrollableModule, ...ELEMENTS$2],
                    providers: [RDS_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],
                }]
        }] });

class RdsPaginatorIntl {
    constructor() {
        this.changes = new Subject();
        this.nextPageLabel = 'Next page';
        this.previousPageLabel = 'Previous page';
        this.firstPageLabel = 'First page';
        this.lastPageLabel = 'Last page';
        this.ofPagesLabel = 'of';
        this.getRangeLabel = (page, pageSize, length) => {
            if (length == 0 || pageSize == 0) {
                return `0 of ${length}`;
            }
            length = Math.max(length, 0);
            const startIndex = page * pageSize;
            const endIndex = startIndex < length
                ? Math.min(startIndex + pageSize, length)
                : startIndex + pageSize;
            return `${startIndex + 1} – ${endIndex} of ${length}`;
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorIntl, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
function RDS_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl) {
    return parentIntl || new RdsPaginatorIntl();
}
const RDS_PAGINATOR_INTL_PROVIDER = {
    provide: RdsPaginatorIntl,
    deps: [[new Optional(), new SkipSelf(), RdsPaginatorIntl]],
    useFactory: RDS_PAGINATOR_INTL_PROVIDER_FACTORY,
};

const SCROLL_THROTTLE_MS$1 = 20;
const RDS_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('RDS_TOOLTIP_SCROLL_STRATEGY');
/** @docs-private */
function RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS$1 });
}
/** @docs-private */
const RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: RDS_TOOLTIP_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY,
};
const RDS_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('RDS_TOOLTIP_DEFAULT_OPTIONS', {
    providedIn: 'root',
    factory: RDS_TOOLTIP_DEFAULT_OPTIONS_FACTORY,
});
/** @docs-private */
function RDS_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {
    return {
        showDelay: 0,
        hideDelay: 0,
        touchendHideDelay: 1500,
        hideArrow: false,
    };
}

const tooltipAnimation = {
    tooltipState: trigger('state', [
        state('initial, void, hidden', style({ opacity: 0 })),
        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([
            style({ opacity: 0, offset: 0 }),
            style({ opacity: 0.5, offset: 0.5 }),
            style({ opacity: 1, offset: 1 }),
        ]))),
        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),
    ]),
};

let rdsTooltipCounter = 0;
class RdsTooltipComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.nativeElement = inject(ElementRef).nativeElement;
        this._tooltipArrow = false;
        this._visibility = 'initial';
        // close tooltip on body click
        this._closeOnInteraction = false;
        this._onHide = new Subject();
        this.id = `rdsTooltip-${rdsTooltipCounter++}`;
        this.isModal = false;
    }
    closeOnBodyClick() {
        if (!this.isPopover && this._closeOnInteraction) {
            this.hide();
        }
    }
    get contentIsString() {
        return typeof this._content === 'string';
    }
    get tooltipIconClass() {
        return this._tooltipArrow ? 'rds-tooltip--hide-arrow ' : '';
    }
    ngOnDestroy() {
        this._onHide.complete();
    }
    /**
     * Show tooltip
     * @param delay in ms
     */
    show(delay = 0) {
        // Cancel hide if it is scheduled
        if (this._hideTimeout) {
            clearTimeout(this._hideTimeout);
            this._hideTimeout = null;
        }
        this._closeOnInteraction = !this.isPopover;
        this._showTimeout = setTimeout(() => {
            this._visibility = 'visible';
            this._showTimeout = null;
            // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyway
            this._markForCheck();
        }, delay);
    }
    /**
     * Hide tooltip
     * @param delay in ms
     */
    hide(delay = 0) {
        // Cancel show if it is scheduled
        if (this._showTimeout) {
            clearTimeout(this._showTimeout);
            this._showTimeout = null;
        }
        this._hideTimeout = setTimeout(() => {
            this._visibility = 'hidden';
            this._hideTimeout = null;
            // Mark for check so if any parent component has set the
            // ChangeDetectionStrategy to OnPush it will be checked anyway
            this._markForCheck();
        }, delay);
    }
    getFirstFocusableElement() {
        return getFirstFocusableChild(this.nativeElement);
    }
    getLastFocusableElement() {
        return this.closeButton?.nativeElement ?? null;
    }
    afterHidden() {
        return this._onHide;
    }
    isVisible() {
        return this._visibility === 'visible';
    }
    onCloseButtonClick() {
        this.triggerDirectiveRef?.hide();
    }
    _animationStart() {
        this._closeOnInteraction = false;
    }
    _animationDone(event) {
        const toState = event.toState;
        if (toState === 'hidden' && !this.isVisible()) {
            this._onHide.next();
        }
        if (toState === 'visible' || toState === 'hidden') {
            this._closeOnInteraction = !this.isPopover;
        }
    }
    _markForCheck() {
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsTooltipComponent, selector: "rds-tooltip", host: { listeners: { "body:click": "closeOnBodyClick()" }, properties: { "attr.role": "this.role", "attr.id": "this.id", "attr.aria-modal": "this.isModal" } }, viewQueries: [{ propertyName: "closeButton", first: true, predicate: ["closeButton"], descendants: true, read: ElementRef }], ngImport: i0, template: "<div\n  [ngClass]=\"_tooltipClass\"\n  [className]=\"\n    'rds-tooltip rds-tooltip--' +\n    _position +\n    tooltipIconClass +\n    (isPopover ? ' rds-popover' : '')\n  \"\n  [@state]=\"_visibility\"\n  (@state.start)=\"_animationStart()\"\n  (@state.done)=\"_animationDone($event)\"\n>\n  @if (contentIsString) {\n    {{ _content }}\n  } @else {\n    <ng-container *ngTemplateOutlet=\"$any(_content)\" />\n  }\n  @if (isPopover && showCloseButton) {\n    <button\n      #closeButton\n      class=\"rds-popover-close-button\"\n      rds-icon-button\n      aria-label=\"close\"\n      (click)=\"onCloseButtonClick()\"\n    >\n      <rds-icon namespace=\"filled\" icon=\"close\" />\n    </button>\n  }\n</div>\n", styles: [".rds-tooltip{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;transform-origin:center bottom;border-radius:2px;padding:8px 12px;background:var(--rds-color-tooltip-bg);text-align:center;color:var(--rds-color-high-contrast-reversed)}.rds-tooltip:before{content:\"\";position:absolute;width:0;height:0}.rds-tooltip.rds-tooltip--top-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-tooltip-bg);bottom:-6px;left:12px}.rds-tooltip.rds-tooltip--top-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-tooltip-bg);bottom:-6px;left:calc(50% - 6px)}.rds-tooltip.rds-tooltip--top-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-tooltip-bg);bottom:-6px;right:12px}.rds-tooltip.rds-tooltip--right-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-tooltip-bg);left:-6px;top:12px}.rds-tooltip.rds-tooltip--right-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-tooltip-bg);left:-6px;top:calc(50% - 6px)}.rds-tooltip.rds-tooltip--right-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-tooltip-bg);left:-6px;bottom:12px}.rds-tooltip.rds-tooltip--bottom-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-tooltip-bg);top:-6px;right:12px}.rds-tooltip.rds-tooltip--bottom-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-tooltip-bg);top:-6px;left:calc(50% - 6px)}.rds-tooltip.rds-tooltip--bottom-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-tooltip-bg);top:-6px;left:12px}.rds-tooltip.rds-tooltip--left-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-tooltip-bg);right:-6px;bottom:12px}.rds-tooltip.rds-tooltip--left-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-tooltip-bg);right:-6px;top:calc(50% - 6px)}.rds-tooltip.rds-tooltip--left-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-tooltip-bg);right:-6px;top:12px}.rds-tooltip.rds-tooltip--hide-arrow:before{border:0}.rds-popover{box-shadow:0 0 2px #00000029,0 12px 40px #0000002b;background:var(--rds-color-high-contrast-reversed);padding:24px}.rds-popover .rds-popover-close-button{position:absolute;top:24px;right:24px}.rds-popover .rds-popover-header.rds-popover-with-close-button{margin-right:24px}.rds-popover.rds-tooltip--top-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--top-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--top-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--right-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--right-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--right-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--bottom-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--bottom-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--bottom-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--left-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--left-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--left-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-high-contrast-reversed)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], animations: [tooltipAnimation.tooltipState], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-tooltip', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [tooltipAnimation.tooltipState], template: "<div\n  [ngClass]=\"_tooltipClass\"\n  [className]=\"\n    'rds-tooltip rds-tooltip--' +\n    _position +\n    tooltipIconClass +\n    (isPopover ? ' rds-popover' : '')\n  \"\n  [@state]=\"_visibility\"\n  (@state.start)=\"_animationStart()\"\n  (@state.done)=\"_animationDone($event)\"\n>\n  @if (contentIsString) {\n    {{ _content }}\n  } @else {\n    <ng-container *ngTemplateOutlet=\"$any(_content)\" />\n  }\n  @if (isPopover && showCloseButton) {\n    <button\n      #closeButton\n      class=\"rds-popover-close-button\"\n      rds-icon-button\n      aria-label=\"close\"\n      (click)=\"onCloseButtonClick()\"\n    >\n      <rds-icon namespace=\"filled\" icon=\"close\" />\n    </button>\n  }\n</div>\n", styles: [".rds-tooltip{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;transform-origin:center bottom;border-radius:2px;padding:8px 12px;background:var(--rds-color-tooltip-bg);text-align:center;color:var(--rds-color-high-contrast-reversed)}.rds-tooltip:before{content:\"\";position:absolute;width:0;height:0}.rds-tooltip.rds-tooltip--top-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-tooltip-bg);bottom:-6px;left:12px}.rds-tooltip.rds-tooltip--top-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-tooltip-bg);bottom:-6px;left:calc(50% - 6px)}.rds-tooltip.rds-tooltip--top-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-tooltip-bg);bottom:-6px;right:12px}.rds-tooltip.rds-tooltip--right-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-tooltip-bg);left:-6px;top:12px}.rds-tooltip.rds-tooltip--right-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-tooltip-bg);left:-6px;top:calc(50% - 6px)}.rds-tooltip.rds-tooltip--right-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-tooltip-bg);left:-6px;bottom:12px}.rds-tooltip.rds-tooltip--bottom-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-tooltip-bg);top:-6px;right:12px}.rds-tooltip.rds-tooltip--bottom-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-tooltip-bg);top:-6px;left:calc(50% - 6px)}.rds-tooltip.rds-tooltip--bottom-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-tooltip-bg);top:-6px;left:12px}.rds-tooltip.rds-tooltip--left-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-tooltip-bg);right:-6px;bottom:12px}.rds-tooltip.rds-tooltip--left-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-tooltip-bg);right:-6px;top:calc(50% - 6px)}.rds-tooltip.rds-tooltip--left-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-tooltip-bg);right:-6px;top:12px}.rds-tooltip.rds-tooltip--hide-arrow:before{border:0}.rds-popover{box-shadow:0 0 2px #00000029,0 12px 40px #0000002b;background:var(--rds-color-high-contrast-reversed);padding:24px}.rds-popover .rds-popover-close-button{position:absolute;top:24px;right:24px}.rds-popover .rds-popover-header.rds-popover-with-close-button{margin-right:24px}.rds-popover.rds-tooltip--top-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--top-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--top-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-top:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--right-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--right-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--right-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-right:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--bottom-right:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--bottom-center:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--bottom-left:before{border-left:8px solid transparent;border-right:8px solid transparent;border-bottom:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--left-bottom:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--left-center:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-high-contrast-reversed)}.rds-popover.rds-tooltip--left-top:before{border-top:8px solid transparent;border-bottom:8px solid transparent;border-left:8px solid var(--rds-color-high-contrast-reversed)}\n"] }]
        }], propDecorators: { closeButton: [{
                type: ViewChild,
                args: ['closeButton', { read: ElementRef }]
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], isModal: [{
                type: HostBinding,
                args: ['attr.aria-modal']
            }], closeOnBodyClick: [{
                type: HostListener,
                args: ['body:click']
            }] } });

const PRESS_DELAY = 500;
/** Options used to bind passive event listeners. */
const passiveListenerOptions = normalizePassiveListenerOptions({
    passive: true,
});
const rdsTooltipPositionToRdsTooltipOverlayConnectionPosition = {
    'top-left': { overlayX: 'start', overlayY: 'bottom', offsetY: -10 },
    'top-center': { overlayX: 'center', overlayY: 'bottom', offsetY: -10 },
    'top-right': { overlayX: 'end', overlayY: 'bottom', offsetY: -10 },
    'right-top': { overlayX: 'start', overlayY: 'top', offsetX: 10 },
    'right-center': { overlayX: 'start', overlayY: 'center', offsetX: 10 },
    'right-bottom': { overlayX: 'start', overlayY: 'bottom', offsetX: 10 },
    'bottom-right': { overlayX: 'end', overlayY: 'top', offsetY: 10 },
    'bottom-center': { overlayX: 'center', overlayY: 'top', offsetY: 10 },
    'bottom-left': { overlayX: 'start', overlayY: 'top', offsetY: 10 },
    'left-bottom': { overlayX: 'end', overlayY: 'bottom', offsetX: -10 },
    'left-center': { overlayX: 'end', overlayY: 'center', offsetX: -10 },
    'left-top': { overlayX: 'end', overlayY: 'top', offsetX: -10 },
};
const rdsTooltipPositionToRdsTooltipOverlayConnectionPositionWithIcon = {
    'top-left': { overlayX: 'start', overlayY: 'bottom', offsetY: -4 },
    'top-center': { overlayX: 'center', overlayY: 'bottom', offsetY: -4 },
    'top-right': { overlayX: 'end', overlayY: 'bottom', offsetY: -4 },
    'right-top': { overlayX: 'start', overlayY: 'top', offsetX: 4 },
    'right-center': { overlayX: 'start', overlayY: 'center', offsetX: 4 },
    'right-bottom': { overlayX: 'start', overlayY: 'bottom', offsetX: 4 },
    'bottom-right': { overlayX: 'end', overlayY: 'top', offsetY: 4 },
    'bottom-center': { overlayX: 'center', overlayY: 'top', offsetY: 4 },
    'bottom-left': { overlayX: 'start', overlayY: 'top', offsetY: 4 },
    'left-bottom': { overlayX: 'end', overlayY: 'bottom', offsetX: -4 },
    'left-center': { overlayX: 'end', overlayY: 'center', offsetX: -4 },
    'left-top': { overlayX: 'end', overlayY: 'top', offsetX: -4 },
};
const rdsTooltipPositionToOriginConnectionPosition = {
    'top-left': { originX: 'start', originY: 'top' },
    'top-center': { originX: 'center', originY: 'top' },
    'top-right': { originX: 'end', originY: 'top' },
    'right-top': { originX: 'end', originY: 'top' },
    'right-center': { originX: 'end', originY: 'center' },
    'right-bottom': { originX: 'end', originY: 'bottom' },
    'bottom-right': { originX: 'end', originY: 'bottom' },
    'bottom-center': { originX: 'center', originY: 'bottom' },
    'bottom-left': { originX: 'start', originY: 'bottom' },
    'left-bottom': { originX: 'start', originY: 'bottom' },
    'left-center': { originX: 'start', originY: 'center' },
    'left-top': { originX: 'start', originY: 'top' },
};
class RdsTooltipDirective {
    set hideArrow(shouldHideArrow) {
        if (shouldHideArrow === null || shouldHideArrow === undefined) {
            this._hideArrow = null;
        }
        else {
            this._hideArrow = booleanAttribute(shouldHideArrow);
        }
    }
    get hideArrow() {
        return this._hideArrow !== null
            ? this._hideArrow
            : this.defaultOptions?.hideArrow || false;
    }
    get position() {
        return this._position;
    }
    set position(value) {
        if (value !== this._position) {
            this._position = value;
            if (this._overlayRef) {
                this.updatePosition();
                if (this._tooltipInstance) {
                    this._tooltipInstance.show();
                }
                this._overlayRef.updatePosition();
            }
        }
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this._disabled) {
            this.hide(0);
        }
        else {
            this.setupPointerEnterEventsIfNeeded();
        }
    }
    get disabled() {
        return this._disabled;
    }
    get content() {
        return this._content;
    }
    set content(value) {
        this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this.tooltipDescription);
        this._content = value;
        if (!this._content && this.isTooltipVisible()) {
            this.hide(0);
        }
        else {
            this.setupPointerEnterEventsIfNeeded();
            this.updateTooltipContent();
            this.ngZone.runOutsideAngular(() => {
                // The `AriaDescriber` has some functionality that avoids adding a description if it's the
                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger
                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the
                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.
                Promise.resolve().then(() => {
                    this.ariaDescriber.describe(this.elementRef.nativeElement, this.tooltipDescription);
                });
            });
        }
    }
    get tooltipClass() {
        return this._tooltipClass;
    }
    set tooltipClass(value) {
        this._tooltipClass = value;
        if (this._tooltipInstance) {
            if (this.shouldHideArrow()) {
                this._tooltipClass = 'rds-tooltip--hide-arrow';
            }
            this.setTooltipClassIfTooltipInstanceExists(this._tooltipClass);
        }
    }
    get tooltipDescription() {
        return this.ariaDescription
            ? this.ariaDescription
            : typeof this.content === 'string'
                ? this.content
                : '';
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(v) {
        const newValue = booleanAttribute(v);
        if (newValue !== this._hasBackdrop) {
            this._hasBackdrop = newValue;
            // whole overlay has to be recreated
            if (this._overlayRef) {
                this._overlayRef.dispose();
                this._overlayRef = null;
                this._tooltipInstance = null;
            }
        }
    }
    get showCloseButton() {
        return this._showCloseButton;
    }
    set showCloseButton(v) {
        this._showCloseButton = booleanAttribute(v);
    }
    constructor() {
        this.overlay = inject(Overlay);
        this.elementRef = inject(ElementRef);
        this.scrollDispatcher = inject(ScrollDispatcher$1);
        this.viewContainerRef = inject(ViewContainerRef);
        this.ngZone = inject(NgZone);
        this.platform = inject(Platform);
        this.ariaDescriber = inject(AriaDescriber);
        this.renderer = inject(Renderer2);
        this.destroyRef = inject(DestroyRef);
        this.focusMonitor = inject(FocusMonitor);
        this.scrollStrategy = inject(RDS_TOOLTIP_SCROLL_STRATEGY);
        this.defaultOptions = inject(RDS_TOOLTIP_DEFAULT_OPTIONS, {
            optional: true,
        });
        this.document = inject(DOCUMENT);
        this.isPopover = false;
        this._hasBackdrop = false;
        this._showCloseButton = true;
        /** Manually-bound passive event listeners. */
        this._passiveListeners = [];
        this._disabled = false;
        this._viewInitialized = false;
        this._pointerExitEventsInitialized = false;
        this._content = '';
        this._position = 'bottom-center';
        this.ariaDescription = '';
        this._hideArrow = null;
        /**
         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive
         * uses a long press gesture to show and hide, however it can conflict with the native browser
         * gestures. To work around the conflict, Angular Material disables native gestures on the
         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable
         * elements). The different values for this option configure the touch event handling as follows:
         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native
         *   browser gestures on particular elements. In particular, it allows text selection on inputs
         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.
         * - `on` - Enables touch gestures for all elements and disables native
         *   browser gestures with no exceptions.
         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from
         *   showing on touch devices.
         */
        this.touchGestures = 'auto';
        this.ariaControls = null;
        this.ariaExpanded = null;
        this.handleHostKeydown = (event) => {
            if (this.isTooltipVisible() &&
                event.keyCode === ESCAPE &&
                !hasModifierKey(event)) {
                event.preventDefault();
                event.stopPropagation();
                this.ngZone.run(() => this.hide(0));
            }
        };
        if (this.defaultOptions) {
            if (this.defaultOptions.position) {
                this.position = this.defaultOptions.position;
            }
            if (this.defaultOptions.touchGestures) {
                this.touchGestures = this.defaultOptions.touchGestures;
            }
            if (this.defaultOptions.showDelay) {
                this.showDelay = this.defaultOptions.showDelay;
            }
            if (this.defaultOptions.hideDelay) {
                this.hideDelay = this.defaultOptions.hideDelay;
            }
        }
        this.ngZone.runOutsideAngular(() => {
            this.elementRef.nativeElement.addEventListener('keydown', this.handleHostKeydown);
        });
    }
    ngAfterViewInit() {
        this._viewInitialized = true;
        this.setupPointerEnterEventsIfNeeded();
        this.setupFocusMonitor();
    }
    ngOnDestroy() {
        const nativeElement = this.elementRef.nativeElement;
        clearTimeout(this._touchstartTimeout);
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._tooltipInstance = null;
        }
        // Clean up the event listeners set in the constructor
        nativeElement.removeEventListener('keydown', this.handleHostKeydown);
        this._passiveListeners.forEach(([event, listener]) => {
            nativeElement.removeEventListener(event, listener, passiveListenerOptions);
        });
        this._passiveListeners.length = 0;
        this.ariaDescriber.removeDescription(nativeElement, this.tooltipDescription);
        this.focusMonitor.stopMonitoring(nativeElement);
    }
    show(delay = this.showDelay) {
        if (this.disabled ||
            !this.content ||
            (this.isTooltipVisible() &&
                !this._tooltipInstance?._showTimeout &&
                !this._tooltipInstance?._hideTimeout)) {
            return;
        }
        const overlayRef = this.createOverlay();
        this.detachTooltip();
        this._portal =
            this._portal ||
                new ComponentPortal(RdsTooltipComponent, this.viewContainerRef);
        this._tooltipInstance = overlayRef.attach(this._portal).instance;
        this._tooltipInstance._position = this.position;
        this._tooltipInstance.isPopover = this.isPopover;
        if (this.isPopover) {
            this._tooltipInstance.triggerDirectiveRef = this;
            this._tooltipInstance.role = 'dialog';
            this._tooltipInstance.isModal = this.hasBackdrop;
            this._tooltipInstance.showCloseButton = this.showCloseButton;
            this.ariaControls = this._tooltipInstance.id;
            this.ariaExpanded = true;
        }
        if (this.shouldHideArrow()) {
            this._tooltipInstance._tooltipArrow = true;
        }
        this._tooltipInstance
            .afterHidden()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.detachTooltip();
            if (this.isPopover) {
                this.restoreTriggerFocus();
            }
        });
        this.setTooltipClassIfTooltipInstanceExists(this._tooltipClass);
        this.updateTooltipContent();
        this._tooltipInstance.show(delay);
        this.handleFocus();
    }
    /**
     * Hides the tooltip
     * @param delay ms
     */
    hide(delay = this.hideDelay) {
        if (this._tooltipInstance) {
            this._tooltipInstance.hide(delay);
        }
        if (this.isPopover) {
            this.ariaControls = null;
            this.ariaExpanded = false;
        }
    }
    /**
     * Shows/hides tooltip
     */
    toggle() {
        this.isTooltipVisible() ? this.hide() : this.show();
    }
    isHideArrowSet() {
        return this._hideArrow !== null && this._hideArrow !== undefined;
    }
    isTooltipVisible() {
        return !!this._tooltipInstance && this._tooltipInstance.isVisible();
    }
    createOverlay() {
        if (this._overlayRef) {
            return this._overlayRef;
        }
        const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
        // Create connected position strategy that listens for scroll events to reposition.
        const strategy = this.overlay
            .position()
            .flexibleConnectedTo(this.elementRef)
            .withTransformOriginOn('.rds-tooltip')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withScrollableContainers(scrollableAncestors);
        strategy.positionChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((change) => {
            if (this._tooltipInstance) {
                this.ngZone.run(() => this.updateTooltipStyling(change.connectionPair));
                if (change.scrollableViewProperties.isOverlayClipped &&
                    this._tooltipInstance.isVisible()) {
                    // After position changes occur and the overlay is clipped by
                    // a parent scrollable then close the tooltip.
                    this.ngZone.run(() => this.hide(0));
                }
            }
        });
        this._overlayRef = this.overlay.create({
            positionStrategy: strategy,
            panelClass: 'rds-tooltip-panel',
            scrollStrategy: this.scrollStrategy(),
            backdropClass: 'cdk-overlay-transparent-backdrop',
            hasBackdrop: this.isPopover && this.hasBackdrop,
        });
        this.updatePosition();
        this._overlayRef
            .keydownEvents()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(this.handleHostKeydown);
        this._overlayRef
            .backdropClick()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.hide());
        this._overlayRef
            .detachments()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.detachTooltip();
        });
        return this._overlayRef;
    }
    // for override by popover
    handleFocus() {
        return;
    }
    updateTooltipStyling(connectionPair) {
        if (!this._tooltipInstance) {
            return;
        }
        const xRename = { start: 'left', center: 'center', end: 'right' };
        const originX = xRename[connectionPair.originX];
        const originY = connectionPair.originY;
        const isYFirst = connectionPair.originX === connectionPair.overlayX;
        const newPosition = (isYFirst ? `${originY}-${originX}` : `${originX}-${originY}`);
        if (newPosition !== this._tooltipInstance._position) {
            this._tooltipInstance._position = newPosition;
            this._tooltipInstance._markForCheck();
        }
    }
    restoreTriggerFocus() {
        this.focusMonitor.focusVia(this.elementRef, this.origin);
    }
    detachTooltip() {
        if (this._overlayRef && this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
        this._tooltipInstance = null;
    }
    updatePosition() {
        const position = this._overlayRef?.getConfig()
            .positionStrategy;
        const origin = this.getOrigin();
        const overlay = this.getOverlayPosition();
        if (this.position && this._tooltipInstance) {
            this._tooltipInstance._position = this.position;
        }
        position.withPositions([
            { ...origin.main, ...overlay.main },
            { ...origin.fallback, ...overlay.fallback },
        ]);
    }
    getOrigin() {
        const originPosition = rdsTooltipPositionToOriginConnectionPosition[this.position];
        const { x, y } = this.invertPosition(originPosition.originX, originPosition.originY);
        return {
            main: originPosition,
            fallback: { originX: x, originY: y },
        };
    }
    getOverlayPosition() {
        const overlayPosition = this.shouldHideArrow()
            ? rdsTooltipPositionToRdsTooltipOverlayConnectionPositionWithIcon[this.position]
            : rdsTooltipPositionToRdsTooltipOverlayConnectionPosition[this.position];
        const { x, y } = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);
        return {
            main: overlayPosition,
            fallback: {
                overlayX: x,
                overlayY: y,
                ...this.invertOffset(overlayPosition),
            },
        };
    }
    updateTooltipContent() {
        if (this._tooltipInstance) {
            this._tooltipInstance._content = this.content;
            this._tooltipInstance._markForCheck();
            this.ngZone.onMicrotaskEmpty
                .pipe(take(1), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                if (this._tooltipInstance) {
                    this._overlayRef?.updatePosition();
                }
                const overlayTemplate = this._overlayRef?.hostElement;
                const header = overlayTemplate?.querySelector('.rds-popover-header');
                if (header && this.showCloseButton) {
                    this.renderer.addClass(header, 'rds-popover-with-close-button');
                }
            });
        }
    }
    setTooltipClassIfTooltipInstanceExists(tooltipClass) {
        if (this._tooltipInstance) {
            this._tooltipInstance._tooltipClass = tooltipClass;
            this._tooltipInstance._markForCheck();
        }
    }
    invertPosition(x, y) {
        if (this.position.startsWith('top') || this.position.startsWith('bottom')) {
            if (y === 'top') {
                y = 'bottom';
            }
            else if (y === 'bottom') {
                y = 'top';
            }
        }
        else {
            if (x === 'end') {
                x = 'start';
            }
            else if (x === 'start') {
                x = 'end';
            }
        }
        return { x, y };
    }
    invertOffset({ offsetX, offsetY, }) {
        const result = {};
        if (offsetX) {
            result.offsetX = offsetX * -1;
        }
        if (offsetY) {
            result.offsetY = offsetY * -1;
        }
        return result;
    }
    setupFocusMonitor() {
        this.focusMonitor
            .monitor(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((origin) => {
            if (this.isPopover) {
                this.origin = origin;
                return;
            }
            // Note that the focus monitor runs outside the Angular zone.
            if (!origin) {
                this.ngZone.run(() => this.hide(0));
            }
            else if (origin === 'keyboard') {
                this.ngZone.run(() => this.show());
            }
        });
    }
    setupPointerEnterEventsIfNeeded() {
        if (this.isPopover ||
            this._disabled ||
            !this.content ||
            !this._viewInitialized ||
            this._passiveListeners.length) {
            return;
        }
        if (this.platformSupportsMouseEvents()) {
            this._passiveListeners.push([
                'mouseenter',
                () => {
                    this.setupPointerExitEventsIfNeeded();
                    this.show();
                },
            ]);
        }
        else if (this.touchGestures !== 'off') {
            this.disableNativeGestures();
            this._passiveListeners.push([
                'touchstart',
                () => {
                    this.setupPointerExitEventsIfNeeded();
                    clearTimeout(this._touchstartTimeout);
                    this._touchstartTimeout = setTimeout(() => this.show(), PRESS_DELAY);
                },
            ]);
        }
        this.addListeners(this._passiveListeners);
    }
    setupPointerExitEventsIfNeeded() {
        if (this._pointerExitEventsInitialized) {
            return;
        }
        this._pointerExitEventsInitialized = true;
        const exitListeners = [];
        if (this.platformSupportsMouseEvents()) {
            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', (event) => this.wheelListener(event)]);
        }
        else if (this.touchGestures !== 'off') {
            this.disableNativeGestures();
            const touchendListener = () => {
                clearTimeout(this._touchstartTimeout);
                this.hide(this.defaultOptions?.touchendHideDelay);
            };
            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);
        }
        this.addListeners(exitListeners);
        this._passiveListeners.push(...exitListeners);
    }
    addListeners(listeners) {
        listeners.forEach(([event, listener]) => {
            this.elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);
        });
    }
    platformSupportsMouseEvents() {
        return !this.platform.IOS && !this.platform.ANDROID;
    }
    wheelListener(event) {
        if (this.isTooltipVisible()) {
            const doc = this.document || document;
            const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);
            const element = this.elementRef.nativeElement;
            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it
            // won't fire if the user scrolls away using the wheel without moving their cursor. We
            // work around it by finding the element under the user's cursor and closing the tooltip
            // if it's not the trigger.
            if (elementUnderPointer !== element &&
                !element.contains(elementUnderPointer)) {
                this.hide();
            }
        }
    }
    disableNativeGestures() {
        const element = this.elementRef.nativeElement;
        const style = element.style;
        // If gestures are set to `auto`, we don't disable text selection on inputs and
        // textareas, because it prevents the user from typing into them on iOS Safari.
        if (this.touchGestures === 'on' ||
            (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {
            style.userSelect =
                style.msUserSelect =
                    style.webkitUserSelect =
                        style.MozUserSelect =
                            'none';
        }
        // If we have `auto` this.touchGestures and the element uses native HTML dragging,
        // we don't set `-webkit-user-drag` because it prevents the native behavior.
        if (this.touchGestures === 'on' || !element.draggable) {
            style.webkitUserDrag = 'none';
        }
        style.touchAction = 'none';
        style.webkitTapHighlightColor = 'transparent';
    }
    shouldHideArrow() {
        return this.isHideArrowSet()
            ? this.hideArrow
            : this.elementRef.nativeElement.tagName.toUpperCase() === 'RDS-ICON' ||
                this.elementRef.nativeElement.hasAttribute('rds-icon-button') ||
                this.elementRef.nativeElement.hasAttribute('rdsiconbutton');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTooltipDirective, selector: "[rdsTooltip], [rds-tooltip]", inputs: { ariaDescription: ["rdsTooltipAriaDescription", "ariaDescription"], showDelay: ["rdsTooltipShowDelay", "showDelay", numberAttribute], hideDelay: ["rdsTooltipHideDelay", "hideDelay", numberAttribute], hideArrow: ["rdsTooltipHideArrow", "hideArrow"], touchGestures: ["rdsTooltipTouchGestures", "touchGestures"], position: ["rdsTooltipPosition", "position"], disabled: ["rdsTooltipDisabled", "disabled"], content: ["rdsTooltip", "content"], tooltipClass: ["rdsTooltipClass", "tooltipClass"] }, host: { properties: { "attr.aria-controls": "this.ariaControls", "attr.aria-expanded": "this.ariaExpanded" } }, exportAs: ["rdsTooltip"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTooltip], [rds-tooltip]',
                    exportAs: 'rdsTooltip',
                }]
        }], ctorParameters: () => [], propDecorators: { ariaDescription: [{
                type: Input,
                args: ['rdsTooltipAriaDescription']
            }], showDelay: [{
                type: Input,
                args: [{ alias: 'rdsTooltipShowDelay', transform: numberAttribute }]
            }], hideDelay: [{
                type: Input,
                args: [{ alias: 'rdsTooltipHideDelay', transform: numberAttribute }]
            }], hideArrow: [{
                type: Input,
                args: ['rdsTooltipHideArrow']
            }], touchGestures: [{
                type: Input,
                args: ['rdsTooltipTouchGestures']
            }], position: [{
                type: Input,
                args: ['rdsTooltipPosition']
            }], disabled: [{
                type: Input,
                args: ['rdsTooltipDisabled']
            }], content: [{
                type: Input,
                args: ['rdsTooltip']
            }], tooltipClass: [{
                type: Input,
                args: ['rdsTooltipClass']
            }], ariaControls: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }] } });

class RdsPaginatorBasicComponent {
    constructor() {
        this.intl = inject(RdsPaginatorIntl);
        this.disabled = false;
        this.showButtons = true;
        this.page = 1;
        this.pageChange = new EventEmitter();
        this.pageCount = 0;
        this.pages = [];
    }
    hasPrevious() {
        return this.page > 1;
    }
    hasNext() {
        return this.page < this.pageCount;
    }
    selectFirstPage() {
        this._updatePages(1);
    }
    selectPreviousPage() {
        if (!this.isPreviousDisabled()) {
            this._updatePages(this.page - 1);
        }
    }
    selectPage(pageNumber) {
        this._updatePages(pageNumber);
    }
    selectNextPage() {
        if (!this.isNextDisabled()) {
            this._updatePages(this.page + 1);
        }
    }
    selectLastPage() {
        this._updatePages(this.pageCount);
    }
    ngOnChanges() {
        this._updatePages(this.page);
    }
    isNextDisabled() {
        return !this.hasNext() || this.disabled;
    }
    isPreviousDisabled() {
        return !this.hasPrevious() || this.disabled;
    }
    isEllipsis(pageNumber) {
        return pageNumber === -1;
    }
    _applyEllipses(start, end) {
        if (start > 0) {
            if (start > 2) {
                this.pages.unshift(-1);
            }
            else if (start === 2) {
                this.pages.unshift(2);
            }
            this.pages.unshift(1);
        }
        if (end < this.pageCount) {
            if (end < this.pageCount - 2) {
                this.pages.push(-1);
            }
            else if (end === this.pageCount - 2) {
                this.pages.push(this.pageCount - 1);
            }
            this.pages.push(this.pageCount);
        }
    }
    _setPageInRange(newPageNo) {
        const prevPageNo = this.page;
        this.page = this._getValueInRange(newPageNo, this.pageCount, 1);
        if (this.page !== prevPageNo && this._isNumber(this.collectionSize)) {
            this.pageChange.emit({
                previousPageIndex: prevPageNo - 1,
                pageIndex: this.page - 1,
            });
        }
    }
    _updatePages(newPage) {
        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);
        if (!this._isNumber(this.pageCount)) {
            this.pageCount = 0;
        }
        this.pages = [];
        for (let i = 1; i <= this.pageCount; i++) {
            this.pages.push(i);
        }
        this._setPageInRange(newPage);
        if (this.maxSize > 0 && this.pageCount > this.maxSize) {
            const [start, end] = this._applyRotation();
            this.pages = this.pages.slice(start, end);
            this._applyEllipses(start, end);
        }
    }
    _getValueInRange(value, max, min = 0) {
        return Math.max(Math.min(value, max), min);
    }
    _applyRotation() {
        let start = 0;
        let end = this.pageCount;
        const leftOffset = Math.floor(this.maxSize / 2);
        const rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;
        if (this.page <= leftOffset) {
            end = this.maxSize;
        }
        else if (this.pageCount - this.page < leftOffset) {
            start = this.pageCount - this.maxSize;
        }
        else {
            start = this.page - leftOffset - 1;
            end = this.page + rightOffset;
        }
        return [start, end];
    }
    _isNumber(value) {
        return !isNaN(this._toInteger(value));
    }
    _toInteger(value) {
        return parseInt(`${value}`, 10);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorBasicComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsPaginatorBasicComponent, selector: "rds-paginator-basic", inputs: { disabled: ["disabled", "disabled", booleanAttribute], showButtons: ["showButtons", "showButtons", booleanAttribute], collectionSize: ["collectionSize", "collectionSize", numberAttribute], maxSize: ["maxSize", "maxSize", numberAttribute], page: ["page", "page", numberAttribute], pageSize: ["pageSize", "pageSize", numberAttribute] }, outputs: { pageChange: "pageChange" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"rds-basic-paginator\">\n  @if (showButtons) {\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isPreviousDisabled(),\n        icon: 'first_page',\n        btnClass: 'rds-paginator-navigation-first',\n        tooltipText: intl.firstPageLabel,\n        click: selectFirstPage.bind(this)\n      }\"\n    />\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isPreviousDisabled(),\n        icon: 'chevron_left',\n        btnClass: 'rds-paginator-navigation-previous',\n        tooltipText: intl.previousPageLabel,\n        click: selectPreviousPage.bind(this)\n      }\"\n    />\n  }\n  @for (pageNumber of pages; track pageNumber) {\n    <div\n      class=\"rds-page-item\"\n      [class.active]=\"pageNumber === page\"\n      [class.disabled]=\"isEllipsis(pageNumber) || disabled\"\n      [attr.aria-current]=\"pageNumber === page ? 'page' : null\"\n    >\n      @if (!isEllipsis(pageNumber)) {\n        <div\n          class=\"rds-page-link\"\n          [attr.tabindex]=\"disabled ? '-1' : null\"\n          [attr.aria-disabled]=\"disabled ? 'true' : null\"\n          (click)=\"selectPage(pageNumber); $event.preventDefault()\"\n        >\n          <button\n            type=\"button\"\n            class=\"rds-paginator-page-button rds-button--text\"\n          >\n            {{ pageNumber }}\n          </button>\n        </div>\n      } @else {\n        <div\n          class=\"rds-page-link rds-paginator-ellipsis\"\n          tabindex=\"-1\"\n          aria-disabled=\"true\"\n        >\n          ...\n        </div>\n      }\n    </div>\n  }\n  @if (showButtons) {\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isNextDisabled(),\n        icon: 'chevron_right',\n        btnClass: 'rds-paginator-navigation-next',\n        tooltipText: intl.nextPageLabel,\n        click: selectNextPage.bind(this)\n      }\"\n    />\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isNextDisabled(),\n        icon: 'last_page',\n        btnClass: 'rds-paginator-navigation-last',\n        tooltipText: intl.lastPageLabel,\n        click: selectLastPage.bind(this)\n      }\"\n    />\n  }\n</div>\n\n<ng-template\n  #arrow\n  let-disabled=\"disabled\"\n  let-icon=\"icon\"\n  let-btnClass=\"btnClass\"\n  let-tooltipText=\"tooltipText\"\n  let-click=\"click\"\n>\n  <div class=\"rds-page-item\" [class.disabled]=\"disabled\">\n    <div\n      class=\"rds-page-link\"\n      [attr.tabindex]=\"disabled ? '-1' : null\"\n      [attr.aria-disabled]=\"disabled ? 'true' : null\"\n    >\n      <button\n        rds-icon-button\n        type=\"button\"\n        size=\"m\"\n        [class]=\"btnClass\"\n        [attr.aria-label]=\"tooltipText\"\n        [rdsTooltip]=\"tooltipText\"\n        [rdsTooltipDisabled]=\"disabled\"\n        rdsTooltipPosition=\"top-center\"\n        [rdsTooltipShowDelay]=\"500\"\n        rdsTooltipHideArrow\n        [disabled]=\"disabled\"\n        (click)=\"click(); $event.preventDefault()\"\n      >\n        <rds-icon [icon]=\"icon\" namespace=\"outlined\" />\n      </button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".rds-basic-paginator{display:flex;gap:8px}.rds-page-item{display:flex;align-items:center;justify-content:center}.rds-page-item .rds-paginator-page-button{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;cursor:pointer;color:var(--rds-color-high-contrast);background:none;border:none;height:40px;min-width:40px;border-radius:2px}.rds-page-item .rds-paginator-page-button:hover{background-color:var(--rds-color-bg-transparent-hover-select)}.rds-page-item .rds-paginator-page-button:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-page-item .rds-paginator-page-button:active{background-color:var(--rds-color-bg-transparent-pressed)}.rds-page-item.active .rds-paginator-page-button{color:var(--rds-color-bg-base-1);background:var(--rds-color-bg-informative-hover)}.rds-page-item .rds-paginator-navigation-first,.rds-page-item .rds-paginator-navigation-previous,.rds-page-item .rds-paginator-navigation-next,.rds-page-item .rds-paginator-navigation-last{height:40px;min-width:40px}.rds-page-link{display:flex}.rds-page-link.rds-paginator-ellipsis.rds-paginator-ellipsis{justify-content:space-around;align-items:center;height:40px;min-width:40px}.rds-page-link .rds-paginator-page-button:before,.rds-page-link .rds-paginator-page-button:after{inset:1px -6px -6px 2px;height:40px;width:40px}.rds-page-link .rds-button.rds-button--icon.rds-button-m:before,.rds-page-link .rds-button.rds-button--icon.rds-button-m:after{inset:0 -6px -6px 0;height:40px;width:40px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: RdsTooltipDirective, selector: "[rdsTooltip], [rds-tooltip]", inputs: ["rdsTooltipAriaDescription", "rdsTooltipShowDelay", "rdsTooltipHideDelay", "rdsTooltipHideArrow", "rdsTooltipTouchGestures", "rdsTooltipPosition", "rdsTooltipDisabled", "rdsTooltip", "rdsTooltipClass"], exportAs: ["rdsTooltip"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorBasicComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-paginator-basic', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"rds-basic-paginator\">\n  @if (showButtons) {\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isPreviousDisabled(),\n        icon: 'first_page',\n        btnClass: 'rds-paginator-navigation-first',\n        tooltipText: intl.firstPageLabel,\n        click: selectFirstPage.bind(this)\n      }\"\n    />\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isPreviousDisabled(),\n        icon: 'chevron_left',\n        btnClass: 'rds-paginator-navigation-previous',\n        tooltipText: intl.previousPageLabel,\n        click: selectPreviousPage.bind(this)\n      }\"\n    />\n  }\n  @for (pageNumber of pages; track pageNumber) {\n    <div\n      class=\"rds-page-item\"\n      [class.active]=\"pageNumber === page\"\n      [class.disabled]=\"isEllipsis(pageNumber) || disabled\"\n      [attr.aria-current]=\"pageNumber === page ? 'page' : null\"\n    >\n      @if (!isEllipsis(pageNumber)) {\n        <div\n          class=\"rds-page-link\"\n          [attr.tabindex]=\"disabled ? '-1' : null\"\n          [attr.aria-disabled]=\"disabled ? 'true' : null\"\n          (click)=\"selectPage(pageNumber); $event.preventDefault()\"\n        >\n          <button\n            type=\"button\"\n            class=\"rds-paginator-page-button rds-button--text\"\n          >\n            {{ pageNumber }}\n          </button>\n        </div>\n      } @else {\n        <div\n          class=\"rds-page-link rds-paginator-ellipsis\"\n          tabindex=\"-1\"\n          aria-disabled=\"true\"\n        >\n          ...\n        </div>\n      }\n    </div>\n  }\n  @if (showButtons) {\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isNextDisabled(),\n        icon: 'chevron_right',\n        btnClass: 'rds-paginator-navigation-next',\n        tooltipText: intl.nextPageLabel,\n        click: selectNextPage.bind(this)\n      }\"\n    />\n    <ng-container\n      [ngTemplateOutlet]=\"arrow\"\n      [ngTemplateOutletContext]=\"{\n        disabled: isNextDisabled(),\n        icon: 'last_page',\n        btnClass: 'rds-paginator-navigation-last',\n        tooltipText: intl.lastPageLabel,\n        click: selectLastPage.bind(this)\n      }\"\n    />\n  }\n</div>\n\n<ng-template\n  #arrow\n  let-disabled=\"disabled\"\n  let-icon=\"icon\"\n  let-btnClass=\"btnClass\"\n  let-tooltipText=\"tooltipText\"\n  let-click=\"click\"\n>\n  <div class=\"rds-page-item\" [class.disabled]=\"disabled\">\n    <div\n      class=\"rds-page-link\"\n      [attr.tabindex]=\"disabled ? '-1' : null\"\n      [attr.aria-disabled]=\"disabled ? 'true' : null\"\n    >\n      <button\n        rds-icon-button\n        type=\"button\"\n        size=\"m\"\n        [class]=\"btnClass\"\n        [attr.aria-label]=\"tooltipText\"\n        [rdsTooltip]=\"tooltipText\"\n        [rdsTooltipDisabled]=\"disabled\"\n        rdsTooltipPosition=\"top-center\"\n        [rdsTooltipShowDelay]=\"500\"\n        rdsTooltipHideArrow\n        [disabled]=\"disabled\"\n        (click)=\"click(); $event.preventDefault()\"\n      >\n        <rds-icon [icon]=\"icon\" namespace=\"outlined\" />\n      </button>\n    </div>\n  </div>\n</ng-template>\n", styles: [".rds-basic-paginator{display:flex;gap:8px}.rds-page-item{display:flex;align-items:center;justify-content:center}.rds-page-item .rds-paginator-page-button{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;cursor:pointer;color:var(--rds-color-high-contrast);background:none;border:none;height:40px;min-width:40px;border-radius:2px}.rds-page-item .rds-paginator-page-button:hover{background-color:var(--rds-color-bg-transparent-hover-select)}.rds-page-item .rds-paginator-page-button:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-page-item .rds-paginator-page-button:active{background-color:var(--rds-color-bg-transparent-pressed)}.rds-page-item.active .rds-paginator-page-button{color:var(--rds-color-bg-base-1);background:var(--rds-color-bg-informative-hover)}.rds-page-item .rds-paginator-navigation-first,.rds-page-item .rds-paginator-navigation-previous,.rds-page-item .rds-paginator-navigation-next,.rds-page-item .rds-paginator-navigation-last{height:40px;min-width:40px}.rds-page-link{display:flex}.rds-page-link.rds-paginator-ellipsis.rds-paginator-ellipsis{justify-content:space-around;align-items:center;height:40px;min-width:40px}.rds-page-link .rds-paginator-page-button:before,.rds-page-link .rds-paginator-page-button:after{inset:1px -6px -6px 2px;height:40px;width:40px}.rds-page-link .rds-button.rds-button--icon.rds-button-m:before,.rds-page-link .rds-button.rds-button--icon.rds-button-m:after{inset:0 -6px -6px 0;height:40px;width:40px}\n"] }]
        }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showButtons: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], collectionSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], maxSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], page: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], pageSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], pageChange: [{
                type: Output
            }] } });

const DEFAULT_PAGE_SIZE = 50;
const RDS_PAGINATOR_DEFAULT_OPTIONS = new InjectionToken('RDS_PAGINATOR_DEFAULT_OPTIONS');
class RdsPaginatorComponent {
    set pageIndex(value) {
        const newValue = Math.max(numberAttribute(value), 0);
        if (newValue !== this.pageIndex) {
            this._pageIndex = Math.max(numberAttribute(value), 0);
            this.cdr.markForCheck();
        }
    }
    get pageIndex() {
        return this._pageIndex;
    }
    set length(v) {
        const newValue = numberAttribute(v);
        if (newValue !== this._length) {
            this._length = newValue;
            this.cdr.markForCheck();
        }
    }
    get length() {
        return this._length;
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set pageSize(value) {
        this._pageSize = Math.max(numberAttribute(value), 0);
        this._updateDisplayedPageSizeOptions();
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSizeOptions(value) {
        this._pageSizeOptions = (value || []).map((p) => numberAttribute(p));
        this._updateDisplayedPageSizeOptions();
    }
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    set showButtons(value) {
        const newValue = booleanAttribute(value);
        if (this._presentationMode === 'full' && !newValue) {
            throw new Error(`showButtons property set on false can be used only with basic presentation mode`);
        }
        else {
            this._showButtons = newValue;
        }
    }
    get showButtons() {
        return this._showButtons;
    }
    set presentationMode(value) {
        if (value === 'full' && !this.showButtons) {
            throw new Error(`showButtons property set on false can be used only with basic presentation mode`);
        }
        else {
            this._presentationMode = value;
        }
    }
    get presentationMode() {
        return this._presentationMode;
    }
    constructor() {
        this.intl = inject(RdsPaginatorIntl);
        this.cdr = inject(ChangeDetectorRef);
        this.defaults = inject(RDS_PAGINATOR_DEFAULT_OPTIONS, {
            optional: true,
        });
        this._isInitialized = false;
        this._pendingSubscribers = [];
        this._length = 0;
        this.initialized = new Observable((subscriber) => {
            if (this._isInitialized) {
                this._notifySubscriber(subscriber);
            }
            else if (this._pendingSubscribers) {
                this._pendingSubscribers.forEach(this._notifySubscriber);
            }
        });
        this._initialized = false;
        this.class = 'rds-paginator';
        this._pageIndex = 0;
        this.showItemsOfPageLabel = true;
        this._pageSize = 0;
        this.disabled = false;
        this._pageSizeOptions = [];
        this._showButtons = true;
        this._presentationMode = 'full';
        this.hidePageSize = false;
        this.showFirstLastButtons = true;
        this.page = new EventEmitter();
        this._displayedPageSizeOptions = [];
        this.intl.changes
            .pipe(takeUntilDestroyed())
            .subscribe(() => this.cdr.markForCheck());
        if (this.defaults) {
            if (this.defaults.pageSize != null) {
                this._pageSize = this.defaults.pageSize;
            }
            if (this.defaults.pageSizeOptions != null) {
                this._pageSizeOptions = this.defaults.pageSizeOptions;
            }
            if (this.defaults.hidePageSize != null) {
                this.hidePageSize = this.defaults.hidePageSize;
            }
            if (this.defaults.showFirstLastButtons != null) {
                this.showFirstLastButtons = this.defaults.showFirstLastButtons;
            }
            if (this.defaults.showItemsOfPageLabel != null) {
                this.showItemsOfPageLabel = this.defaults.showItemsOfPageLabel;
            }
        }
    }
    ngOnInit() {
        this._initialized = true;
        this._updateDisplayedPageSizeOptions();
        this._markInitialized();
    }
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        const previousPageIndex = this.pageIndex;
        this.pageIndex = this.pageIndex + 1;
        this.emitPageEvent({ previousPageIndex });
    }
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        const previousPageIndex = this.pageIndex;
        this.pageIndex = this.pageIndex - 1;
        this.emitPageEvent({ previousPageIndex });
    }
    firstPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        const previousPageIndex = this.pageIndex;
        this.pageIndex = 0;
        this.emitPageEvent({ previousPageIndex });
    }
    lastPage() {
        if (!this.hasNextPage()) {
            return;
        }
        const previousPageIndex = this.pageIndex;
        this.pageIndex = this.getNumberOfPages() - 1;
        this.emitPageEvent({ previousPageIndex });
    }
    hasPreviousPage() {
        return this.pageIndex >= 1 && this.pageSize != 0;
    }
    hasNextPage() {
        const maxPageIndex = this.getNumberOfPages() - 1;
        return this.pageIndex < maxPageIndex && this.pageSize != 0;
    }
    getNumberOfPages() {
        if (!this.pageSize) {
            return 0;
        }
        return Math.ceil(this.length / this.pageSize);
    }
    get() {
        return {
            previousPageIndex: 0,
            pageIndex: this.pageIndex,
            pageSize: this.pageSize,
            length: this.length,
        };
    }
    _onPageIndexChange(input) {
        const newPageIndex = Math.min(Math.max(numberAttribute(input.value), 0), this.getNumberOfPages());
        if (newPageIndex && newPageIndex - 1 !== this.pageIndex) {
            const previousPageIndex = this.pageIndex;
            this.pageIndex = newPageIndex - 1;
            this.emitPageEvent({ previousPageIndex });
        }
        input.value = String(this.pageIndex + 1);
    }
    _changePageSize(pageSize) {
        const startIndex = this.pageIndex * this.pageSize;
        const previousPageIndex = this.pageIndex;
        this.pageIndex = Math.floor(startIndex / pageSize) || 0;
        this.pageSize = pageSize;
        this.emitPageEvent({ previousPageIndex });
    }
    _nextButtonsDisabled() {
        return this.disabled || !this.hasNextPage();
    }
    _previousButtonsDisabled() {
        return this.disabled || !this.hasPreviousPage();
    }
    _onPageKeyDown($event) {
        return $event.key !== '.';
    }
    _getPageNumberInputWidth() {
        return this.getNumberOfPages().toString(10).split('').length * 10 + 24;
    }
    _updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize =
                this.pageSizeOptions.length != 0
                    ? this.pageSizeOptions[0]
                    : DEFAULT_PAGE_SIZE;
        }
        this._displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this._displayedPageSizeOptions.push(this.pageSize);
        }
        this._displayedPageSizeOptions.sort((a, b) => a - b);
        this.cdr.markForCheck();
    }
    emitPageEvent(data) {
        const { previousPageIndex, pageIndex } = data;
        this.page.emit({
            previousPageIndex,
            pageIndex: pageIndex ?? this.pageIndex,
            pageSize: this.pageSize,
            length: this.length,
        });
    }
    _markInitialized() {
        if (this._isInitialized) {
            throw Error('This directive has already been marked as initialized and ' +
                'should not be called twice.');
        }
        this._isInitialized = true;
        if (this._pendingSubscribers) {
            this._pendingSubscribers.forEach(this._notifySubscriber);
        }
        this._pendingSubscribers = null;
    }
    _notifySubscriber(subscriber) {
        subscriber.next();
        subscriber.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsPaginatorComponent, selector: "rds-paginator", inputs: { pageIndex: "pageIndex", length: "length", showItemsOfPageLabel: ["showItemsOfPageLabel", "showItemsOfPageLabel", booleanAttribute], pageSize: ["pageSize", "pageSize", (v) => Math.max(numberAttribute(v, 0), 0)], disabled: ["disabled", "disabled", booleanAttribute], pageSizeOptions: "pageSizeOptions", showButtons: "showButtons", presentationMode: "presentationMode", hidePageSize: ["hidePageSize", "hidePageSize", booleanAttribute], showFirstLastButtons: ["showFirstLastButtons", "showFirstLastButtons", booleanAttribute] }, outputs: { page: "page" }, host: { properties: { "class": "this.class" } }, exportAs: ["rdsPaginator"], ngImport: i0, template: "@if (presentationMode === 'full') {\n  <div\n    class=\"rds-paginator-container\"\n    [class.rds-paginator-disabled]=\"disabled\"\n  >\n    @if (showItemsOfPageLabel) {\n      <div class=\"rds-paginator-range-label\">\n        {{ intl.getRangeLabel(pageIndex, pageSize, length) }}\n      </div>\n    }\n    @if (!hidePageSize) {\n      <div class=\"rds-paginator-page-size\">\n        @if (_displayedPageSizeOptions.length > 1) {\n          <div\n            class=\"rds-paginator-page-size-select\"\n            rdsDropdown\n            #pageSizeDropdown=\"rdsDropdown\"\n            [disabled]=\"disabled\"\n          >\n            <button\n              rds-dropdown-toggle-button\n              [rdsMenuTriggerFor]=\"menu\"\n              #trigger=\"rdsMenuTrigger\"\n              [isOpen]=\"trigger.menuOpen\"\n              class=\"rds-paginator-page-size__toggle\"\n            >\n              {{ pageSize }}\n              <rds-icon\n                namespace=\"filled\"\n                [icon]=\"pageSizeDropdown.isOpen() ? 'caret_down' : 'caret_up'\"\n              />\n            </button>\n            <rds-menu #menu=\"rdsMenu\">\n              @for (\n                pageSizeOption of _displayedPageSizeOptions;\n                track pageSizeOption\n              ) {\n                <button\n                  rds-menu-item\n                  cdkMonitorElementFocus\n                  (click)=\"_changePageSize(pageSizeOption)\"\n                >\n                  {{ pageSizeOption }}\n                </button>\n              }\n            </rds-menu>\n            @if (_displayedPageSizeOptions.length <= 1) {\n              <div class=\"rds-paginator-page-size-value\">\n                {{ pageSize }}\n              </div>\n            }\n          </div>\n        }\n      </div>\n    }\n    <div class=\"rds-paginator-range-actions\">\n      @if (showFirstLastButtons) {\n        <button\n          rds-icon-button\n          type=\"button\"\n          size=\"m\"\n          class=\"rds-paginator-navigation-first\"\n          (click)=\"firstPage()\"\n          [attr.aria-label]=\"intl.firstPageLabel\"\n          [rdsTooltip]=\"intl.firstPageLabel\"\n          [rdsTooltipDisabled]=\"_previousButtonsDisabled()\"\n          [rdsTooltipPosition]=\"'top-center'\"\n          [rdsTooltipShowDelay]=\"500\"\n          rdsTooltipHideArrow\n          [disabled]=\"_previousButtonsDisabled()\"\n        >\n          <rds-icon icon=\"first_page\" namespace=\"outlined\" />\n        </button>\n      }\n      <button\n        rds-icon-button\n        type=\"button\"\n        size=\"m\"\n        class=\"rds-paginator-navigation-previous\"\n        (click)=\"previousPage()\"\n        [attr.aria-label]=\"intl.previousPageLabel\"\n        [rdsTooltip]=\"intl.previousPageLabel\"\n        [rdsTooltipDisabled]=\"_previousButtonsDisabled()\"\n        [rdsTooltipPosition]=\"'top-center'\"\n        [rdsTooltipShowDelay]=\"500\"\n        rdsTooltipHideArrow\n        [disabled]=\"_previousButtonsDisabled()\"\n      >\n        <rds-icon icon=\"chevron_left\" namespace=\"outlined\" />\n      </button>\n      <div class=\"rds-paginator-page-of\">\n        <input\n          class=\"rds-paginator-page-number-input\"\n          cdkMonitorElementFocus\n          [value]=\"pageIndex + 1\"\n          (change)=\"_onPageIndexChange(input)\"\n          [disabled]=\"disabled\"\n          #input\n          type=\"number\"\n          (keydown)=\"_onPageKeyDown($event)\"\n          [style.width.px]=\"_getPageNumberInputWidth()\"\n        />\n        {{ intl.ofPagesLabel + ' ' + getNumberOfPages() }}\n      </div>\n      <button\n        rds-icon-button\n        type=\"button\"\n        size=\"m\"\n        class=\"rds-paginator-navigation-next\"\n        (click)=\"nextPage()\"\n        [attr.aria-label]=\"intl.nextPageLabel\"\n        [rdsTooltip]=\"intl.nextPageLabel\"\n        [rdsTooltipDisabled]=\"_nextButtonsDisabled()\"\n        [rdsTooltipPosition]=\"'top-center'\"\n        [rdsTooltipShowDelay]=\"500\"\n        rdsTooltipHideArrow\n        [disabled]=\"_nextButtonsDisabled()\"\n      >\n        <rds-icon icon=\"chevron_right\" namespace=\"outlined\" />\n      </button>\n      @if (showFirstLastButtons) {\n        <button\n          rds-icon-button\n          type=\"button\"\n          size=\"m\"\n          class=\"rds-paginator-navigation-last\"\n          (click)=\"lastPage()\"\n          [attr.aria-label]=\"intl.lastPageLabel\"\n          [rdsTooltip]=\"intl.lastPageLabel\"\n          [rdsTooltipDisabled]=\"_nextButtonsDisabled()\"\n          [rdsTooltipPosition]=\"'top-center'\"\n          [rdsTooltipShowDelay]=\"500\"\n          rdsTooltipHideArrow\n          [disabled]=\"_nextButtonsDisabled()\"\n        >\n          <rds-icon icon=\"last_page\" namespace=\"outlined\" />\n        </button>\n      }\n    </div>\n  </div>\n} @else {\n  <rds-paginator-basic\n    [maxSize]=\"5\"\n    [collectionSize]=\"length\"\n    (pageChange)=\"this.emitPageEvent($event)\"\n    [pageSize]=\"pageSize\"\n    [disabled]=\"disabled\"\n    [showButtons]=\"showButtons\"\n  />\n}\n", styles: [".rds-form-field__select-x-wrapper{display:flex;margin-right:4px;margin-left:8px;cursor:pointer}rds-multi-select .rds-chips.rds-chips--size-s{gap:4px}.rds-form-field__select-trigger-value{display:inline-block;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.rds-form-field__select-trigger-value.rds-form-field__select-trigger-value-placeholder{color:var(--rds-color-grey-3)}.rds-form-field__select-hidden-trigger-values-placeholder{display:inline-flex;min-width:32px;height:20px;margin-right:12px;margin-left:4px}.rds-form-field__select-hidden-trigger-values-placeholder>rds-badge{margin-right:12px;margin-left:4px}.rds-form-field--floating-label .rds-form-field__control{align-items:unset}.rds-form-field--floating-label .rds-form-field__select-arrow-wrapper{position:absolute;top:calc(50% - 10px);right:0;display:flex}.rds-form-field--floating-label .rds-form-field__select-x-wrapper button{margin-bottom:16px}.rds-form-field .rds-form-field__label{white-space:unset;color:var(--rds-color-low-contrast);display:flex;align-items:flex-start}.rds-form-field.rds-form-field--side{display:flex;flex-direction:row;--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper{display:flex;justify-content:flex-end}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper .rds-form-field__label{text-align:right}.rds-form-field.rds-form-field--side .rds-form-field__label-wrapper{display:flex;align-items:center;margin-bottom:0;margin-right:12px;width:var(--label-width);overflow:unset;text-overflow:unset;white-space:inherit}.rds-form-field.rds-form-field--side.rds-form-field--hint-or-error-or-counter .rds-form-field__label-wrapper{margin-bottom:24px}.rds-form-field.rds-form-field--side .rds-form-field__container{width:calc(100% - var(--label-width) - 12px)}.rds-form-field.rds-form-field--side.rds-form-field__wrapper-textarea-field .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--side.rds-form-field--select-with-chips .rds-form-field__label-wrapper{padding-top:12px;align-items:flex-start}.rds-form-field.rds-form-field--no-label .rds-form-field__label-wrapper{width:0;height:0;padding:0;margin:0}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-prefix-separator,.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__select-arrow{color:var(--rds-color-low-contrast)}.rds-form-field.rds-form-field--focused .rds-form-field__container.rds-form-field--global-search .rds-form-field__control-container{outline:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-active-focus)}.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label{color:var(--rds-color-stroke-active-focus)}.rds-form-field>.rds-form-field__label-wrapper{margin-bottom:4px}.rds-form-field .rds-form-field__container{flex-direction:column;display:flex;position:relative;text-align:center}.rds-form-field .rds-form-field__container .rds-form-field__control-container{display:flex;border-radius:2px;border:1px solid var(--rds-color-stroke-enabled);background:var(--rds-color-bg-base-1);cursor:text}.rds-form-field .rds-form-field__container .rds-form-field__content{display:flex;position:relative;width:100%}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;border-left:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix{position:relative;width:100%;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker{align-items:center;padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker rds-icon{margin-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{height:100%;position:relative;display:flex;flex-direction:row-reverse}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{position:absolute;border-right:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container{padding-bottom:7px;padding-right:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content{display:flex}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{padding-right:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper{position:absolute;z-index:2;left:0;box-sizing:content-box;width:100%;height:32px;overflow:hidden;text-overflow:ellipsis;transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper--float{height:16px}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{position:absolute;width:100%;left:0;text-align:start;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;color:var(--rds-color-low-contrast);transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__control{position:relative;display:flex;margin-top:0;border:none;width:100%;background:transparent;outline:none;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__control::placeholder{color:var(--rds-color-grey-3)}.rds-form-field .rds-form-field__container.rds-form-field__label--float .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field .rds-form-field__container.rds-form-field--static-label .rds-form-field__control{margin-top:0}.rds-form-field .rds-form-field__container textarea.rds-form-field__control{resize:none;bottom:unset}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-vertical{resize:vertical}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-horizontal{resize:horizontal}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-both{resize:both}.rds-form-field .rds-form-field__container .rds-form-field__subscript-wrapper{position:absolute;top:calc(100% - 24px);left:0;z-index:-1;align-items:center;display:flex;justify-content:space-between;width:100%;height:16px;padding-left:0}.rds-form-field .rds-form-field__container .rds-form-field__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-form-field .rds-form-field__container .rds-form-field__subscript--hint{color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__subscript--error{color:var(--rds-color-error)}.rds-form-field .rds-form-field--hint-or-error-or-counter{padding-bottom:24px}.rds-form-field .rds-form-field--hint-or-error-or-counter .rds-form-field__subscript-wrapper{z-index:auto}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container{border-color:var(--rds-color-disabled);background:var(--rds-color-bg-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container:hover{border-color:var(--rds-color-disabled);cursor:default}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-prefix,.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-suffix,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__label,.rds-form-field.rds-form-field--disabled .rds-form-field__control,.rds-form-field.rds-form-field--disabled .rds-form-field__subscript--hint,.rds-form-field.rds-form-field--disabled .rds-form-field__select-arrow,.rds-form-field.rds-form-field--disabled .rds-form-field__select-hidden-trigger-values-placeholder .rds-badge--container .rds-badge.rds-badge--black-minimal{color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{outline:2px solid var(--rds-color-error);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label-wrapper{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-error)}.rds-form-field.rds-form-field--floating-label .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-textfield-decoration-container{position:relative}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-outer-spin-button,.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-inner-spin-button{position:absolute;bottom:0;height:24px;right:0}.rds-form-field .rds-form-field__asterisk{color:var(--rds-color-error)}.rds-form-field .rds-form-field__container.rds-form-field--select .rds-form-field__control-container{cursor:pointer}.rds-form-field .rds-form-field__container .rds-form-field__control{align-items:center}.rds-form-field .rds-form-field__container .rds-form-field__select-value{justify-content:space-between;align-items:center;display:flex;min-width:0;width:calc(100% - 24px)}.rds-form-field .rds-form-field__container .rds-form-field__select-value-placeholder{display:flex;flex-wrap:nowrap;max-height:24px;overflow:hidden}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow-wrapper{position:absolute;right:0;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow{margin:0 7px;border-top:5px solid;border-left:5px solid transparent;border-right:5px solid transparent;width:0;height:0}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow--rotate{transform:rotate(180deg)}.rds-form-field.rds-form-field--disabled.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--disabled.rds-form-field--select-with-chips .rds-form-field__control-container{cursor:default}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 14px 4px 15px}.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 15px 4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 15px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container{padding:3px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:48px;height:48px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:96px;padding:11px 7px 7px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:48px;height:unset}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 7px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 7px);padding-right:15px;margin-right:1px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{padding-top:8px;font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{width:16px;height:16px;margin-top:2px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding-top:0;margin-bottom:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float rds-icon{width:16px;height:16px;margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container textarea.rds-form-field__control{min-height:96px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:1px;width:16px;height:16px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 10px 4px 11px}.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 11px 4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 11px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container{padding:3px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:36px;height:36px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:72px;padding:7px 7px 7px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:36px;height:unset}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-3px;height:calc(100% + 6px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-3px;height:calc(100% + 6px);padding-right:11px;margin-right:1px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container textarea.rds-form-field__control{min-height:72px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:6px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:0;width:16px;height:16px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 6px 4px 7px}.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 7px 4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container{padding:3px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:28px;height:28px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:64px;padding:10px 7px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:28px;height:unset}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 8px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 8px);padding-right:7px;margin-right:1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container textarea.rds-form-field__control{min-height:64px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:4px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-control-counter{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-select__panel-wrapper{flex-basis:100%}.rds-select__panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;overflow:auto;border-radius:2px;min-width:100%;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1)}.rds-select__option.hide{display:none}.rds-select__option--separator{padding:0;margin:0}.rds-select__option--separator div{width:100%;height:1px;border-bottom:1px solid var(--rds-color-grey-2);padding-bottom:0;margin-bottom:4px}[rds-theme=dark] input[type=number]::-webkit-outer-spin-button,[rds-theme=dark] input[type=number]::-webkit-inner-spin-button{filter:invert(.9)}.rds-form-field.rds-form-field--autocomplete-multi .rds-form-field__container .rds-form-field__control-container{height:unset!important}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--floating-label .rds-form-field__control{margin-top:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-paginator{display:block}.rds-paginator .rds-paginator-container{display:flex;align-items:center;justify-content:flex-end;flex-wrap:wrap-reverse;width:100%}.rds-paginator .rds-paginator-container .rds-paginator-page-size{display:flex;align-items:center;flex-wrap:wrap-reverse}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select{padding-right:16px}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select>button.rds-paginator-page-size__toggle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast);height:36px;padding-left:11px;padding-right:7px}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select>button.rds-paginator-page-size__toggle .rds-dropdown-toggle-button__content{padding-right:8px}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select>button.rds-paginator-page-size__toggle:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{border:1px solid var(--rds-color-stroke-active-focus);padding-left:11px;padding-right:7px}.rds-paginator .rds-paginator-container .rds-paginator-range-label{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast);padding-right:16px}.rds-paginator .rds-paginator-container .rds-paginator-range-actions{display:flex;align-items:center}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-navigation-first,.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-navigation-next{margin-right:8px}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast);padding-left:12px;padding-right:12px}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:36px;padding:0 12px;margin-right:12px;border:1px solid var(--rds-color-stroke-enabled);border-radius:2px;color:var(--rds-color-high-contrast);background-color:var(--rds-color-bg-base-1)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:hover,.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:focus{outline:none}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:hover:not([disabled]){border-color:var(--rds-color-stroke-hover)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:focus:not([disabled]),.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input.cdk-focused.cdk-keyboard-focused:not([disabled]){border-color:var(--rds-color-stroke-active-focus)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:hover:not([disabled]){cursor:pointer}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input[disabled]{background-color:var(--rds-color-bg-disabled)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input::-webkit-outer-spin-button,.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.rds-paginator-dropdown{display:flex;flex-direction:column;padding-top:12px;padding-bottom:12px}\n"], dependencies: [{ kind: "component", type: RdsDropdownToggleButtonComponent, selector: "\n    button[rdsDropdownToggleButton], button[rds-dropdown-toggle-button],\n    button[rdsDropdownToggleBorderlessButton], button[rds-dropdown-toggle-borderless-button],\n    button[rdsDropdownTogglePrimaryButton], button[rds-dropdown-toggle-primary-button],\n    button[rdsDropdownToggleSecondaryButton], button[rds-dropdown-toggle-secondary-button],\n    button[rdsDropdownToggleTextButton], button[rds-dropdown-toggle-text-button],\n    button[rdsDropdownToggleWarningButton], button[rds-dropdown-toggle-warning-button],\n    button[rdsDropdownToggleIconButton], button[rds-dropdown-toggle-icon-button],\n  ", inputs: ["size", "isOpen"] }, { kind: "directive", type: RdsDropdownDirective, selector: "[rdsDropdown], [rds-dropdown]", inputs: ["autoClose", "placement", "disabled", "backdrop"], outputs: ["openChanged", "shown", "hidden"], exportAs: ["rdsDropdown"] }, { kind: "component", type: RdsMenuComponent, selector: "rds-menu", inputs: ["backdrop", "aria-label", "aria-labelledby", "aria-describedby", "size", "xPosition", "yPosition", "overlapTrigger", "class"], outputs: ["closed"], exportAs: ["rdsMenu"] }, { kind: "component", type: RdsMenuItemComponent, selector: "[rds-menu-item], [rdsMenuItem]", exportAs: ["rdsMenuItem"] }, { kind: "directive", type: RdsMenuTriggerDirective, selector: "[rds-menu-trigger-for], [rdsMenuTriggerFor]", inputs: ["rdsMenuTriggerData", "rdsMenuTriggerRestoreFocus", "rdsMenuTriggerFor"], outputs: ["menuOpened", "menuClosed"], exportAs: ["rdsMenuTrigger"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: RdsTooltipDirective, selector: "[rdsTooltip], [rds-tooltip]", inputs: ["rdsTooltipAriaDescription", "rdsTooltipShowDelay", "rdsTooltipHideDelay", "rdsTooltipHideArrow", "rdsTooltipTouchGestures", "rdsTooltipPosition", "rdsTooltipDisabled", "rdsTooltip", "rdsTooltipClass"], exportAs: ["rdsTooltip"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: RdsPaginatorBasicComponent, selector: "rds-paginator-basic", inputs: ["disabled", "showButtons", "collectionSize", "maxSize", "page", "pageSize"], outputs: ["pageChange"] }, { kind: "directive", type: i1$5.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"], exportAs: ["cdkMonitorFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-paginator', exportAs: 'rdsPaginator', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "@if (presentationMode === 'full') {\n  <div\n    class=\"rds-paginator-container\"\n    [class.rds-paginator-disabled]=\"disabled\"\n  >\n    @if (showItemsOfPageLabel) {\n      <div class=\"rds-paginator-range-label\">\n        {{ intl.getRangeLabel(pageIndex, pageSize, length) }}\n      </div>\n    }\n    @if (!hidePageSize) {\n      <div class=\"rds-paginator-page-size\">\n        @if (_displayedPageSizeOptions.length > 1) {\n          <div\n            class=\"rds-paginator-page-size-select\"\n            rdsDropdown\n            #pageSizeDropdown=\"rdsDropdown\"\n            [disabled]=\"disabled\"\n          >\n            <button\n              rds-dropdown-toggle-button\n              [rdsMenuTriggerFor]=\"menu\"\n              #trigger=\"rdsMenuTrigger\"\n              [isOpen]=\"trigger.menuOpen\"\n              class=\"rds-paginator-page-size__toggle\"\n            >\n              {{ pageSize }}\n              <rds-icon\n                namespace=\"filled\"\n                [icon]=\"pageSizeDropdown.isOpen() ? 'caret_down' : 'caret_up'\"\n              />\n            </button>\n            <rds-menu #menu=\"rdsMenu\">\n              @for (\n                pageSizeOption of _displayedPageSizeOptions;\n                track pageSizeOption\n              ) {\n                <button\n                  rds-menu-item\n                  cdkMonitorElementFocus\n                  (click)=\"_changePageSize(pageSizeOption)\"\n                >\n                  {{ pageSizeOption }}\n                </button>\n              }\n            </rds-menu>\n            @if (_displayedPageSizeOptions.length <= 1) {\n              <div class=\"rds-paginator-page-size-value\">\n                {{ pageSize }}\n              </div>\n            }\n          </div>\n        }\n      </div>\n    }\n    <div class=\"rds-paginator-range-actions\">\n      @if (showFirstLastButtons) {\n        <button\n          rds-icon-button\n          type=\"button\"\n          size=\"m\"\n          class=\"rds-paginator-navigation-first\"\n          (click)=\"firstPage()\"\n          [attr.aria-label]=\"intl.firstPageLabel\"\n          [rdsTooltip]=\"intl.firstPageLabel\"\n          [rdsTooltipDisabled]=\"_previousButtonsDisabled()\"\n          [rdsTooltipPosition]=\"'top-center'\"\n          [rdsTooltipShowDelay]=\"500\"\n          rdsTooltipHideArrow\n          [disabled]=\"_previousButtonsDisabled()\"\n        >\n          <rds-icon icon=\"first_page\" namespace=\"outlined\" />\n        </button>\n      }\n      <button\n        rds-icon-button\n        type=\"button\"\n        size=\"m\"\n        class=\"rds-paginator-navigation-previous\"\n        (click)=\"previousPage()\"\n        [attr.aria-label]=\"intl.previousPageLabel\"\n        [rdsTooltip]=\"intl.previousPageLabel\"\n        [rdsTooltipDisabled]=\"_previousButtonsDisabled()\"\n        [rdsTooltipPosition]=\"'top-center'\"\n        [rdsTooltipShowDelay]=\"500\"\n        rdsTooltipHideArrow\n        [disabled]=\"_previousButtonsDisabled()\"\n      >\n        <rds-icon icon=\"chevron_left\" namespace=\"outlined\" />\n      </button>\n      <div class=\"rds-paginator-page-of\">\n        <input\n          class=\"rds-paginator-page-number-input\"\n          cdkMonitorElementFocus\n          [value]=\"pageIndex + 1\"\n          (change)=\"_onPageIndexChange(input)\"\n          [disabled]=\"disabled\"\n          #input\n          type=\"number\"\n          (keydown)=\"_onPageKeyDown($event)\"\n          [style.width.px]=\"_getPageNumberInputWidth()\"\n        />\n        {{ intl.ofPagesLabel + ' ' + getNumberOfPages() }}\n      </div>\n      <button\n        rds-icon-button\n        type=\"button\"\n        size=\"m\"\n        class=\"rds-paginator-navigation-next\"\n        (click)=\"nextPage()\"\n        [attr.aria-label]=\"intl.nextPageLabel\"\n        [rdsTooltip]=\"intl.nextPageLabel\"\n        [rdsTooltipDisabled]=\"_nextButtonsDisabled()\"\n        [rdsTooltipPosition]=\"'top-center'\"\n        [rdsTooltipShowDelay]=\"500\"\n        rdsTooltipHideArrow\n        [disabled]=\"_nextButtonsDisabled()\"\n      >\n        <rds-icon icon=\"chevron_right\" namespace=\"outlined\" />\n      </button>\n      @if (showFirstLastButtons) {\n        <button\n          rds-icon-button\n          type=\"button\"\n          size=\"m\"\n          class=\"rds-paginator-navigation-last\"\n          (click)=\"lastPage()\"\n          [attr.aria-label]=\"intl.lastPageLabel\"\n          [rdsTooltip]=\"intl.lastPageLabel\"\n          [rdsTooltipDisabled]=\"_nextButtonsDisabled()\"\n          [rdsTooltipPosition]=\"'top-center'\"\n          [rdsTooltipShowDelay]=\"500\"\n          rdsTooltipHideArrow\n          [disabled]=\"_nextButtonsDisabled()\"\n        >\n          <rds-icon icon=\"last_page\" namespace=\"outlined\" />\n        </button>\n      }\n    </div>\n  </div>\n} @else {\n  <rds-paginator-basic\n    [maxSize]=\"5\"\n    [collectionSize]=\"length\"\n    (pageChange)=\"this.emitPageEvent($event)\"\n    [pageSize]=\"pageSize\"\n    [disabled]=\"disabled\"\n    [showButtons]=\"showButtons\"\n  />\n}\n", styles: [".rds-form-field__select-x-wrapper{display:flex;margin-right:4px;margin-left:8px;cursor:pointer}rds-multi-select .rds-chips.rds-chips--size-s{gap:4px}.rds-form-field__select-trigger-value{display:inline-block;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.rds-form-field__select-trigger-value.rds-form-field__select-trigger-value-placeholder{color:var(--rds-color-grey-3)}.rds-form-field__select-hidden-trigger-values-placeholder{display:inline-flex;min-width:32px;height:20px;margin-right:12px;margin-left:4px}.rds-form-field__select-hidden-trigger-values-placeholder>rds-badge{margin-right:12px;margin-left:4px}.rds-form-field--floating-label .rds-form-field__control{align-items:unset}.rds-form-field--floating-label .rds-form-field__select-arrow-wrapper{position:absolute;top:calc(50% - 10px);right:0;display:flex}.rds-form-field--floating-label .rds-form-field__select-x-wrapper button{margin-bottom:16px}.rds-form-field .rds-form-field__label{white-space:unset;color:var(--rds-color-low-contrast);display:flex;align-items:flex-start}.rds-form-field.rds-form-field--side{display:flex;flex-direction:row;--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper{display:flex;justify-content:flex-end}.rds-form-field.rds-form-field--side-right .rds-form-field__label-wrapper .rds-form-field__label{text-align:right}.rds-form-field.rds-form-field--side .rds-form-field__label-wrapper{display:flex;align-items:center;margin-bottom:0;margin-right:12px;width:var(--label-width);overflow:unset;text-overflow:unset;white-space:inherit}.rds-form-field.rds-form-field--side.rds-form-field--hint-or-error-or-counter .rds-form-field__label-wrapper{margin-bottom:24px}.rds-form-field.rds-form-field--side .rds-form-field__container{width:calc(100% - var(--label-width) - 12px)}.rds-form-field.rds-form-field--side.rds-form-field__wrapper-textarea-field .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--side.rds-form-field--select-with-chips .rds-form-field__label-wrapper{padding-top:12px;align-items:flex-start}.rds-form-field.rds-form-field--no-label .rds-form-field__label-wrapper{width:0;height:0;padding:0;margin:0}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-prefix-separator,.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__control-container:hover .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-hover)}.rds-form-field:not(.rds-form-field--focused):not(.rds-form-field--invalid):not(.rds-form-field--disabled) .rds-form-field__select-arrow{color:var(--rds-color-low-contrast)}.rds-form-field.rds-form-field--focused .rds-form-field__container.rds-form-field--global-search .rds-form-field__control-container{outline:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-stroke-active-focus)}.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field.rds-form-field--focused .rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label-wrapper,.rds-form-field.rds-form-field--focused.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label{color:var(--rds-color-stroke-active-focus)}.rds-form-field>.rds-form-field__label-wrapper{margin-bottom:4px}.rds-form-field .rds-form-field__container{flex-direction:column;display:flex;position:relative;text-align:center}.rds-form-field .rds-form-field__container .rds-form-field__control-container{display:flex;border-radius:2px;border:1px solid var(--rds-color-stroke-enabled);background:var(--rds-color-bg-base-1);cursor:text}.rds-form-field .rds-form-field__container .rds-form-field__content{display:flex;position:relative;width:100%}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;border-left:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix{position:relative;width:100%;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{display:flex;align-items:center;color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker{align-items:center;padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix.rds-form-field__content-suffix-datepicker rds-icon{margin-top:0}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{height:100%;position:relative;display:flex;flex-direction:row-reverse}.rds-form-field .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{position:absolute;border-right:1px solid var(--rds-color-stroke-enabled)}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container{padding-bottom:7px;padding-right:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content{display:flex}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{padding-right:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix>*:first-child.rds-form-field__control-suffix{margin-left:8px}.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix,.rds-form-field .rds-form-field__container.rds-form-field--textarea-field.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper{position:absolute;z-index:2;left:0;box-sizing:content-box;width:100%;height:32px;overflow:hidden;text-overflow:ellipsis;transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper--float{height:16px}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{position:absolute;width:100%;left:0;text-align:start;text-overflow:ellipsis;overflow:hidden;white-space:nowrap;color:var(--rds-color-low-contrast);transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{transition-duration:.1s;transition-timing-function:cubic-bezier(.55,0,.55,.2)}.rds-form-field .rds-form-field__container .rds-form-field__control{position:relative;display:flex;margin-top:0;border:none;width:100%;background:transparent;outline:none;color:var(--rds-color-high-contrast);caret-color:var(--rds-color-high-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__control::placeholder{color:var(--rds-color-grey-3)}.rds-form-field .rds-form-field__container.rds-form-field__label--float .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field .rds-form-field__container.rds-form-field--static-label .rds-form-field__control{margin-top:0}.rds-form-field .rds-form-field__container textarea.rds-form-field__control{resize:none;bottom:unset}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-vertical{resize:vertical}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-horizontal{resize:horizontal}.rds-form-field .rds-form-field__container textarea.rds-form-field__control.rds-textarea-resize-both{resize:both}.rds-form-field .rds-form-field__container .rds-form-field__subscript-wrapper{position:absolute;top:calc(100% - 24px);left:0;z-index:-1;align-items:center;display:flex;justify-content:space-between;width:100%;height:16px;padding-left:0}.rds-form-field .rds-form-field__container .rds-form-field__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-form-field .rds-form-field__container .rds-form-field__subscript--hint{color:var(--rds-color-low-contrast)}.rds-form-field .rds-form-field__container .rds-form-field__subscript--error{color:var(--rds-color-error)}.rds-form-field .rds-form-field--hint-or-error-or-counter{padding-bottom:24px}.rds-form-field .rds-form-field--hint-or-error-or-counter .rds-form-field__subscript-wrapper{z-index:auto}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container{border-color:var(--rds-color-disabled);background:var(--rds-color-bg-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container:hover{border-color:var(--rds-color-disabled);cursor:default}.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--disabled .rds-form-field__control-container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-prefix,.rds-form-field.rds-form-field--disabled .rds-form-field__content .rds-form-field__content-suffix,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__container .rds-form-field__label,.rds-form-field.rds-form-field--disabled.rds-form-field--floating-label .rds-form-field__label,.rds-form-field.rds-form-field--disabled .rds-form-field__control,.rds-form-field.rds-form-field--disabled .rds-form-field__subscript--hint,.rds-form-field.rds-form-field--disabled .rds-form-field__select-arrow,.rds-form-field.rds-form-field--disabled .rds-form-field__select-hidden-trigger-values-placeholder .rds-badge--container .rds-badge.rds-badge--black-minimal{color:var(--rds-color-disabled)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{outline:2px solid var(--rds-color-error);outline-offset:-2px;border:none}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-prefix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container .rds-form-field__content-suffix{padding-top:0}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label-wrapper{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled).rds-form-field--floating-label .rds-form-field__label{color:var(--rds-color-error)}.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator,.rds-form-field.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{border-color:var(--rds-color-error)}.rds-form-field.rds-form-field--floating-label .rds-form-field__control{display:inline-block;margin-top:16px}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-textfield-decoration-container{position:relative}.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-outer-spin-button,.rds-form-field.rds-form-field--floating-label input[type=number]::-webkit-inner-spin-button{position:absolute;bottom:0;height:24px;right:0}.rds-form-field .rds-form-field__asterisk{color:var(--rds-color-error)}.rds-form-field .rds-form-field__container.rds-form-field--select .rds-form-field__control-container{cursor:pointer}.rds-form-field .rds-form-field__container .rds-form-field__control{align-items:center}.rds-form-field .rds-form-field__container .rds-form-field__select-value{justify-content:space-between;align-items:center;display:flex;min-width:0;width:calc(100% - 24px)}.rds-form-field .rds-form-field__container .rds-form-field__select-value-placeholder{display:flex;flex-wrap:nowrap;max-height:24px;overflow:hidden}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow-wrapper{position:absolute;right:0;display:flex}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow{margin:0 7px;border-top:5px solid;border-left:5px solid transparent;border-right:5px solid transparent;width:0;height:0}.rds-form-field .rds-form-field__container .rds-form-field__select-arrow--rotate{transform:rotate(180deg)}.rds-form-field.rds-form-field--disabled.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--disabled.rds-form-field--select-with-chips .rds-form-field__control-container{cursor:default}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 14px 4px 15px}.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 15px 4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 15px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--l.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container{padding:3px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:48px;height:48px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:96px;padding:11px 7px 7px 15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:48px;height:unset}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 7px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:24px;width:24px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:15px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 7px);padding-right:15px;margin-right:1px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:8px}.rds-form-field.rds-form-field--l .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label{padding-top:8px;font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label rds-icon{width:16px;height:16px;margin-top:2px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding-top:0;margin-bottom:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float .rds-form-field-icon-wrapper{width:16px;height:16px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__label-wrapper .rds-form-field__label--float rds-icon{width:16px;height:16px;margin-top:0}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__control{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--l .rds-form-field__container textarea.rds-form-field__control{min-height:96px}.rds-form-field.rds-form-field--l .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:12px 8px 8px 16px}.rds-form-field.rds-form-field--l.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--l.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:1px;width:16px;height:16px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 10px 4px 11px}.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 11px 4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px 11px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--m.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container{padding:3px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:36px;height:36px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:72px;padding:7px 7px 7px 11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:2px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:36px;height:unset}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-3px;height:calc(100% + 6px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:12px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:11px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-3px;height:calc(100% + 6px);padding-right:11px;margin-right:1px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:4px}.rds-form-field.rds-form-field--m .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 15px);top:-7px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__control{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--m .rds-form-field__container textarea.rds-form-field__control{min-height:72px}.rds-form-field.rds-form-field--m .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:8px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:8px 8px 8px 12px}.rds-form-field.rds-form-field--m.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:6px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--m.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;margin-top:0;width:16px;height:16px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 6px 4px 7px}.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--invalid .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-picker .rds-form-field__control-container,.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container.rds-form-field--date-range .rds-form-field__control-container{padding:4px 7px 4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--side{--label-width: calc(var(--rds-control-label-width) * 1%)}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s.rds-form-field--side .rds-form-field__label-wrapper .rds-form-field__label rds-icon{margin-left:2px;width:16px;height:16px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:3px 7px 7px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--invalid .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea,.rds-form-field.rds-form-field--s.rds-form-field--floating-label.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:4px 8px 8px 16px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container{padding:3px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container:not(.rds-form-field-textarea){min-height:28px;height:28px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{min-height:64px;padding:10px 7px 7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix rds-icon{margin-top:-1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select .rds-form-field__control-container,.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--select-with-chips .rds-form-field__control-container{min-height:28px;height:unset}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;align-items:center}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix{margin-right:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix>*:last-child.rds-form-field__control-prefix{margin-right:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container{height:100%;position:relative;display:flex;flex-direction:row;width:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-prefix .rds-form-field__control-prefix-separator-container .rds-form-field__control-prefix-separator{position:absolute;top:-4px;height:calc(100% + 8px);border-left:1px solid var(--rds-color-stroke-enabled);padding-left:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-infix,.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix rds-icon{height:18px;width:18px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix{margin-left:8px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container{width:7px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__content .rds-form-field__content-suffix .rds-form-field__control-suffix-separator-container .rds-form-field__control-suffix-separator{top:-4px;height:calc(100% + 8px);padding-right:7px;margin-right:1px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix{padding-right:0}.rds-form-field.rds-form-field--s .rds-form-field__container.rds-form-field--textarea-field .rds-form-field__control-container .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 19px);top:-11px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__control{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-form-field.rds-form-field--s .rds-form-field__container textarea.rds-form-field__control{min-height:64px}.rds-form-field.rds-form-field--s .rds-form-field__container .rds-form-field__subscript-wrapper{margin-top:4px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container{padding:4px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea{padding:11px 8px 8px}.rds-form-field.rds-form-field--s.rds-form-field--invalid:not(.rds-form-field--disabled) .rds-form-field__control-container.rds-form-field-textarea.rds-form-field--static-label .rds-form-field__control-container{padding-top:12px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-prefix .rds-form-field__control-prefix-separator{height:calc(100% + 10px);top:-3px}.rds-form-field.rds-form-field--s.rds-form-field--floating-label .rds-form-field__control-container.rds-form-field-textarea .rds-form-field__content-suffix .rds-form-field__control-suffix-separator{height:calc(100% + 17px);top:-10px}.rds-control-counter{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-select__panel-wrapper{flex-basis:100%}.rds-select__panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;overflow:auto;border-radius:2px;min-width:100%;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1)}.rds-select__option.hide{display:none}.rds-select__option--separator{padding:0;margin:0}.rds-select__option--separator div{width:100%;height:1px;border-bottom:1px solid var(--rds-color-grey-2);padding-bottom:0;margin-bottom:4px}[rds-theme=dark] input[type=number]::-webkit-outer-spin-button,[rds-theme=dark] input[type=number]::-webkit-inner-spin-button{filter:invert(.9)}.rds-form-field.rds-form-field--autocomplete-multi .rds-form-field__container .rds-form-field__control-container{height:unset!important}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--floating-label .rds-form-field__control{margin-top:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:0}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--autocomplete-multi.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--has-value.rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:10px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--l:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:11px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--m:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label) .rds-form-field__container .rds-form-field__control-container{padding-block:4px}.rds-form-field.rds-form-field--select-with-chips.rds-form-field--s:not(.rds-form-field--floating-label).rds-form-field--focused .rds-form-field__container .rds-form-field__control-container{padding-block:5px}.rds-paginator{display:block}.rds-paginator .rds-paginator-container{display:flex;align-items:center;justify-content:flex-end;flex-wrap:wrap-reverse;width:100%}.rds-paginator .rds-paginator-container .rds-paginator-page-size{display:flex;align-items:center;flex-wrap:wrap-reverse}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select{padding-right:16px}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select>button.rds-paginator-page-size__toggle{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast);height:36px;padding-left:11px;padding-right:7px}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select>button.rds-paginator-page-size__toggle .rds-dropdown-toggle-button__content{padding-right:8px}.rds-paginator .rds-paginator-container .rds-paginator-page-size .rds-paginator-page-size-select>button.rds-paginator-page-size__toggle:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{border:1px solid var(--rds-color-stroke-active-focus);padding-left:11px;padding-right:7px}.rds-paginator .rds-paginator-container .rds-paginator-range-label{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast);padding-right:16px}.rds-paginator .rds-paginator-container .rds-paginator-range-actions{display:flex;align-items:center}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-navigation-first,.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-navigation-next{margin-right:8px}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast);padding-left:12px;padding-right:12px}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:36px;padding:0 12px;margin-right:12px;border:1px solid var(--rds-color-stroke-enabled);border-radius:2px;color:var(--rds-color-high-contrast);background-color:var(--rds-color-bg-base-1)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:hover,.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:focus{outline:none}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:hover:not([disabled]){border-color:var(--rds-color-stroke-hover)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:focus:not([disabled]),.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input.cdk-focused.cdk-keyboard-focused:not([disabled]){border-color:var(--rds-color-stroke-active-focus)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input:hover:not([disabled]){cursor:pointer}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input[disabled]{background-color:var(--rds-color-bg-disabled)}.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input::-webkit-outer-spin-button,.rds-paginator .rds-paginator-container .rds-paginator-range-actions .rds-paginator-page-of .rds-paginator-page-number-input::-webkit-inner-spin-button{-webkit-appearance:none;margin:0}.rds-paginator-dropdown{display:flex;flex-direction:column;padding-top:12px;padding-bottom:12px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], pageIndex: [{
                type: Input
            }], length: [{
                type: Input
            }], showItemsOfPageLabel: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], pageSize: [{
                type: Input,
                args: [{ transform: (v) => Math.max(numberAttribute(v, 0), 0) }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], pageSizeOptions: [{
                type: Input
            }], showButtons: [{
                type: Input
            }], presentationMode: [{
                type: Input
            }], hidePageSize: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showFirstLastButtons: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], page: [{
                type: Output
            }] } });

class RdsTooltipModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipModule, declarations: [RdsTooltipDirective, RdsTooltipComponent], imports: [CommonModule, OverlayModule, RdsButtonModule, RdsIconComponent], exports: [RdsTooltipDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipModule, providers: [RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, OverlayModule, RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, OverlayModule, RdsButtonModule, RdsIconComponent],
                    declarations: [RdsTooltipDirective, RdsTooltipComponent],
                    exports: [RdsTooltipDirective],
                    providers: [RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],
                }]
        }] });

class RdsPaginatorBasicModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorBasicModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorBasicModule, declarations: [RdsPaginatorBasicComponent], imports: [CommonModule,
            RdsIconComponent,
            RdsTooltipModule,
            RdsButtonModule,
            A11yModule], exports: [RdsPaginatorBasicComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorBasicModule, providers: [RDS_PAGINATOR_INTL_PROVIDER], imports: [CommonModule,
            RdsTooltipModule,
            RdsButtonModule,
            A11yModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorBasicModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RdsPaginatorBasicComponent],
                    exports: [RdsPaginatorBasicComponent],
                    imports: [
                        CommonModule,
                        RdsIconComponent,
                        RdsTooltipModule,
                        RdsButtonModule,
                        A11yModule,
                    ],
                    providers: [RDS_PAGINATOR_INTL_PROVIDER],
                }]
        }] });

class RdsPaginatorModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorModule, declarations: [RdsPaginatorComponent], imports: [CommonModule,
            RdsDropdownModule,
            RdsMenuModule,
            RdsIconComponent,
            RdsTooltipModule,
            RdsButtonModule,
            RdsPaginatorBasicModule,
            A11yModule], exports: [RdsPaginatorComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorModule, providers: [RDS_PAGINATOR_INTL_PROVIDER], imports: [CommonModule,
            RdsDropdownModule,
            RdsMenuModule,
            RdsTooltipModule,
            RdsButtonModule,
            RdsPaginatorBasicModule,
            A11yModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPaginatorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RdsPaginatorComponent],
                    exports: [RdsPaginatorComponent],
                    imports: [
                        CommonModule,
                        RdsDropdownModule,
                        RdsMenuModule,
                        RdsIconComponent,
                        RdsTooltipModule,
                        RdsButtonModule,
                        RdsPaginatorBasicModule,
                        A11yModule,
                    ],
                    providers: [RDS_PAGINATOR_INTL_PROVIDER],
                }]
        }] });

// this basically is rdsTooltip directive, it's needed only to provide rdsPopover* input names
// and make sure that hide and show delays are = 0
class RdsPopoverDirective extends RdsTooltipDirective {
    constructor() {
        super(...arguments);
        this._hasBackdrop = true;
        this.isPopover = true;
        this.showDelay = 0;
        this.hideDelay = 0;
        this.rdsPopoverRole = 'dialog';
        this.ariaDescription = '';
        this.touchGestures = 'auto';
        this.ariaExpanded = false;
        this._hideArrow = false;
    }
    get hideArrow() {
        return super.hideArrow;
    }
    set hideArrow(shouldHideArrow) {
        super.hideArrow = shouldHideArrow;
    }
    get position() {
        return super.position;
    }
    set position(value) {
        super.position = value;
    }
    set disabled(value) {
        super.disabled = value;
    }
    get disabled() {
        return super.disabled;
    }
    get content() {
        return super.content;
    }
    set content(value) {
        super.content = value;
    }
    get tooltipClass() {
        return super.tooltipClass;
    }
    set tooltipClass(value) {
        super.tooltipClass = value;
    }
    set hasBackdrop(v) {
        super.hasBackdrop = v;
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set showCloseButton(v) {
        super.showCloseButton = v;
    }
    get showCloseButton() {
        return super.showCloseButton;
    }
    handleFocus() {
        setTimeout(() => {
            if (!this._tooltipInstance) {
                return;
            }
            const firstInteractive = this._tooltipInstance.getFirstFocusableElement();
            const lastInteractive = this._tooltipInstance.getLastFocusableElement();
            if (!firstInteractive) {
                return;
            }
            this.focusMonitor.focusVia(firstInteractive, this.origin);
            this.createTabHandler(firstInteractive, true);
            if (lastInteractive) {
                this.createTabHandler(lastInteractive, false);
            }
        });
    }
    createTabHandler(el, withShiftKey) {
        fromEvent(el, 'keydown')
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            const { code, shiftKey } = event;
            if (code === 'Tab' && shiftKey === withShiftKey) {
                event.preventDefault();
                this.hide();
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsPopoverDirective, selector: "[rdsPopover], [rds-popover]", inputs: { rdsPopoverRole: "rdsPopoverRole", ariaDescription: ["rdsPopoverAriaDescription", "ariaDescription"], touchGestures: ["rdsPopoverTouchGestures", "touchGestures"], position: ["rdsPopoverPosition", "position"], disabled: ["rdsPopoverDisabled", "disabled"], content: ["rdsPopover", "content"], tooltipClass: ["rdsPopoverClass", "tooltipClass"], hasBackdrop: ["rdsPopoverHasBackdrop", "hasBackdrop"], showCloseButton: ["rdsPopoverShowCloseButton", "showCloseButton"] }, host: { properties: { "attr.aria-haspopup": "this.rdsPopoverRole", "attr.aria-expanded": "this.ariaExpanded" } }, exportAs: ["rdsPopover"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsPopover], [rds-popover]',
                    exportAs: 'rdsPopover',
                }]
        }], propDecorators: { rdsPopoverRole: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaDescription: [{
                type: Input,
                args: ['rdsPopoverAriaDescription']
            }], touchGestures: [{
                type: Input,
                args: ['rdsPopoverTouchGestures']
            }], position: [{
                type: Input,
                args: ['rdsPopoverPosition']
            }], disabled: [{
                type: Input,
                args: ['rdsPopoverDisabled']
            }], content: [{
                type: Input,
                args: ['rdsPopover']
            }], tooltipClass: [{
                type: Input,
                args: ['rdsPopoverClass']
            }], hasBackdrop: [{
                type: Input,
                args: ['rdsPopoverHasBackdrop']
            }], showCloseButton: [{
                type: Input,
                args: ['rdsPopoverShowCloseButton']
            }], ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }] } });

const SCROLL_THROTTLE_MS = 20;
const RDS_POPOVER_SCROLL_STRATEGY = new InjectionToken('RDS_POPOVER_SCROLL_STRATEGY');
/** @docs-private */
function RDS_POPOVER_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS });
}
/** @docs-private */
const RDS_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: RDS_POPOVER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: RDS_POPOVER_SCROLL_STRATEGY_FACTORY,
};
const RDS_POPOVER_DEFAULT_OPTIONS = new InjectionToken('RDS_POPOVER_DEFAULT_OPTIONS', {
    providedIn: 'root',
    factory: RDS_POPOVER_DEFAULT_OPTIONS_FACTORY,
});
/** @docs-private */
function RDS_POPOVER_DEFAULT_OPTIONS_FACTORY() {
    return {
        hideDelay: 0,
        showDelay: 0,
        touchendHideDelay: 1500,
        hideArrow: false,
    };
}

class RdsPopoverHeaderDirective {
    constructor() {
        this.class = 'rds-popover-header';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsPopoverHeaderDirective, selector: "[rdsPopoverHeader], [rds-popover-header], rds-popover-header", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsPopoverHeader], [rds-popover-header], rds-popover-header',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsPopoverParagraphDirective {
    constructor() {
        this.class = 'rds-popover-paragraph';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverParagraphDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsPopoverParagraphDirective, selector: "[rdsPopoverParagraph], [rds-popover-paragraph], rds-popover-paragraph", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverParagraphDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsPopoverParagraph], [rds-popover-paragraph], rds-popover-paragraph',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsPopoverTextContentComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverTextContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsPopoverTextContentComponent, selector: "rds-popover-text-content", ngImport: i0, template: "<ng-content\n  select=\"rds-popover-header, [rdsPopoverHeader], [rds-popover-header]\"\n/>\n<ng-content\n  select=\"rds-popover-paragraph, [rdsPopoverParagraph], [rds-popover-paragraph]\"\n/>\n", styles: ["rds-popover-text-content .rds-popover-header{color:var(--rds-color-high-contrast);text-align:left;margin-bottom:16px}@media (max-width: 767.999999px){rds-popover-text-content .rds-popover-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){rds-popover-text-content .rds-popover-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){rds-popover-text-content .rds-popover-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){rds-popover-text-content .rds-popover-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){rds-popover-text-content .rds-popover-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}rds-popover-text-content .rds-popover-paragraph{color:var(--rds-color-high-contrast);text-align:left;max-width:18.25rem}@media (max-width: 767.999999px){rds-popover-text-content .rds-popover-paragraph{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverTextContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-popover-text-content', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content\n  select=\"rds-popover-header, [rdsPopoverHeader], [rds-popover-header]\"\n/>\n<ng-content\n  select=\"rds-popover-paragraph, [rdsPopoverParagraph], [rds-popover-paragraph]\"\n/>\n", styles: ["rds-popover-text-content .rds-popover-header{color:var(--rds-color-high-contrast);text-align:left;margin-bottom:16px}@media (max-width: 767.999999px){rds-popover-text-content .rds-popover-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){rds-popover-text-content .rds-popover-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){rds-popover-text-content .rds-popover-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){rds-popover-text-content .rds-popover-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){rds-popover-text-content .rds-popover-header{font-size:20px;font-weight:400;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}rds-popover-text-content .rds-popover-paragraph{color:var(--rds-color-high-contrast);text-align:left;max-width:18.25rem}@media (max-width: 767.999999px){rds-popover-text-content .rds-popover-paragraph{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){rds-popover-text-content .rds-popover-paragraph{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}\n"] }]
        }] });

class RdsPopoverModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverModule, declarations: [RdsPopoverDirective,
            RdsPopoverHeaderDirective,
            RdsPopoverParagraphDirective,
            RdsPopoverTextContentComponent], imports: [CommonModule, RdsTooltipModule], exports: [RdsPopoverDirective,
            RdsTooltipModule,
            RdsPopoverHeaderDirective,
            RdsPopoverParagraphDirective,
            RdsPopoverTextContentComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverModule, providers: [RDS_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, RdsTooltipModule, RdsTooltipModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsTooltipModule],
                    declarations: [
                        RdsPopoverDirective,
                        RdsPopoverHeaderDirective,
                        RdsPopoverParagraphDirective,
                        RdsPopoverTextContentComponent,
                    ],
                    exports: [
                        RdsPopoverDirective,
                        RdsTooltipModule,
                        RdsPopoverHeaderDirective,
                        RdsPopoverParagraphDirective,
                        RdsPopoverTextContentComponent,
                    ],
                    providers: [RDS_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER],
                }]
        }] });

let progressbarId = 0;
class RdsProgressBarComponent {
    get hostMode() {
        return this.mode;
    }
    get hostValueNow() {
        let valueNow = this.value;
        if (this.mode === 'indeterminate') {
            valueNow = null;
        }
        return valueNow;
    }
    constructor() {
        this.progressbarId = `rds-progress-bar-${progressbarId++}`;
        this.hostClass = true;
        this.hostRole = 'progressbar';
        this.hostAriaValuemin = '0';
        this.hostAriaValuemax = '100';
        /* eslint-disable-next-line @angular-eslint/no-input-rename */
        this.value = 0;
        /* eslint-disable-next-line @angular-eslint/no-input-rename */
        this.bufferValue = 0;
        this.mode = 'indeterminate';
        // We need to prefix the SVG reference with the current path, otherwise they won't work
        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,
        // because named route URLs can contain parentheses
        const path = location ? location.href.split('#')[0] : '';
        this.rectangleFillValue = `url('${path}#${this.progressbarId}')`;
    }
    primaryTransform() {
        const scale = this.value / 100;
        return { transform: `scaleX(${scale})` };
    }
    bufferTransform() {
        if (this.mode === 'buffer') {
            const scale = this.bufferValue / 100;
            return { transform: `scaleX(${scale})` };
        }
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsProgressBarComponent, selector: "rds-progress-bar", inputs: { value: ["value", "value", (v) => clamp(numberAttribute(v, 0))], bufferValue: ["bufferValue", "bufferValue", (v) => clamp(numberAttribute(v, 0))], mode: "mode" }, host: { properties: { "class.rds-progress-bar": "this.hostClass", "attr.role": "this.hostRole", "attr.aria-valuemin": "this.hostAriaValuemin", "attr.aria-valuemax": "this.hostAriaValuemax", "attr.mode": "this.hostMode", "attr.aria-valuenow": "this.hostValueNow" } }, viewQueries: [{ propertyName: "_primaryValueBar", first: true, predicate: ["primaryValueBar"], descendants: true }], ngImport: i0, template: `
    <svg
      width="100%"
      height="4"
      focusable="false"
      class="rds-progress-bar-background rds-progress-bar-element"
    >
      <defs>
        <pattern
          [id]="progressbarId"
          x="4"
          y="0"
          width="8"
          height="4"
          patternUnits="userSpaceOnUse"
        >
          <circle cx="2" cy="2" r="2" />
        </pattern>
      </defs>
      <rect [attr.fill]="rectangleFillValue" width="100%" height="100%" />
    </svg>

    <div
      class="rds-progress-bar-buffer rds-progress-bar-element"
      [ngStyle]="bufferTransform()"
    ></div>
    <div
      class="rds-progress-bar-primary rds-progress-bar-fill rds-progress-bar-element"
      [ngStyle]="primaryTransform()"
      #primaryValueBar
    ></div>
    <div
      class="rds-progress-bar-secondary rds-progress-bar-fill rds-progress-bar-element"
    ></div>
  `, isInline: true, styles: [".rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-informative);position:relative;display:block;overflow:hidden;transition:opacity .25s linear;width:100%;height:4px}.rds-progress-bar .rds-progress-bar-element,.rds-progress-bar .rds-progress-bar-fill:after{position:absolute;width:100%;height:100%}.rds-progress-bar .rds-progress-bar-background{width:calc(100% + 10px);fill:var(--rds-color-track)}.rds-progress-bar .rds-progress-bar-buffer{transform-origin:top left;transition:transform .25s ease;background-color:var(--rds-color-track)}.rds-progress-bar .rds-progress-bar-secondary{display:none}.rds-progress-bar .rds-progress-bar-fill{transform-origin:top left;animation:none;transition:transform .25s ease}.rds-progress-bar .rds-progress-bar-fill:after{left:0;display:inline-block;animation:none;background-color:var(--rds-progress-bar-fill-color);content:\"\"}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-fill{transition:none}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-primary{animation:rds-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-primary.rds-progress-bar-fill:after{animation:rds-progress-bar-primary-indeterminate-scale 2s infinite linear}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-secondary{left:-54.888891%;display:block;animation:rds-progress-bar-secondary-indeterminate-translate 2s infinite linear}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-secondary.rds-progress-bar-fill:after{animation:rds-progress-bar-secondary-indeterminate-scale 2s infinite linear}.rds-progress-bar[mode=buffer] .rds-progress-bar-background{display:block;animation:rds-progress-bar-background-scroll .25s infinite linear}.rds-progress-bar[mode=buffer] .rds-progress-bar-fill:after{background-color:transparent}@keyframes rds-progress-bar-primary-indeterminate-translate{0%{transform:translate(0)}20%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translate(0)}59.15%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translate(83.67142%)}to{transform:translate(200.611057%)}}@keyframes rds-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.334731,.12482,.785844,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.661479)}to{transform:scaleX(.08)}}@keyframes rds-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.515058,.409685);transform:translate(0)}25%{animation-timing-function:cubic-bezier(.31033,.284058,.8,.733712);transform:translate(37.651913%)}48.35%{animation-timing-function:cubic-bezier(.4,.627035,.6,.902026);transform:translate(84.386165%)}to{transform:translate(160.277782%)}}@keyframes rds-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.515058,.409685);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.284058,.8,.733712);transform:scaleX(.457104)}44.15%{animation-timing-function:cubic-bezier(.4,.627035,.6,.902026);transform:scaleX(.72796)}to{transform:scaleX(.08)}}@keyframes rds-progress-bar-background-scroll{to{transform:translate(-8px)}}\n"], dependencies: [{ kind: "directive", type: i1$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-progress-bar', template: `
    <svg
      width="100%"
      height="4"
      focusable="false"
      class="rds-progress-bar-background rds-progress-bar-element"
    >
      <defs>
        <pattern
          [id]="progressbarId"
          x="4"
          y="0"
          width="8"
          height="4"
          patternUnits="userSpaceOnUse"
        >
          <circle cx="2" cy="2" r="2" />
        </pattern>
      </defs>
      <rect [attr.fill]="rectangleFillValue" width="100%" height="100%" />
    </svg>

    <div
      class="rds-progress-bar-buffer rds-progress-bar-element"
      [ngStyle]="bufferTransform()"
    ></div>
    <div
      class="rds-progress-bar-primary rds-progress-bar-fill rds-progress-bar-element"
      [ngStyle]="primaryTransform()"
      #primaryValueBar
    ></div>
    <div
      class="rds-progress-bar-secondary rds-progress-bar-fill rds-progress-bar-element"
    ></div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-informative);position:relative;display:block;overflow:hidden;transition:opacity .25s linear;width:100%;height:4px}.rds-progress-bar .rds-progress-bar-element,.rds-progress-bar .rds-progress-bar-fill:after{position:absolute;width:100%;height:100%}.rds-progress-bar .rds-progress-bar-background{width:calc(100% + 10px);fill:var(--rds-color-track)}.rds-progress-bar .rds-progress-bar-buffer{transform-origin:top left;transition:transform .25s ease;background-color:var(--rds-color-track)}.rds-progress-bar .rds-progress-bar-secondary{display:none}.rds-progress-bar .rds-progress-bar-fill{transform-origin:top left;animation:none;transition:transform .25s ease}.rds-progress-bar .rds-progress-bar-fill:after{left:0;display:inline-block;animation:none;background-color:var(--rds-progress-bar-fill-color);content:\"\"}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-fill{transition:none}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-primary{animation:rds-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-primary.rds-progress-bar-fill:after{animation:rds-progress-bar-primary-indeterminate-scale 2s infinite linear}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-secondary{left:-54.888891%;display:block;animation:rds-progress-bar-secondary-indeterminate-translate 2s infinite linear}.rds-progress-bar[mode=indeterminate] .rds-progress-bar-secondary.rds-progress-bar-fill:after{animation:rds-progress-bar-secondary-indeterminate-scale 2s infinite linear}.rds-progress-bar[mode=buffer] .rds-progress-bar-background{display:block;animation:rds-progress-bar-background-scroll .25s infinite linear}.rds-progress-bar[mode=buffer] .rds-progress-bar-fill:after{background-color:transparent}@keyframes rds-progress-bar-primary-indeterminate-translate{0%{transform:translate(0)}20%{animation-timing-function:cubic-bezier(.5,0,.701732,.495819);transform:translate(0)}59.15%{animation-timing-function:cubic-bezier(.302435,.381352,.55,.956352);transform:translate(83.67142%)}to{transform:translate(200.611057%)}}@keyframes rds-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.334731,.12482,.785844,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.661479)}to{transform:scaleX(.08)}}@keyframes rds-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.515058,.409685);transform:translate(0)}25%{animation-timing-function:cubic-bezier(.31033,.284058,.8,.733712);transform:translate(37.651913%)}48.35%{animation-timing-function:cubic-bezier(.4,.627035,.6,.902026);transform:translate(84.386165%)}to{transform:translate(160.277782%)}}@keyframes rds-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.515058,.409685);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.284058,.8,.733712);transform:scaleX(.457104)}44.15%{animation-timing-function:cubic-bezier(.4,.627035,.6,.902026);transform:scaleX(.72796)}to{transform:scaleX(.08)}}@keyframes rds-progress-bar-background-scroll{to{transform:translate(-8px)}}\n"] }]
        }], ctorParameters: () => [], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class.rds-progress-bar']
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostAriaValuemin: [{
                type: HostBinding,
                args: ['attr.aria-valuemin']
            }], hostAriaValuemax: [{
                type: HostBinding,
                args: ['attr.aria-valuemax']
            }], hostMode: [{
                type: HostBinding,
                args: ['attr.mode']
            }], hostValueNow: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }], value: [{
                type: Input,
                args: [{ transform: (v) => clamp(numberAttribute(v, 0)) }]
            }], bufferValue: [{
                type: Input,
                args: [{ transform: (v) => clamp(numberAttribute(v, 0)) }]
            }], mode: [{
                type: Input
            }], _primaryValueBar: [{
                type: ViewChild,
                args: ['primaryValueBar']
            }] } });
/** Clamps a value to be between two numbers, by default 0 and 100. */
function clamp(value, min = 0, max = 100) {
    return Math.max(min, Math.min(max, value));
}

class RdsProgressBarModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressBarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressBarModule, declarations: [RdsProgressBarComponent], imports: [CommonModule, LottieComponent], exports: [RdsProgressBarComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressBarModule, imports: [CommonModule, LottieComponent] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressBarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, LottieComponent],
                    exports: [RdsProgressBarComponent],
                    declarations: [RdsProgressBarComponent],
                }]
        }] });

class RdsRadioChangedEvent {
    constructor(source, value) {
        this.source = source;
        this.value = value;
    }
}

/**
 * Provider Expression that allows rds-radio-group to register as a ControlValueAccessor. This
 * allows it to support [(ngModel)] and ngControl.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const RDS_RADIO_GROUP = new InjectionToken('RDS_RADIO_GROUP');
/**
 * Injection token that can be used to inject instances of `RdsRadioGroupDirective`. It serves as
 * alternative token to the actual `RdsRadioGroupDirective` class which could cause unnecessary
 * retention of the class and its component metadata.
 */
const RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => RdsRadioGroupDirective),
    multi: true,
};
let nextUniqueId$2 = 0;
class RdsRadioGroupDirective {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.injector = inject(Injector);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, { optional: true });
        this._name = `rds-radio-group-${nextUniqueId$2++}`;
        this._selected = null;
        this._isInitialized = false;
        this._labelPosition = 'after';
        this._errorState = false;
        this.hostClass = 'rds-radio-group';
        this.disabled = false;
        this.required = false;
        this.buttonChanged = new EventEmitter();
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this._controlValueAccessorChangeFn = () => { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.onTouched = () => { };
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
        this.updateRadioButtonNames();
    }
    get labelPosition() {
        return this._labelPosition;
    }
    set labelPosition(v) {
        const oldPosition = this._labelPosition;
        this._labelPosition = v === 'before' ? 'before' : 'after';
        if (oldPosition !== this._labelPosition) {
            this._radios?.forEach((r) => (r.labelPosition = this.labelPosition));
            this.markRadiosForCheck();
        }
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (this._value !== newValue) {
            this._value = newValue;
            this.updateSelectedRadioFromValue();
            this.checkSelectedRadioButton();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(selected) {
        this._selected = selected;
        this.value = selected ? selected.value : null;
        this.checkSelectedRadioButton();
    }
    ngOnInit() {
        const injectedControl = this.injector.get(NgControl);
        switch (injectedControl.constructor) {
            case NgModel: {
                const { control, update } = injectedControl;
                this.control = control;
                this.control.valueChanges
                    .pipe(tap((value) => update.emit(value)), takeUntilDestroyed(this.destroyRef))
                    .subscribe();
                break;
            }
            case FormControlName: {
                this.control = this.injector
                    .get(FormGroupDirective)
                    .getControl(injectedControl);
                break;
            }
            default: {
                this.control = injectedControl
                    .form;
                break;
            }
        }
    }
    ngAfterContentInit() {
        // Mark this component as initialized in AfterContentInit because the initial value can
        // possibly be set by NgModel on RdsRadioGroupDirective, and it is possible that the OnInit of the
        // NgModel occurs *after* the OnInit of the RdsRadioGroupDirective.
        this._isInitialized = true;
        this._radios?.forEach((r) => (r.labelPosition = this.labelPosition));
        this.markRadiosForCheck();
    }
    ngDoCheck() {
        if (this.control) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._errorState = updateErrorState(this._errorState, this.parentFormGroup, this.parentForm, this.control);
        }
    }
    checkSelectedRadioButton() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    touch() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    updateRadioButtonNames() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.name = this.name;
                radio.markForCheck();
            });
        }
    }
    updateSelectedRadioFromValue() {
        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this._radios && !isAlreadySelected) {
            this._selected = null;
            this._radios.forEach((radio) => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    emitChangeEvent() {
        if (this._isInitialized) {
            this.buttonChanged.emit(new RdsRadioChangedEvent(this._selected, this._value));
        }
    }
    markRadiosForCheck() {
        if (this._radios) {
            this._radios.forEach((radio) => radio.markForCheck());
        }
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this._controlValueAccessorChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsRadioGroupDirective, selector: "rds-radio-group", inputs: { name: "name", labelPosition: "labelPosition", value: "value", selected: "selected", disabled: ["disabled", "disabled", booleanAttribute], required: ["required", "required", booleanAttribute] }, outputs: { buttonChanged: "buttonChanged" }, host: { properties: { "class": "this.hostClass" } }, providers: [
            RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,
            { provide: RDS_RADIO_GROUP, useExisting: RdsRadioGroupDirective },
        ], queries: [{ propertyName: "_radios", predicate: i0.forwardRef(() => RdsRadioButtonComponent), descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-radio-group',
                    providers: [
                        RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,
                        { provide: RDS_RADIO_GROUP, useExisting: RdsRadioGroupDirective },
                    ],
                }]
        }], propDecorators: { _radios: [{
                type: ContentChildren,
                args: [forwardRef(() => RdsRadioButtonComponent), {
                        descendants: true,
                    }]
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], name: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], value: [{
                type: Input
            }], selected: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonChanged: [{
                type: Output
            }] } });

let nextUniqueId$1 = 0;
const rdsRadioAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
class RdsRadioButtonComponent {
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    get errorState() {
        if (this.radioGroup) {
            const parent = this.radioGroup.parentFormGroup || this.radioGroup.parentForm;
            const control = this.radioGroup.control;
            if (control) {
                return (control.invalid && (control.touched || parent?.submitted || false));
            }
        }
        return false;
    }
    set checked(value) {
        const newCheckedState = booleanAttribute(value);
        if (this._checked !== newCheckedState) {
            this._checked = newCheckedState;
            if (newCheckedState &&
                this.radioGroup &&
                this.radioGroup.value !== this.value) {
                this.radioGroup.selected = this;
            }
            else if (!newCheckedState &&
                this.radioGroup &&
                this.radioGroup.value === this.value) {
                this.radioGroup.selected = null;
            }
            if (newCheckedState) {
                this.radioDispatcher.notify(this.id, this.name);
            }
        }
    }
    get checked() {
        return this._checked;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            if (this.radioGroup !== null) {
                if (!this.checked) {
                    this.checked = this.radioGroup.value === value;
                }
                if (this.checked) {
                    this.radioGroup.selected = this;
                }
            }
        }
    }
    get labelPosition() {
        return (this._labelPosition ||
            (this.radioGroup && this.radioGroup.labelPosition) ||
            'after');
    }
    set labelPosition(value) {
        this._labelPosition = value;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
    }
    get disabled() {
        return (this._disabled || (this.radioGroup !== null && this.radioGroup.disabled));
    }
    set required(value) {
        this._required = booleanAttribute(value);
    }
    get required() {
        return (this._required || (this.radioGroup && this.radioGroup.required) || false);
    }
    onFocus() {
        this._inputElement.nativeElement.focus();
    }
    get isErrorMessageVisible() {
        return this.errorState;
    }
    constructor() {
        this.radioGroup = inject(RDS_RADIO_GROUP, { optional: true });
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.focusMonitor = inject(FocusMonitor);
        this.radioDispatcher = inject(UniqueSelectionDispatcher);
        this._uniqueId = `rds-radio-${++nextUniqueId$1}`;
        this.subscriptAnimationState = '';
        this.hostClass = 'rds-radio-button';
        this.id = this._uniqueId;
        this.size = 'l';
        this._checked = false;
        this.buttonChanged = new EventEmitter();
        this.removeUniqueSelectionListener = noop;
        this.removeUniqueSelectionListener = this.radioDispatcher.listen((id, name) => {
            if (id !== this.id && name === this.name) {
                this.checked = false;
            }
        });
    }
    focus(options) {
        this.focusMonitor.focusVia(this._inputElement, 'keyboard', options);
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    ngOnInit() {
        if (this.radioGroup) {
            this.checked = this.radioGroup.value === this._value;
            this.name = this.radioGroup.name;
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((focusOrigin) => {
            if (!focusOrigin && this.radioGroup) {
                this.radioGroup.touch();
            }
        });
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
        // Run change detection if the value changes.
        if (this.radioGroup) {
            if (this.radioGroup.control && this.radioGroup.control.valueChanges) {
                this.radioGroup.control.valueChanges
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => {
                    this.radioGroup?.control?.markAsDirty();
                    this.radioGroup?.control?.markAsTouched();
                    this.cdr.markForCheck();
                });
            }
            const parent = this.radioGroup.parentFormGroup || this.radioGroup.control.parent;
            if (parent instanceof FormGroupDirective) {
                parent.ngSubmit
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => {
                    this.cdr.markForCheck();
                });
            }
        }
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this.removeUniqueSelectionListener();
    }
    emitChangeEvent() {
        this.buttonChanged.emit(new RdsRadioChangedEvent(this, this._value));
    }
    onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `radio-button` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
    }
    onInputChange(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `buttonChange` output.
        event.stopPropagation();
        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;
        this.checked = true;
        this.emitChangeEvent();
        if (this.radioGroup) {
            this.radioGroup._controlValueAccessorChangeFn(this.value);
            if (groupValueChanged) {
                this.radioGroup.emitChangeEvent();
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsRadioButtonComponent, selector: "rds-radio-button", inputs: { id: "id", name: "name", size: "size", ariaLabel: "ariaLabel", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], checked: "checked", value: "value", labelPosition: "labelPosition", disabled: "disabled", required: "required" }, outputs: { buttonChanged: "buttonChanged" }, host: { listeners: { "focus": "onFocus()" }, properties: { "class": "this.hostClass", "class.rds-radio--invalid": "this.errorState", "attr.id": "this.id", "attr.aria-label": "this.ariaLabel", "attr.aria-labelledby": "this.ariaLabelledby", "attr.aria-describedby": "this.ariaDescribedby", "class.rds-radio-checked": "this.checked", "class.rds-radio-disabled": "this.disabled" } }, viewQueries: [{ propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: `
    <label [attr.for]="inputId" class="rds-radio-label">
      <!-- The actual 'radio' part of the control. -->
      <div class="rds-radio-container">
        <div class="rds-radio-checkmark-outer-circle"></div>
        <div class="rds-radio-checkmark-inner-circle"></div>
        <input
          class="rds-radio-input"
          type="radio"
          [id]="inputId"
          [checked]="checked"
          [disabled]="disabled"
          [attr.name]="name"
          [attr.value]="value"
          [required]="required"
          [attr.aria-label]="ariaLabel"
          [attr.aria-labelledby]="ariaLabelledby"
          [attr.aria-describedby]="ariaDescribedby"
          (change)="onInputChange($event)"
          (click)="onInputClick($event)"
        />
        <div class="rds-checkmark-hover"></div>
      </div>

      <!-- The label content for radio control. -->
      <div
        class="rds-radio-label-content"
        [class.rds-radio-label-before]="labelPosition === 'before'"
        [ngClass]="'rds-radio-label-content--' + size"
      >
        <!-- Add an invisible span so JAWS can read the label -->
        <span style="display:none">&nbsp;</span>
        <ng-content />
      </div>
    </label>
    <div class="rds-radio__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-radio__subscript rds-radio__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-radio__subscript rds-radio__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, isInline: true, styles: [".rds-radio-checkmark-inner-circle{border-radius:50%;height:20px;left:0;position:absolute;top:0;transition:transform ease .28s,background-color ease .28s;width:20px;background:var(--rds-color-informative);transform:scale(.001)}.rds-radio-checked .rds-radio-checkmark-inner-circle{transform:scale(.5)}.cdk-keyboard-focused.rds-radio-button .rds-checkmark-hover{display:flex;border:2px solid var(--rds-color-stroke-active-focus)}.rds-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-inner-circle{background:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-600-grey-2)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-inner-circle{background:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.rds-radio-button .rds-radio-container .rds-radio-checkmark-outer-circle{height:20px;left:0;position:absolute;top:0;transition:border-color ease .28s;width:20px;border-width:2px;border-style:solid;border-radius:50%}.rds-radio-button .rds-radio-container .rds-radio-input{bottom:0;left:50%;border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none}.rds-radio-button.rds-radio-disabled .rds-radio-label-content{color:var(--rds-color-disabled)}.rds-radio-button.rds-radio-disabled .rds-radio-label{cursor:default}.rds-radio-button .rds-checkmark-hover{display:none;position:absolute;top:-8px;left:-8px;height:36px;width:36px;border-radius:50%;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-radio-button .rds-radio-label-content{padding-left:10px;color:var(--rds-color-high-contrast)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-checkmark-outer-circle,.rds-radio-button .rds-radio-checkmark-inner-circle{z-index:1}.rds-radio-button:hover:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex}.rds-radio-button:active:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex;background-color:var(--rds-color-bg-transparent-pressed)}.rds-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.rds-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:10px;padding-right:0}.rds-radio-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content.rds-radio-label-before{order:-1;padding-left:0;padding-right:10px}.rds-radio__subscript-wrapper>div:not(:empty){margin-top:8px}.rds-radio-button.rds-radio-disabled .rds-radio__subscript--hint{color:var(--rds-color-disabled)}.rds-radio__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-radio__subscript--hint{color:var(--rds-color-low-contrast)}.rds-radio__subscript--error{color:var(--rds-color-error)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [rdsRadioAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-radio-button', template: `
    <label [attr.for]="inputId" class="rds-radio-label">
      <!-- The actual 'radio' part of the control. -->
      <div class="rds-radio-container">
        <div class="rds-radio-checkmark-outer-circle"></div>
        <div class="rds-radio-checkmark-inner-circle"></div>
        <input
          class="rds-radio-input"
          type="radio"
          [id]="inputId"
          [checked]="checked"
          [disabled]="disabled"
          [attr.name]="name"
          [attr.value]="value"
          [required]="required"
          [attr.aria-label]="ariaLabel"
          [attr.aria-labelledby]="ariaLabelledby"
          [attr.aria-describedby]="ariaDescribedby"
          (change)="onInputChange($event)"
          (click)="onInputClick($event)"
        />
        <div class="rds-checkmark-hover"></div>
      </div>

      <!-- The label content for radio control. -->
      <div
        class="rds-radio-label-content"
        [class.rds-radio-label-before]="labelPosition === 'before'"
        [ngClass]="'rds-radio-label-content--' + size"
      >
        <!-- Add an invisible span so JAWS can read the label -->
        <span style="display:none">&nbsp;</span>
        <ng-content />
      </div>
    </label>
    <div class="rds-radio__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-radio__subscript rds-radio__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-radio__subscript rds-radio__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, encapsulation: ViewEncapsulation.None, animations: [rdsRadioAnimations.transitionMessages], changeDetection: ChangeDetectionStrategy.OnPush, styles: [".rds-radio-checkmark-inner-circle{border-radius:50%;height:20px;left:0;position:absolute;top:0;transition:transform ease .28s,background-color ease .28s;width:20px;background:var(--rds-color-informative);transform:scale(.001)}.rds-radio-checked .rds-radio-checkmark-inner-circle{transform:scale(.5)}.cdk-keyboard-focused.rds-radio-button .rds-checkmark-hover{display:flex;border:2px solid var(--rds-color-stroke-active-focus)}.rds-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-inner-circle{background:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-600-grey-2)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-inner-circle{background:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.rds-radio-button .rds-radio-container .rds-radio-checkmark-outer-circle{height:20px;left:0;position:absolute;top:0;transition:border-color ease .28s;width:20px;border-width:2px;border-style:solid;border-radius:50%}.rds-radio-button .rds-radio-container .rds-radio-input{bottom:0;left:50%;border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none}.rds-radio-button.rds-radio-disabled .rds-radio-label-content{color:var(--rds-color-disabled)}.rds-radio-button.rds-radio-disabled .rds-radio-label{cursor:default}.rds-radio-button .rds-checkmark-hover{display:none;position:absolute;top:-8px;left:-8px;height:36px;width:36px;border-radius:50%;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-radio-button .rds-radio-label-content{padding-left:10px;color:var(--rds-color-high-contrast)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-checkmark-outer-circle,.rds-radio-button .rds-radio-checkmark-inner-circle{z-index:1}.rds-radio-button:hover:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex}.rds-radio-button:active:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex;background-color:var(--rds-color-bg-transparent-pressed)}.rds-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.rds-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:10px;padding-right:0}.rds-radio-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content.rds-radio-label-before{order:-1;padding-left:0;padding-right:10px}.rds-radio__subscript-wrapper>div:not(:empty){margin-top:8px}.rds-radio-button.rds-radio-disabled .rds-radio__subscript--hint{color:var(--rds-color-disabled)}.rds-radio__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-radio__subscript--hint{color:var(--rds-color-low-contrast)}.rds-radio__subscript--error{color:var(--rds-color-error)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { _inputElement: [{
                type: ViewChild,
                args: ['input']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], errorState: [{
                type: HostBinding,
                args: ['class.rds-radio--invalid']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }, {
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }, {
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], checked: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.rds-radio-checked']
            }], value: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.rds-radio-disabled']
            }, {
                type: Input
            }], required: [{
                type: Input
            }], buttonChanged: [{
                type: Output
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }] } });

class RdsRadioButtonModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonModule, declarations: [RdsRadioButtonComponent, RdsRadioGroupDirective], imports: [CommonModule, RdsHelperTextModule], exports: [RdsRadioButtonComponent, RdsRadioGroupDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonModule, imports: [CommonModule, RdsHelperTextModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsHelperTextModule],
                    declarations: [RdsRadioButtonComponent, RdsRadioGroupDirective],
                    exports: [RdsRadioButtonComponent, RdsRadioGroupDirective],
                }]
        }] });

class RdsSidenavService {
    constructor() {
        this._isMinimal = new BehaviorSubject(false);
        this.isMinimal$ = this._isMinimal.asObservable();
    }
    set isMinimal(v) {
        this._isMinimal.next(v);
    }
    get isMinimal() {
        return this._isMinimal.getValue();
    }
    toggleIsMinimal() {
        this.isMinimal = !this.isMinimal;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavService, decorators: [{
            type: Injectable
        }] });

const RDS_SIDENAV_MENU_PANEL = new InjectionToken('RDS_SIDENAV_MENU_PANEL');

/*
 * Need for selecting both RdsSidenavMenuitem and RdsSidenavMenuTrigger
 * in a single @ContentChildren query
 * */
class SidenavItem {
}

class RdsSidenavMenuitemComponent {
    constructor() {
        this._parentMenu = inject(RDS_SIDENAV_MENU_PANEL, {
            optional: true,
        });
        this.sidenavService = inject(RdsSidenavService);
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.role = 'menuitem';
        this._hovered = new Subject();
        this._focused = new Subject();
        this.nativeElement = this.elementRef.nativeElement;
        this.rdsMenuItemClass = true;
        this.rdsFocusIndicatorClass = true;
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.nativeElement, origin, options);
        }
        else {
            this.nativeElement.focus(options);
        }
    }
    ngOnInit() {
        this.sidenavService.isMinimal$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((v) => (this.isMinimal = v));
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, false)
            .pipe(filter((v) => !!v), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._focused.next(this));
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this._hovered.complete();
        this._focused.complete();
    }
    _handleMouseEnter() {
        this._hovered.next(this);
    }
    getLabel() {
        const clone = this.elementRef.nativeElement.cloneNode(true);
        const icons = clone.querySelectorAll('rds-icon');
        for (let i = 0; i < icons.length; i++) {
            icons[i].remove();
        }
        return clone.textContent?.trim() || '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuitemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavMenuitemComponent, selector: "rds-sidenav-menuitem, [rds-sidenav-menuitem], [rdsSidenavMenuitem]", host: { listeners: { "mouseenter": "_handleMouseEnter()" }, properties: { "attr.role": "this.role", "class.rds-sidenav-minimal": "this.isMinimal", "class.rds-sidenav-menuitem": "this.rdsMenuItemClass", "class.rds-focus-indicator": "this.rdsFocusIndicatorClass" } }, providers: [
            { provide: SidenavItem, useExisting: RdsSidenavMenuitemComponent },
        ], exportAs: ["rdsSidenavMenuitem"], ngImport: i0, template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n", animations: [rdsExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuitemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-sidenav-menuitem, [rds-sidenav-menuitem], [rdsSidenavMenuitem]', exportAs: 'rdsSidenavMenuitem', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [rdsExpansionAnimations.bodyExpansion], providers: [
                        { provide: SidenavItem, useExisting: RdsSidenavMenuitemComponent },
                    ], template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n" }]
        }], propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], isMinimal: [{
                type: HostBinding,
                args: ['class.rds-sidenav-minimal']
            }], rdsMenuItemClass: [{
                type: HostBinding,
                args: ['class.rds-sidenav-menuitem']
            }], rdsFocusIndicatorClass: [{
                type: HostBinding,
                args: ['class.rds-focus-indicator']
            }], _handleMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }] } });

const EXPANSION_PANEL_ANIMATION_TIMING = `350ms ease`;
// even thought this might look like a copy of expansionAnimations,
// the visibility manipulation had to be moved to css for autofocusing to work
const rdsSidenavExpansionAnimations = {
    indicatorRotate: trigger('indicatorRotate', [
        state('collapsed, void', style({ transform: 'rotate(0deg)' })),
        state('expanded', style({ transform: 'rotate(180deg)' })),
        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
    bodyExpansion: trigger('bodyExpansion', [
        state('collapsed, void', style({ height: '0px' })),
        state('expanded', style({ height: '*' })),
        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
};

class RdsSidenavMenuHeaderComponent {
    constructor() {
        this.focusMonitor = inject(FocusMonitor);
        this.nativeElement = inject(ElementRef).nativeElement;
        this.disabled = false;
        this._focused = this.focusMonitor.monitor(this.nativeElement, false).pipe(filter((v) => !!v), takeUntilDestroyed());
        this.classes = 'rds-sidenav-menu-header';
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.nativeElement);
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.nativeElement, origin, options);
        }
        else {
            this.nativeElement.focus(options);
        }
    }
    getLabel() {
        const clone = this.nativeElement.cloneNode(true);
        const icons = clone.querySelectorAll('rds-icon');
        for (let i = 0; i < icons.length; i++) {
            icons[i].remove();
        }
        return clone.textContent?.trim() || '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavMenuHeaderComponent, selector: "a[rds-sidenav-menu-header], a[rdsSidenavMenuHeader]", host: { properties: { "class": "this.classes" } }, ngImport: i0, template: "<ng-content /> <rds-icon icon=\"arrow_right\" />\n", dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'a[rds-sidenav-menu-header], a[rdsSidenavMenuHeader]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content /> <rds-icon icon=\"arrow_right\" />\n" }]
        }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }] } });

let menuPanelUid = 0;
class RdsSidenavMenuComponent {
    constructor() {
        this.sidenav = inject(RdsSidenavService);
        this.cdr = inject(ChangeDetectorRef);
        this._hovered = new Subject();
        this.hovered = this._hovered.asObservable();
        this.attrAriaLabel = null;
        this.attrAriaLabelledBy = null;
        this.attrAriaDescribedBy = null;
        this._directDescendantItems = new QueryList();
        this._tabSubscription = Subscription.EMPTY;
        this._classList = {};
        this._panelAnimationState = 'void';
        this._animationDone = new Subject();
        this.expandedState = 'collapsed';
        this._isOpened = false;
        this.overlayPanelClass = '';
        this.backdropClass = 'cdk-overlay-transparent-backdrop';
        this.ariaLabel = null;
        this.ariaLabelledby = null;
        this.ariaDescribedby = null;
        this.openOnInit = false;
        this.closed = new EventEmitter();
        this.panelId = `rds-menu-panel-${menuPanelUid++}`;
        this.isMinimal$ = this.sidenav.isMinimal$;
    }
    get isOpened() {
        return this._isOpened;
    }
    set isOpened(value) {
        if (this._isOpened !== value) {
            this._isOpened = value;
            this.cdr.markForCheck();
        }
    }
    set title(v) {
        if (v !== this._title) {
            this._title = v;
            this.cdr.markForCheck();
        }
    }
    get title() {
        return this._title;
    }
    ngOnInit() {
        this.setPositionClasses();
    }
    ngAfterContentInit() {
        this._updateDirectDescendants();
        this._keyManager = new FocusKeyManager(this._directDescendantItems)
            .withWrap()
            .withTypeAhead()
            .withHomeAndEnd();
        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));
        this._directDescendantItems.changes
            .pipe(startWith(this._directDescendantItems), switchMap((items) => merge(...items.map((item) => item._focused))))
            .subscribe((focusedItem) => this._keyManager.updateActiveItem(focusedItem));
    }
    ngOnDestroy() {
        this._directDescendantItems.destroy();
        this._tabSubscription.unsubscribe();
        this.closed.complete();
    }
    _handleKeydown(event) {
        event.stopPropagation();
        const keyCode = event.keyCode;
        const manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this.closed.emit('keydown');
                }
                break;
            case LEFT_ARROW:
                if (this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case RIGHT_ARROW:
                if (this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            default:
                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                    manager.setFocusOrigin('keyboard');
                }
                manager.onKeydown(event);
        }
    }
    focusFirstItem(origin = 'program') {
        if (!this.sidenav.isMinimal) {
            setTimeout(() => this._focusFirstItem(origin));
            return;
        }
        this._focusFirstItem(origin);
    }
    _focusFirstItem(origin) {
        const manager = this._keyManager;
        manager.setFocusOrigin(origin).setFirstItemActive();
        if (!manager.activeItem && this._directDescendantItems.length) {
            let element = this._directDescendantItems.first.nativeElement.parentElement;
            while (element) {
                if (element.getAttribute('role') === 'menu') {
                    element.focus();
                    break;
                }
                else {
                    element = element.parentElement;
                }
            }
        }
    }
    resetActiveItem() {
        this._keyManager.setActiveItem(-1);
    }
    setPositionClasses(posX = 'after', posY = 'below') {
        const classes = this._classList;
        classes['rds-menu-before'] = posX === 'before';
        classes['rds-menu-after'] = posX === 'after';
        classes['rds-menu-above'] = posY === 'above';
        classes['rds-menu-below'] = posY === 'below';
    }
    _startAnimation() {
        this._panelAnimationState = 'enter';
        this.expandedState = 'expanded';
    }
    _resetAnimation() {
        this._panelAnimationState = 'void';
        this.expandedState = 'collapsed';
    }
    _onAnimationDone(event) {
        this._animationDone.next(event);
        this._isAnimating = false;
    }
    _updateDirectDescendants() {
        this._allItems.changes
            .pipe(startWith(this._allItems))
            .subscribe((items) => {
            const results = items.filter((item) => item._parentMenu === this);
            if (this.menuHeader) {
                results.push(this.menuHeader);
            }
            this._directDescendantItems.reset(results);
            this._directDescendantItems.notifyOnChanges();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSidenavMenuComponent, selector: "rds-sidenav-menu", inputs: { ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], openOnInit: ["openOnInit", "openOnInit", booleanAttribute] }, outputs: { closed: "closed" }, host: { properties: { "attr.aria-label": "this.attrAriaLabel", "attr.aria-labelledby": "this.attrAriaLabelledBy", "attr.aria-describedby": "this.attrAriaDescribedBy" } }, providers: [
            { provide: RDS_SIDENAV_MENU_PANEL, useExisting: RdsSidenavMenuComponent },
        ], queries: [{ propertyName: "menuHeader", first: true, predicate: RdsSidenavMenuHeaderComponent, descendants: true }, { propertyName: "_allItems", predicate: RdsSidenavMenuitemComponent, descendants: true }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: ["panel"], descendants: true }], exportAs: ["rdsSidenavMenu"], ngImport: i0, template: "<ng-template #panel>\n  <div\n    class=\"rds-sidenav-menu-panel\"\n    [id]=\"panelId\"\n    [ngClass]=\"_classList\"\n    (click)=\"closed.emit('click')\"\n    (mouseenter)=\"_hovered.next(true)\"\n    (mouseleave)=\"_hovered.next(false)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"ariaLabelledby || null\"\n    [attr.aria-describedby]=\"ariaDescribedby || null\"\n  >\n    <ng-container *ngTemplateOutlet=\"content\" />\n  </div>\n</ng-template>\n<ng-template #content>\n  <div class=\"rds-sidenav-menu-content\" (keydown)=\"_handleKeydown($event)\">\n    @if (menuHeader) {\n      <ng-content select=\".rds-sidenav-menu-header\" />\n    } @else {\n      <div class=\"rds-sidenav-menu-header\">\n        {{ title }}\n      </div>\n    }\n    <ng-content />\n  </div>\n</ng-template>\n@if ((isMinimal$ | async) === false) {\n  <div\n    class=\"rds-sidenav-expansion-body\"\n    [class.rds-sidenav-expansion-body-collapsed]=\"expandedState === 'collapsed'\"\n    role=\"menu\"\n    tabindex=\"-1\"\n    [@bodyExpansion]=\"expandedState\"\n    (@bodyExpansion.done)=\"_onAnimationDone($event)\"\n  >\n    <ng-container *ngTemplateOutlet=\"content\" />\n  </div>\n}\n", styles: ["rds-sidenav-menu{display:none}.rds-sidenav-full rds-sidenav-menu{display:block}.rds-sidenav-menu-panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;overflow:scroll;border-radius:1px;width:20rem;max-height:calc(100vh - 40px);min-height:88px;padding:24px 16px;background:var(--rds-color-bg-base-1);outline:0}.rds-sidenav-menu-panel.ng-animating{pointer-events:none}.rds-sidenav-menu-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;align-items:center;gap:8px;display:flex;margin:0 0 8px;min-height:40px;padding:8px 16px;color:var(--rds-color-high-contrast);text-decoration:none;border-radius:6px}a.rds-sidenav-menu-header:hover{background-color:var(--rds-color-bg-solid-hover-select)}a.rds-sidenav-menu-header:focus-visible{outline:1px solid var(--rds-color-stroke-active-focus)}a.rds-sidenav-menu-header:hover rds-icon,a.rds-sidenav-menu-header:active rds-icon,a.rds-sidenav-menu-header:focus-visible rds-icon{color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menu-header{display:none}.rds-sidenav-expansion-body{overflow:hidden}.rds-sidenav-expansion-body.rds-sidenav-expansion-body-collapsed{transition:visibility 0ms .35s;visibility:hidden}.rds-sidenav-expansion-body .rds-sidenav-menuitem{position:relative;margin-left:8px;width:calc(100% - 9px);padding-left:24px}.rds-sidenav-expansion-body .rds-sidenav-menuitem:before{content:\"\";position:absolute;left:0;top:0;height:100%;width:1px;background-color:var(--rds-color-grey-2)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:hover{outline:none;color:var(--rds-color-high-contrast)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:hover:before{background-color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:active,.rds-sidenav-expansion-body .rds-sidenav-menuitem.rds-sidenav-menuitem-active{outline:none;color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:active:before,.rds-sidenav-expansion-body .rds-sidenav-menuitem.rds-sidenav-menuitem-active:before{background-color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:focus-visible{outline:none;box-shadow:inset 0 0 0 2px var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:focus-visible:before{background-color:transparent}.rds-sidenav-expansion-body .rds-sidenav-menuitem+.rds-sidenav-menuitem{margin-top:0}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], animations: [rdsSidenavExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-sidenav-menu', exportAs: 'rdsSidenavMenu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        { provide: RDS_SIDENAV_MENU_PANEL, useExisting: RdsSidenavMenuComponent },
                    ], animations: [rdsSidenavExpansionAnimations.bodyExpansion], template: "<ng-template #panel>\n  <div\n    class=\"rds-sidenav-menu-panel\"\n    [id]=\"panelId\"\n    [ngClass]=\"_classList\"\n    (click)=\"closed.emit('click')\"\n    (mouseenter)=\"_hovered.next(true)\"\n    (mouseleave)=\"_hovered.next(false)\"\n    tabindex=\"-1\"\n    role=\"menu\"\n    [attr.aria-label]=\"ariaLabel || null\"\n    [attr.aria-labelledby]=\"ariaLabelledby || null\"\n    [attr.aria-describedby]=\"ariaDescribedby || null\"\n  >\n    <ng-container *ngTemplateOutlet=\"content\" />\n  </div>\n</ng-template>\n<ng-template #content>\n  <div class=\"rds-sidenav-menu-content\" (keydown)=\"_handleKeydown($event)\">\n    @if (menuHeader) {\n      <ng-content select=\".rds-sidenav-menu-header\" />\n    } @else {\n      <div class=\"rds-sidenav-menu-header\">\n        {{ title }}\n      </div>\n    }\n    <ng-content />\n  </div>\n</ng-template>\n@if ((isMinimal$ | async) === false) {\n  <div\n    class=\"rds-sidenav-expansion-body\"\n    [class.rds-sidenav-expansion-body-collapsed]=\"expandedState === 'collapsed'\"\n    role=\"menu\"\n    tabindex=\"-1\"\n    [@bodyExpansion]=\"expandedState\"\n    (@bodyExpansion.done)=\"_onAnimationDone($event)\"\n  >\n    <ng-container *ngTemplateOutlet=\"content\" />\n  </div>\n}\n", styles: ["rds-sidenav-menu{display:none}.rds-sidenav-full rds-sidenav-menu{display:block}.rds-sidenav-menu-panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;overflow:scroll;border-radius:1px;width:20rem;max-height:calc(100vh - 40px);min-height:88px;padding:24px 16px;background:var(--rds-color-bg-base-1);outline:0}.rds-sidenav-menu-panel.ng-animating{pointer-events:none}.rds-sidenav-menu-header{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;align-items:center;gap:8px;display:flex;margin:0 0 8px;min-height:40px;padding:8px 16px;color:var(--rds-color-high-contrast);text-decoration:none;border-radius:6px}a.rds-sidenav-menu-header:hover{background-color:var(--rds-color-bg-solid-hover-select)}a.rds-sidenav-menu-header:focus-visible{outline:1px solid var(--rds-color-stroke-active-focus)}a.rds-sidenav-menu-header:hover rds-icon,a.rds-sidenav-menu-header:active rds-icon,a.rds-sidenav-menu-header:focus-visible rds-icon{color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menu-header{display:none}.rds-sidenav-expansion-body{overflow:hidden}.rds-sidenav-expansion-body.rds-sidenav-expansion-body-collapsed{transition:visibility 0ms .35s;visibility:hidden}.rds-sidenav-expansion-body .rds-sidenav-menuitem{position:relative;margin-left:8px;width:calc(100% - 9px);padding-left:24px}.rds-sidenav-expansion-body .rds-sidenav-menuitem:before{content:\"\";position:absolute;left:0;top:0;height:100%;width:1px;background-color:var(--rds-color-grey-2)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:hover{outline:none;color:var(--rds-color-high-contrast)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:hover:before{background-color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:active,.rds-sidenav-expansion-body .rds-sidenav-menuitem.rds-sidenav-menuitem-active{outline:none;color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:active:before,.rds-sidenav-expansion-body .rds-sidenav-menuitem.rds-sidenav-menuitem-active:before{background-color:var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:focus-visible{outline:none;box-shadow:inset 0 0 0 2px var(--rds-color-informative)}.rds-sidenav-expansion-body .rds-sidenav-menuitem:focus-visible:before{background-color:transparent}.rds-sidenav-expansion-body .rds-sidenav-menuitem+.rds-sidenav-menuitem{margin-top:0}\n"] }]
        }], propDecorators: { menuHeader: [{
                type: ContentChild,
                args: [RdsSidenavMenuHeaderComponent]
            }], _allItems: [{
                type: ContentChildren,
                args: [RdsSidenavMenuitemComponent, { descendants: true }]
            }], attrAriaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], attrAriaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], attrAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], openOnInit: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], templateRef: [{
                type: ViewChild,
                args: ['panel']
            }], closed: [{
                type: Output
            }] } });

const passiveEventListenerOptions = normalizePassiveListenerOptions({
    passive: true,
});
class RdsSidenavMenuTriggerComponent {
    get _ariaExpanded() {
        return this.menuOpen || null;
    }
    get _ariaControl() {
        return this.menuOpen ? this.menu.panelId : null;
    }
    get menu() {
        return this._menu;
    }
    set menu(menu) {
        if (menu === this._menu) {
            return;
        }
        this._menu = menu;
        this._menuCloseSubscription.unsubscribe();
        if (menu) {
            this._menuCloseSubscription = menu.closed.subscribe(() => {
                this._destroyMenu();
            });
        }
    }
    constructor() {
        this.sidenavService = inject(RdsSidenavService);
        this.destroyRef = inject(DestroyRef);
        this.overlay = inject(Overlay);
        this.element = inject(ElementRef);
        this.viewContainerRef = inject(ViewContainerRef);
        this._dir = inject(Directionality, {
            optional: true,
        });
        this.focusMonitor = inject(FocusMonitor);
        this.menuOpened = new EventEmitter();
        this.menuClosed = new EventEmitter();
        this.role = 'menuitem';
        this._ariaHaspopup = true;
        this.class = 'rds-sidenav-menu-trigger';
        this.isHovered = false;
        this._openedBy = undefined;
        this._overlayRef = null;
        this._menuOpen = false;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._menuCloseSubscription = Subscription.EMPTY;
        this.scrollStrategy = () => this.overlay.scrollStrategies.reposition();
        this._focused = new Subject();
        this.isMinimal$ = this.sidenavService.isMinimal$;
        this.nativeElement = this.element.nativeElement;
        this._handleTouchStart = (event) => {
            if (!isFakeTouchstartFromScreenReader(event)) {
                this._openedBy = 'touch';
            }
        };
        fromEvent(this.element.nativeElement, 'touchstart', passiveEventListenerOptions)
            .pipe(takeUntilDestroyed())
            .subscribe((e) => this._handleTouchStart(e));
    }
    ngAfterContentInit() {
        this._checkMenu();
        if (isHoverSupported()) {
            this._handleHover();
        }
        this.menu.title = this.element.nativeElement.textContent ?? '';
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.element, false)
            .pipe(filter((v) => !!v), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._focused.next(this));
        if (!this.sidenavService.isMinimal && this.menu?.openOnInit) {
            // set hover to omit focusing first element
            this._openedBy = 'hover';
            this.openMenu();
        }
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        if (this.focusMonitor) {
            this.focusMonitor.stopMonitoring(this.element);
        }
        this._menuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
        this._focused.complete();
    }
    get menuOpen() {
        return this._menuOpen;
    }
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    toggleMenu() {
        return this._menuOpen ? this.closeMenu() : this.openMenu();
    }
    openMenu(withBackdrop) {
        if (this._menuOpen) {
            return;
        }
        this._checkMenu();
        if (this.sidenavService.isMinimal) {
            const overlayRef = this._createOverlay();
            const overlayConfig = overlayRef.getConfig();
            this._setPosition(overlayConfig.positionStrategy);
            overlayConfig.hasBackdrop =
                withBackdrop == undefined ? true : withBackdrop;
            overlayRef.attach(this._getPortal());
        }
        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());
        this._initMenu();
        if (this.menu instanceof RdsSidenavMenuComponent) {
            this.menu._startAnimation();
        }
    }
    closeMenu() {
        this.menu.closed.emit();
        this.menu.isOpened = false;
    }
    focus(origin, options) {
        if (origin && origin === 'hover') {
            return;
        }
        if (this.focusMonitor && origin) {
            this.focusMonitor.focusVia(this.element, origin, options);
        }
        else {
            this.element.nativeElement.focus(options);
        }
        this._focused.next(this);
    }
    _destroyMenu() {
        if (!this.menuOpen) {
            return;
        }
        const menu = this.menu;
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef?.detach();
        // without setTimeout doesn't work for expandable menu
        setTimeout(() => {
            this.focus(this._openedBy);
            this._openedBy = undefined;
        });
        if (menu instanceof RdsSidenavMenuComponent) {
            menu._resetAnimation();
        }
        this._setIsMenuOpen(false);
    }
    _initMenu() {
        this.menu.parentMenu = undefined;
        this.menu.direction = this.dir;
        if (this._openedBy !== 'hover') {
            this.menu.focusFirstItem(this._openedBy || 'program');
        }
        this._setIsMenuOpen(true);
    }
    _setIsMenuOpen(isOpen) {
        this._menuOpen = isOpen;
        this.menu.isOpened = isOpen;
        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
    }
    _checkMenu() {
        if (ngDevMode && !this.menu) {
            throwRdsMenuMissingError();
        }
    }
    _createOverlay() {
        const config = this._getOverlayConfig();
        if (!this._overlayRef ||
            this._overlayRef.getConfig().backdropClass !== config.backdropClass ||
            this._overlayRef.getConfig().panelClass !== config.panelClass ||
            this._overlayRef.getConfig().direction !== config.direction) {
            if (this._overlayRef) {
                this._overlayRef.dispose();
            }
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this.overlay.create(config);
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this.overlay
                .position()
                .flexibleConnectedTo(this.element)
                .withFlexibleDimensions(false)
                .withGrowAfterOpen()
                .withTransformOriginOn('.rds-menu-panel'),
            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',
            panelClass: this.menu.overlayPanelClass,
            scrollStrategy: this.scrollStrategy(),
            direction: this._dir,
        });
    }
    _subscribeToPositions(position) {
        if (this.menu.setPositionClasses) {
            position.positionChanges.subscribe((change) => {
                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                if (this.menu.setPositionClasses) {
                    this.menu.setPositionClasses(posX, posY);
                }
            });
        }
    }
    _setPosition(positionStrategy) {
        const originX = 'start';
        const [overlayY, overlayFallbackY] = [
            'top',
            'bottom',
        ];
        const overlayX = originX;
        const originY = overlayY === 'top' ? 'bottom' : 'top';
        const originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        const offsetX = 61;
        const offsetYWhenBelow = -115;
        const offsetYWhenAbove = 65;
        positionStrategy.withPositions([
            {
                originX,
                originY,
                overlayX,
                overlayY,
                offsetX,
                offsetY: offsetYWhenBelow,
            },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetX,
                offsetY: offsetYWhenAbove,
            },
        ]);
    }
    _menuClosingActions() {
        const backdrop = this._overlayRef
            ? this._overlayRef.backdropClick()
            : EMPTY;
        const detachments = this._overlayRef
            ? this._overlayRef.detachments()
            : EMPTY;
        return merge(backdrop, detachments);
    }
    _handleMousedown(event) {
        if (!isFakeMousedownFromScreenReader(event)) {
            this._openedBy = event.button === 0 ? 'mouse' : undefined;
        }
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        const openedByArrow = (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||
            (keyCode === LEFT_ARROW && this.dir === 'rtl');
        if (keyCode === ENTER) {
            // handled by _handleClick
            return;
        }
        if (keyCode === SPACE || openedByArrow) {
            this._openedBy = 'keyboard';
            this.openMenu();
        }
    }
    _handleClick({ keyCode }) {
        if (keyCode === ENTER) {
            this._openedBy = 'keyboard';
        }
        this.toggleMenu();
    }
    hovered() {
        let isPanelHovered = false;
        return merge(fromEvent(this.element.nativeElement, 'mouseenter').pipe(map(() => true)), this.menu.hovered.pipe(tap((v) => (isPanelHovered = v))), fromEvent(this.element.nativeElement, 'mouseleave').pipe(delay(0), filter(() => !isPanelHovered), map(() => false)));
    }
    _handleHover() {
        this.hovered()
            .pipe(filter(() => this.sidenavService.isMinimal), delay(0, asapScheduler), takeUntilDestroyed(this.destroyRef))
            .subscribe((isHovered) => {
            this.isHovered = isHovered;
            if (isHovered) {
                this._openedBy = 'hover';
                this.openMenu(false);
            }
            else {
                this.closeMenu();
            }
        });
    }
    _getPortal() {
        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {
            this._portal = new TemplatePortal(this.menu.templateRef, this.viewContainerRef);
        }
        return this._portal;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuTriggerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSidenavMenuTriggerComponent, selector: "button[rds-sidenav-menu-trigger-for], button[rdsSidenavMenuTriggerFor]", inputs: { menu: ["rdsSidenavMenuTriggerFor", "menu"] }, outputs: { menuOpened: "menuOpened", menuClosed: "menuClosed" }, host: { listeners: { "mousedown": "_handleMousedown($event)", "keydown": "_handleKeydown($event)", "click": "_handleClick($event)" }, properties: { "attr.role": "this.role", "attr.aria-haspopup": "this._ariaHaspopup", "class": "this.class", "class.rds-sidenav-menu-hovered": "this.isHovered", "attr.aria-expanded": "this._ariaExpanded", "attr.aria-controls": "this._ariaControl" } }, providers: [
            { provide: SidenavItem, useExisting: RdsSidenavMenuTriggerComponent },
        ], ngImport: i0, template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n@if ((isMinimal$ | async) === false) {\n  <rds-icon\n    [@indicatorRotate]=\"menu.expandedState\"\n    class=\"rds-sidenav-expansion-indicator\"\n    namespace=\"filled\"\n    icon=\"chevron_down\"\n  />\n}\n", styles: [":host{position:relative;-webkit-tap-highlight-color:transparent}:host:after{content:\"\";position:absolute;top:-30px;bottom:-30px;height:100px;right:-24px;clip-path:polygon(0px 20px,100% 0%,100% 100%,0px 80px);width:24px;background:none;visibility:hidden}:host(.rds-sidenav-menu-hovered):after{visibility:visible}.rds-sidenav-expansion-indicator{height:24px;width:24px}.rds-sidenav-badge-container:empty+rds-sidenav-expansion-indicator{margin-left:auto}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], animations: [rdsSidenavExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'button[rds-sidenav-menu-trigger-for], button[rdsSidenavMenuTriggerFor]', changeDetection: ChangeDetectionStrategy.OnPush, animations: [rdsSidenavExpansionAnimations.indicatorRotate], providers: [
                        { provide: SidenavItem, useExisting: RdsSidenavMenuTriggerComponent },
                    ], template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n@if ((isMinimal$ | async) === false) {\n  <rds-icon\n    [@indicatorRotate]=\"menu.expandedState\"\n    class=\"rds-sidenav-expansion-indicator\"\n    namespace=\"filled\"\n    icon=\"chevron_down\"\n  />\n}\n", styles: [":host{position:relative;-webkit-tap-highlight-color:transparent}:host:after{content:\"\";position:absolute;top:-30px;bottom:-30px;height:100px;right:-24px;clip-path:polygon(0px 20px,100% 0%,100% 100%,0px 80px);width:24px;background:none;visibility:hidden}:host(.rds-sidenav-menu-hovered):after{visibility:visible}.rds-sidenav-expansion-indicator{height:24px;width:24px}.rds-sidenav-badge-container:empty+rds-sidenav-expansion-indicator{margin-left:auto}\n"] }]
        }], ctorParameters: () => [], propDecorators: { menuOpened: [{
                type: Output
            }], menuClosed: [{
                type: Output
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], _ariaHaspopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], isHovered: [{
                type: HostBinding,
                args: ['class.rds-sidenav-menu-hovered']
            }], _ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _ariaControl: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], menu: [{
                type: Input,
                args: ['rdsSidenavMenuTriggerFor']
            }], _handleMousedown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], _handleClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class RdsSidenavFooterComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavFooterComponent, selector: "rds-sidenav-footer", ngImport: i0, template: "<rds-divider />\n<ng-content />\n", styles: ["rds-sidenav{--rds-sidenav-background-color: var(--rds-color-bg-base-1);--rds-sidenav-border-right: 1px solid var(--rds-color-grey-1);display:flex;border-right:var(--rds-sidenav-border-right);height:calc(100% - var(--rds-sidenav-offset-top, 0px));max-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));width:fit-content;background-color:var(--rds-sidenav-background-color)}rds-sidenav>nav{position:relative;flex-direction:column;display:flex;overflow-y:auto;width:18rem;padding:20px 24px}rds-sidenav>nav rds-sidenav-menu+button,rds-sidenav>nav [rds-sidenav-menuitem]+[rds-sidenav-menuitem]{margin-top:4px}rds-sidenav>nav rds-sidenav-group{--rds-sidenav-group-spacing: 24px;--rds-sidenav-group-padding: 24px 0;--rds-sidenav-group-divider-color: var(--rds-color-grey-2);--rds-sidenav-group-header-color: var(--rds-color-low-contrast);--rds-sidenav-group-header-padding: 8px 0}rds-sidenav>nav rds-sidenav-group+[rds-sidenav-menuitem]{margin-top:24px}rds-sidenav>nav rds-sidenav-footer{--rds-sidenav-footer-background-color: var(--rds-color-bg-base-1);--rds-sidenav-footer-position-bottom: -20px;--rds-sidenav-footer-margin-bottom: -20px;--rds-sidenav-footer-margin-inline: -24px;--rds-sidenav-footer-padding-bottom: 20px}rds-sidenav>nav .expand-toggle{height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle:after{left:0!important;top:0!important;height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle rds-icon{transform:rotateY(180deg);transition-duration:0ms}rds-sidenav>nav .expand-toggle:before{display:none!important}rds-sidenav.rds-sidenav-minimal{height:auto;min-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));max-height:unset}rds-sidenav.rds-sidenav-minimal nav{overflow-y:visible;width:72px;padding:20px 16px}rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal,rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal-and-first-level{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-footer{--rds-sidenav-footer-position-bottom: 0;--rds-sidenav-footer-margin-inline: -16px}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-menu .sr-only-when-minimal-and-first-level{position:unset;width:unset;height:unset;overflow:unset;clip:unset;margin:unset;border:unset;padding:unset}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem{padding:8px}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover{background:var(--rds-color-bg-transparent-hover-select)}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger,.rds-sidenav-menuitem{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;align-items:center;display:flex;gap:12px;border:none;border-radius:6px;width:100%;padding:8px 0;background:none;cursor:pointer;-webkit-user-select:none;user-select:none;text-decoration:none;color:var(--rds-color-low-contrast)}.rds-sidenav-menu-trigger rds-icon,.rds-sidenav-menuitem rds-icon{height:18px;width:18px}.rds-sidenav-menu-trigger:hover,.rds-sidenav-menu-trigger:active,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active,.rds-sidenav-menuitem:hover,.rds-sidenav-menuitem:active,.rds-sidenav-menuitem.rds-sidenav-menuitem-active{outline:none;color:var(--rds-color-high-contrast)}.rds-sidenav-menu-trigger:hover>rds-icon,.rds-sidenav-menu-trigger:active>rds-icon,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger:active,.rds-sidenav-menuitem:active{color:var(--rds-color-informative)}.rds-sidenav-menu-trigger:focus-visible,.rds-sidenav-menuitem:focus-visible{outline:1px solid var(--rds-color-stroke-active-focus)}.rds-sidenav-menu-trigger{z-index:2}.rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px}.rds-sidenav-minimal.rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}.rds-sidenav-minimal.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px 16px}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:hover{background-color:var(--rds-color-bg-solid-hover-select);color:var(--rds-color-low-contrast)}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:focus-visible{color:var(--rds-color-informative)}.rds-sidenav-minimal .expand-toggle rds-icon{transform:rotateY(0)}.rds-sidenav-badge-container{margin-top:-2px;margin-left:auto}.rds-sidenav-minimal .rds-sidenav-badge-container{position:absolute;top:-7%;left:55%}:host{position:sticky;bottom:var(--rds-sidenav-footer-position-bottom, 0);display:block;background-color:var(--rds-sidenav-footer-background-color);margin-bottom:var(--rds-sidenav-footer-margin-bottom, 0);margin-top:auto;margin-inline:var(--rds-sidenav-footer-margin-inline);padding-bottom:var(--rds-sidenav-footer-padding-bottom, 20px);padding-inline:16px;z-index:10}:host rds-divider{margin-bottom:8px}:host.rds-sidenav-footer-no-scroll rds-divider{display:none}\n"], dependencies: [{ kind: "component", type: RdsDividerComponent, selector: "rds-divider", inputs: ["vertical"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavFooterComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-sidenav-footer', changeDetection: ChangeDetectionStrategy.OnPush, template: "<rds-divider />\n<ng-content />\n", styles: ["rds-sidenav{--rds-sidenav-background-color: var(--rds-color-bg-base-1);--rds-sidenav-border-right: 1px solid var(--rds-color-grey-1);display:flex;border-right:var(--rds-sidenav-border-right);height:calc(100% - var(--rds-sidenav-offset-top, 0px));max-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));width:fit-content;background-color:var(--rds-sidenav-background-color)}rds-sidenav>nav{position:relative;flex-direction:column;display:flex;overflow-y:auto;width:18rem;padding:20px 24px}rds-sidenav>nav rds-sidenav-menu+button,rds-sidenav>nav [rds-sidenav-menuitem]+[rds-sidenav-menuitem]{margin-top:4px}rds-sidenav>nav rds-sidenav-group{--rds-sidenav-group-spacing: 24px;--rds-sidenav-group-padding: 24px 0;--rds-sidenav-group-divider-color: var(--rds-color-grey-2);--rds-sidenav-group-header-color: var(--rds-color-low-contrast);--rds-sidenav-group-header-padding: 8px 0}rds-sidenav>nav rds-sidenav-group+[rds-sidenav-menuitem]{margin-top:24px}rds-sidenav>nav rds-sidenav-footer{--rds-sidenav-footer-background-color: var(--rds-color-bg-base-1);--rds-sidenav-footer-position-bottom: -20px;--rds-sidenav-footer-margin-bottom: -20px;--rds-sidenav-footer-margin-inline: -24px;--rds-sidenav-footer-padding-bottom: 20px}rds-sidenav>nav .expand-toggle{height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle:after{left:0!important;top:0!important;height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle rds-icon{transform:rotateY(180deg);transition-duration:0ms}rds-sidenav>nav .expand-toggle:before{display:none!important}rds-sidenav.rds-sidenav-minimal{height:auto;min-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));max-height:unset}rds-sidenav.rds-sidenav-minimal nav{overflow-y:visible;width:72px;padding:20px 16px}rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal,rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal-and-first-level{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-footer{--rds-sidenav-footer-position-bottom: 0;--rds-sidenav-footer-margin-inline: -16px}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-menu .sr-only-when-minimal-and-first-level{position:unset;width:unset;height:unset;overflow:unset;clip:unset;margin:unset;border:unset;padding:unset}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem{padding:8px}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover{background:var(--rds-color-bg-transparent-hover-select)}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger,.rds-sidenav-menuitem{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;align-items:center;display:flex;gap:12px;border:none;border-radius:6px;width:100%;padding:8px 0;background:none;cursor:pointer;-webkit-user-select:none;user-select:none;text-decoration:none;color:var(--rds-color-low-contrast)}.rds-sidenav-menu-trigger rds-icon,.rds-sidenav-menuitem rds-icon{height:18px;width:18px}.rds-sidenav-menu-trigger:hover,.rds-sidenav-menu-trigger:active,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active,.rds-sidenav-menuitem:hover,.rds-sidenav-menuitem:active,.rds-sidenav-menuitem.rds-sidenav-menuitem-active{outline:none;color:var(--rds-color-high-contrast)}.rds-sidenav-menu-trigger:hover>rds-icon,.rds-sidenav-menu-trigger:active>rds-icon,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger:active,.rds-sidenav-menuitem:active{color:var(--rds-color-informative)}.rds-sidenav-menu-trigger:focus-visible,.rds-sidenav-menuitem:focus-visible{outline:1px solid var(--rds-color-stroke-active-focus)}.rds-sidenav-menu-trigger{z-index:2}.rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px}.rds-sidenav-minimal.rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}.rds-sidenav-minimal.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px 16px}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:hover{background-color:var(--rds-color-bg-solid-hover-select);color:var(--rds-color-low-contrast)}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:focus-visible{color:var(--rds-color-informative)}.rds-sidenav-minimal .expand-toggle rds-icon{transform:rotateY(0)}.rds-sidenav-badge-container{margin-top:-2px;margin-left:auto}.rds-sidenav-minimal .rds-sidenav-badge-container{position:absolute;top:-7%;left:55%}:host{position:sticky;bottom:var(--rds-sidenav-footer-position-bottom, 0);display:block;background-color:var(--rds-sidenav-footer-background-color);margin-bottom:var(--rds-sidenav-footer-margin-bottom, 0);margin-top:auto;margin-inline:var(--rds-sidenav-footer-margin-inline);padding-bottom:var(--rds-sidenav-footer-padding-bottom, 20px);padding-inline:16px;z-index:10}:host rds-divider{margin-bottom:8px}:host.rds-sidenav-footer-no-scroll rds-divider{display:none}\n"] }]
        }] });

class RdsSidenavComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.nativeElement = inject(ElementRef).nativeElement;
        this.document = inject(DOCUMENT);
        this.renderer = inject(Renderer2);
        this.cdr = inject(ChangeDetectorRef);
        this.sidenavService = inject(RdsSidenavService);
        this.menubarHeight = null;
        this.isExpandable = true;
        this.isMinimalChange = new EventEmitter();
        this.directDescendantItems = new QueryList();
    }
    set isMinimal(v) {
        this.sidenavService.isMinimal = booleanAttribute(v);
    }
    get isMinimal() {
        return this.sidenavService.isMinimal;
    }
    get isInMinimalState() {
        return this.isMinimal;
    }
    get isInFullState() {
        return !this.isMinimal;
    }
    ngOnInit() {
        this.sidenavService.isMinimal$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((isMinimal) => this.onMinimalStateChange(isMinimal));
    }
    ngAfterContentInit() {
        this.onContentChanged();
        this.updateDirectDescendants();
        this.keyManager = new FocusKeyManager(this.directDescendantItems)
            .withWrap()
            .withHomeAndEnd();
        this.directDescendantItems.changes
            .pipe(startWith(this.directDescendantItems), switchMap((menus) => merge(...menus.map((menu) => menu._focused))))
            .subscribe((focusedMenu) => {
            this.keyManager.updateActiveItem(focusedMenu);
        });
    }
    ngAfterViewInit() {
        this.scrollingAncestor =
            getScrollingAncestor(this.nativeElement) ?? this.document.body;
        // update other layout work like @HostBindings and other components destruction is finished
        setTimeout(() => {
            this.updateSelfAppearance();
        });
    }
    ngOnDestroy() {
        this.directDescendantItems.destroy();
    }
    toggleIsMinimal() {
        this.sidenavService.toggleIsMinimal();
    }
    onContentChanged(entries) {
        this.scrollingAncestor =
            getScrollingAncestor(this.nativeElement) ?? this.document.body;
        const newHeight = this.getHeight(entries);
        if (newHeight === null || newHeight !== this.menubarHeight) {
            this.menubarHeight = newHeight;
            this.noScroll = this.calculateNoScroll();
            this.cdr.detectChanges();
        }
    }
    handleKeydown(event) {
        const keyCode = event.keyCode;
        const manager = this.keyManager;
        const delta = event.shiftKey ? -1 : 1;
        const activeItemIndex = manager.activeItemIndex ?? -1;
        switch (keyCode) {
            case TAB:
                manager.setFocusOrigin('keyboard');
                manager.updateActiveItem(activeItemIndex + delta);
                if (!event.shiftKey) {
                    this.scrollIfNeeded(manager.activeItem);
                }
                break;
            default:
                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                    manager.setFocusOrigin('keyboard');
                }
                manager.onKeydown(event);
        }
    }
    scrollIfNeeded(activeItem) {
        if (!activeItem || !this.footerRef) {
            return;
        }
        const elY = activeItem.nativeElement.offsetTop;
        const elHeight = activeItem.nativeElement.offsetHeight;
        const paddingTop = 20;
        if (elY + elHeight >= this.footerRef.nativeElement.offsetTop) {
            const scroller = this.isMinimal
                ? this.scrollingAncestor
                : this.navRef.nativeElement;
            scroller.scrollTo(0, elY - paddingTop);
        }
    }
    getHeight(entries) {
        if (!entries || !entries[0]) {
            return null;
        }
        return entries[0].contentRect.height;
    }
    onMinimalStateChange(isMinimal) {
        this.updateSelfAppearance();
        this.isMinimalChange.emit(isMinimal);
    }
    updateSelfAppearance() {
        const { top } = this.nativeElement.getBoundingClientRect();
        this.renderer.setStyle(this.nativeElement, '--rds-sidenav-offset-top', `${top}px`, RendererStyleFlags2.DashCase);
    }
    calculateNoScroll() {
        if (!this.nativeElement.firstElementChild) {
            return false;
        }
        return (this.scrollingAncestor.offsetHeight >=
            this.nativeElement.firstElementChild.scrollHeight);
    }
    updateDirectDescendants() {
        this.children.changes
            .pipe(startWith(this.children))
            .subscribe((items) => {
            this.directDescendantItems.reset(items.filter((item) => item instanceof RdsSidenavMenuTriggerComponent ||
                item._parentMenu == undefined));
            this.directDescendantItems.notifyOnChanges();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSidenavComponent, selector: "rds-sidenav", inputs: { isExpandable: ["isExpandable", "isExpandable", booleanAttribute], isMinimal: "isMinimal" }, outputs: { isMinimalChange: "isMinimalChange" }, host: { properties: { "class.rds-sidenav-minimal": "this.isInMinimalState", "class.rds-sidenav-full": "this.isInFullState" } }, providers: [RdsSidenavService], queries: [{ propertyName: "children", predicate: SidenavItem, descendants: true }], viewQueries: [{ propertyName: "footerRef", first: true, predicate: ["footer"], descendants: true, read: ElementRef }, { propertyName: "navRef", first: true, predicate: ["nav"], descendants: true, read: ElementRef }], exportAs: ["rdsSidenav"], ngImport: i0, template: "<nav #nav>\n  <div\n    role=\"menubar\"\n    (rdsObserveResize)=\"onContentChanged($event)\"\n    (keydown)=\"handleKeydown($event)\"\n  >\n    <ng-content />\n  </div>\n  @if (isExpandable) {\n    <rds-sidenav-footer #footer [class.rds-sidenav-footer-no-scroll]=\"noScroll\">\n      <button\n        class=\"expand-toggle\"\n        title=\"expand toggle\"\n        rds-icon-button\n        size=\"m\"\n        (click)=\"toggleIsMinimal()\"\n      >\n        <rds-icon icon=\"double_chevron_right\" />\n      </button>\n    </rds-sidenav-footer>\n  }\n</nav>\n", styles: ["rds-sidenav{--rds-sidenav-background-color: var(--rds-color-bg-base-1);--rds-sidenav-border-right: 1px solid var(--rds-color-grey-1);display:flex;border-right:var(--rds-sidenav-border-right);height:calc(100% - var(--rds-sidenav-offset-top, 0px));max-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));width:fit-content;background-color:var(--rds-sidenav-background-color)}rds-sidenav>nav{position:relative;flex-direction:column;display:flex;overflow-y:auto;width:18rem;padding:20px 24px}rds-sidenav>nav rds-sidenav-menu+button,rds-sidenav>nav [rds-sidenav-menuitem]+[rds-sidenav-menuitem]{margin-top:4px}rds-sidenav>nav rds-sidenav-group{--rds-sidenav-group-spacing: 24px;--rds-sidenav-group-padding: 24px 0;--rds-sidenav-group-divider-color: var(--rds-color-grey-2);--rds-sidenav-group-header-color: var(--rds-color-low-contrast);--rds-sidenav-group-header-padding: 8px 0}rds-sidenav>nav rds-sidenav-group+[rds-sidenav-menuitem]{margin-top:24px}rds-sidenav>nav rds-sidenav-footer{--rds-sidenav-footer-background-color: var(--rds-color-bg-base-1);--rds-sidenav-footer-position-bottom: -20px;--rds-sidenav-footer-margin-bottom: -20px;--rds-sidenav-footer-margin-inline: -24px;--rds-sidenav-footer-padding-bottom: 20px}rds-sidenav>nav .expand-toggle{height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle:after{left:0!important;top:0!important;height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle rds-icon{transform:rotateY(180deg);transition-duration:0ms}rds-sidenav>nav .expand-toggle:before{display:none!important}rds-sidenav.rds-sidenav-minimal{height:auto;min-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));max-height:unset}rds-sidenav.rds-sidenav-minimal nav{overflow-y:visible;width:72px;padding:20px 16px}rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal,rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal-and-first-level{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-footer{--rds-sidenav-footer-position-bottom: 0;--rds-sidenav-footer-margin-inline: -16px}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-menu .sr-only-when-minimal-and-first-level{position:unset;width:unset;height:unset;overflow:unset;clip:unset;margin:unset;border:unset;padding:unset}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem{padding:8px}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover{background:var(--rds-color-bg-transparent-hover-select)}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger,.rds-sidenav-menuitem{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;align-items:center;display:flex;gap:12px;border:none;border-radius:6px;width:100%;padding:8px 0;background:none;cursor:pointer;-webkit-user-select:none;user-select:none;text-decoration:none;color:var(--rds-color-low-contrast)}.rds-sidenav-menu-trigger rds-icon,.rds-sidenav-menuitem rds-icon{height:18px;width:18px}.rds-sidenav-menu-trigger:hover,.rds-sidenav-menu-trigger:active,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active,.rds-sidenav-menuitem:hover,.rds-sidenav-menuitem:active,.rds-sidenav-menuitem.rds-sidenav-menuitem-active{outline:none;color:var(--rds-color-high-contrast)}.rds-sidenav-menu-trigger:hover>rds-icon,.rds-sidenav-menu-trigger:active>rds-icon,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger:active,.rds-sidenav-menuitem:active{color:var(--rds-color-informative)}.rds-sidenav-menu-trigger:focus-visible,.rds-sidenav-menuitem:focus-visible{outline:1px solid var(--rds-color-stroke-active-focus)}.rds-sidenav-menu-trigger{z-index:2}.rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px}.rds-sidenav-minimal.rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}.rds-sidenav-minimal.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px 16px}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:hover{background-color:var(--rds-color-bg-solid-hover-select);color:var(--rds-color-low-contrast)}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:focus-visible{color:var(--rds-color-informative)}.rds-sidenav-minimal .expand-toggle rds-icon{transform:rotateY(0)}.rds-sidenav-badge-container{margin-top:-2px;margin-left:auto}.rds-sidenav-minimal .rds-sidenav-badge-container{position:absolute;top:-7%;left:55%}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: RdsObserveResizeDirective, selector: "[rdsObserveResize]", inputs: ["rdsObserveResizeDisabled", "debounce"], outputs: ["rdsObserveResize"], exportAs: ["rdsObserveResize"] }, { kind: "component", type: RdsSidenavFooterComponent, selector: "rds-sidenav-footer" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-sidenav', exportAs: 'rdsSidenav', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [RdsSidenavService], template: "<nav #nav>\n  <div\n    role=\"menubar\"\n    (rdsObserveResize)=\"onContentChanged($event)\"\n    (keydown)=\"handleKeydown($event)\"\n  >\n    <ng-content />\n  </div>\n  @if (isExpandable) {\n    <rds-sidenav-footer #footer [class.rds-sidenav-footer-no-scroll]=\"noScroll\">\n      <button\n        class=\"expand-toggle\"\n        title=\"expand toggle\"\n        rds-icon-button\n        size=\"m\"\n        (click)=\"toggleIsMinimal()\"\n      >\n        <rds-icon icon=\"double_chevron_right\" />\n      </button>\n    </rds-sidenav-footer>\n  }\n</nav>\n", styles: ["rds-sidenav{--rds-sidenav-background-color: var(--rds-color-bg-base-1);--rds-sidenav-border-right: 1px solid var(--rds-color-grey-1);display:flex;border-right:var(--rds-sidenav-border-right);height:calc(100% - var(--rds-sidenav-offset-top, 0px));max-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));width:fit-content;background-color:var(--rds-sidenav-background-color)}rds-sidenav>nav{position:relative;flex-direction:column;display:flex;overflow-y:auto;width:18rem;padding:20px 24px}rds-sidenav>nav rds-sidenav-menu+button,rds-sidenav>nav [rds-sidenav-menuitem]+[rds-sidenav-menuitem]{margin-top:4px}rds-sidenav>nav rds-sidenav-group{--rds-sidenav-group-spacing: 24px;--rds-sidenav-group-padding: 24px 0;--rds-sidenav-group-divider-color: var(--rds-color-grey-2);--rds-sidenav-group-header-color: var(--rds-color-low-contrast);--rds-sidenav-group-header-padding: 8px 0}rds-sidenav>nav rds-sidenav-group+[rds-sidenav-menuitem]{margin-top:24px}rds-sidenav>nav rds-sidenav-footer{--rds-sidenav-footer-background-color: var(--rds-color-bg-base-1);--rds-sidenav-footer-position-bottom: -20px;--rds-sidenav-footer-margin-bottom: -20px;--rds-sidenav-footer-margin-inline: -24px;--rds-sidenav-footer-padding-bottom: 20px}rds-sidenav>nav .expand-toggle{height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle:after{left:0!important;top:0!important;height:40px!important;width:40px!important}rds-sidenav>nav .expand-toggle rds-icon{transform:rotateY(180deg);transition-duration:0ms}rds-sidenav>nav .expand-toggle:before{display:none!important}rds-sidenav.rds-sidenav-minimal{height:auto;min-height:calc(100vh - var(--rds-sidenav-offset-top, 0px));max-height:unset}rds-sidenav.rds-sidenav-minimal nav{overflow-y:visible;width:72px;padding:20px 16px}rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal,rds-sidenav.rds-sidenav-minimal nav .sr-only-when-minimal-and-first-level{position:absolute;width:1px;height:1px;margin:-1px;padding:0;overflow:hidden;clip:rect(0,0,0,0);border:0}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-footer{--rds-sidenav-footer-position-bottom: 0;--rds-sidenav-footer-margin-inline: -16px}rds-sidenav.rds-sidenav-minimal nav rds-sidenav-menu .sr-only-when-minimal-and-first-level{position:unset;width:unset;height:unset;overflow:unset;clip:unset;margin:unset;border:unset;padding:unset}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem{padding:8px}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover{background:var(--rds-color-bg-transparent-hover-select)}rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:hover>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem:active>rds-icon,rds-sidenav.rds-sidenav-minimal .rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger,.rds-sidenav-menuitem{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;align-items:center;display:flex;gap:12px;border:none;border-radius:6px;width:100%;padding:8px 0;background:none;cursor:pointer;-webkit-user-select:none;user-select:none;text-decoration:none;color:var(--rds-color-low-contrast)}.rds-sidenav-menu-trigger rds-icon,.rds-sidenav-menuitem rds-icon{height:18px;width:18px}.rds-sidenav-menu-trigger:hover,.rds-sidenav-menu-trigger:active,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active,.rds-sidenav-menuitem:hover,.rds-sidenav-menuitem:active,.rds-sidenav-menuitem.rds-sidenav-menuitem-active{outline:none;color:var(--rds-color-high-contrast)}.rds-sidenav-menu-trigger:hover>rds-icon,.rds-sidenav-menu-trigger:active>rds-icon,.rds-sidenav-menu-trigger.rds-sidenav-menuitem-active>rds-icon,.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-trigger:active,.rds-sidenav-menuitem:active{color:var(--rds-color-informative)}.rds-sidenav-menu-trigger:focus-visible,.rds-sidenav-menuitem:focus-visible{outline:1px solid var(--rds-color-stroke-active-focus)}.rds-sidenav-menu-trigger{z-index:2}.rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px}.rds-sidenav-minimal.rds-sidenav-menuitem rds-icon{height:1.5rem;width:1.5rem}.rds-sidenav-minimal.rds-sidenav-menuitem:hover>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem:active>rds-icon,.rds-sidenav-minimal.rds-sidenav-menuitem.rds-sidenav-menuitem-active>rds-icon{color:inherit}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem{padding:8px 16px}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:hover{background-color:var(--rds-color-bg-solid-hover-select);color:var(--rds-color-low-contrast)}.rds-sidenav-menu-panel .rds-sidenav-minimal.rds-sidenav-menuitem:focus-visible{color:var(--rds-color-informative)}.rds-sidenav-minimal .expand-toggle rds-icon{transform:rotateY(0)}.rds-sidenav-badge-container{margin-top:-2px;margin-left:auto}.rds-sidenav-minimal .rds-sidenav-badge-container{position:absolute;top:-7%;left:55%}\n"] }]
        }], propDecorators: { isExpandable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isMinimal: [{
                type: Input
            }], isInMinimalState: [{
                type: HostBinding,
                args: ['class.rds-sidenav-minimal']
            }], isInFullState: [{
                type: HostBinding,
                args: ['class.rds-sidenav-full']
            }], isMinimalChange: [{
                type: Output
            }], children: [{
                type: ContentChildren,
                args: [SidenavItem, { descendants: true }]
            }], footerRef: [{
                type: ViewChild,
                args: ['footer', { read: ElementRef }]
            }], navRef: [{
                type: ViewChild,
                args: ['nav', { read: ElementRef }]
            }] } });

let groupCounter = 0;
class RdsSidenavGroupComponent {
    constructor() {
        this.id = `rds-sidenav-group-header-${groupCounter++}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavGroupComponent, selector: "rds-sidenav-group", ngImport: i0, template: "<section [attr.aria-labelledby]=\"id\">\n  <header [id]=\"id\" class=\"sr-only-when-minimal\">\n    <ng-content select=\"rds-sidenav-group-title\" />\n  </header>\n  <ng-content />\n</section>\n", styles: [":host{display:flex;border-top:1px solid var(--rds-sidenav-group-divider-color);border-bottom:1px solid var(--rds-sidenav-group-divider-color);padding:var(--rds-sidenav-group-padding)}[rds-sidenav-menuitem]+:host{margin-top:var(--rds-sidenav-group-spacing)}rds-sidenav-group+:host{border-top:none}:host:first-child{border-top:none;padding-top:0}:host:last-child{border-bottom:none}:host header{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:block;padding:var(--rds-sidenav-group-header-padding);color:var(--rds-sidenav-group-header-color)}:host section{flex:1 0 auto}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-sidenav-group', changeDetection: ChangeDetectionStrategy.OnPush, template: "<section [attr.aria-labelledby]=\"id\">\n  <header [id]=\"id\" class=\"sr-only-when-minimal\">\n    <ng-content select=\"rds-sidenav-group-title\" />\n  </header>\n  <ng-content />\n</section>\n", styles: [":host{display:flex;border-top:1px solid var(--rds-sidenav-group-divider-color);border-bottom:1px solid var(--rds-sidenav-group-divider-color);padding:var(--rds-sidenav-group-padding)}[rds-sidenav-menuitem]+:host{margin-top:var(--rds-sidenav-group-spacing)}rds-sidenav-group+:host{border-top:none}:host:first-child{border-top:none;padding-top:0}:host:last-child{border-bottom:none}:host header{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:block;padding:var(--rds-sidenav-group-header-padding);color:var(--rds-sidenav-group-header-color)}:host section{flex:1 0 auto}\n"] }]
        }] });

class RdsSidenavGroupTitleDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavGroupTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavGroupTitleDirective, selector: "rds-sidenav-group-title, [rds-sidenav-group-title], [rdsSidenavGroupTitle]", exportAs: ["rdsSidenavGroupTitle"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavGroupTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-sidenav-group-title, [rds-sidenav-group-title], [rdsSidenavGroupTitle]',
                    exportAs: 'rdsSidenavGroupTitle',
                }]
        }] });

const PUBLIC_SIDENAV_ELEMENTS = [
    RdsSidenavComponent,
    RdsSidenavMenuComponent,
    RdsSidenavMenuTriggerComponent,
    RdsSidenavGroupComponent,
    RdsSidenavGroupTitleDirective,
    RdsSidenavMenuitemComponent,
    RdsSidenavMenuHeaderComponent,
];
class RdsSidenavModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavModule, declarations: [RdsSidenavComponent,
            RdsSidenavMenuComponent,
            RdsSidenavMenuTriggerComponent,
            RdsSidenavGroupComponent,
            RdsSidenavGroupTitleDirective,
            RdsSidenavMenuitemComponent,
            RdsSidenavMenuHeaderComponent, RdsSidenavFooterComponent], imports: [CommonModule,
            RdsIconComponent,
            RdsButtonModule,
            OverlayModule,
            RdsDividerModule,
            RdsObserveResizeDirective], exports: [RdsSidenavComponent,
            RdsSidenavMenuComponent,
            RdsSidenavMenuTriggerComponent,
            RdsSidenavGroupComponent,
            RdsSidenavGroupTitleDirective,
            RdsSidenavMenuitemComponent,
            RdsSidenavMenuHeaderComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavModule, imports: [CommonModule,
            RdsButtonModule,
            OverlayModule,
            RdsDividerModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [...PUBLIC_SIDENAV_ELEMENTS],
                    declarations: [...PUBLIC_SIDENAV_ELEMENTS, RdsSidenavFooterComponent],
                    imports: [
                        CommonModule,
                        RdsIconComponent,
                        RdsButtonModule,
                        OverlayModule,
                        RdsDividerModule,
                        RdsObserveResizeDirective,
                    ],
                }]
        }] });

const activeEventOptions = normalizePassiveListenerOptions({ passive: false });
const MIN_AUTO_TICK_SEPARATION = 30;
const DISABLED_THUMB_GAP = 7;
const MIN_VALUE_NONACTIVE_THUMB_GAP = 7;
const MIN_VALUE_ACTIVE_THUMB_GAP = 10;
const RDS_SLIDER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => RdsSliderComponent),
    multi: true,
};
class RdsSliderChange {
}
const ANIMATION_TIME = 400;
class RdsSliderComponent {
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set max(v) {
        this._max = numberAttribute(v, this._max);
        this._percent = this._calculatePercentage(this._value);
    }
    get max() {
        return this._max;
    }
    set min(v) {
        this._min = numberAttribute(v, this._min);
        this._percent = this._calculatePercentage(this._value);
    }
    get min() {
        return this._min;
    }
    set step(v) {
        this._step = numberAttribute(v, this._step);
        const step = this._step.toString().split('.').pop();
        if (this._step % 1 !== 0 && step) {
            this._roundToDecimal = step.length;
        }
    }
    get step() {
        return this._step;
    }
    get tickInterval() {
        return this._tickInterval;
    }
    set tickInterval(value) {
        if (value === 'auto') {
            this._tickInterval = 'auto';
        }
        else if (typeof value === 'number' || typeof value === 'string') {
            this._tickInterval = numberAttribute(value, this._tickInterval);
        }
        else {
            this._tickInterval = 0;
        }
    }
    get value() {
        if (this._value === null) {
            this.value = this.min;
        }
        return this._value;
    }
    set value(v) {
        if (v !== this._value) {
            let value = numberAttribute(v, 0);
            if (this._roundToDecimal && value !== this.min && value !== this.max) {
                value = parseFloat(value.toFixed(this._roundToDecimal));
            }
            if (value !== this._value) {
                this._value = value;
                this._percent = this._calculatePercentage(this._value);
                this.cdr.markForCheck();
            }
        }
    }
    get valueTextAttr() {
        return this.valueText === null || this.valueText === undefined
            ? String(this.displayValue)
            : this.valueText;
    }
    get ariaOrientationAttr() {
        return this.vertical ? 'vertical' : 'horizontal';
    }
    get rdsSliderHorizontal() {
        return !this.vertical;
    }
    get rdsSliderAxisInvertedClass() {
        return this._shouldInvertAxis();
    }
    get rdsSliderInvertMouseCoords() {
        return this._shouldInvertMouseCoords();
    }
    get hideLastTick() {
        return (this.disabled ||
            (this._isMinValue() &&
                this._getThumbGap() > 0 &&
                this._shouldInvertAxis()));
    }
    get noAnimation() {
        return this.animationMode === 'NoopAnimations';
    }
    get percent() {
        return this._clamp(this._percent);
    }
    get displayValue() {
        if (this.displayWith) {
            return this.displayWith(this.value);
        }
        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {
            return this.value.toFixed(this._roundToDecimal);
        }
        return this.value || 0;
    }
    focus(options) {
        this._focusHostElement(options);
    }
    blur() {
        this._blurHostElement();
    }
    _shouldInvertAxis() {
        return this.vertical ? !this.invert : this.invert;
    }
    _isMinValue() {
        return this.percent === 0;
    }
    _getThumbGap() {
        if (this.disabled) {
            return DISABLED_THUMB_GAP;
        }
        if (this._isMinValue() && !this.thumbLabel) {
            return this._isActive
                ? MIN_VALUE_ACTIVE_THUMB_GAP
                : MIN_VALUE_NONACTIVE_THUMB_GAP;
        }
        return 0;
    }
    _getTrackFillStyles() {
        const percent = this.percent;
        const style = {};
        if (this.vertical) {
            style.height = `${(this._getSliderDimensions()?.height || 0) * percent}px`;
            if (this._shouldInvertMouseCoords()) {
                style.bottom = '0';
            }
            else {
                style.top = '0';
            }
        }
        else {
            style.width = `${(this._getSliderDimensions()?.width || 0) * percent}px`;
            if (this._shouldInvertMouseCoords()) {
                style.right = '0';
            }
            else {
                style.left = '0';
            }
        }
        return {
            ...style,
            display: percent === 0 ? 'none' : '',
        };
    }
    _getTicksContainerStyles() {
        const axis = this.vertical ? 'Y' : 'X';
        const sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';
        const offset = (this._tickIntervalPercent / 2) * 100;
        return {
            transform: `translate${axis}(${sign}${offset}%)`,
        };
    }
    _getTicksStyles() {
        const tickSize = this._tickIntervalPercent * 100;
        const backgroundSize = this.vertical
            ? `3px ${tickSize}%`
            : `${tickSize}% 3px`;
        const axis = this.vertical ? 'Y' : 'X';
        const sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';
        const rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';
        const styles = {
            backgroundSize: backgroundSize,
            transform: `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`,
        };
        if (this._isMinValue() && this._getThumbGap()) {
            const shouldInvertAxis = this._shouldInvertAxis();
            let side;
            if (this.vertical) {
                side = shouldInvertAxis ? 'Bottom' : 'Top';
            }
            else {
                side = shouldInvertAxis ? 'Right' : 'Left';
            }
            styles[`padding${side}`] = `${this._getThumbGap()}px`;
        }
        return styles;
    }
    _getThumbContainerStyles() {
        const shouldInvertAxis = this._shouldInvertAxis();
        const axis = this.vertical ? 'Y' : 'X';
        const invertOffset = this._getDirection() == 'rtl' && !this.vertical
            ? !shouldInvertAxis
            : shouldInvertAxis;
        const offset = (invertOffset ? this.percent : 1 - this.percent) * 100;
        return {
            transform: `translate${axis}(-${offset}%)`,
        };
    }
    _shouldInvertMouseCoords() {
        const shouldInvertAxis = this._shouldInvertAxis();
        return this._getDirection() == 'rtl' && !this.vertical
            ? !shouldInvertAxis
            : shouldInvertAxis;
    }
    _getDirection() {
        return this.dir && this.dir.value == 'rtl' ? 'rtl' : 'ltr';
    }
    constructor(tabIndex) {
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.focusMonitor = inject(FocusMonitor);
        this.cdr = inject(ChangeDetectorRef);
        this.dir = inject(Directionality, { optional: true });
        this.ngZone = inject(NgZone);
        this.document = inject(DOCUMENT);
        this.animationMode = inject(ANIMATION_MODULE_TYPE, {
            optional: true,
        });
        this.class = 'rds-slider rds-focus-indicator';
        this.role = 'slider';
        this.disabled = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.invert = false;
        this._max = 100;
        this._min = 0;
        this._step = 1;
        this.thumbLabel = false;
        this._tickInterval = 0;
        this._value = null;
        this.vertical = false;
        this.onTouched = noop;
        this._percent = 0;
        this._isSliding = null;
        this._isActive = false;
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.input = new EventEmitter();
        this.valueChange = new EventEmitter();
        this._tickIntervalPercent = 0;
        this._sliderDimensions = null;
        this._controlValueAccessorChangeFn = noop;
        this._pointerDown = (event) => {
            if (this.disabled ||
                this._isSliding ||
                (!isTouchEvent(event) && event.button !== 0)) {
                return;
            }
            this.ngZone.run(() => {
                this._touchId = isTouchEvent(event)
                    ? getTouchIdForSlider(event, this.elementRef.nativeElement)
                    : undefined;
                const pointerPosition = getPointerPositionOnPage(event, this._touchId);
                if (pointerPosition) {
                    const oldValue = this.value;
                    this._isSliding = 'pointer';
                    this._lastPointerEvent = event;
                    event.preventDefault();
                    this._focusHostElement();
                    this._onMouseenter();
                    this._bindGlobalEvents(event);
                    this._focusHostElement();
                    this._updateValueFromPosition(pointerPosition);
                    this._valueOnSlideStart = oldValue;
                    if (oldValue != this.value) {
                        this._emitInputEvent();
                    }
                }
            });
        };
        this._pointerMove = (event) => {
            if (this._isSliding === 'pointer') {
                const pointerPosition = getPointerPositionOnPage(event, this._touchId);
                if (pointerPosition) {
                    event.preventDefault();
                    const oldValue = this.value;
                    this._lastPointerEvent = event;
                    this._updateValueFromPosition(pointerPosition);
                    if (oldValue != this.value) {
                        this._emitInputEvent();
                    }
                }
            }
        };
        this._pointerUp = (event) => {
            if (this._isSliding === 'pointer') {
                if (!isTouchEvent(event) ||
                    typeof this._touchId !== 'number' ||
                    findMatchingTouch(event.changedTouches, this._touchId)) {
                    event.preventDefault();
                    this._removeGlobalEvents();
                    this._isSliding = null;
                    this._touchId = undefined;
                    if (this._valueOnSlideStart != this.value && !this.disabled) {
                        this._emitChangeEvent();
                    }
                    this._valueOnSlideStart = this._lastPointerEvent = null;
                }
            }
        };
        this._windowBlur = () => {
            if (this._lastPointerEvent) {
                this._pointerUp(this._lastPointerEvent);
            }
        };
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
        this.ngZone.runOutsideAngular(() => {
            const element = this.elementRef.nativeElement;
            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);
            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);
        });
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((origin) => {
            this._isActive = !!origin && origin !== 'keyboard';
            this.cdr.detectChanges();
        });
        if (this.dir) {
            this.dir.change
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this.cdr.markForCheck());
        }
        timer(1)
            .pipe(tap(() => this.cdr.markForCheck()), delay(ANIMATION_TIME - 1), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
    }
    ngOnDestroy() {
        const element = this.elementRef.nativeElement;
        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);
        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);
        this._lastPointerEvent = null;
        this._removeGlobalEvents();
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    _onMouseenter() {
        if (this.disabled) {
            return;
        }
        this._sliderDimensions = this._getSliderDimensions();
        this._updateTickIntervalPercent();
    }
    _onFocus() {
        this._sliderDimensions = this._getSliderDimensions();
        this._updateTickIntervalPercent();
    }
    _onBlur() {
        this.onTouched();
    }
    _onSelectStart($event) {
        $event.preventDefault();
    }
    _onKeydown(event) {
        if (this.disabled ||
            hasModifierKey(event) ||
            (this._isSliding && this._isSliding !== 'keyboard')) {
            return;
        }
        const oldValue = this.value;
        switch (event.keyCode) {
            case PAGE_UP:
                this._increment(10);
                break;
            case PAGE_DOWN:
                this._increment(-10);
                break;
            case END:
                this.value = this.max;
                break;
            case HOME:
                this.value = this.min;
                break;
            case LEFT_ARROW:
                this._increment(this._getDirection() == 'rtl' ? 1 : -1);
                break;
            case UP_ARROW:
                this._increment(1);
                break;
            case RIGHT_ARROW:
                this._increment(this._getDirection() == 'rtl' ? -1 : 1);
                break;
            case DOWN_ARROW:
                this._increment(-1);
                break;
            default:
                return;
        }
        if (oldValue != this.value) {
            this._emitInputEvent();
            this._emitChangeEvent();
        }
        this._isSliding = 'keyboard';
        event.preventDefault();
    }
    _onKeyup() {
        if (this._isSliding === 'keyboard') {
            this._isSliding = null;
        }
    }
    _getWindow() {
        return this.document.defaultView || window;
    }
    _bindGlobalEvents(triggerEvent) {
        const document = this.document;
        const isTouch = isTouchEvent(triggerEvent);
        const moveEventName = isTouch ? 'touchmove' : 'mousemove';
        const endEventName = isTouch ? 'touchend' : 'mouseup';
        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);
        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);
        if (isTouch) {
            document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);
        }
        const window = this._getWindow();
        if (typeof window !== 'undefined' && window) {
            window.addEventListener('blur', this._windowBlur);
        }
    }
    _removeGlobalEvents() {
        const document = this.document;
        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);
        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);
        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);
        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);
        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);
        const window = this._getWindow();
        if (typeof window !== 'undefined' && window) {
            window.removeEventListener('blur', this._windowBlur);
        }
    }
    _increment(numSteps) {
        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);
    }
    _updateValueFromPosition(pos) {
        if (!this._sliderDimensions) {
            return;
        }
        const offset = this.vertical
            ? this._sliderDimensions.top
            : this._sliderDimensions.left;
        const size = this.vertical
            ? this._sliderDimensions.height
            : this._sliderDimensions.width;
        const posComponent = this.vertical ? pos.y : pos.x;
        let percent = this._clamp((posComponent - offset) / size);
        if (this._shouldInvertMouseCoords()) {
            percent = 1 - percent;
        }
        if (percent === 0) {
            this.value = this.min;
        }
        else if (percent === 1) {
            this.value = this.max;
        }
        else {
            const exactValue = this._calculateValue(percent);
            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;
            this.value = this._clamp(closestValue, this.min, this.max);
        }
    }
    _emitChangeEvent() {
        this._controlValueAccessorChangeFn(this.value);
        this.valueChange.emit(this.value);
        this.change.emit(this._createChangeEvent());
    }
    _emitInputEvent() {
        this.input.emit(this._createChangeEvent());
    }
    _updateTickIntervalPercent() {
        if (!this.tickInterval || !this._sliderDimensions) {
            return;
        }
        if (this.tickInterval == 'auto') {
            const trackSize = this.vertical
                ? this._sliderDimensions.height
                : this._sliderDimensions.width;
            const pixelsPerStep = (trackSize * this.step) / (this.max - this.min);
            const stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);
            const pixelsPerTick = stepsPerTick * this.step;
            this._tickIntervalPercent = pixelsPerTick / trackSize;
        }
        else {
            this._tickIntervalPercent =
                (this.tickInterval * this.step) / (this.max - this.min);
        }
    }
    _createChangeEvent(value = this.value) {
        const event = new RdsSliderChange();
        event.source = this;
        event.value = value;
        return event;
    }
    _calculatePercentage(value) {
        return ((value || 0) - this.min) / (this.max - this.min);
    }
    _calculateValue(percentage) {
        return this.min + percentage * (this.max - this.min);
    }
    _clamp(value, min = 0, max = 1) {
        return Math.max(min, Math.min(value, max));
    }
    _getSliderDimensions() {
        return this._sliderWrapper
            ? this._sliderWrapper.nativeElement.getBoundingClientRect()
            : null;
    }
    _focusHostElement(options) {
        this.elementRef.nativeElement.focus(options);
    }
    _blurHostElement() {
        this.elementRef.nativeElement.blur();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this._controlValueAccessorChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSliderComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsSliderComponent, selector: "rds-slider", inputs: { disabled: ["disabled", "disabled", booleanAttribute], tabIndex: "tabIndex", invert: ["invert", "invert", booleanAttribute], max: "max", min: "min", step: "step", thumbLabel: ["thumbLabel", "thumbLabel", booleanAttribute], tickInterval: "tickInterval", value: "value", displayWith: "displayWith", valueText: "valueText", vertical: ["vertical", "vertical", booleanAttribute] }, outputs: { change: "change", input: "input", valueChange: "valueChange" }, host: { listeners: { "mouseenter": "_onMouseenter()", "focus": "_onFocus()", "blur": "_onBlur()", "selectstart": "_onSelectStart($event)", "keydown": "_onKeydown($event)", "keyup": "_onKeyup()" }, properties: { "class": "this.class", "attr.role": "this.role", "attr.aria-disabled": "this.disabled", "class.rds-slider-disabled": "this.disabled", "tabIndex": "this.tabIndex", "attr.aria-valuemax": "this.max", "attr.aria-valuemin": "this.min", "class.rds-slider-thumb-label-showing": "this.thumbLabel", "class.rds-slider-has-ticks": "this.tickInterval", "attr.aria-valuenow": "this.value", "attr.aria-valuetext": "this.valueTextAttr", "attr.aria-orientation": "this.ariaOrientationAttr", "class.rds-slider-horizontal": "this.rdsSliderHorizontal", "class.rds-slider-vertical": "this.vertical", "class.rds-slider-axis-inverted": "this.rdsSliderAxisInvertedClass", "class.rds-slider-invert-mouse-coords": "this.rdsSliderInvertMouseCoords", "class.rds-slider-hide-last-tick": "this.hideLastTick", "class._rds-animation-noopable": "this.noAnimation", "class.rds-slider-sliding": "this._isSliding" } }, providers: [RDS_SLIDER_VALUE_ACCESSOR], viewQueries: [{ propertyName: "_sliderWrapper", first: true, predicate: ["sliderWrapper"], descendants: true }], exportAs: ["rdsSlider"], ngImport: i0, template: "<div class=\"rds-slider-wrapper\" #sliderWrapper>\n  <div class=\"rds-slider-track-wrapper\">\n    <div class=\"rds-slider-track-background\"></div>\n    <div class=\"rds-slider-track-fill\" [ngStyle]=\"_getTrackFillStyles()\"></div>\n  </div>\n  <div\n    class=\"rds-slider-ticks-container\"\n    [ngStyle]=\"_getTicksContainerStyles()\"\n  >\n    <div class=\"rds-slider-ticks\" [ngStyle]=\"_getTicksStyles()\"></div>\n  </div>\n  <div\n    class=\"rds-slider-thumb-container\"\n    [ngStyle]=\"_getThumbContainerStyles()\"\n  >\n    <div class=\"rds-slider-focus-ring\"></div>\n    <div class=\"rds-slider-thumb\">\n      <div class=\"rds-slider-thumb-hover\"></div>\n    </div>\n    <div class=\"rds-slider-thumb-label\">\n      <span class=\"rds-slider-thumb-label-text\">{{ displayValue }}</span>\n    </div>\n  </div>\n</div>\n", styles: [".rds-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.rds-slider:not(.rds-slider-disabled):active,.rds-slider.rds-slider-sliding:not(.rds-slider-disabled){cursor:grabbing}.rds-slider-wrapper{-webkit-print-color-adjust:exact;print-color-adjust:exact;position:absolute}.rds-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.rds-slider-track-fill{position:absolute;border-radius:1.5px;transform-origin:0 0}.rds-slider-track-background{position:absolute;border-radius:1.5px;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.rds-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-focus-ring{position:absolute;width:24px;height:24px;border-radius:50%;opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider.cdk-keyboard-focused .rds-slider-focus-ring,.rds-slider.cdk-program-focused .rds-slider-focus-ring{transform:scale(1);opacity:1}.rds-slider-thumb{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;position:absolute;right:-6px;bottom:-6px;box-sizing:border-box;width:12px;height:12px;border-radius:50%}.rds-slider:not(.rds-slider-disabled):not(.rds-slider-sliding) .rds-slider-thumb{cursor:grab}.rds-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;height:20px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.rds-slider:not(.rds-slider-disabled):not(.rds-slider-sliding) .rds-slider-thumb-label{cursor:grab}.rds-slider-thumb-label-text{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-sliding .rds-slider-track-fill,.rds-slider-sliding .rds-slider-track-background,.rds-slider-sliding .rds-slider-thumb-container{transition-duration:0ms}.rds-slider-has-ticks .rds-slider-wrapper:after{content:\"\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-has-ticks.cdk-focused:not(.rds-slider-hide-last-tick) .rds-slider-wrapper:after,.rds-slider-has-ticks:hover:not(.rds-slider-hide-last-tick) .rds-slider-wrapper:after{opacity:1}.rds-slider-has-ticks.cdk-focused:not(.rds-slider-disabled) .rds-slider-ticks,.rds-slider-has-ticks:hover:not(.rds-slider-disabled) .rds-slider-ticks{opacity:1}.rds-slider-thumb-label-showing .rds-slider-focus-ring{display:none}.rds-slider-thumb-label-showing .rds-slider-thumb-label{display:flex}.rds-slider-axis-inverted .rds-slider-track-fill{transform-origin:100% 100%}.rds-slider-axis-inverted .rds-slider-track-background{transform-origin:0 0}.rds-slider:not(.rds-slider-disabled).cdk-focused .rds-slider-thumb-label{padding:0 4px;border-radius:10px}.rds-slider:not(.rds-slider-disabled).cdk-focused .rds-slider-thumb-label-text{opacity:1}.rds-slider-disabled .rds-slider-focus-ring{transform:scale(0);opacity:0}.rds-slider-disabled .rds-slider-thumb{border-width:4px}.rds-slider-disabled .rds-slider-thumb-label{display:none}.rds-slider-horizontal{height:48px;min-width:128px}.rds-slider-horizontal .rds-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.rds-slider-horizontal .rds-slider-wrapper:after{height:2px;border-left-width:2px;right:0;top:0}.rds-slider-horizontal .rds-slider-track-wrapper,.rds-slider-horizontal .rds-slider-track-fill{height:2px;width:100%}.rds-slider-horizontal .rds-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.rds-slider-horizontal .rds-slider-ticks-container,.rds-slider-horizontal .rds-slider-ticks{height:2px;width:100%}.rds-slider-horizontal .rds-slider-thumb-container{width:100%;height:0;top:50%}.rds-slider-horizontal .rds-slider-focus-ring{top:-12px;right:-12px}.rds-slider-horizontal .rds-slider-thumb-label{right:0;top:-38px;transform:translateY(28px) translate(50%) scale(.01)}.rds-slider-horizontal.cdk-focused .rds-slider-thumb-label{transform:translate(50%)}.rds-slider-vertical{width:48px;min-height:128px}.rds-slider-vertical .rds-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.rds-slider-vertical .rds-slider-wrapper:after{width:2px;border-top-width:2px;bottom:0;left:0}.rds-slider-vertical .rds-slider-track-wrapper,.rds-slider-vertical .rds-slider-track-fill{height:100%;width:2px}.rds-slider-vertical .rds-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.rds-slider-vertical .rds-slider-ticks-container{width:2px;height:100%}.rds-slider-vertical .rds-slider-focus-ring{bottom:-12px;left:-12px}.rds-slider-vertical .rds-slider-ticks{width:2px;height:100%}.rds-slider-vertical .rds-slider-thumb-container{height:100%;width:0;left:50%}.rds-slider-vertical .rds-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.rds-slider-vertical .rds-slider-thumb-label{bottom:0;left:0;transform:translateY(50%) scale(.01)}.rds-slider-vertical.cdk-focused .rds-slider-thumb-label{transform:translateY(50%) translate(calc(-100% - 18px))}[dir=rtl] .rds-slider-wrapper:after{left:0;right:auto}[dir=rtl] .rds-slider-horizontal .rds-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .rds-slider-horizontal .rds-slider-track-background,[dir=rtl] .rds-slider-horizontal.rds-slider-axis-inverted .rds-slider-track-fill{transform-origin:0 0}[dir=rtl] .rds-slider-horizontal.rds-slider-axis-inverted .rds-slider-track-background{transform-origin:100% 100%}.rds-slider._rds-animation-noopable .rds-slider-track-fill,.rds-slider._rds-animation-noopable .rds-slider-track-background,.rds-slider._rds-animation-noopable .rds-slider-ticks,.rds-slider._rds-animation-noopable .rds-slider-thumb-container,.rds-slider._rds-animation-noopable .rds-slider-focus-ring,.rds-slider._rds-animation-noopable .rds-slider-thumb,.rds-slider._rds-animation-noopable .rds-slider-thumb-label,.rds-slider._rds-animation-noopable .rds-slider-thumb-label-text,.rds-slider._rds-animation-noopable .rds-slider-has-ticks .rds-slider-wrapper:after{transition:none}.rds-slider-track-background{background-color:var(--rds-color-track)}.rds-slider .rds-slider-track-fill,.rds-slider .rds-slider-thumb{background:var(--rds-color-informative)}.rds-slider .rds-slider-thumb .rds-slider-thumb-hover{display:none;position:relative;top:-6px;left:-6px;height:24px;width:24px;border-radius:50%;background-color:var(--rds-color-bg-transparent-hover-select);border:2px solid transparent}.rds-slider .rds-slider-thumb-label{background:var(--rds-color-informative)}.rds-slider .rds-slider-thumb-label-text{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast-reversed)}.rds-slider .rds-slider-focus-ring{background-color:var(--rds-color-bg-transparent-hover-select)}.rds-slider:hover .rds-slider-track-background,.rds-slider.cdk-focused .rds-slider-track-background{background-color:var(--rds-color-track)}.rds-slider-thumb:hover .rds-slider-thumb-hover{display:block}.rds-slider.cdk-keyboard-focused .rds-slider-thumb .rds-slider-thumb-hover{display:block;border-color:var(--rds-color-informative)}.rds-slider.cdk-mouse-focused.rds-slider-sliding .rds-slider-thumb .rds-slider-thumb-hover{display:block;background-color:var(--rds-color-bg-transparent-pressed)}.rds-slider-disabled .rds-slider-track-background{background:var(--rds-color-grey-2)}.rds-slider-disabled .rds-slider-track-fill,.rds-slider-disabled .rds-slider-thumb{background:var(--rds-color-disabled)}.rds-slider-disabled .rds-slider-thumb .rds-slider-thumb-hover{background:transparent}.rds-slider-disabled.rds-slider:hover .rds-slider-track-background,.rds-slider-disabled.rds-slider.cdk-focused .rds-slider-track-background{background-color:var(--rds-color-grey-2)}.rds-slider-has-ticks .rds-slider-wrapper:after{border-color:var(--rds-color-informative)}.rds-slider-horizontal .rds-slider-ticks{background-image:repeating-linear-gradient(to right,var(--rds-color-informative),var(--rds-color-informative) 2px,transparent 0,transparent)}.rds-slider-vertical .rds-slider-ticks{background-image:repeating-linear-gradient(to bottom,var(--rds-color-informative),var(--rds-color-informative) 2px,transparent 0,transparent)}\n"], dependencies: [{ kind: "directive", type: i1$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSliderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-slider', exportAs: 'rdsSlider', providers: [RDS_SLIDER_VALUE_ACCESSOR], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"rds-slider-wrapper\" #sliderWrapper>\n  <div class=\"rds-slider-track-wrapper\">\n    <div class=\"rds-slider-track-background\"></div>\n    <div class=\"rds-slider-track-fill\" [ngStyle]=\"_getTrackFillStyles()\"></div>\n  </div>\n  <div\n    class=\"rds-slider-ticks-container\"\n    [ngStyle]=\"_getTicksContainerStyles()\"\n  >\n    <div class=\"rds-slider-ticks\" [ngStyle]=\"_getTicksStyles()\"></div>\n  </div>\n  <div\n    class=\"rds-slider-thumb-container\"\n    [ngStyle]=\"_getThumbContainerStyles()\"\n  >\n    <div class=\"rds-slider-focus-ring\"></div>\n    <div class=\"rds-slider-thumb\">\n      <div class=\"rds-slider-thumb-hover\"></div>\n    </div>\n    <div class=\"rds-slider-thumb-label\">\n      <span class=\"rds-slider-thumb-label-text\">{{ displayValue }}</span>\n    </div>\n  </div>\n</div>\n", styles: [".rds-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.rds-slider:not(.rds-slider-disabled):active,.rds-slider.rds-slider-sliding:not(.rds-slider-disabled){cursor:grabbing}.rds-slider-wrapper{-webkit-print-color-adjust:exact;print-color-adjust:exact;position:absolute}.rds-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.rds-slider-track-fill{position:absolute;border-radius:1.5px;transform-origin:0 0}.rds-slider-track-background{position:absolute;border-radius:1.5px;transform-origin:100% 100%;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.rds-slider-ticks{-webkit-background-clip:content-box;background-clip:content-box;background-repeat:repeat;box-sizing:border-box;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-thumb-container{position:absolute;z-index:1;transition:transform .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-focus-ring{position:absolute;width:24px;height:24px;border-radius:50%;opacity:0;transition:transform .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1),opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider.cdk-keyboard-focused .rds-slider-focus-ring,.rds-slider.cdk-program-focused .rds-slider-focus-ring{transform:scale(1);opacity:1}.rds-slider-thumb{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;position:absolute;right:-6px;bottom:-6px;box-sizing:border-box;width:12px;height:12px;border-radius:50%}.rds-slider:not(.rds-slider-disabled):not(.rds-slider-sliding) .rds-slider-thumb{cursor:grab}.rds-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;height:20px;border-radius:50%;transition:transform .4s cubic-bezier(.25,.8,.25,1),border-radius .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.rds-slider:not(.rds-slider-disabled):not(.rds-slider-sliding) .rds-slider-thumb-label{cursor:grab}.rds-slider-thumb-label-text{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;z-index:1;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-sliding .rds-slider-track-fill,.rds-slider-sliding .rds-slider-track-background,.rds-slider-sliding .rds-slider-thumb-container{transition-duration:0ms}.rds-slider-has-ticks .rds-slider-wrapper:after{content:\"\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity .4s cubic-bezier(.25,.8,.25,1)}.rds-slider-has-ticks.cdk-focused:not(.rds-slider-hide-last-tick) .rds-slider-wrapper:after,.rds-slider-has-ticks:hover:not(.rds-slider-hide-last-tick) .rds-slider-wrapper:after{opacity:1}.rds-slider-has-ticks.cdk-focused:not(.rds-slider-disabled) .rds-slider-ticks,.rds-slider-has-ticks:hover:not(.rds-slider-disabled) .rds-slider-ticks{opacity:1}.rds-slider-thumb-label-showing .rds-slider-focus-ring{display:none}.rds-slider-thumb-label-showing .rds-slider-thumb-label{display:flex}.rds-slider-axis-inverted .rds-slider-track-fill{transform-origin:100% 100%}.rds-slider-axis-inverted .rds-slider-track-background{transform-origin:0 0}.rds-slider:not(.rds-slider-disabled).cdk-focused .rds-slider-thumb-label{padding:0 4px;border-radius:10px}.rds-slider:not(.rds-slider-disabled).cdk-focused .rds-slider-thumb-label-text{opacity:1}.rds-slider-disabled .rds-slider-focus-ring{transform:scale(0);opacity:0}.rds-slider-disabled .rds-slider-thumb{border-width:4px}.rds-slider-disabled .rds-slider-thumb-label{display:none}.rds-slider-horizontal{height:48px;min-width:128px}.rds-slider-horizontal .rds-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.rds-slider-horizontal .rds-slider-wrapper:after{height:2px;border-left-width:2px;right:0;top:0}.rds-slider-horizontal .rds-slider-track-wrapper,.rds-slider-horizontal .rds-slider-track-fill{height:2px;width:100%}.rds-slider-horizontal .rds-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.rds-slider-horizontal .rds-slider-ticks-container,.rds-slider-horizontal .rds-slider-ticks{height:2px;width:100%}.rds-slider-horizontal .rds-slider-thumb-container{width:100%;height:0;top:50%}.rds-slider-horizontal .rds-slider-focus-ring{top:-12px;right:-12px}.rds-slider-horizontal .rds-slider-thumb-label{right:0;top:-38px;transform:translateY(28px) translate(50%) scale(.01)}.rds-slider-horizontal.cdk-focused .rds-slider-thumb-label{transform:translate(50%)}.rds-slider-vertical{width:48px;min-height:128px}.rds-slider-vertical .rds-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.rds-slider-vertical .rds-slider-wrapper:after{width:2px;border-top-width:2px;bottom:0;left:0}.rds-slider-vertical .rds-slider-track-wrapper,.rds-slider-vertical .rds-slider-track-fill{height:100%;width:2px}.rds-slider-vertical .rds-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.rds-slider-vertical .rds-slider-ticks-container{width:2px;height:100%}.rds-slider-vertical .rds-slider-focus-ring{bottom:-12px;left:-12px}.rds-slider-vertical .rds-slider-ticks{width:2px;height:100%}.rds-slider-vertical .rds-slider-thumb-container{height:100%;width:0;left:50%}.rds-slider-vertical .rds-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.rds-slider-vertical .rds-slider-thumb-label{bottom:0;left:0;transform:translateY(50%) scale(.01)}.rds-slider-vertical.cdk-focused .rds-slider-thumb-label{transform:translateY(50%) translate(calc(-100% - 18px))}[dir=rtl] .rds-slider-wrapper:after{left:0;right:auto}[dir=rtl] .rds-slider-horizontal .rds-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .rds-slider-horizontal .rds-slider-track-background,[dir=rtl] .rds-slider-horizontal.rds-slider-axis-inverted .rds-slider-track-fill{transform-origin:0 0}[dir=rtl] .rds-slider-horizontal.rds-slider-axis-inverted .rds-slider-track-background{transform-origin:100% 100%}.rds-slider._rds-animation-noopable .rds-slider-track-fill,.rds-slider._rds-animation-noopable .rds-slider-track-background,.rds-slider._rds-animation-noopable .rds-slider-ticks,.rds-slider._rds-animation-noopable .rds-slider-thumb-container,.rds-slider._rds-animation-noopable .rds-slider-focus-ring,.rds-slider._rds-animation-noopable .rds-slider-thumb,.rds-slider._rds-animation-noopable .rds-slider-thumb-label,.rds-slider._rds-animation-noopable .rds-slider-thumb-label-text,.rds-slider._rds-animation-noopable .rds-slider-has-ticks .rds-slider-wrapper:after{transition:none}.rds-slider-track-background{background-color:var(--rds-color-track)}.rds-slider .rds-slider-track-fill,.rds-slider .rds-slider-thumb{background:var(--rds-color-informative)}.rds-slider .rds-slider-thumb .rds-slider-thumb-hover{display:none;position:relative;top:-6px;left:-6px;height:24px;width:24px;border-radius:50%;background-color:var(--rds-color-bg-transparent-hover-select);border:2px solid transparent}.rds-slider .rds-slider-thumb-label{background:var(--rds-color-informative)}.rds-slider .rds-slider-thumb-label-text{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-high-contrast-reversed)}.rds-slider .rds-slider-focus-ring{background-color:var(--rds-color-bg-transparent-hover-select)}.rds-slider:hover .rds-slider-track-background,.rds-slider.cdk-focused .rds-slider-track-background{background-color:var(--rds-color-track)}.rds-slider-thumb:hover .rds-slider-thumb-hover{display:block}.rds-slider.cdk-keyboard-focused .rds-slider-thumb .rds-slider-thumb-hover{display:block;border-color:var(--rds-color-informative)}.rds-slider.cdk-mouse-focused.rds-slider-sliding .rds-slider-thumb .rds-slider-thumb-hover{display:block;background-color:var(--rds-color-bg-transparent-pressed)}.rds-slider-disabled .rds-slider-track-background{background:var(--rds-color-grey-2)}.rds-slider-disabled .rds-slider-track-fill,.rds-slider-disabled .rds-slider-thumb{background:var(--rds-color-disabled)}.rds-slider-disabled .rds-slider-thumb .rds-slider-thumb-hover{background:transparent}.rds-slider-disabled.rds-slider:hover .rds-slider-track-background,.rds-slider-disabled.rds-slider.cdk-focused .rds-slider-track-background{background-color:var(--rds-color-grey-2)}.rds-slider-has-ticks .rds-slider-wrapper:after{border-color:var(--rds-color-informative)}.rds-slider-horizontal .rds-slider-ticks{background-image:repeating-linear-gradient(to right,var(--rds-color-informative),var(--rds-color-informative) 2px,transparent 0,transparent)}.rds-slider-vertical .rds-slider-ticks{background-image:repeating-linear-gradient(to bottom,var(--rds-color-informative),var(--rds-color-informative) 2px,transparent 0,transparent)}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], disabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: HostBinding,
                args: ['class.rds-slider-disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input
            }], invert: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], max: [{
                type: HostBinding,
                args: ['attr.aria-valuemax']
            }, {
                type: Input
            }], min: [{
                type: HostBinding,
                args: ['attr.aria-valuemin']
            }, {
                type: Input
            }], step: [{
                type: Input
            }], thumbLabel: [{
                type: HostBinding,
                args: ['class.rds-slider-thumb-label-showing']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tickInterval: [{
                type: HostBinding,
                args: ['class.rds-slider-has-ticks']
            }, {
                type: Input
            }], value: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }, {
                type: Input
            }], valueTextAttr: [{
                type: HostBinding,
                args: ['attr.aria-valuetext']
            }], displayWith: [{
                type: Input
            }], valueText: [{
                type: Input
            }], ariaOrientationAttr: [{
                type: HostBinding,
                args: ['attr.aria-orientation']
            }], rdsSliderHorizontal: [{
                type: HostBinding,
                args: ['class.rds-slider-horizontal']
            }], vertical: [{
                type: HostBinding,
                args: ['class.rds-slider-vertical']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], rdsSliderAxisInvertedClass: [{
                type: HostBinding,
                args: ['class.rds-slider-axis-inverted']
            }], rdsSliderInvertMouseCoords: [{
                type: HostBinding,
                args: ['class.rds-slider-invert-mouse-coords']
            }], hideLastTick: [{
                type: HostBinding,
                args: ['class.rds-slider-hide-last-tick']
            }], noAnimation: [{
                type: HostBinding,
                args: ['class._rds-animation-noopable']
            }], _isSliding: [{
                type: HostBinding,
                args: ['class.rds-slider-sliding']
            }], change: [{
                type: Output
            }], input: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], _sliderWrapper: [{
                type: ViewChild,
                args: ['sliderWrapper']
            }], _onMouseenter: [{
                type: HostListener,
                args: ['mouseenter']
            }], _onFocus: [{
                type: HostListener,
                args: ['focus']
            }], _onBlur: [{
                type: HostListener,
                args: ['blur']
            }], _onSelectStart: [{
                type: HostListener,
                args: ['selectstart', ['$event']]
            }], _onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], _onKeyup: [{
                type: HostListener,
                args: ['keyup']
            }] } });
function isTouchEvent(event) {
    return event.type[0] === 't';
}
function getPointerPositionOnPage(event, id) {
    let point;
    if (isTouchEvent(event)) {
        if (typeof id === 'number') {
            point =
                findMatchingTouch(event.touches, id) ||
                    findMatchingTouch(event.changedTouches, id);
        }
        else {
            point = event.touches[0] || event.changedTouches[0];
        }
    }
    else {
        point = event;
    }
    return point ? { x: point.clientX, y: point.clientY } : undefined;
}
function findMatchingTouch(touches, id) {
    for (let i = 0; i < touches.length; i++) {
        if (touches[i].identifier === id) {
            return touches[i];
        }
    }
    return undefined;
}
function getTouchIdForSlider(event, sliderHost) {
    for (let i = 0; i < event.touches.length; i++) {
        const target = event.touches[i].target;
        if (sliderHost === target || sliderHost.contains(target)) {
            return event.touches[i].identifier;
        }
    }
    return undefined;
}

class RdsSliderModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsSliderModule, declarations: [RdsSliderComponent], imports: [CommonModule], exports: [RdsSliderComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSliderModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSliderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    exports: [RdsSliderComponent],
                    declarations: [RdsSliderComponent],
                }]
        }] });

class RdsStepLabelDirective extends CdkStepLabel {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepLabelDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsStepLabelDirective, selector: "[rdsStepLabel],[rds-step-label]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsStepLabel],[rds-step-label]',
                }]
        }] });

class RdsStepContentDirective {
    constructor() {
        this._template = inject(TemplateRef);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsStepContentDirective, selector: "ng-template[rdsStepContent],ng-template[rds-step-content]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[rdsStepContent],ng-template[rds-step-content]',
                }]
        }] });

class RdsStepHeaderComponent extends CdkStepHeader {
    get hostClass() {
        const classes = ['rds-step-header'];
        if (this.orientation === 'horizontal') {
            classes.push('rds-step-header-horizontal');
        }
        else if (this.orientation === 'vertical') {
            classes.push('rds-step-header-vertical');
            if (this.sideBySide) {
                classes.push('rds-step-header-side-by-side');
            }
        }
        if (this.state === 'edit') {
            classes.push('rds-step-header-edit');
        }
        return [...classes];
    }
    constructor() {
        super(inject(ElementRef));
        this._elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.focusMonitor = inject(FocusMonitor);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.hostRole = 'tab';
        this.sideBySide = false;
        /** Label of the given step. */
        this.label = '';
        /** Index of the given step. */
        this.index = 0;
        /** Whether the given step is selected. */
        this.selected = false;
        /** Whether the given step label is active. */
        this.active = false;
        /** Whether the given step is optional. */
        this.optional = false;
        this._animationState = 'default';
        this._mouseevent$ = new BehaviorSubject(null);
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            fromEvent(window, 'resize')
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this.ngZone.run(() => this.cdr.markForCheck()));
        });
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this._elementRef, true);
    }
    ngOnChanges(changes) {
        if (changes['selected']) {
            if (changes['selected'].currentValue) {
                if (this._mouseevent$.getValue() !== 'mouseenter') {
                    this._animationState = 'hovered';
                }
            }
            else {
                this._animationState = 'default';
            }
        }
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this._elementRef);
        this._mouseevent$.complete();
    }
    onClick() {
        this._animationState = 'void';
        this.cdr.detectChanges();
    }
    onMouseenter() {
        this._animationState = 'hovered';
        this._mouseevent$.next('mouseenter');
    }
    onMouseleave() {
        if (!this.selected) {
            this._animationState = 'default';
        }
        this._mouseevent$.next('mouseleave');
    }
    onAnimationDone() {
        if (this._animationState === 'void') {
            this._animationState = 'hovered';
        }
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this._elementRef, origin, options);
        }
        else {
            this._elementRef.nativeElement.focus(options);
        }
    }
    getStepMobileNumber(stepNumber) {
        return typeof this.stepNumberMobileFunc === 'function'
            ? this.stepNumberMobileFunc(stepNumber)
            : this._getDefaultStepMobileNumber(stepNumber);
    }
    isMobile() {
        return BreakpointUtil.isMobile();
    }
    _stringLabel() {
        return this.label instanceof RdsStepLabelDirective ? null : this.label;
    }
    _templateLabel() {
        return this.label instanceof RdsStepLabelDirective ? this.label : null;
    }
    _getDefaultStepMobileNumber(stepNumber) {
        return `STEP ${stepNumber}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsStepHeaderComponent, selector: "rds-step-header", inputs: { orientation: "orientation", sideBySide: ["sideBySide", "sideBySide", booleanAttribute], state: "state", label: "label", index: "index", selected: ["selected", "selected", booleanAttribute], active: ["active", "active", booleanAttribute], optional: ["optional", "optional", booleanAttribute], stepNumberMobileFunc: "stepNumberMobileFunc" }, host: { listeners: { "click": "onClick()", "mouseenter": "onMouseenter()", "mouseleave": "onMouseleave()" }, properties: { "attr.role": "this.hostRole", "class": "this.hostClass", "class.rds-step-header-selected": "this.selected" } }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <div
      class="rds-step-icon-state-{{ state }} rds-step-icon"
      [class.rds-step-icon-selected]="selected"
      [class.rds-step-icon__hovered]="_animationState === 'hovered'"
    >
      <div
        class="rds-step-icon-focus-element"
        [@stepHover]="_animationState"
        (@stepHover.done)="onAnimationDone()"
      ></div>
      <div class="rds-step-icon-content">
        <span>{{ index + 1 }}</span>
      </div>
    </div>
    <div
      class="rds-step-label"
      [class.rds-step-label-active]="active"
      [class.rds-step-label-selected]="selected"
      [class.rds-step-label-error]="state === 'error'"
    >
      @if (isMobile()) {
        <div class="rds-step-number">
          {{ getStepMobileNumber(index + 1) }}
        </div>
      }
      @if (_templateLabel()) {
        <div class="rds-step-text-label">
          <ng-container [ngTemplateOutlet]="_templateLabel()!.template" />
        </div>
      }
      @if (_stringLabel()) {
        <div class="rds-step-text-label">{{ label }}</div>
      }
    </div>
  `, isInline: true, styles: [".rds-step-header{position:relative;outline:none;display:flex;cursor:pointer}@media (max-width: 767.999999px){.rds-step-header{padding:0;margin-top:12px;border-radius:50%}.rds-step-header.rds-step-header-selected{outline:2px solid var(--rds-color-bg-informative);outline-offset:3px}}.rds-step-header .rds-step-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;overflow:hidden;transition:font-weight .2s cubic-bezier(.35,0,.25,1),color .2s cubic-bezier(.35,0,.25,1),background .2s cubic-bezier(.35,0,.25,1);display:inline-block;min-width:150px;white-space:nowrap;text-align:left;text-overflow:ellipsis;vertical-align:middle;color:var(--rds-color-low-contrast)}@media (max-width: 767.999999px){.rds-step-header .rds-step-label{display:none}.rds-step-header .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:absolute;display:block}}.rds-step-header .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);text-transform:none;left:50%;display:block}.rds-step-header .rds-step-label .rds-step-number{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);background-color:transparent}@media (max-width: 767.999999px){.rds-step-header .rds-step-label .rds-step-number{padding-top:12px}}.rds-step-header .rds-step-icon{position:relative;z-index:10;flex-shrink:0;border-radius:50%;width:32px;height:32px;transition:font-weight .2s cubic-bezier(.35,0,.25,1),color .2s cubic-bezier(.35,0,.25,1),background .2s cubic-bezier(.35,0,.25,1)}.rds-step-header .rds-step-icon .rds-step-icon-focus-element{top:0;left:0;width:32px;height:32px;position:relative;border:2px solid transparent;border-radius:50%;background:transparent}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon .rds-step-icon-focus-element{display:none}}.rds-step-header .rds-step-icon .rds-step-icon-focus-element{border-color:var(--rds-color-grey-1);background-color:var(--rds-color-bg-base-1)}.rds-step-header .rds-step-icon .rds-step-icon-content{background-color:var(--rds-color-grey-1);color:var(--rds-color-on-dark-surface)}.rds-step-header .rds-step-icon .rds-step-icon__hovered .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative-hover);background-color:var(--rds-color-bg-base-1)}.rds-step-header .rds-step-icon .rds-step-icon__hovered .rds-step-icon-content{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-step-header .rds-step-icon .rds-step-icon-content{background:var(--rds-color-grey-1);width:100%;height:100%;display:flex;align-items:center;justify-content:center;border-radius:50%;color:var(--rds-color-low-contrast);position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon .rds-step-icon-content{display:none}}.rds-step-header .rds-step-icon.rds-step-icon-selected .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative);background-color:var(--rds-color-bg-base-1)}.rds-step-header .rds-step-icon.rds-step-icon-selected .rds-step-icon-content{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon{width:8px;height:8px;background-color:var(--rds-color-grey-1)}.rds-step-header .rds-step-icon.rds-step-icon-selected,.rds-step-header .rds-step-icon.rds-step-header-selected-element-after{background-color:var(--rds-color-bg-informative)}}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected) .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative);background-color:var(--rds-color-bg-base-1)}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected) .rds-step-icon-content{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected).rds-step-icon__hovered .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative-hover);background-color:var(--rds-color-bg-base-1)}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected).rds-step-icon__hovered .rds-step-icon-content{background-color:var(--rds-color-bg-informative-hover);color:var(--rds-color-on-dark-surface)}@media (max-width: 767.999999px){.rds-step-header.rds-step-header-selected-element-after .rds-step-icon{background-color:var(--rds-color-bg-informative)}}.rds-step-header:hover .rds-step-label{color:var(--rds-color-low-contrast)}.rds-step-header-horizontal{align-items:flex-start;flex-direction:column;overflow:hidden;padding:12px 0 0 8px}@media (max-width: 767.999999px){.rds-step-header-horizontal{position:initial;padding:0;margin-top:12px;border-radius:50%}}.rds-step-header-horizontal .rds-step-label{padding-top:12px}@media (max-width: 767.999999px){.rds-step-header-horizontal .rds-step-label{display:none}.rds-step-header-horizontal .rds-step-label.rds-step-label-selected{padding-left:20px;position:absolute;bottom:0;transform:translate(-50%);padding-top:16px}}.rds-step-header-vertical{flex-direction:row;padding:24px 0 24px 8px;background-color:transparent;max-width:250px}@media (max-width: 767.999999px){.rds-step-header-vertical{padding:0;margin-top:12px;border-radius:50%}.rds-step-header-vertical.rds-step-header-selected{outline:2px solid var(--rds-color-bg-informative);outline-offset:3px}}.rds-step-header-vertical .rds-step-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;white-space:pre-wrap;padding-left:12px;margin-top:7px}@media (max-width: 767.999999px){.rds-step-header-vertical .rds-step-label{display:none;width:67vw}.rds-step-header-vertical .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:absolute;text-transform:none;left:50%;padding-left:20px}}.rds-step-header-vertical .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-step-header-vertical .rds-step-label .rds-step-number{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);background-color:transparent}@media (max-width: 767.999999px){.rds-step-header-vertical .rds-step-label .rds-step-number{padding-top:12px}}.rds-step-text-label{overflow:hidden;text-overflow:ellipsis}\n"], dependencies: [{ kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }], animations: [
            trigger('stepHover', [
                state('void', style({ top: '0px', left: '0px', width: '32px', height: '32px' })),
                state('default', style({ top: '0px', left: '0px', width: '32px', height: '32px' })),
                state('hovered', style({ top: '-7px', left: '-7px', width: '46px', height: '46px' })),
                transition('default => hovered', animate('.3s ease-in')),
                transition('hovered => default', animate('.2s ease-out')),
                transition('* => void', animate('.1s ease-out')),
                transition('void => hovered', animate('.15s ease-in')),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-step-header', template: `
    <div
      class="rds-step-icon-state-{{ state }} rds-step-icon"
      [class.rds-step-icon-selected]="selected"
      [class.rds-step-icon__hovered]="_animationState === 'hovered'"
    >
      <div
        class="rds-step-icon-focus-element"
        [@stepHover]="_animationState"
        (@stepHover.done)="onAnimationDone()"
      ></div>
      <div class="rds-step-icon-content">
        <span>{{ index + 1 }}</span>
      </div>
    </div>
    <div
      class="rds-step-label"
      [class.rds-step-label-active]="active"
      [class.rds-step-label-selected]="selected"
      [class.rds-step-label-error]="state === 'error'"
    >
      @if (isMobile()) {
        <div class="rds-step-number">
          {{ getStepMobileNumber(index + 1) }}
        </div>
      }
      @if (_templateLabel()) {
        <div class="rds-step-text-label">
          <ng-container [ngTemplateOutlet]="_templateLabel()!.template" />
        </div>
      }
      @if (_stringLabel()) {
        <div class="rds-step-text-label">{{ label }}</div>
      }
    </div>
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        trigger('stepHover', [
                            state('void', style({ top: '0px', left: '0px', width: '32px', height: '32px' })),
                            state('default', style({ top: '0px', left: '0px', width: '32px', height: '32px' })),
                            state('hovered', style({ top: '-7px', left: '-7px', width: '46px', height: '46px' })),
                            transition('default => hovered', animate('.3s ease-in')),
                            transition('hovered => default', animate('.2s ease-out')),
                            transition('* => void', animate('.1s ease-out')),
                            transition('void => hovered', animate('.15s ease-in')),
                        ]),
                    ], styles: [".rds-step-header{position:relative;outline:none;display:flex;cursor:pointer}@media (max-width: 767.999999px){.rds-step-header{padding:0;margin-top:12px;border-radius:50%}.rds-step-header.rds-step-header-selected{outline:2px solid var(--rds-color-bg-informative);outline-offset:3px}}.rds-step-header .rds-step-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;overflow:hidden;transition:font-weight .2s cubic-bezier(.35,0,.25,1),color .2s cubic-bezier(.35,0,.25,1),background .2s cubic-bezier(.35,0,.25,1);display:inline-block;min-width:150px;white-space:nowrap;text-align:left;text-overflow:ellipsis;vertical-align:middle;color:var(--rds-color-low-contrast)}@media (max-width: 767.999999px){.rds-step-header .rds-step-label{display:none}.rds-step-header .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:absolute;display:block}}.rds-step-header .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);text-transform:none;left:50%;display:block}.rds-step-header .rds-step-label .rds-step-number{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);background-color:transparent}@media (max-width: 767.999999px){.rds-step-header .rds-step-label .rds-step-number{padding-top:12px}}.rds-step-header .rds-step-icon{position:relative;z-index:10;flex-shrink:0;border-radius:50%;width:32px;height:32px;transition:font-weight .2s cubic-bezier(.35,0,.25,1),color .2s cubic-bezier(.35,0,.25,1),background .2s cubic-bezier(.35,0,.25,1)}.rds-step-header .rds-step-icon .rds-step-icon-focus-element{top:0;left:0;width:32px;height:32px;position:relative;border:2px solid transparent;border-radius:50%;background:transparent}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon .rds-step-icon-focus-element{display:none}}.rds-step-header .rds-step-icon .rds-step-icon-focus-element{border-color:var(--rds-color-grey-1);background-color:var(--rds-color-bg-base-1)}.rds-step-header .rds-step-icon .rds-step-icon-content{background-color:var(--rds-color-grey-1);color:var(--rds-color-on-dark-surface)}.rds-step-header .rds-step-icon .rds-step-icon__hovered .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative-hover);background-color:var(--rds-color-bg-base-1)}.rds-step-header .rds-step-icon .rds-step-icon__hovered .rds-step-icon-content{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-step-header .rds-step-icon .rds-step-icon-content{background:var(--rds-color-grey-1);width:100%;height:100%;display:flex;align-items:center;justify-content:center;border-radius:50%;color:var(--rds-color-low-contrast);position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-step-header .rds-step-icon .rds-step-icon-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon .rds-step-icon-content{display:none}}.rds-step-header .rds-step-icon.rds-step-icon-selected .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative);background-color:var(--rds-color-bg-base-1)}.rds-step-header .rds-step-icon.rds-step-icon-selected .rds-step-icon-content{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}@media (max-width: 767.999999px){.rds-step-header .rds-step-icon{width:8px;height:8px;background-color:var(--rds-color-grey-1)}.rds-step-header .rds-step-icon.rds-step-icon-selected,.rds-step-header .rds-step-icon.rds-step-header-selected-element-after{background-color:var(--rds-color-bg-informative)}}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected) .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative);background-color:var(--rds-color-bg-base-1)}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected) .rds-step-icon-content{background-color:var(--rds-color-bg-informative);color:var(--rds-color-on-dark-surface)}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected).rds-step-icon__hovered .rds-step-icon-focus-element{border-color:var(--rds-color-bg-informative-hover);background-color:var(--rds-color-bg-base-1)}.rds-step-header.rds-step-header-selected-element-after .rds-step-icon:not(rds-step-icon-selected).rds-step-icon__hovered .rds-step-icon-content{background-color:var(--rds-color-bg-informative-hover);color:var(--rds-color-on-dark-surface)}@media (max-width: 767.999999px){.rds-step-header.rds-step-header-selected-element-after .rds-step-icon{background-color:var(--rds-color-bg-informative)}}.rds-step-header:hover .rds-step-label{color:var(--rds-color-low-contrast)}.rds-step-header-horizontal{align-items:flex-start;flex-direction:column;overflow:hidden;padding:12px 0 0 8px}@media (max-width: 767.999999px){.rds-step-header-horizontal{position:initial;padding:0;margin-top:12px;border-radius:50%}}.rds-step-header-horizontal .rds-step-label{padding-top:12px}@media (max-width: 767.999999px){.rds-step-header-horizontal .rds-step-label{display:none}.rds-step-header-horizontal .rds-step-label.rds-step-label-selected{padding-left:20px;position:absolute;bottom:0;transform:translate(-50%);padding-top:16px}}.rds-step-header-vertical{flex-direction:row;padding:24px 0 24px 8px;background-color:transparent;max-width:250px}@media (max-width: 767.999999px){.rds-step-header-vertical{padding:0;margin-top:12px;border-radius:50%}.rds-step-header-vertical.rds-step-header-selected{outline:2px solid var(--rds-color-bg-informative);outline-offset:3px}}.rds-step-header-vertical .rds-step-label{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;white-space:pre-wrap;padding-left:12px;margin-top:7px}@media (max-width: 767.999999px){.rds-step-header-vertical .rds-step-label{display:none;width:67vw}.rds-step-header-vertical .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:absolute;text-transform:none;left:50%;padding-left:20px}}.rds-step-header-vertical .rds-step-label.rds-step-label-selected{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast)}.rds-step-header-vertical .rds-step-label .rds-step-number{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);background-color:transparent}@media (max-width: 767.999999px){.rds-step-header-vertical .rds-step-label .rds-step-number{padding-top:12px}}.rds-step-text-label{overflow:hidden;text-overflow:ellipsis}\n"] }]
        }], ctorParameters: () => [], propDecorators: { hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], orientation: [{
                type: Input
            }], sideBySide: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], state: [{
                type: Input
            }], label: [{
                type: Input
            }], index: [{
                type: Input
            }], selected: [{
                type: HostBinding,
                args: ['class.rds-step-header-selected']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], active: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], optional: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], stepNumberMobileFunc: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], onMouseenter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseleave: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });

class RdsStepperComponent extends CdkStepper {
    get class() {
        const classList = ['rds-stepper'];
        if (this.orientation === 'horizontal') {
            classList.push('rds-stepper-horizontal');
        }
        else if (this.orientation === 'vertical') {
            classList.push('rds-stepper-vertical');
            if (this.sideBySide) {
                classList.push('rds-stepper-side-by-side');
            }
        }
        return classList;
    }
    constructor() {
        super(inject(Directionality), inject(ChangeDetectorRef), inject(ElementRef));
        this.cdr = inject(ChangeDetectorRef);
        this.viewportRuler = inject(ViewportRuler);
        this.hostRole = 'tablist';
        this.sideBySide = false;
        /** Event emitted when the current step is done transitioning in. */
        this.animationDone = new EventEmitter();
        this.steps = new QueryList(); // Steps that belong to current stepper, excluding from nested
        /** Stream of animation `done` events when the body expands/collapses. */
        this._animationDone = new Subject(); //
        this._horizontalLineStyle = {};
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        // Mark the component for change detection whenever the content children query changes
        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._stateChanged();
        });
        this._animationDone.pipe(takeUntil(this._destroyed)).subscribe((event) => {
            if (event.toState === 'current') {
                this.animationDone.emit();
            }
        });
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        if (this._stepHeader.first) {
            Promise.resolve().then(() => {
                this.calculateHorizontalLineStyle();
            });
        }
        this.viewportRuler
            .change()
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this.calculateHorizontalLineStyle());
    }
    calculateHorizontalLineStyle() {
        const headerPadding = 8;
        const stepperGap = 32;
        const offsetWidth = this._stepHeader.first?._elementRef.nativeElement.offsetWidth || 0;
        this._horizontalLineStyle.minWidth = `calc(100% + ${offsetWidth}px)`;
        this._horizontalLineStyle.transform = `translateX(-${offsetWidth - headerPadding - stepperGap}px)`;
        this.cdr.detectChanges();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsStepperComponent, selector: "rds-stepper, [rdsStepper], [rds-stepper]", inputs: { sideBySide: ["sideBySide", "sideBySide", booleanAttribute] }, outputs: { animationDone: "animationDone" }, host: { properties: { "class": "this.class", "attr.role": "this.hostRole" } }, providers: [{ provide: CdkStepper, useExisting: RdsStepperComponent }], queries: [{ propertyName: "_steps", predicate: i0.forwardRef(() => RdsStepComponent), descendants: true }], viewQueries: [{ propertyName: "_stepHeader", predicate: RdsStepHeaderComponent, descendants: true }], exportAs: ["rdsStepper"], usesInheritance: true, ngImport: i0, template: "<ng-container>\n  <ng-container>\n    <div class=\"rds-stepper-header-container\">\n      @for (step of steps; track step; let i = $index; let isLast = $last) {\n        @if (orientation !== 'vertical') {\n          <ng-container\n            [ngTemplateOutlet]=\"stepTemplate\"\n            [ngTemplateOutletContext]=\"{ step: step, i: i }\"\n          />\n        }\n        @if (orientation === 'vertical') {\n          <div class=\"rds-content-wrapper\">\n            <div\n              [ngClass]=\"{\n                'rds-stepper-vertical-line-wrapper': !isLast,\n                'rds-stepper-content-container-vertical-selected':\n                  selectedIndex === i\n              }\"\n            >\n              <div class=\"rds-stepper-vertical-line\">\n                @if (!sideBySide) {\n                  <div\n                    class=\"rds-stepper-vertical-line-progress\"\n                    [@stepProgressVertical]=\"selectedIndex > i ? 'max' : 'void'\"\n                  ></div>\n                } @else {\n                  <div\n                    class=\"rds-stepper-vertical-line-progress\"\n                    [@stepProgressSideBySide]=\"\n                      selectedIndex > i ? 'max' : 'void'\n                    \"\n                  ></div>\n                }\n              </div>\n            </div>\n            <div>\n              <ng-container\n                [ngTemplateOutlet]=\"stepTemplate\"\n                [ngTemplateOutletContext]=\"{ step: step, i: i }\"\n              />\n              @if (!sideBySide) {\n                <div\n                  class=\"rds-stepper-content-container rds-stepper-content-container-vertical\"\n                >\n                  <div\n                    role=\"tabpanel\"\n                    Class=\"rds-stepper-content\"\n                    [@stepTransitionVertical]=\"_getAnimationDirection(i)\"\n                    (@stepTransitionVertical.done)=\"_animationDone.next($event)\"\n                    [id]=\"_getStepContentId(i)\"\n                    [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n                    [attr.aria-expanded]=\"selectedIndex === i\"\n                  >\n                    <ng-container [ngTemplateOutlet]=\"step.content\" />\n                  </div>\n                </div>\n              }\n            </div>\n          </div>\n        }\n        @if (!isLast && orientation === 'horizontal') {\n          <div class=\"rds-stepper-line-wrapper\">\n            <div\n              class=\"rds-stepper-line\"\n              [class.rds-stepper-line-selected-element-after]=\"\n                selectedIndex > i\n              \"\n              [ngStyle]=\"_horizontalLineStyle\"\n            >\n              <div\n                class=\"rds-stepper-line-progress\"\n                [@stepProgress]=\"selectedIndex > i ? 'max' : 'void'\"\n              ></div>\n            </div>\n          </div>\n        }\n      }\n    </div>\n\n    @if (orientation === 'vertical' && sideBySide) {\n      <div\n        class=\"rds-stepper-content-container rds-stepper-content-container-horizontal\"\n      >\n        @for (step of steps; track step; let i = $index) {\n          <div\n            role=\"tabpanel\"\n            class=\"rds-stepper-content\"\n            [@stepTransitionSideBySide]=\"_getAnimationDirection(i)\"\n            (@stepTransitionSideBySide.done)=\"_animationDone.next($event)\"\n            [id]=\"_getStepContentId(i)\"\n            [ngStyle]=\"{\n              display: selectedIndex === i ? 'inherit' : 'none'\n            }\"\n            [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n            [attr.aria-expanded]=\"selectedIndex === i\"\n          >\n            <ng-container [ngTemplateOutlet]=\"step.content\" />\n          </div>\n        }\n      </div>\n    }\n    @if (orientation === 'horizontal') {\n      <div\n        class=\"rds-stepper-content-container rds-stepper-content-container-horizontal\"\n      >\n        @for (step of steps; track step; let i = $index) {\n          <div\n            role=\"tabpanel\"\n            class=\"rds-stepper-content\"\n            [@stepTransition]=\"_getAnimationDirection(i)\"\n            (@stepTransition.done)=\"_animationDone.next($event)\"\n            [id]=\"_getStepContentId(i)\"\n            [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n            [attr.aria-expanded]=\"selectedIndex === i\"\n          >\n            <ng-container [ngTemplateOutlet]=\"step.content\" />\n          </div>\n        }\n      </div>\n    }\n  </ng-container>\n</ng-container>\n\n<!-- Common step templating -->\n<ng-template let-step=\"step\" let-i=\"i\" #stepTemplate>\n  <rds-step-header\n    [class.rds-step-header-selected-element-after]=\"selectedIndex > i\"\n    (click)=\"step.select()\"\n    (keydown)=\"_onKeydown($event)\"\n    [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n    [id]=\"_getStepLabelId(i)\"\n    [attr.aria-posinset]=\"i + 1\"\n    [attr.aria-setsize]=\"steps.length\"\n    [attr.aria-controls]=\"_getStepContentId(i)\"\n    [attr.aria-selected]=\"selectedIndex === i\"\n    [attr.aria-label]=\"step.ariaLabel || null\"\n    [attr.aria-labelledby]=\"\n      !step.ariaLabel && step.ariaLabelledby ? step.ariaLabelledby : null\n    \"\n    [index]=\"i\"\n    [state]=\"_getIndicatorType(i, step.state)\"\n    [label]=\"step.stepLabel || step.label\"\n    [selected]=\"selectedIndex === i\"\n    [active]=\"step.completed || selectedIndex === i || !linear\"\n    [optional]=\"step.optional\"\n    [sideBySide]=\"sideBySide\"\n    [orientation]=\"orientation\"\n  />\n</ng-template>\n", styles: [".rds-stepper{display:block}.rds-stepper-horizontal .rds-stepper-header-container{position:relative;justify-content:center;display:flex;white-space:nowrap}@media (max-width: 767.999999px){.rds-stepper-horizontal .rds-stepper-header-container{gap:24px;align-items:center;padding-bottom:62px}}.rds-stepper-horizontal .rds-stepper-line-wrapper{position:relative;flex:auto;margin:26px 0 14px;border-top:2px solid transparent;min-width:32px;height:0}@media (max-width: 767.999999px){.rds-stepper-horizontal .rds-stepper-line-wrapper{display:none}}.rds-stepper-horizontal .rds-stepper-line{position:absolute;flex:auto;transform:translate(-75px);transition:border-color .2s cubic-bezier(.35,0,.25,1);border-top:1px solid var(--rds-color-grey-3);min-width:calc(100% + 150px);height:0}.rds-stepper-horizontal .rds-stepper-line .rds-stepper-line-progress{position:relative;transform:translateY(-1px);width:0;border-top:1px solid var(--rds-color-grey-3);border-color:var(--rds-color-brand)}.rds-stepper-horizontal .rds-stepper-content{outline:0}.rds-stepper-horizontal .rds-stepper-content[aria-expanded=false]{overflow:hidden;height:0}.rds-stepper-horizontal .rds-stepper-content-container{overflow:hidden;padding:0 24px 24px}.rds-content-wrapper{display:flex}@media (max-width: 767.999999px){.rds-content-wrapper{padding-top:30px}}.rds-stepper-vertical-line-wrapper{position:relative}@media (max-width: 767.999999px){.rds-stepper-vertical-line-wrapper{display:none}}.rds-stepper-vertical-line-wrapper .rds-stepper-vertical-line{position:absolute;left:24px;top:40px;bottom:-40px;z-index:2;border-left:1px solid;border-color:var(--rds-color-grey-3)}.rds-stepper-vertical-line-wrapper .rds-stepper-vertical-line .rds-stepper-vertical-line-progress{position:relative;width:0;z-index:3;border-left:1px solid;border-color:var(--rds-color-brand);transform:translate(-1px)}.rds-stepper-content-container-vertical{padding-left:52px;width:100%}@media (max-width: 767.999999px){.rds-stepper-content-container-vertical{padding-left:24px}}.rds-stepper-content-container-vertical .rds-stepper-content{overflow:hidden}.rds-stepper.rds-stepper-side-by-side{display:grid;gap:32px;grid-template-columns:1fr 4fr}.rds-stepper.rds-stepper-side-by-side .rds-stepper-header-container{position:sticky;align-self:flex-start;justify-content:flex-start;flex-direction:column;z-index:1}.rds-stepper.rds-stepper-side-by-side .rds-stepper-content-container{padding:24px 16px 0;flex:1;overflow:visible}.rds-stepper.rds-stepper-side-by-side .rds-stepper-vertical-line{top:32px;bottom:-32px}.rds-stepper.rds-stepper-side-by-side .rds-step-header.rds-step-header-side-by-side{position:relative;flex-direction:row;padding:16px 8px;align-items:flex-start}.rds-stepper.rds-stepper-side-by-side .rds-step-header.rds-step-header-side-by-side .rds-step-label{margin-top:4px}.rds-stepper.rds-stepper-side-by-side .rds-step-text-label{display:flex;flex-direction:column}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: i1$1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: RdsStepHeaderComponent, selector: "rds-step-header", inputs: ["orientation", "sideBySide", "state", "label", "index", "selected", "active", "optional", "stepNumberMobileFunc"] }], animations: [
            trigger('stepTransition', [
                state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
                state('current', style({ transform: 'none', visibility: 'inherit' })),
                state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
                transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
            ]),
            trigger('stepTransitionVertical', [
                state('previous', style({ height: '0px', visibility: 'hidden' })),
                state('next', style({ height: '0px', visibility: 'hidden' })),
                state('current', style({ height: '*', visibility: 'inherit' })),
                transition('* <=> current', animate('500ms cubic-bezier(0.4, 0.0, 0.2, 1)'), {}),
            ]),
            trigger('stepTransitionSideBySide', [
                state('previous', style({ opacity: '0' })),
                state('current', style({ opacity: '100%' })),
                state('next', style({ opacity: '0' })),
                transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
            ]),
            trigger('stepProgress', [
                state('void', style({ width: 0 })),
                state('max', style({ width: '100%' })),
                transition('* => *', animate('.3s linear')),
            ]),
            trigger('stepProgressVertical', [
                state('void', style({ height: 0 })),
                state('max', style({ height: '100%' })),
                transition('* => *', animate('.3s linear')),
            ]),
            trigger('stepProgressSideBySide', [
                state('void', style({ height: 0 })),
                state('max', style({ height: '100%' })),
                transition('* => *', animate('.3s linear')),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-stepper, [rdsStepper], [rds-stepper]', exportAs: 'rdsStepper', animations: [
                        trigger('stepTransition', [
                            state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
                            state('current', style({ transform: 'none', visibility: 'inherit' })),
                            state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
                            transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
                        ]),
                        trigger('stepTransitionVertical', [
                            state('previous', style({ height: '0px', visibility: 'hidden' })),
                            state('next', style({ height: '0px', visibility: 'hidden' })),
                            state('current', style({ height: '*', visibility: 'inherit' })),
                            transition('* <=> current', animate('500ms cubic-bezier(0.4, 0.0, 0.2, 1)'), {}),
                        ]),
                        trigger('stepTransitionSideBySide', [
                            state('previous', style({ opacity: '0' })),
                            state('current', style({ opacity: '100%' })),
                            state('next', style({ opacity: '0' })),
                            transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
                        ]),
                        trigger('stepProgress', [
                            state('void', style({ width: 0 })),
                            state('max', style({ width: '100%' })),
                            transition('* => *', animate('.3s linear')),
                        ]),
                        trigger('stepProgressVertical', [
                            state('void', style({ height: 0 })),
                            state('max', style({ height: '100%' })),
                            transition('* => *', animate('.3s linear')),
                        ]),
                        trigger('stepProgressSideBySide', [
                            state('void', style({ height: 0 })),
                            state('max', style({ height: '100%' })),
                            transition('* => *', animate('.3s linear')),
                        ]),
                    ], providers: [{ provide: CdkStepper, useExisting: RdsStepperComponent }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-container>\n  <ng-container>\n    <div class=\"rds-stepper-header-container\">\n      @for (step of steps; track step; let i = $index; let isLast = $last) {\n        @if (orientation !== 'vertical') {\n          <ng-container\n            [ngTemplateOutlet]=\"stepTemplate\"\n            [ngTemplateOutletContext]=\"{ step: step, i: i }\"\n          />\n        }\n        @if (orientation === 'vertical') {\n          <div class=\"rds-content-wrapper\">\n            <div\n              [ngClass]=\"{\n                'rds-stepper-vertical-line-wrapper': !isLast,\n                'rds-stepper-content-container-vertical-selected':\n                  selectedIndex === i\n              }\"\n            >\n              <div class=\"rds-stepper-vertical-line\">\n                @if (!sideBySide) {\n                  <div\n                    class=\"rds-stepper-vertical-line-progress\"\n                    [@stepProgressVertical]=\"selectedIndex > i ? 'max' : 'void'\"\n                  ></div>\n                } @else {\n                  <div\n                    class=\"rds-stepper-vertical-line-progress\"\n                    [@stepProgressSideBySide]=\"\n                      selectedIndex > i ? 'max' : 'void'\n                    \"\n                  ></div>\n                }\n              </div>\n            </div>\n            <div>\n              <ng-container\n                [ngTemplateOutlet]=\"stepTemplate\"\n                [ngTemplateOutletContext]=\"{ step: step, i: i }\"\n              />\n              @if (!sideBySide) {\n                <div\n                  class=\"rds-stepper-content-container rds-stepper-content-container-vertical\"\n                >\n                  <div\n                    role=\"tabpanel\"\n                    Class=\"rds-stepper-content\"\n                    [@stepTransitionVertical]=\"_getAnimationDirection(i)\"\n                    (@stepTransitionVertical.done)=\"_animationDone.next($event)\"\n                    [id]=\"_getStepContentId(i)\"\n                    [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n                    [attr.aria-expanded]=\"selectedIndex === i\"\n                  >\n                    <ng-container [ngTemplateOutlet]=\"step.content\" />\n                  </div>\n                </div>\n              }\n            </div>\n          </div>\n        }\n        @if (!isLast && orientation === 'horizontal') {\n          <div class=\"rds-stepper-line-wrapper\">\n            <div\n              class=\"rds-stepper-line\"\n              [class.rds-stepper-line-selected-element-after]=\"\n                selectedIndex > i\n              \"\n              [ngStyle]=\"_horizontalLineStyle\"\n            >\n              <div\n                class=\"rds-stepper-line-progress\"\n                [@stepProgress]=\"selectedIndex > i ? 'max' : 'void'\"\n              ></div>\n            </div>\n          </div>\n        }\n      }\n    </div>\n\n    @if (orientation === 'vertical' && sideBySide) {\n      <div\n        class=\"rds-stepper-content-container rds-stepper-content-container-horizontal\"\n      >\n        @for (step of steps; track step; let i = $index) {\n          <div\n            role=\"tabpanel\"\n            class=\"rds-stepper-content\"\n            [@stepTransitionSideBySide]=\"_getAnimationDirection(i)\"\n            (@stepTransitionSideBySide.done)=\"_animationDone.next($event)\"\n            [id]=\"_getStepContentId(i)\"\n            [ngStyle]=\"{\n              display: selectedIndex === i ? 'inherit' : 'none'\n            }\"\n            [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n            [attr.aria-expanded]=\"selectedIndex === i\"\n          >\n            <ng-container [ngTemplateOutlet]=\"step.content\" />\n          </div>\n        }\n      </div>\n    }\n    @if (orientation === 'horizontal') {\n      <div\n        class=\"rds-stepper-content-container rds-stepper-content-container-horizontal\"\n      >\n        @for (step of steps; track step; let i = $index) {\n          <div\n            role=\"tabpanel\"\n            class=\"rds-stepper-content\"\n            [@stepTransition]=\"_getAnimationDirection(i)\"\n            (@stepTransition.done)=\"_animationDone.next($event)\"\n            [id]=\"_getStepContentId(i)\"\n            [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n            [attr.aria-expanded]=\"selectedIndex === i\"\n          >\n            <ng-container [ngTemplateOutlet]=\"step.content\" />\n          </div>\n        }\n      </div>\n    }\n  </ng-container>\n</ng-container>\n\n<!-- Common step templating -->\n<ng-template let-step=\"step\" let-i=\"i\" #stepTemplate>\n  <rds-step-header\n    [class.rds-step-header-selected-element-after]=\"selectedIndex > i\"\n    (click)=\"step.select()\"\n    (keydown)=\"_onKeydown($event)\"\n    [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n    [id]=\"_getStepLabelId(i)\"\n    [attr.aria-posinset]=\"i + 1\"\n    [attr.aria-setsize]=\"steps.length\"\n    [attr.aria-controls]=\"_getStepContentId(i)\"\n    [attr.aria-selected]=\"selectedIndex === i\"\n    [attr.aria-label]=\"step.ariaLabel || null\"\n    [attr.aria-labelledby]=\"\n      !step.ariaLabel && step.ariaLabelledby ? step.ariaLabelledby : null\n    \"\n    [index]=\"i\"\n    [state]=\"_getIndicatorType(i, step.state)\"\n    [label]=\"step.stepLabel || step.label\"\n    [selected]=\"selectedIndex === i\"\n    [active]=\"step.completed || selectedIndex === i || !linear\"\n    [optional]=\"step.optional\"\n    [sideBySide]=\"sideBySide\"\n    [orientation]=\"orientation\"\n  />\n</ng-template>\n", styles: [".rds-stepper{display:block}.rds-stepper-horizontal .rds-stepper-header-container{position:relative;justify-content:center;display:flex;white-space:nowrap}@media (max-width: 767.999999px){.rds-stepper-horizontal .rds-stepper-header-container{gap:24px;align-items:center;padding-bottom:62px}}.rds-stepper-horizontal .rds-stepper-line-wrapper{position:relative;flex:auto;margin:26px 0 14px;border-top:2px solid transparent;min-width:32px;height:0}@media (max-width: 767.999999px){.rds-stepper-horizontal .rds-stepper-line-wrapper{display:none}}.rds-stepper-horizontal .rds-stepper-line{position:absolute;flex:auto;transform:translate(-75px);transition:border-color .2s cubic-bezier(.35,0,.25,1);border-top:1px solid var(--rds-color-grey-3);min-width:calc(100% + 150px);height:0}.rds-stepper-horizontal .rds-stepper-line .rds-stepper-line-progress{position:relative;transform:translateY(-1px);width:0;border-top:1px solid var(--rds-color-grey-3);border-color:var(--rds-color-brand)}.rds-stepper-horizontal .rds-stepper-content{outline:0}.rds-stepper-horizontal .rds-stepper-content[aria-expanded=false]{overflow:hidden;height:0}.rds-stepper-horizontal .rds-stepper-content-container{overflow:hidden;padding:0 24px 24px}.rds-content-wrapper{display:flex}@media (max-width: 767.999999px){.rds-content-wrapper{padding-top:30px}}.rds-stepper-vertical-line-wrapper{position:relative}@media (max-width: 767.999999px){.rds-stepper-vertical-line-wrapper{display:none}}.rds-stepper-vertical-line-wrapper .rds-stepper-vertical-line{position:absolute;left:24px;top:40px;bottom:-40px;z-index:2;border-left:1px solid;border-color:var(--rds-color-grey-3)}.rds-stepper-vertical-line-wrapper .rds-stepper-vertical-line .rds-stepper-vertical-line-progress{position:relative;width:0;z-index:3;border-left:1px solid;border-color:var(--rds-color-brand);transform:translate(-1px)}.rds-stepper-content-container-vertical{padding-left:52px;width:100%}@media (max-width: 767.999999px){.rds-stepper-content-container-vertical{padding-left:24px}}.rds-stepper-content-container-vertical .rds-stepper-content{overflow:hidden}.rds-stepper.rds-stepper-side-by-side{display:grid;gap:32px;grid-template-columns:1fr 4fr}.rds-stepper.rds-stepper-side-by-side .rds-stepper-header-container{position:sticky;align-self:flex-start;justify-content:flex-start;flex-direction:column;z-index:1}.rds-stepper.rds-stepper-side-by-side .rds-stepper-content-container{padding:24px 16px 0;flex:1;overflow:visible}.rds-stepper.rds-stepper-side-by-side .rds-stepper-vertical-line{top:32px;bottom:-32px}.rds-stepper.rds-stepper-side-by-side .rds-step-header.rds-step-header-side-by-side{position:relative;flex-direction:row;padding:16px 8px;align-items:flex-start}.rds-stepper.rds-stepper-side-by-side .rds-step-header.rds-step-header-side-by-side .rds-step-label{margin-top:4px}.rds-stepper.rds-stepper-side-by-side .rds-step-text-label{display:flex;flex-direction:column}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], _stepHeader: [{
                type: ViewChildren,
                args: [RdsStepHeaderComponent]
            }], _steps: [{
                type: ContentChildren,
                args: [forwardRef(() => RdsStepComponent), { descendants: true }]
            }], sideBySide: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], animationDone: [{
                type: Output
            }] } });

class RdsStepComponent extends CdkStep {
    constructor() {
        super(inject(forwardRef(() => RdsStepperComponent)), inject(STEPPER_GLOBAL_OPTIONS, { optional: true }) || undefined);
        this.errorStateMatcher = inject(ErrorStateMatcher, {
            skipSelf: true,
        });
        this.viewContainerRef = inject(ViewContainerRef, {
            skipSelf: true,
        });
        this._isSelected = Subscription.EMPTY;
    }
    ngAfterContentInit() {
        this._isSelected = this._stepper.steps.changes
            .pipe(switchMap(() => {
            return this._stepper.selectionChange.pipe(map((event) => event.selectedStep === this), startWith(this._stepper.selected === this));
        }))
            .subscribe((isSelected) => {
            if (isSelected && this._lazyContent && !this._portal) {
                this._portal = new TemplatePortal(this._lazyContent._template, this.viewContainerRef);
            }
        });
    }
    ngOnDestroy() {
        this._isSelected.unsubscribe();
    }
    /** Custom error state matcher that additionally checks for validity of interacted form. */
    isErrorState(control, form) {
        const originalErrorState = this.errorStateMatcher.isErrorState(control, form);
        // Custom error state checks for the validity of form that is not submitted or touched
        // since user can trigger a form change by calling for another step without directly
        // interacting with the current form.
        const customErrorState = !!(control && control.invalid && this.interacted);
        return originalErrorState || customErrorState;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsStepComponent, selector: "rds-step", providers: [
            { provide: ErrorStateMatcher, useExisting: RdsStepComponent },
            { provide: CdkStep, useExisting: RdsStepComponent },
        ], queries: [{ propertyName: "stepLabel", first: true, predicate: RdsStepLabelDirective, descendants: true }, { propertyName: "_lazyContent", first: true, predicate: RdsStepContentDirective, descendants: true }], exportAs: ["rdsStep"], usesInheritance: true, ngImport: i0, template: ` <ng-template>
    <ng-content />
    <ng-template [cdkPortalOutlet]="_portal" />
  </ng-template>`, isInline: true, dependencies: [{ kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-step',
                    template: ` <ng-template>
    <ng-content />
    <ng-template [cdkPortalOutlet]="_portal" />
  </ng-template>`,
                    providers: [
                        { provide: ErrorStateMatcher, useExisting: RdsStepComponent },
                        { provide: CdkStep, useExisting: RdsStepComponent },
                    ],
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'rdsStep',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: () => [], propDecorators: { stepLabel: [{
                type: ContentChild,
                args: [RdsStepLabelDirective]
            }], _lazyContent: [{
                type: ContentChild,
                args: [RdsStepContentDirective, { static: false }]
            }] } });

class RdsStepperNextDirective extends CdkStepperNext {
    constructor() {
        super(...arguments);
        this.hostClass = 'rds-stepper-next';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperNextDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsStepperNextDirective, selector: "button[rdsStepperNext],button[rds-stepper-next]", host: { properties: { "class": "this.hostClass" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperNextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[rdsStepperNext],button[rds-stepper-next]',
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsStepperPreviousDirective extends CdkStepperPrevious {
    constructor() {
        super(...arguments);
        this.hostClass = 'rds-stepper-previous';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperPreviousDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsStepperPreviousDirective, selector: "button[rdsStepperPrevious],button[rds-stepper-previous]", host: { properties: { "class": "this.hostClass" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperPreviousDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[rdsStepperPrevious],button[rds-stepper-previous]',
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsStepperModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperModule, declarations: [RdsStepperNextDirective,
            RdsStepperPreviousDirective,
            RdsStepContentDirective,
            RdsStepHeaderComponent,
            RdsStepLabelDirective,
            RdsStepComponent,
            RdsStepperComponent], imports: [CommonModule, PortalModule, CdkStepperModule], exports: [RdsStepperNextDirective,
            RdsStepperPreviousDirective,
            RdsStepContentDirective,
            RdsStepHeaderComponent,
            RdsStepLabelDirective,
            RdsStepComponent,
            RdsStepperComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperModule, imports: [CommonModule, PortalModule, CdkStepperModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStepperModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PortalModule, CdkStepperModule],
                    declarations: [
                        RdsStepperNextDirective,
                        RdsStepperPreviousDirective,
                        RdsStepContentDirective,
                        RdsStepHeaderComponent,
                        RdsStepLabelDirective,
                        RdsStepComponent,
                        RdsStepperComponent,
                    ],
                    exports: [
                        RdsStepperNextDirective,
                        RdsStepperPreviousDirective,
                        RdsStepContentDirective,
                        RdsStepHeaderComponent,
                        RdsStepLabelDirective,
                        RdsStepComponent,
                        RdsStepperComponent,
                    ],
                }]
        }] });

let nextUniqueId = 0;
class RdsSwitchChange {
    constructor(source, checked) {
        this.source = source;
        this.checked = checked;
    }
}
const rdsSwitchAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
class RdsSwitchComponent {
    get errorState() {
        return this._errorState;
    }
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    onFocus() {
        this._inputElement.nativeElement.focus();
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    constructor(tabIndex) {
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.controlContainer = inject(ControlContainer, {
            optional: true,
            host: true,
            skipSelf: true,
        });
        this._uniqueId = `rds-switch-${++nextUniqueId}`;
        this._errorState = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.subscriptAnimationState = '';
        this.hostClass = 'rds-switch';
        this.size = 'l';
        this.id = this._uniqueId;
        this.labelPosition = 'after';
        this.ariaLabel = null;
        this.ariaLabelledby = null;
        this.required = false;
        this.checked = false;
        this.disabled = false;
        this.buttonChanged = new EventEmitter();
        this.toggleChange = new EventEmitter();
        this._onChange = noop;
        this._onTouched = noop;
        this._tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngOnInit() {
        if (this.controlContainer) {
            if (this.formControlName) {
                this._control = this.controlContainer.control?.get(this.formControlName);
            }
            else {
                // Missing FormControlName directive from host element of the component
            }
        }
        else {
            // Can't find parent FormGroup directive
        }
    }
    ngDoCheck() {
        if (this._control) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this._control);
        }
    }
    ngAfterContentInit() {
        const control = this._control;
        if (control && control.valueChanges) {
            control.valueChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                control?.markAsDirty();
                control?.markAsTouched();
                this.cdr.markForCheck();
            });
        }
        const parent = this.parentFormGroup || this.parentForm;
        if (parent) {
            parent.ngSubmit
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this.cdr.markForCheck();
            });
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((focusOrigin) => {
            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {
                this._inputElement.nativeElement.focus();
            }
            else if (!focusOrigin) {
                Promise.resolve().then(() => this._onTouched());
            }
        });
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    get isErrorMessageVisible() {
        return this.errorState;
    }
    _onChangeEvent(event) {
        event.stopPropagation();
        this.toggleChange.emit();
        if (this.disabled) {
            this._inputElement.nativeElement.checked = this.checked;
            return;
        }
        if (this.checked !== this._inputElement.nativeElement.checked) {
            this.checked = this._inputElement.nativeElement.checked;
            this.cdr.markForCheck();
        }
        this._emitChangeEvent();
    }
    _onInputClick(event) {
        event.stopPropagation();
    }
    writeValue(value) {
        if (this.checked !== value) {
            this.checked = value;
            this.cdr.markForCheck();
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    focus(options) {
        this._inputElement.nativeElement.focus(options);
    }
    toggle() {
        this.checked = !this.checked;
        this._onChange(this.checked);
    }
    _onLabelTextChange() {
        this.cdr.detectChanges();
    }
    _emitChangeEvent() {
        this._onChange(this.checked);
        this.buttonChanged.emit(new RdsSwitchChange(this, this.checked));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSwitchComponent, selector: "rds-switch", inputs: { formControlName: "formControlName", name: "name", size: "size", id: "id", labelPosition: "labelPosition", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], required: ["required", "required", booleanAttribute], checked: ["checked", "checked", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], tabIndex: "tabIndex" }, outputs: { buttonChanged: "buttonChanged", toggleChange: "toggleChange" }, host: { listeners: { "focus": "onFocus()" }, properties: { "class": "this.hostClass", "attr.id": "this.id", "attr.aria-labelledby": "this.ariaLabel", "attr.aria-label": "this.ariaLabelledby", "class.rds-checked": "this.checked", "class.rds-switch--invalid": "this.errorState", "class.rds-disabled": "this.disabled", "tabIndex": "this.tabIndex" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RdsSwitchComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<label\n  [attr.for]=\"inputId\"\n  class=\"rds-switch-label\"\n  [class.rds-switch-label-before]=\"labelPosition === 'before'\"\n>\n  <div\n    class=\"rds-switch-bar\"\n    [class.rds-switch-bar-no-side-margin]=\"\n      !labelContent.textContent || !labelContent.textContent.trim()\n    \"\n  >\n    <input\n      #input\n      class=\"rds-switch-input cdk-visually-hidden\"\n      type=\"checkbox\"\n      role=\"switch\"\n      [id]=\"inputId\"\n      [required]=\"required\"\n      [tabIndex]=\"tabIndex\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      [attr.name]=\"name\"\n      [attr.aria-checked]=\"checked ? 'true' : 'false'\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      (change)=\"_onChangeEvent($event)\"\n      (click)=\"_onInputClick($event)\"\n    />\n    <div class=\"rds-switch-thumb-container\">\n      <div class=\"rds-switch-thumb\"></div>\n      <div class=\"rds-switch-ripple rds-focus-indicator\">\n        <div class=\"rds-ripple-element rds-switch-persistent-ripple\"></div>\n      </div>\n    </div>\n  </div>\n  <span\n    class=\"rds-switch-content\"\n    [ngClass]=\"'rds-switch-label-content--' + size\"\n    #labelContent\n    (cdkObserveContent)=\"_onLabelTextChange()\"\n  >\n    <ng-content />\n  </span>\n</label>\n<div class=\"rds-switch__subscript-wrapper\">\n  @switch (isErrorMessageVisible) {\n    @case (true) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--error\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-error\" />\n      </div>\n    }\n    @case (false) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--hint\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-hint\" />\n      </div>\n    }\n  }\n</div>\n", styles: [".rds-switch{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.rds-switch .rds-switch-thumb{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}.rds-switch:not(.rds-checked) .rds-switch-thumb{background-color:var(--rds-color-switch-toggle)}.rds-switch:not(.rds-checked) .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-switch-thumb{background-color:var(--rds-color-informative)}.rds-switch.rds-checked .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-ripple-element:hover{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(14px,0,0)}[dir=rtl] .rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(-14px,0,0)}.rds-switch.rds-checked:not(.rds-disabled).rds-switch--invalid .rds-switch-thumb{background-color:var(--rds-color-error)}.rds-switch.rds-switch--invalid .rds-switch-bar{background-color:var(--rds-color-switch-track-error)}.rds-switch.rds-disabled .rds-switch-thumb{box-shadow:none;background-color:var(--rds-color-grey-2)}.rds-switch.rds-disabled .rds-switch-bar{background-color:var(--rds-color-grey-1)}.rds-switch.rds-disabled .rds-switch-label,.rds-switch.rds-disabled .rds-switch-thumb-container{cursor:default}.rds-switch-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.rds-switch-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:var(--rds-color-high-contrast)}.rds-switch-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-disabled .rds-switch-content{color:var(--rds-color-disabled)}.rds-switch-label-before .rds-switch-label{order:1}.rds-switch-label-before .rds-switch-bar{order:2}[dir=rtl] .rds-switch-label-before .rds-switch-bar,.rds-switch-bar{margin-right:8px;margin-left:0}[dir=rtl] .rds-switch-bar,.rds-switch-label-before .rds-switch-bar{margin-left:8px;margin-right:0}.rds-switch-bar-no-side-margin{margin-left:0;margin-right:0}.rds-switch-thumb-container{position:absolute;z-index:1;top:-3px;left:0;transform:translateZ(0);transition:all 80ms linear;transition-property:transform;width:20px;height:20px}[dir=rtl] .rds-switch-thumb-container{left:auto;right:0}.rds-switch-thumb{border-radius:50%;width:20px;height:20px}.rds-switch-bar{position:relative;flex-shrink:0;border-radius:8px;width:34px;height:14px}.rds-switch-input{bottom:0;left:10px}[dir=rtl] .rds-switch-input{left:auto;right:10px}.rds-switch-bar,.rds-switch-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.rds-switch .rds-switch-ripple{position:absolute;z-index:1;top:calc(50% - 18px);left:calc(50% - 18px);height:36px;width:36px;pointer-events:none}.rds-switch .rds-switch-ripple .rds-ripple-element{border-radius:50%}.rds-switch .rds-switch-ripple .rds-ripple-element:not(.rds-switch-persistent-ripple){opacity:.12}.rds-switch-persistent-ripple{width:100%;height:100%;transform:none}.rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-bar:active .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-pressed)}.rds-switch:not(.rds-disabled).cdk-keyboard-focused .rds-switch-persistent-ripple{opacity:1;border:2px solid var(--rds-color-stroke-active-focus);background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-persistent-ripple,.rds-switch.rds-disabled .rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:0}@media (hover: none){.rds-switch-bar:hover .rds-switch-persistent-ripple{display:none}}.rds-switch__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-disabled .rds-switch__subscript--hint{color:var(--rds-color-disabled)}.rds-switch__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-switch__subscript--hint{color:var(--rds-color-low-contrast)}.rds-switch__subscript--error{color:var(--rds-color-error)}\n"], dependencies: [{ kind: "directive", type: i1$2.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }, { kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [rdsSwitchAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-switch', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [rdsSwitchAnimations.transitionMessages], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RdsSwitchComponent),
                            multi: true,
                        },
                    ], template: "<label\n  [attr.for]=\"inputId\"\n  class=\"rds-switch-label\"\n  [class.rds-switch-label-before]=\"labelPosition === 'before'\"\n>\n  <div\n    class=\"rds-switch-bar\"\n    [class.rds-switch-bar-no-side-margin]=\"\n      !labelContent.textContent || !labelContent.textContent.trim()\n    \"\n  >\n    <input\n      #input\n      class=\"rds-switch-input cdk-visually-hidden\"\n      type=\"checkbox\"\n      role=\"switch\"\n      [id]=\"inputId\"\n      [required]=\"required\"\n      [tabIndex]=\"tabIndex\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      [attr.name]=\"name\"\n      [attr.aria-checked]=\"checked ? 'true' : 'false'\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      (change)=\"_onChangeEvent($event)\"\n      (click)=\"_onInputClick($event)\"\n    />\n    <div class=\"rds-switch-thumb-container\">\n      <div class=\"rds-switch-thumb\"></div>\n      <div class=\"rds-switch-ripple rds-focus-indicator\">\n        <div class=\"rds-ripple-element rds-switch-persistent-ripple\"></div>\n      </div>\n    </div>\n  </div>\n  <span\n    class=\"rds-switch-content\"\n    [ngClass]=\"'rds-switch-label-content--' + size\"\n    #labelContent\n    (cdkObserveContent)=\"_onLabelTextChange()\"\n  >\n    <ng-content />\n  </span>\n</label>\n<div class=\"rds-switch__subscript-wrapper\">\n  @switch (isErrorMessageVisible) {\n    @case (true) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--error\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-error\" />\n      </div>\n    }\n    @case (false) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--hint\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-hint\" />\n      </div>\n    }\n  }\n</div>\n", styles: [".rds-switch{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.rds-switch .rds-switch-thumb{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}.rds-switch:not(.rds-checked) .rds-switch-thumb{background-color:var(--rds-color-switch-toggle)}.rds-switch:not(.rds-checked) .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-switch-thumb{background-color:var(--rds-color-informative)}.rds-switch.rds-checked .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-ripple-element:hover{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(14px,0,0)}[dir=rtl] .rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(-14px,0,0)}.rds-switch.rds-checked:not(.rds-disabled).rds-switch--invalid .rds-switch-thumb{background-color:var(--rds-color-error)}.rds-switch.rds-switch--invalid .rds-switch-bar{background-color:var(--rds-color-switch-track-error)}.rds-switch.rds-disabled .rds-switch-thumb{box-shadow:none;background-color:var(--rds-color-grey-2)}.rds-switch.rds-disabled .rds-switch-bar{background-color:var(--rds-color-grey-1)}.rds-switch.rds-disabled .rds-switch-label,.rds-switch.rds-disabled .rds-switch-thumb-container{cursor:default}.rds-switch-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.rds-switch-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:var(--rds-color-high-contrast)}.rds-switch-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-disabled .rds-switch-content{color:var(--rds-color-disabled)}.rds-switch-label-before .rds-switch-label{order:1}.rds-switch-label-before .rds-switch-bar{order:2}[dir=rtl] .rds-switch-label-before .rds-switch-bar,.rds-switch-bar{margin-right:8px;margin-left:0}[dir=rtl] .rds-switch-bar,.rds-switch-label-before .rds-switch-bar{margin-left:8px;margin-right:0}.rds-switch-bar-no-side-margin{margin-left:0;margin-right:0}.rds-switch-thumb-container{position:absolute;z-index:1;top:-3px;left:0;transform:translateZ(0);transition:all 80ms linear;transition-property:transform;width:20px;height:20px}[dir=rtl] .rds-switch-thumb-container{left:auto;right:0}.rds-switch-thumb{border-radius:50%;width:20px;height:20px}.rds-switch-bar{position:relative;flex-shrink:0;border-radius:8px;width:34px;height:14px}.rds-switch-input{bottom:0;left:10px}[dir=rtl] .rds-switch-input{left:auto;right:10px}.rds-switch-bar,.rds-switch-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.rds-switch .rds-switch-ripple{position:absolute;z-index:1;top:calc(50% - 18px);left:calc(50% - 18px);height:36px;width:36px;pointer-events:none}.rds-switch .rds-switch-ripple .rds-ripple-element{border-radius:50%}.rds-switch .rds-switch-ripple .rds-ripple-element:not(.rds-switch-persistent-ripple){opacity:.12}.rds-switch-persistent-ripple{width:100%;height:100%;transform:none}.rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-bar:active .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-pressed)}.rds-switch:not(.rds-disabled).cdk-keyboard-focused .rds-switch-persistent-ripple{opacity:1;border:2px solid var(--rds-color-stroke-active-focus);background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-persistent-ripple,.rds-switch.rds-disabled .rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:0}@media (hover: none){.rds-switch-bar:hover .rds-switch-persistent-ripple{display:none}}.rds-switch__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-disabled .rds-switch__subscript--hint{color:var(--rds-color-disabled)}.rds-switch__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-switch__subscript--hint{color:var(--rds-color-low-contrast)}.rds-switch__subscript--error{color:var(--rds-color-error)}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], formControlName: [{
                type: Input
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], labelPosition: [{
                type: Input
            }], ariaLabel: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }, {
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }, {
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], checked: [{
                type: HostBinding,
                args: ['class.rds-checked']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], errorState: [{
                type: HostBinding,
                args: ['class.rds-switch--invalid']
            }], disabled: [{
                type: HostBinding,
                args: ['class.rds-disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonChanged: [{
                type: Output
            }], toggleChange: [{
                type: Output
            }], _inputElement: [{
                type: ViewChild,
                args: ['input']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input
            }] } });

const RDS_SWITCH_REQUIRED_VALIDATOR = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => RdsSwitchRequiredValidatorDirective),
    multi: true,
};
class RdsSwitchRequiredValidatorDirective extends CheckboxRequiredValidator {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchRequiredValidatorDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsSwitchRequiredValidatorDirective, selector: "rds-switch[required][formControlName],\n              rds-switch[required][formControl], rds-switch[required][ngModel]", providers: [RDS_SWITCH_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchRequiredValidatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `rds-switch[required][formControlName],
              rds-switch[required][formControl], rds-switch[required][ngModel]`,
                    providers: [RDS_SWITCH_REQUIRED_VALIDATOR],
                }]
        }] });

class RdsSwitchModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchModule, declarations: [RdsSwitchComponent, RdsSwitchRequiredValidatorDirective], imports: [BidiModule,
            FormsModule,
            RdsCheckboxModule,
            ObserversModule,
            CommonModule,
            RdsHelperTextModule], exports: [RdsSwitchComponent, RdsSwitchRequiredValidatorDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchModule, imports: [BidiModule,
            FormsModule,
            RdsCheckboxModule,
            ObserversModule,
            CommonModule,
            RdsHelperTextModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        BidiModule,
                        FormsModule,
                        RdsCheckboxModule,
                        ObserversModule,
                        CommonModule,
                        RdsHelperTextModule,
                    ],
                    declarations: [RdsSwitchComponent, RdsSwitchRequiredValidatorDirective],
                    exports: [RdsSwitchComponent, RdsSwitchRequiredValidatorDirective],
                }]
        }] });

class RdsTabLabelDirective extends CdkPortal {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabLabelDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTabLabelDirective, selector: "[rds-tab-label]", usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabLabelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-tab-label]',
                }]
        }] });

class RdsTabComponent {
    constructor() {
        this._active = false;
        this.disabled = false;
        this.stateChanges = new EventEmitter();
    }
    set active(value) {
        const newValue = booleanAttribute(value);
        if (newValue !== this.active) {
            this._active = newValue;
            this.stateChanges.next();
        }
    }
    get active() {
        return this._active;
    }
    get templateLabel() {
        return this._templateLabel;
    }
    set templateLabel(value) {
        if (value) {
            this._templateLabel = value;
        }
    }
    ngOnChanges(changes) {
        if (changes['label'] || changes['disabled']) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsTabComponent, selector: "rds-tab", inputs: { label: "label", active: "active", disabled: ["disabled", "disabled", booleanAttribute] }, queries: [{ propertyName: "templateLabel", first: true, predicate: RdsTabLabelDirective, descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div [hidden]="!active" (cdkObserveContent)="stateChanges.next()">
      <ng-content />
    </div>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1$2.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-tab',
                    template: `
    <div [hidden]="!active" (cdkObserveContent)="stateChanges.next()">
      <ng-content />
    </div>
  `,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { label: [{
                type: Input
            }], active: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], templateLabel: [{
                type: ContentChild,
                args: [RdsTabLabelDirective]
            }] } });

class RdsTabLabelWrapperDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.destroyRef = inject(DestroyRef);
        this.disabled = false;
        this._focused = new Subject();
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, true)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._focused.next(this));
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this._focused.complete();
    }
    focus(origin, options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
        this._focused.next(this);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabLabelWrapperDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTabLabelWrapperDirective, selector: "[rdsTabLabelWrapper]", inputs: { disabled: ["disabled", "disabled", booleanAttribute] }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabLabelWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTabLabelWrapper]',
                }]
        }], propDecorators: { disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

class RdsTabsComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this._tabLabelSubscription = Subscription.EMPTY;
        this.size = 'm';
        this.stretch = false;
    }
    ngAfterContentInit() {
        if (this._tabLabelSubscription) {
            this._tabLabelSubscription.unsubscribe();
        }
        this._tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges)).subscribe(() => this.cdr.markForCheck());
        this.tabs.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.getActiveTabIndex() !== this.selectedIndex) {
                this.selectTab(this.getActiveTabIndex());
            }
            this.cdr.markForCheck();
        });
        this.selectTab(this.getActiveTabIndex());
    }
    ngAfterViewInit() {
        this.focusKeyManager = new FocusKeyManager(this.labelWrappers)
            .skipPredicate((item) => item.disabled)
            .withHorizontalOrientation('ltr')
            .withWrap()
            .withHomeAndEnd();
        this.focusKeyManager.updateActiveItem(this.getActiveTabIndex());
        this.labelWrappers.changes
            .pipe(startWith(this.labelWrappers), switchMap((items) => merge(...items.map((item) => item._focused))), takeUntilDestroyed(this.destroyRef))
            .subscribe((focusedItem) => {
            this.focusKeyManager.updateActiveItem(focusedItem);
        });
    }
    selectTab(tabIndex) {
        const rdsTabComponents = this.tabs.toArray();
        const rdsTabComponent = rdsTabComponents[tabIndex];
        if (rdsTabComponent.disabled) {
            return;
        }
        this.selectedIndex = tabIndex;
        rdsTabComponents.forEach((tab) => (tab.active = false));
        rdsTabComponent.active = true;
    }
    onKeydown(event) {
        if (hasModifierKey(event)) {
            if (event.keyCode === TAB && hasModifierKey(event, 'shiftKey')) {
                if (this.focusKeyManager.activeItemIndex !== null &&
                    this.focusKeyManager.activeItemIndex > 0) {
                    this.focusKeyManager.setFocusOrigin('keyboard');
                    this.focusKeyManager.setPreviousItemActive();
                    event.preventDefault();
                    this.focusKeyManager.onKeydown(event);
                }
                else {
                    this.resetActiveItem();
                }
            }
            return;
        }
        switch (event.keyCode) {
            case ENTER:
            case SPACE:
                if (this.getIndexOfFocusedElement() !== this.selectedIndex) {
                    this.selectTab(this.getIndexOfFocusedElement());
                }
                break;
            case TAB:
                if (this.focusKeyManager.activeItemIndex ===
                    this.labelWrappers.filter((l) => !l.disabled).length - 1) {
                    this.resetActiveItem();
                }
                else {
                    event.preventDefault();
                    this.focusKeyManager.setFocusOrigin('keyboard');
                    this.focusKeyManager.setNextItemActive();
                    this.focusKeyManager.onKeydown(event);
                }
                break;
            default:
                this.focusKeyManager.onKeydown(event);
        }
    }
    resetActiveItem() {
        this.focusKeyManager.setActiveItem(-1);
    }
    getIndexOfFocusedElement() {
        return this.focusKeyManager
            ? this.focusKeyManager.activeItemIndex
            : 0;
    }
    getActiveTabIndex() {
        const activeTabs = this.tabs ? this.tabs.filter((tab) => tab.active) : [];
        return activeTabs.length > 0
            ? this.tabs.toArray().indexOf(activeTabs[0])
            : 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsTabsComponent, selector: "rds-tabs", inputs: { size: "size", stretch: ["stretch", "stretch", booleanAttribute] }, queries: [{ propertyName: "tabs", predicate: RdsTabComponent }], viewQueries: [{ propertyName: "labelWrappers", predicate: RdsTabLabelWrapperDirective, descendants: true }], ngImport: i0, template: `
    <div class="rds-tabs" [class.rds-tabs-stretch]="stretch">
      <div
        class="rds-tabs__header"
        role="tablist"
        (blur)="resetActiveItem()"
        (keydown)="onKeydown($event)"
      >
        @for (tab of tabs; track tab.label; let i = $index) {
          <div
            class="rds-tabs__tab rds-tabs__tab-size-{{ size }}"
            role="tab"
            rdsTabLabelWrapper
            [disabled]="tab.disabled"
            [attr.tabIndex]="tab.disabled ? '-1' : '0'"
            [attr.aria-posinset]="i + 1"
            [attr.aria-setsize]="tabs.length"
            [attr.aria-disabled]="tab.disabled"
            [attr.aria-selected]="selectedIndex === i"
            [class.rds-tabs__tab--active]="selectedIndex === i"
            [class.rds-tabs__tab--disabled]="tab.disabled"
            (click)="selectTab(i)"
          >
            @if (tab.templateLabel) {
              <ng-template [cdkPortalOutlet]="tab.templateLabel" />
            }
            @if (!tab.templateLabel) {
              {{ tab.label }}
            }
          </div>
        }
      </div>

      <div class="rds-tabs__content-wrapper">
        <ng-content />
      </div>
    </div>
  `, isInline: true, styles: [".rds-tabs .rds-tabs__header{display:flex;border-bottom:1px solid var(--rds-color-grey-2)}.rds-tabs .rds-tabs__tab{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;top:1px;display:flex;align-items:center;border-bottom:3px solid transparent;margin:0 16px;height:59px;color:var(--rds-color-low-contrast);cursor:pointer}.rds-tabs .rds-tabs__tab:hover,.rds-tabs .rds-tabs__tab:focus{outline:none}.rds-tabs .rds-tabs__tab>*{margin-left:12px}.rds-tabs .rds-tabs__tab>*:first-child{margin-left:0}.rds-tabs .rds-tabs__tab:first-child{padding-left:0;margin-left:0}.rds-tabs .rds-tabs__tab.rds-tabs__tab--active{border-bottom:3px solid var(--rds-color-informative-hover);color:var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.rds-tabs__tab--disabled{color:var(--rds-color-disabled);pointer-events:none;cursor:default}.rds-tabs .rds-tabs__tab:hover:not(.rds-tabs__tab--disabled):not(.rds-tabs__tab--active){border-bottom:3px solid var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.cdk-focused.cdk-keyboard-focused:not(.rds-tabs__tab--disabled){border-radius:2px;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px}.rds-tabs .rds-tabs__tab-size-s{margin:0 12px;height:43px}.rds-tabs.rds-tabs-stretch .rds-tabs__tab{flex-basis:0;flex-grow:1}\n"], dependencies: [{ kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "directive", type: RdsTabLabelWrapperDirective, selector: "[rdsTabLabelWrapper]", inputs: ["disabled"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-tabs', template: `
    <div class="rds-tabs" [class.rds-tabs-stretch]="stretch">
      <div
        class="rds-tabs__header"
        role="tablist"
        (blur)="resetActiveItem()"
        (keydown)="onKeydown($event)"
      >
        @for (tab of tabs; track tab.label; let i = $index) {
          <div
            class="rds-tabs__tab rds-tabs__tab-size-{{ size }}"
            role="tab"
            rdsTabLabelWrapper
            [disabled]="tab.disabled"
            [attr.tabIndex]="tab.disabled ? '-1' : '0'"
            [attr.aria-posinset]="i + 1"
            [attr.aria-setsize]="tabs.length"
            [attr.aria-disabled]="tab.disabled"
            [attr.aria-selected]="selectedIndex === i"
            [class.rds-tabs__tab--active]="selectedIndex === i"
            [class.rds-tabs__tab--disabled]="tab.disabled"
            (click)="selectTab(i)"
          >
            @if (tab.templateLabel) {
              <ng-template [cdkPortalOutlet]="tab.templateLabel" />
            }
            @if (!tab.templateLabel) {
              {{ tab.label }}
            }
          </div>
        }
      </div>

      <div class="rds-tabs__content-wrapper">
        <ng-content />
      </div>
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-tabs .rds-tabs__header{display:flex;border-bottom:1px solid var(--rds-color-grey-2)}.rds-tabs .rds-tabs__tab{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;top:1px;display:flex;align-items:center;border-bottom:3px solid transparent;margin:0 16px;height:59px;color:var(--rds-color-low-contrast);cursor:pointer}.rds-tabs .rds-tabs__tab:hover,.rds-tabs .rds-tabs__tab:focus{outline:none}.rds-tabs .rds-tabs__tab>*{margin-left:12px}.rds-tabs .rds-tabs__tab>*:first-child{margin-left:0}.rds-tabs .rds-tabs__tab:first-child{padding-left:0;margin-left:0}.rds-tabs .rds-tabs__tab.rds-tabs__tab--active{border-bottom:3px solid var(--rds-color-informative-hover);color:var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.rds-tabs__tab--disabled{color:var(--rds-color-disabled);pointer-events:none;cursor:default}.rds-tabs .rds-tabs__tab:hover:not(.rds-tabs__tab--disabled):not(.rds-tabs__tab--active){border-bottom:3px solid var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.cdk-focused.cdk-keyboard-focused:not(.rds-tabs__tab--disabled){border-radius:2px;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px}.rds-tabs .rds-tabs__tab-size-s{margin:0 12px;height:43px}.rds-tabs.rds-tabs-stretch .rds-tabs__tab{flex-basis:0;flex-grow:1}\n"] }]
        }], propDecorators: { tabs: [{
                type: ContentChildren,
                args: [RdsTabComponent]
            }], labelWrappers: [{
                type: ViewChildren,
                args: [RdsTabLabelWrapperDirective]
            }], size: [{
                type: Input
            }], stretch: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });

const componentsToExpert = [
    RdsTabsComponent,
    RdsTabComponent,
    RdsTabLabelDirective,
    RdsTabLabelWrapperDirective,
];
class RdsTabModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsTabModule, declarations: [RdsTabsComponent,
            RdsTabComponent,
            RdsTabLabelDirective,
            RdsTabLabelWrapperDirective], imports: [CommonModule, PortalModule, A11yModule, ObserversModule], exports: [RdsTabsComponent,
            RdsTabComponent,
            RdsTabLabelDirective,
            RdsTabLabelWrapperDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabModule, imports: [CommonModule, PortalModule, A11yModule, ObserversModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...componentsToExpert],
                    exports: [...componentsToExpert],
                    imports: [CommonModule, PortalModule, A11yModule, ObserversModule],
                }]
        }] });

class AsyncSelectionModel {
    get changed() {
        return this._changed.asObservable();
    }
    get length() {
        return this._length;
    }
    constructor(length, _multiple = false, compareFunc = (a, b) => a === b, initiallySelectedValues, initiallyDeselectedValues, _emitChanges = true) {
        this._multiple = _multiple;
        this._emitChanges = _emitChanges;
        this._length = -1;
        this._isAllSelected = false;
        this._removedToEmit = [];
        this._addedToEmit = [];
        this._selected = [];
        this._deselected = [];
        this._changed = new Subject();
        this._compareFunc = (a, b) => a === b;
        this._length = length;
        if (initiallySelectedValues && initiallySelectedValues.length) {
            if (_multiple) {
                initiallySelectedValues.forEach((value) => this._markSelected(value));
            }
            else {
                this._markSelected(initiallySelectedValues[0]);
            }
            this._addedToEmit.length = 0;
        }
        if (initiallyDeselectedValues && initiallyDeselectedValues.length) {
            initiallyDeselectedValues.forEach((value) => this._markDeselected(value));
            this._removedToEmit.length = 0;
        }
        if (typeof compareFunc === 'function') {
            this._compareFunc = compareFunc;
        }
    }
    updateLength(length) {
        this._length = length;
        this._checkIfAllSelected();
    }
    isAllSelected() {
        return this._isAllSelected || this._length === 0;
    }
    getAllSelectedType() {
        if (this.isAllSelected() && this._deselected.length === 0) {
            return 'all';
        }
        else if (!this.isAllSelected() && this._selected.length === 0) {
            return 'none';
        }
        else {
            return 'partial';
        }
    }
    selectAll() {
        if (this._length > 1 && !this._multiple) {
            throw getMultipleValuesInSingleSelectionError();
        }
        this._isAllSelected = true;
        this._deselected = [];
        this._removedToEmit = [];
        this._selected = [];
        this._addedToEmit = [];
        this._emitChangeEvent();
    }
    deselectAll() {
        this._isAllSelected = false;
        this._deselected = [];
        this._removedToEmit = [];
        this._selected = [];
        this._addedToEmit = [];
        this._emitChangeEvent();
    }
    toggleAll() {
        this.isAllSelected() ? this.deselectAll() : this.selectAll();
    }
    clear() {
        this._isAllSelected = false;
        this._deselected = [];
        this._removedToEmit = [];
        this._selected = [];
        this._addedToEmit = [];
        this._emitChangeEvent();
    }
    select(...values) {
        this._verifyValueAssignment(values);
        values.forEach((value) => this._markSelected(value));
        this._checkIfAllSelected();
        this._emitChangeEvent();
    }
    deselect(...values) {
        this._verifyValueAssignment(values);
        values.forEach((value) => this._markDeselected(value));
        this._checkIfAllSelected();
        this._emitChangeEvent();
    }
    toggle(value) {
        this.isSelected(value) ? this.deselect(value) : this.select(value);
    }
    isSelected(value) {
        return this.isAllSelected()
            ? !this._deselected.some((v) => this._compareFunc(v, value))
            : this._selected.some((v) => this._compareFunc(v, value));
    }
    isDeselected(value) {
        return !this.isSelected(value);
    }
    isEmpty() {
        if (this._length === 0) {
            return true;
        }
        return ((!this.isAllSelected() && this._selected.length === 0) ||
            (this.isAllSelected() && this._deselected.length === this._length));
    }
    hasValue() {
        return !this.isEmpty();
    }
    sort(predicate) {
        if (this._multiple) {
            if (this._selected) {
                this._selected.sort(predicate);
            }
        }
        if (this._deselected) {
            this._deselected.sort(predicate);
        }
    }
    isMultipleSelection() {
        return this._multiple;
    }
    _emitChangeEvent() {
        this._changed.next({
            source: this,
            isAllSelected: this.isAllSelected(),
            allSelectedType: this.getAllSelectedType(),
            added: this._addedToEmit,
            removed: this._removedToEmit,
        });
        this._removedToEmit = [];
        this._addedToEmit = [];
    }
    _markSelected(value) {
        if (this.isDeselected(value)) {
            this._unmarkDeselected(value);
            if (!this._multiple) {
                this._unmarkAll();
            }
            this._selected.push(value);
            if (this._emitChanges) {
                this.pushIfNotExists(this._addedToEmit, value);
            }
        }
    }
    _unmarkSelected(value) {
        if (this.isSelected(value)) {
            const index = this._selected.findIndex((v) => this._compareFunc(v, value));
            if (index > -1) {
                this._selected.splice(index, 1);
                if (this._emitChanges) {
                    this.pushIfNotExists(this._removedToEmit, value);
                }
            }
        }
    }
    _markDeselected(value) {
        if (this.isSelected(value)) {
            this._unmarkSelected(value);
            const index = this._deselected.findIndex((v) => this._compareFunc(v, value));
            if (index === -1) {
                this._deselected.push(value);
                if (this._emitChanges) {
                    this.pushIfNotExists(this._removedToEmit, value);
                }
            }
        }
    }
    _unmarkDeselected(value) {
        if (this.isDeselected(value)) {
            const index = this._deselected.findIndex((v) => this._compareFunc(v, value));
            if (index > -1) {
                this._deselected.splice(index, 1);
                if (this._emitChanges) {
                    this.pushIfNotExists(this._addedToEmit, value);
                }
            }
        }
    }
    _unmarkAll() {
        if (!this.isEmpty()) {
            this._selected.forEach((value) => this._unmarkSelected(value));
        }
    }
    _verifyValueAssignment(values) {
        if (values.length > 1 && !this._multiple) {
            throw getMultipleValuesInSingleSelectionError();
        }
    }
    _checkIfAllSelected() {
        if (this._length === this._selected.length) {
            this._isAllSelected = true;
            this._removedToEmit = this._deselected;
            this._deselected = [];
        }
        else if (this._length === this._deselected.length) {
            this._isAllSelected = false;
            this._addedToEmit = [];
            this._selected = [];
        }
    }
    pushIfNotExists(array, value) {
        if (array.every((v) => !this._compareFunc(v, value))) {
            array.push(value);
        }
    }
}
function getMultipleValuesInSingleSelectionError() {
    return Error('Cannot pass multiple values into AsyncSelectionModel with single-value mode.');
}
function isEqual(...property) {
    if (!property || (Array.isArray(property) && property.length === 0)) {
        throw new Error('Property needs to be defined to compare function');
    }
    return (a, b) => {
        for (let i = 0; i < property.length; i++) {
            if (a[property[i]] === b[property[i]]) {
                continue;
            }
            return false;
        }
        return true;
    };
}

class RdsCellDefDirective extends CdkCellDef {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCellDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCellDefDirective, selector: "[rds-cell-def], [rdsCellDef]", providers: [{ provide: CdkCellDef, useExisting: RdsCellDefDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCellDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-cell-def], [rdsCellDef]',
                    providers: [{ provide: CdkCellDef, useExisting: RdsCellDefDirective }],
                }]
        }] });
class RdsHeaderCellDefDirective extends CdkHeaderCellDef {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderCellDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderCellDefDirective, selector: "[rds-header-cell-def], [rdsHeaderCellDef]", providers: [
            { provide: CdkHeaderCellDef, useExisting: RdsHeaderCellDefDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderCellDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-header-cell-def], [rdsHeaderCellDef]',
                    providers: [
                        { provide: CdkHeaderCellDef, useExisting: RdsHeaderCellDefDirective },
                    ],
                }]
        }] });
class RdsFooterCellDefDirective extends CdkFooterCellDef {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCellDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterCellDefDirective, selector: "[rds-footer-cell-def], [rdsFooterCellDef]", providers: [
            { provide: CdkFooterCellDef, useExisting: RdsFooterCellDefDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCellDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-footer-cell-def], [rdsFooterCellDef]',
                    providers: [
                        { provide: CdkFooterCellDef, useExisting: RdsFooterCellDefDirective },
                    ],
                }]
        }] });
const RDS_SORT_HEADER_COLUMN_DEF = new InjectionToken('RDS_SORT_HEADER_COLUMN_DEF');
class RdsColumnDefDirective extends CdkColumnDef {
    get name() {
        return this._name;
    }
    set name(name) {
        this._setNameInput(name);
    }
    _updateColumnCssClassName() {
        super._updateColumnCssClassName();
        this._columnCssClassName.push(`rds-column-${this.cssClassFriendlyName}`);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsColumnDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsColumnDefDirective, selector: "[rds-column-def], [rdsColumnDef]", inputs: { name: ["rdsColumnDef", "name"] }, providers: [
            { provide: CdkColumnDef, useExisting: RdsColumnDefDirective },
            {
                provide: RDS_SORT_HEADER_COLUMN_DEF,
                useExisting: RdsColumnDefDirective,
            },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsColumnDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-column-def], [rdsColumnDef]',
                    providers: [
                        { provide: CdkColumnDef, useExisting: RdsColumnDefDirective },
                        {
                            provide: RDS_SORT_HEADER_COLUMN_DEF,
                            useExisting: RdsColumnDefDirective,
                        },
                    ],
                }]
        }], propDecorators: { name: [{
                type: Input,
                args: ['rdsColumnDef']
            }] } });
class RdsHeaderCellDirective extends CdkHeaderCell {
    constructor() {
        super(...arguments);
        this.class = 'rds-header-cell';
        this.role = 'columnheader';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderCellDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderCellDirective, selector: "rds-header-cell, th[rdsHeaderCell], th[rds-header-cell]", host: { properties: { "class": "this.class", "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderCellDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-cell, th[rdsHeaderCell], th[rds-header-cell]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class RdsFooterCellDirective extends CdkFooterCell {
    constructor() {
        super(...arguments);
        this.class = 'rds-footer-cell';
        this.role = 'gridcell';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCellDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterCellDirective, selector: "rds-footer-cell, td[rdsFooterCell], td[rds-footer-cell]", host: { properties: { "class": "this.class", "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterCellDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-footer-cell, td[rdsFooterCell], td[rds-footer-cell]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class RdsCellDirective extends CdkCell {
    constructor() {
        super(...arguments);
        this.class = 'rds-cell';
        this.role = 'gridcell';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCellDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsCellDirective, selector: "rds-cell, td[rdsCell], td[rds-cell]", host: { properties: { "class": "this.class", "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCellDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-cell, td[rdsCell], td[rds-cell]',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });

class RdsHeaderRowDefDirective extends CdkHeaderRowDef {
    get sticky() {
        return super.sticky;
    }
    set sticky(v) {
        super.sticky = booleanAttribute(v);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderRowDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderRowDefDirective, selector: "[rds-header-row-def], [rdsHeaderRowDef]", inputs: { columns: ["rdsHeaderRowDef", "columns"], sticky: ["rdsHeaderRowDefSticky", "sticky"] }, providers: [
            { provide: CdkHeaderRowDef, useExisting: RdsHeaderRowDefDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderRowDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-header-row-def], [rdsHeaderRowDef]',
                    providers: [
                        { provide: CdkHeaderRowDef, useExisting: RdsHeaderRowDefDirective },
                    ],
                }]
        }], propDecorators: { columns: [{
                type: Input,
                args: ['rdsHeaderRowDef']
            }], sticky: [{
                type: Input,
                args: ['rdsHeaderRowDefSticky']
            }] } });
class RdsFooterRowDefDirective extends CdkFooterRowDef {
    set sticky(v) {
        super.sticky = booleanAttribute(v);
    }
    get sticky() {
        return super.sticky;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterRowDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterRowDefDirective, selector: "[rds-footer-row-def], [rdsFooterRowDef]", inputs: { columns: ["rdsFooterRowDef", "columns"], sticky: ["rdsFooterRowDefSticky", "sticky"] }, providers: [
            { provide: CdkFooterRowDef, useExisting: RdsFooterRowDefDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterRowDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-footer-row-def], [rdsFooterRowDef]',
                    providers: [
                        { provide: CdkFooterRowDef, useExisting: RdsFooterRowDefDirective },
                    ],
                }]
        }], propDecorators: { columns: [{
                type: Input,
                args: ['rdsFooterRowDef']
            }], sticky: [{
                type: Input,
                args: ['rdsFooterRowDefSticky']
            }] } });
class RdsRowDefDirective extends CdkRowDef {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRowDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsRowDefDirective, selector: "[rds-row-def], [rdsRowDef]", inputs: { columns: ["rdsRowDefColumns", "columns"], when: ["rdsRowDefWhen", "when"] }, providers: [{ provide: CdkRowDef, useExisting: RdsRowDefDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRowDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-row-def], [rdsRowDef]',
                    providers: [{ provide: CdkRowDef, useExisting: RdsRowDefDirective }],
                }]
        }], propDecorators: { columns: [{
                type: Input,
                args: ['rdsRowDefColumns']
            }], when: [{
                type: Input,
                args: ['rdsRowDefWhen']
            }] } });
class RdsHeaderRowComponent extends CdkHeaderRow {
    constructor() {
        super(...arguments);
        this.class = 'rds-header-row';
        this.role = 'row';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderRowComponent, selector: "rds-header-row, tr[rds-header-row], tr[rdsHeaderRow]", host: { properties: { "class": "this.class", "attr.role": "this.role" } }, providers: [{ provide: CdkHeaderRow, useExisting: RdsHeaderRowComponent }], exportAs: ["rdsHeaderRow"], usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, dependencies: [{ kind: "directive", type: i1$6.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-header-row, tr[rds-header-row], tr[rdsHeaderRow]',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.Default,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'rdsHeaderRow',
                    providers: [{ provide: CdkHeaderRow, useExisting: RdsHeaderRowComponent }],
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class RdsFooterRowComponent extends CdkFooterRow {
    constructor() {
        super(...arguments);
        this.class = 'rds-footer-row';
        this.role = 'row';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsFooterRowComponent, selector: "rds-footer-row, tr[rds-footer-row], tr[rdsFooterRow]", host: { properties: { "class": "this.class", "attr.role": "this.role" } }, providers: [{ provide: CdkFooterRow, useExisting: RdsFooterRowComponent }], exportAs: ["rdsFooterRow"], usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, dependencies: [{ kind: "directive", type: i1$6.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFooterRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-footer-row, tr[rds-footer-row], tr[rdsFooterRow]',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.Default,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'rdsFooterRow',
                    providers: [{ provide: CdkFooterRow, useExisting: RdsFooterRowComponent }],
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class RdsRowComponent extends CdkRow {
    constructor() {
        super(...arguments);
        this.class = 'rds-row';
        this.role = 'row';
        this.selected = false;
        this.disabled = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRowComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsRowComponent, selector: "rds-row, tr[rds-row], tr[rdsRow]", inputs: { selected: ["selected", "selected", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, host: { properties: { "class": "this.class", "attr.role": "this.role", "class.selected": "this.selected", "class.disabled": "this.disabled" } }, providers: [{ provide: CdkRow, useExisting: RdsRowComponent }], exportAs: ["rdsRow"], usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, dependencies: [{ kind: "directive", type: i1$6.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-row, tr[rds-row], tr[rdsRow]',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.Default,
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'rdsRow',
                    providers: [{ provide: CdkRow, useExisting: RdsRowComponent }],
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], selected: [{
                type: HostBinding,
                args: ['class.selected']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
class RdsNoDataRowDirective extends CdkNoDataRow {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNoDataRowDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsNoDataRowDirective, selector: "ng-template[rds-no-data-row], ng-template[rdsNoDataRow]", providers: [{ provide: CdkNoDataRow, useExisting: RdsNoDataRowDirective }], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsNoDataRowDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[rds-no-data-row], ng-template[rdsNoDataRow]',
                    providers: [{ provide: CdkNoDataRow, useExisting: RdsNoDataRowDirective }],
                }]
        }] });

const RDS_SORT_DEFAULT_OPTIONS = new InjectionToken('RDS_SORT_DEFAULT_OPTIONS');
class RdsSortDirective {
    constructor() {
        this.defaultOptions = inject(RDS_SORT_DEFAULT_OPTIONS, {
            optional: true,
        });
        this._stateChanges = new Subject();
        this.sortables = new Map();
        this.class = 'rds-sort';
        this.active = null;
        this.disabled = false;
        this.start = 'asc';
        this._direction = '';
        this.disableClear = false;
        this._initialized = new ReplaySubject(1);
        this.rdsSortChange = new EventEmitter();
    }
    get direction() {
        return this._direction;
    }
    set direction(direction) {
        this._direction = direction;
    }
    get initialized() {
        return this._initialized.asObservable();
    }
    register(sortable) {
        if (!sortable.id) {
            throw Error(`RdsSortHeader must be provided with a unique id.`);
        }
        if (this.sortables.has(sortable.id)) {
            throw Error(`Cannot have two RdsSortables with the same id (${sortable.id}).`);
        }
        this.sortables.set(sortable.id, sortable);
    }
    deregister(sortable) {
        this.sortables.delete(sortable.id);
    }
    sort(sortable) {
        if (this.active != sortable.id) {
            this.active = sortable.id;
            this.direction = sortable.start ? sortable.start : this.start;
        }
        else {
            this.direction = this.getNextSortDirection(sortable);
        }
        this.rdsSortChange.emit({ active: this.active, direction: this.direction });
    }
    getNextSortDirection(sortable) {
        if (!sortable) {
            return '';
        }
        const disableClear = sortable?.disableClear ??
            this.disableClear ??
            !!this.defaultOptions?.disableClear;
        const sortDirectionCycle = this._getSortDirectionCycle(sortable.start, disableClear);
        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;
        if (nextDirectionIndex >= sortDirectionCycle.length) {
            nextDirectionIndex = 0;
        }
        return sortDirectionCycle[nextDirectionIndex];
    }
    ngOnInit() {
        this._initialized.next();
    }
    ngOnChanges() {
        this._stateChanges.next();
    }
    ngOnDestroy() {
        this._stateChanges.complete();
        this._initialized.complete();
    }
    _getSortDirectionCycle(start = this.start, disableClear) {
        const sortOrder = ['asc', 'desc'];
        if (start === 'desc') {
            sortOrder.reverse();
        }
        if (!disableClear) {
            sortOrder.push('');
        }
        return sortOrder;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsSortDirective, selector: "[rdsSort], [rds-sort]", inputs: { active: ["rdsSortActive", "active"], disabled: ["rdsSortDisabled", "disabled", booleanAttribute], start: ["rdsSortStart", "start"], direction: ["rdsSortDirection", "direction"], disableClear: ["rdsSortDisableClear", "disableClear", booleanAttribute] }, outputs: { rdsSortChange: "rdsSortChange" }, host: { properties: { "class": "this.class" } }, exportAs: ["rdsSort"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsSort], [rds-sort]',
                    exportAs: 'rdsSort',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], active: [{
                type: Input,
                args: ['rdsSortActive']
            }], disabled: [{
                type: Input,
                args: [{ alias: 'rdsSortDisabled', transform: booleanAttribute }]
            }], start: [{
                type: Input,
                args: ['rdsSortStart']
            }], direction: [{
                type: Input,
                args: ['rdsSortDirection']
            }], disableClear: [{
                type: Input,
                args: [{ alias: 'rdsSortDisableClear', transform: booleanAttribute }]
            }], rdsSortChange: [{
                type: Output
            }] } });

const SORT_ANIMATION_TRANSITION = '225ms cubic-bezier(0.4,0.0,0.2,1)';
const rdsSortAnimations = {
    arrowOpacity: trigger('arrowOpacity', [
        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),
        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),
        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),
        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),
        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),
    ]),
    arrowPosition: trigger('arrowPosition', [
        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(-25%)' }),
            style({ transform: 'translateY(0)' }),
        ]))),
        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(0)' }),
            style({ transform: 'translateY(25%)' }),
        ]))),
        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(25%)' }),
            style({ transform: 'translateY(0)' }),
        ]))),
        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(0)' }),
            style({ transform: 'translateY(-25%)' }),
        ]))),
        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),
        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),
        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),
    ]),
    allowChildren: trigger('allowChildren', [
        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),
    ]),
    arrow: trigger('arrow', [
        state('asc', style({ transform: '' })),
        state('desc', style({ transform: 'scaleY(-1)' })),
        transition('asc => desc', [animate(SORT_ANIMATION_TRANSITION)]),
        transition('desc => asc', [animate(SORT_ANIMATION_TRANSITION)]),
    ]),
};
class RdsSortHeaderComponent {
    get _disabledClass() {
        return this._isDisabled();
    }
    get ariaSortAttribute() {
        if (!this._isSorted()) {
            return 'none';
        }
        return this.sort.direction == 'asc' ? 'ascending' : 'descending';
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.sort = inject(RdsSortDirective, {
            optional: true,
        });
        this.columnDef = inject(RDS_SORT_HEADER_COLUMN_DEF, {
            optional: true,
        });
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this._rerenderSubscription = null;
        this.class = 'rds-sort-header';
        this._showIndicatorHint = false;
        this._viewState = null;
        this._arrowDirection = '';
        this._disableViewStateAnimation = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.id = '';
        this.arrowPosition = 'right';
        this.start = '';
        this.disableClear = false;
        this.disabled = false;
        if (!this.sort) {
            throw Error(`RdsSortHeader must be placed within a parent element with the RdsSort directive.`);
        }
        this._handleStateChanges();
    }
    ngOnInit() {
        if (!this.id && this.columnDef) {
            this.id = this.columnDef.name;
        }
        this._updateArrowDirection();
        this._setAnimationTransitionState({
            toState: this._isSorted() ? 'active' : this._arrowDirection,
        });
        this.sort.register(this);
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true).subscribe((origin) => {
            const newState = !!origin;
            if (newState !== this._showIndicatorHint) {
                this._setIndicatorHintVisible(newState);
                this.cdr.markForCheck();
            }
        });
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this.sort.deregister(this);
        this._rerenderSubscription?.unsubscribe();
    }
    onMouseenter() {
        this._setIndicatorHintVisible(true);
    }
    onMouseleave() {
        this._setIndicatorHintVisible(false);
    }
    _handleClick() {
        if (!this._isDisabled()) {
            this.sort.sort(this);
        }
    }
    _handleKeydown(event) {
        if (!this._isDisabled() &&
            (event.keyCode === SPACE || event.keyCode === ENTER)) {
            event.preventDefault();
            this._toggleOnInteraction();
        }
    }
    _isSorted() {
        return (this.sort.active == this.id &&
            (this.sort.direction === 'asc' || this.sort.direction === 'desc'));
    }
    _isDisabled() {
        return this.sort.disabled || this.disabled;
    }
    _renderArrow() {
        return !this._isDisabled() || this._isSorted();
    }
    _getArrowDirectionState() {
        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;
    }
    _getArrowViewState() {
        const fromState = this._viewState?.fromState;
        return (fromState ? `${fromState}-to-` : '') + this._viewState?.toState;
    }
    _updateArrowDirection() {
        this._arrowDirection = this._isSorted()
            ? this.sort.direction
            : this.start || this.sort.start;
    }
    _handleStateChanges() {
        this._rerenderSubscription = merge(this.sort.rdsSortChange, this.sort._stateChanges).subscribe(() => {
            if (this._isSorted()) {
                this._updateArrowDirection();
                if (this._viewState?.toState === 'hint' ||
                    this._viewState?.toState === 'active') {
                    this._disableViewStateAnimation = true;
                }
                this._setAnimationTransitionState({
                    fromState: this._arrowDirection,
                    toState: 'active',
                });
                this._showIndicatorHint = false;
            }
            if (!this._isSorted() &&
                this._viewState &&
                this._viewState.toState === 'active') {
                this._disableViewStateAnimation = false;
                this._setAnimationTransitionState({
                    fromState: 'active',
                    toState: this._arrowDirection,
                });
            }
            this.cdr.markForCheck();
        });
    }
    _setIndicatorHintVisible(visible) {
        if (this._isDisabled() && visible) {
            return;
        }
        this._showIndicatorHint = visible;
        if (!this._isSorted()) {
            this._updateArrowDirection();
            if (this._showIndicatorHint) {
                this._setAnimationTransitionState({
                    fromState: this._arrowDirection,
                    toState: 'hint',
                });
            }
            else {
                this._setAnimationTransitionState({
                    fromState: 'hint',
                    toState: this._arrowDirection,
                });
            }
        }
    }
    _setAnimationTransitionState(viewState) {
        this._viewState = viewState;
        if (this._disableViewStateAnimation) {
            this._viewState = { toState: viewState.toState };
        }
    }
    _toggleOnInteraction() {
        this.sort.sort(this);
        if (this._viewState?.toState === 'hint' ||
            this._viewState?.toState === 'active') {
            this._disableViewStateAnimation = true;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSortHeaderComponent, selector: "[rds-sort-header], [rdsSortHeader]", inputs: { id: ["rds-sort-header", "id"], arrowPosition: "arrowPosition", start: "start", disableClear: ["disableClear", "disableClear", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, host: { listeners: { "mouseenter": "onMouseenter()", "mouseleave": "onMouseleave()", "click": "_handleClick()", "keydown": "_handleKeydown($event)" }, properties: { "class": "this.class", "class.rds-sort-header-disabled": "this._disabledClass", "attr.aria-sort": "this.ariaSortAttribute" } }, exportAs: ["rdsSortHeader"], ngImport: i0, template: "<div\n  class=\"rds-sort-header-container rds-focus-indicator\"\n  [class.rds-sort-header-sorted]=\"_isSorted()\"\n  [class.rds-sort-header-position-left]=\"arrowPosition === 'left'\"\n  [attr.tabindex]=\"_isDisabled() ? null : 0\"\n  role=\"button\"\n>\n  <div class=\"rds-sort-header-content\">\n    <ng-content />\n  </div>\n  @if (_renderArrow()) {\n  <div\n    class=\"rds-sort-header-arrow\"\n    [@arrowOpacity]=\"_getArrowViewState()\"\n    [@arrowPosition]=\"_getArrowViewState()\"\n    [@allowChildren]=\"_getArrowDirectionState()\"\n    (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n    (@arrowPosition.done)=\"_disableViewStateAnimation = false\"\n  >\n    <rds-icon [@arrow]=\"_arrowDirection\" namespace=\"outlined\" icon=\"arrow_up\" />\n  </div>\n  }\n</div>\n", styles: ["[rds-sort-header]:hover,[rds-sort-header]:focus{outline:none}.rds-sort-header-container{display:flex;cursor:pointer;align-items:center;outline:0}.rds-sort-header-disabled .rds-sort-header-container{cursor:default}.rds-sort-header-content{text-align:center;display:flex;align-items:center;width:100%}.rds-sort-header-position-left{flex-direction:row-reverse}.rds-sort-header-arrow{position:relative;display:flex;opacity:0;margin:0 0 0 8px}.rds-sort-header-arrow rds-icon{height:18px;width:18px}.rds-sort-header-position-left .rds-sort-header-arrow{margin:0 8px 0 0}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], animations: [
            rdsSortAnimations.arrowOpacity,
            rdsSortAnimations.arrowPosition,
            rdsSortAnimations.allowChildren,
            rdsSortAnimations.arrow,
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: '[rds-sort-header], [rdsSortHeader]', exportAs: 'rdsSortHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        rdsSortAnimations.arrowOpacity,
                        rdsSortAnimations.arrowPosition,
                        rdsSortAnimations.allowChildren,
                        rdsSortAnimations.arrow,
                    ], template: "<div\n  class=\"rds-sort-header-container rds-focus-indicator\"\n  [class.rds-sort-header-sorted]=\"_isSorted()\"\n  [class.rds-sort-header-position-left]=\"arrowPosition === 'left'\"\n  [attr.tabindex]=\"_isDisabled() ? null : 0\"\n  role=\"button\"\n>\n  <div class=\"rds-sort-header-content\">\n    <ng-content />\n  </div>\n  @if (_renderArrow()) {\n  <div\n    class=\"rds-sort-header-arrow\"\n    [@arrowOpacity]=\"_getArrowViewState()\"\n    [@arrowPosition]=\"_getArrowViewState()\"\n    [@allowChildren]=\"_getArrowDirectionState()\"\n    (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n    (@arrowPosition.done)=\"_disableViewStateAnimation = false\"\n  >\n    <rds-icon [@arrow]=\"_arrowDirection\" namespace=\"outlined\" icon=\"arrow_up\" />\n  </div>\n  }\n</div>\n", styles: ["[rds-sort-header]:hover,[rds-sort-header]:focus{outline:none}.rds-sort-header-container{display:flex;cursor:pointer;align-items:center;outline:0}.rds-sort-header-disabled .rds-sort-header-container{cursor:default}.rds-sort-header-content{text-align:center;display:flex;align-items:center;width:100%}.rds-sort-header-position-left{flex-direction:row-reverse}.rds-sort-header-arrow{position:relative;display:flex;opacity:0;margin:0 0 0 8px}.rds-sort-header-arrow rds-icon{height:18px;width:18px}.rds-sort-header-position-left .rds-sort-header-arrow{margin:0 8px 0 0}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], _disabledClass: [{
                type: HostBinding,
                args: ['class.rds-sort-header-disabled']
            }], ariaSortAttribute: [{
                type: HostBinding,
                args: ['attr.aria-sort']
            }], id: [{
                type: Input,
                args: ['rds-sort-header']
            }], arrowPosition: [{
                type: Input
            }], start: [{
                type: Input
            }], disableClear: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onMouseenter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseleave: [{
                type: HostListener,
                args: ['mouseleave']
            }], _handleClick: [{
                type: HostListener,
                args: ['click']
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

class _RdsTableDataSource extends DataSource {
    get data() {
        return this._data.value;
    }
    set data(data) {
        if (!Array.isArray(data)) {
            if (ngDevMode) {
                throw new Error("Data passed to the table's data source is not an array.");
            }
            else {
                data = [];
            }
        }
        this._data.next(data);
    }
    get sort() {
        return this._sort;
    }
    set sort(sort) {
        this._sort = sort;
        this._updateChangeSubscription();
    }
    get paginator() {
        return this._paginator;
    }
    set paginator(paginator) {
        this._paginator = paginator;
        this._updateChangeSubscription();
    }
    constructor(initialData = []) {
        super();
        this._renderData = new BehaviorSubject([]);
        this._internalPageChanges = new Subject();
        this._isInitialized = false;
        this._renderChangesSubscription = null;
        this._sort = null;
        this._paginator = null;
        this.sortingDataAccessor = (data, sortHeaderId) => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const value = data[sortHeaderId];
            if (_isNumberValue(value)) {
                const numberValue = Number(value);
                return numberValue < Number.MAX_SAFE_INTEGER ? numberValue : value;
            }
            return value;
        };
        this.sortData = (data, sort) => {
            const active = sort.active;
            const direction = sort.direction;
            if (!active || direction == '') {
                return data;
            }
            return data.sort((a, b) => {
                let valueA = this.sortingDataAccessor(a, active);
                let valueB = this.sortingDataAccessor(b, active);
                const valueAType = typeof valueA;
                const valueBType = typeof valueB;
                if (valueAType !== valueBType) {
                    if (valueAType === 'number') {
                        valueA += '';
                    }
                    if (valueBType === 'number') {
                        valueB += '';
                    }
                }
                let comparatorResult = 0;
                if (valueA != null && valueB != null) {
                    if (valueA > valueB) {
                        comparatorResult = 1;
                    }
                    else if (valueA < valueB) {
                        comparatorResult = -1;
                    }
                }
                else if (valueA != null) {
                    comparatorResult = 1;
                }
                else if (valueB != null) {
                    comparatorResult = -1;
                }
                return comparatorResult * (direction == 'asc' ? 1 : -1);
            });
        };
        this._data = new BehaviorSubject(initialData);
    }
    connect() {
        if (!this._renderChangesSubscription) {
            this._updateChangeSubscription();
        }
        return this._renderData.asObservable();
    }
    disconnect() {
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = null;
    }
    init() {
        this._isInitialized = true;
        this._updateChangeSubscription();
        return this;
    }
    createSortObservable() {
        return this._sort
            ? merge(this._sort.rdsSortChange, this._sort.initialized)
            : of(undefined);
    }
    createPageObservable() {
        return this._paginator
            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)
            : of(undefined);
    }
    _orderData(data) {
        if (!this.sort) {
            return data;
        }
        return this.sortData(data.slice(), this.sort);
    }
    _pageData(data) {
        if (!this.paginator) {
            return data;
        }
        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return data.slice(startIndex, startIndex + this.paginator.pageSize);
    }
    _updatePaginator(filteredDataLength) {
        Promise.resolve().then(() => {
            if (!this.paginator) {
                return;
            }
            this.paginator.length = filteredDataLength;
            if (this.paginator.pageIndex > 0) {
                const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;
                const newPageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);
                if (newPageIndex !== this.paginator.pageIndex) {
                    this.paginator.pageIndex = newPageIndex;
                    this._internalPageChanges.next();
                }
            }
        });
    }
}
class RdsTableDataSource extends _RdsTableDataSource {
    constructor() {
        super(...arguments);
        this._filter = new BehaviorSubject('');
        this._filteredData = [];
        this.filterPredicate = (data, filter) => {
            const dataStr = Object.keys(data)
                .reduce((currentTerm, key) => {
                // Use an obscure Unicode character to delimit the words in the concatenated string.
                // This avoids matches where the values of two columns combined will match the user's query
                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something
                // that has a very low chance of being typed in by somebody in a text field. This one in
                // particular is "White up-pointing triangle with dot" from
                // https://en.wikipedia.org/wiki/List_of_Unicode_characters
                return (currentTerm + data[key] + '◬');
            }, '')
                .toLowerCase();
            const transformedFilter = filter.trim().toLowerCase();
            return dataStr.indexOf(transformedFilter) != -1;
        };
    }
    get filteredData() {
        return this._filteredData;
    }
    set filteredData(v) {
        this._filteredData = v;
    }
    set data(data) {
        super.data = data;
        if (!this._renderChangesSubscription) {
            this._filterData(data);
        }
    }
    get data() {
        return super.data;
    }
    get filter() {
        return this._filter.value;
    }
    set filter(filter) {
        this._filter.next(filter);
        if (!this._renderChangesSubscription) {
            this._filterData(this.data);
        }
    }
    _filterData(data, skipPaginatorUpdate = false) {
        this.filteredData =
            this.filter == null || this.filter === ''
                ? data
                : data.filter((obj) => this.filterPredicate(obj, this.filter));
        if (this.paginator && !skipPaginatorUpdate) {
            this._updatePaginator(this.filteredData.length);
        }
        return this.filteredData;
    }
    _updateChangeSubscription() {
        if (!this._isInitialized) {
            return;
        }
        const sortChange = this.createSortObservable();
        const pageChange = this.createPageObservable();
        const dataStream = this._data;
        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));
        const orderedData = combineLatest([filteredData, sortChange]).pipe(tap(([data]) => this._updatePaginator(data.length)), map(([data]) => this._orderData(data)));
        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = paginatedData.subscribe((data) => {
            this._renderData.next(data);
        });
    }
}
class RdsTableAsyncDataSource extends _RdsTableDataSource {
    get isLoading() {
        return this._loadingData$.getValue();
    }
    get isError() {
        return !this._loadingData$.getValue() && this._error$.getValue() !== null;
    }
    constructor(fetchData) {
        super([]);
        this._loadingData$ = new BehaviorSubject(false);
        this._error$ = new BehaviorSubject(null);
        this._externalTrigger$ = new BehaviorSubject(void 0);
        this._fetchData = fetchData;
    }
    disconnect() {
        super.disconnect();
        this._loadingData$.complete();
        this._error$.complete();
    }
    fetchData() {
        if (this._isInitialized) {
            this._externalTrigger$.next();
        }
        else if (isDevMode()) {
            throw new Error(`RdsAsyncTableDataSource needs to be initialized before manual fetchData trigger.`);
        }
    }
    getLoadingData() {
        return this._loadingData$.asObservable();
    }
    getError() {
        return this._error$.asObservable();
    }
    _updateChangeSubscription() {
        if (!this._isInitialized) {
            return;
        }
        const sortChange = this.createSortObservable();
        const pageChange = this.createPageObservable();
        const dataStream = combineLatest([
            sortChange,
            pageChange,
            this._externalTrigger$,
        ]).pipe(delay(0), switchMap(([sort, page]) => {
            if (typeof this._fetchData === 'function') {
                this._loadingData$.next(true);
                return this._fetchData({
                    sort,
                    page: page || this._paginator?.get(),
                });
            }
            else {
                throw new Error('FetchData must be function');
            }
        }), tap(() => {
            this._loadingData$.next(false);
            if (this._error$.getValue() !== null) {
                this._error$.next(null);
            }
        }), catchError((err) => {
            this._loadingData$.next(false);
            this._error$.next(err);
            return of({
                data: [],
                length: 0,
                offset: 0,
                error: err,
            });
        }));
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = dataStream.subscribe((result) => {
            this._renderData.next(result.data);
            this._updatePaginator(result.length);
        });
    }
}

class RdsTextColumnComponent extends CdkTextColumn {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextColumnComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTextColumnComponent, selector: "rds-text-column", usesInheritance: true, ngImport: i0, template: `
    <ng-container rdsColumnDef>
      <th rds-header-cell *rdsHeaderCellDef [style.text-align]="justify">
        {{ headerText }}
      </th>
      <td rds-cell *rdsCellDef="let data" [style.text-align]="justify">
        {{ dataAccessor(data, name) }}
      </td>
    </ng-container>
  `, isInline: true, dependencies: [{ kind: "directive", type: RdsCellDefDirective, selector: "[rds-cell-def], [rdsCellDef]" }, { kind: "directive", type: RdsHeaderCellDefDirective, selector: "[rds-header-cell-def], [rdsHeaderCellDef]" }, { kind: "directive", type: RdsColumnDefDirective, selector: "[rds-column-def], [rdsColumnDef]", inputs: ["rdsColumnDef"] }, { kind: "directive", type: RdsHeaderCellDirective, selector: "rds-header-cell, th[rdsHeaderCell], th[rds-header-cell]" }, { kind: "directive", type: RdsCellDirective, selector: "rds-cell, td[rdsCell], td[rds-cell]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextColumnComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-text-column',
                    template: `
    <ng-container rdsColumnDef>
      <th rds-header-cell *rdsHeaderCellDef [style.text-align]="justify">
        {{ headerText }}
      </th>
      <td rds-cell *rdsCellDef="let data" [style.text-align]="justify">
        {{ dataAccessor(data, name) }}
      </td>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

class RdsTableComponent extends CdkTable {
    constructor() {
        super(...arguments);
        this._isLoadingDestroyer = new Subject();
        this._isLoading = false;
        this.density = 'normal';
        this.size = 'l';
        this.visualAccent = 'basic';
        this.alternation = 'none';
        this.destroyRef = inject(DestroyRef);
        this.stickyCssClass = 'rds-table-sticky';
        this.needsPositionStickyOnElement = false;
    }
    get class() {
        return [
            'rds-table',
            `rds-table-density-${this.density}`,
            `rds-table-size-${this.size}`,
            `rds-table-accent-${this.visualAccent}`,
            `rds-table-alternation-${this.alternation}`,
            this._isLoading && 'rds-table-loading-data',
            this.fixedLayout && 'rds-table-fixed-layout',
        ].filter((v) => typeof v === 'string');
    }
    ngOnChanges(changes) {
        if (changes['dataSource'] &&
            changes['dataSource'].currentValue instanceof RdsTableAsyncDataSource) {
            this._isLoadingDestroyer.next();
            this.dataSource
                .getLoadingData()
                .pipe(takeUntil(this._isLoadingDestroyer), takeUntilDestroyed(this.destroyRef))
                .subscribe((isLoading) => {
                this._isLoading = isLoading;
                this._changeDetectorRef.markForCheck();
            });
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._isLoadingDestroyer.complete();
    }
    updateStickyColumnStyles() {
        super.updateStickyColumnStyles();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsTableComponent, selector: "rds-table, table[rds-table],  table[rdsTable]", inputs: { density: "density", size: "size", visualAccent: "visualAccent", alternation: "alternation" }, host: { properties: { "class": "this.class" } }, providers: [
            {
                provide: _VIEW_REPEATER_STRATEGY,
                useClass: _DisposeViewRepeaterStrategy,
            },
            { provide: CdkTable, useExisting: RdsTableComponent },
            { provide: CDK_TABLE, useExisting: RdsTableComponent },
            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },
            // Prevent nested tables from seeing this table's StickyPositioningListener.
            { provide: STICKY_POSITIONING_LISTENER, useValue: null },
        ], exportAs: ["rdsTable"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n", isInline: true, styles: ["@keyframes rds-table-loading-animation{0%{background-position:100% 0}to{background-position:-100% 0}}.rds-table-size-s .rds-header-cell,.rds-table-size-s .rds-cell{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-m .rds-header-cell{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-m .rds-cell{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-l .rds-header-cell{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-l .rds-cell{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-density-dense .rds-header-cell{padding:4px 16px}.rds-table-density-dense .rds-cell{--rds-cell-padding-vertical: 4px;--rds-cell-padding-horizontal: 16px;padding:var(--rds-cell-padding-vertical) var(--rds-cell-padding-horizontal)}.rds-table-density-normal .rds-header-cell{padding:8px 16px}.rds-table-density-normal .rds-cell{--rds-cell-padding-vertical: 8px;--rds-cell-padding-horizontal: 16px;padding:var(--rds-cell-padding-vertical) var(--rds-cell-padding-horizontal)}.rds-table-density-spacious .rds-header-cell{padding:12px 16px}.rds-table-density-spacious .rds-cell{--rds-cell-padding-vertical: 16px;--rds-cell-padding-horizontal: 16px;padding:var(--rds-cell-padding-vertical) var(--rds-cell-padding-horizontal)}rds-table{display:block}rds-row,rds-header-row,rds-footer-row{display:flex;align-items:center;box-sizing:border-box}rds-cell,rds-header-cell,rds-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.rds-table{background-color:var(--rds-color-bg-base-1);color:var(--rds-color-high-contrast)}.rds-table .rds-header-cell{--rds-cell-background-color: var(--rds-color-bg-base-2);background:var(--rds-color-bg-base-2);box-shadow:1px 0 0 0 var(--rds-color-bg-base-2);border-bottom:2px solid var(--rds-color-informative);text-align:left;align-self:stretch}.rds-table .rds-header-cell.rds-column-select{text-align:left}.rds-table .rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-1);border-bottom:1px solid var(--rds-color-grey-2);box-shadow:1px 0 0 0 var(--rds-cell-background-color);background-color:var(--rds-cell-background-color);align-self:stretch}.rds-table .rds-table-sticky-border-elem-left{box-shadow:4px 0 8px -4px #c2bab533,2px 0 4px -2px #544f4f33}.rds-table .rds-table-sticky-border-elem-right{box-shadow:-4px 0 8px -4px #c2bab533,-2px 0 4px -2px #544f4f33,1px 0 0 0 var(--rds-cell-background-color)}.rds-table:not(.rds-table-loading-data) .rds-row:hover:not(.disabled)>.rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-2)}.rds-table:not(.rds-table-loading-data) .rds-row.disabled .rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-3);color:var(--rds-color-grey-2)}.rds-table:not(.rds-table-loading-data) .rds-row.disabled .rds-cell .rds-badge{opacity:.3}.rds-table.rds-table-loading-data .rds-row{position:relative}.rds-table.rds-table-loading-data .rds-row:after{position:absolute;z-index:3;content:\"\";pointer-events:none;cursor:default;width:100%;height:100%;left:0;top:0;background-image:linear-gradient(90deg,transparent 0%,var(--rds-color-bg-base-1) 20%,transparent 40%);background-repeat:no-repeat;opacity:.7;animation:rds-table-loading-animation 2s infinite;background-size:200% 100%}.rds-table.rds-table-loading-data .rds-row:not(:last-child) .rds-cell{border-bottom-color:var(--rds-color-bg-base-2)}.rds-table.rds-table-loading-data .rds-row .rds-cell{cursor:default;position:relative;z-index:1}.rds-table.rds-table-loading-data .rds-row .rds-cell:after{position:absolute;z-index:2;content:\"\";pointer-events:none;cursor:default;width:calc(100% - 2 * var(--rds-cell-padding-horizontal));height:calc(100% - 2 * var(--rds-cell-padding-vertical));top:var(--rds-cell-padding-vertical);left:var(--rds-cell-padding-horizontal);background:var(--rds-color-bg-base-2)}.rds-table.rds-table-loading-data:not(.rds-table-accent-outlined) .rds-row:last-child .rds-cell{border-bottom-color:var(--rds-color-bg-base-2)}.rds-table-accent-elevated{box-shadow:0 0 2px #00000029,0 12px 40px #0000002b}.rds-table-accent-outlined{border:1px solid var(--rds-color-grey-2);border-bottom:none}.rds-table-accent-outlined .rds-header-cell:last-child,.rds-table-accent-outlined .rds-cell:last-child{box-shadow:none}.rds-table-alternation-vertical>rds-header-row>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>rds-row>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>rds-footer-row>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>thead>tr>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>tbody>tr>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>tfooter>tr>.rds-header-cell:nth-child(2n){background-color:var(--rds-color-bg-base-2)}.rds-table-alternation-vertical>rds-header-row>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>rds-row>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>rds-footer-row>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>thead>tr>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>tbody>tr>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>tfooter>tr>.rds-header-cell:nth-child(odd){background-color:var(--rds-color-bg-solid-pressed)}.rds-table-alternation-vertical>rds-header-row>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>rds-row>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>rds-footer-row>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>thead>tr>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>tbody>tr>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>tfooter>tr>.rds-cell:nth-child(odd){--rds-cell-background-color: var(--rds-color-bg-base-3)}.rds-table-alternation-horizontal>thead>.rds-row:nth-child(2n)>.rds-cell,.rds-table-alternation-horizontal>tbody>.rds-row:nth-child(2n)>.rds-cell,.rds-table-alternation-horizontal>tfooter>.rds-row:nth-child(2n)>.rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-3)}.rds-table-alternation-horizontal:not(table)>.rds-row:nth-child(odd)>.rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-3)}.rds-table+.rds-paginator,*:has(.rds-table)+rds-paginator{margin-top:16px}table.rds-table{position:relative;width:100%;max-width:100%;border-collapse:separate;border-spacing:0}.rds-table-sticky{position:sticky!important}.rds-table-fixed-layout{table-layout:fixed}.rds-table-nested td.rds-column-expandToggle [rds-icon-button]{position:relative;top:3px}.rds-table-nested .rds-column-expandToggle{width:56px;flex:0 0 56px}.rds-table-nested .rds-expandable-row-expanded>.rds-column-expandToggle .rds-icon{transform:rotateX(180deg)}.rds-table-nested .rds-expandable-row-expanded+.rds-expandable-row-details{height:auto}.rds-table-nested .rds-expandable-row-expanded+.rds-expandable-row-details>.rds-cell{border-top:1px solid var(--rds-color-grey-2)}.rds-table-nested .rds-expandable-row-details:not(rds-row){height:0}.rds-table-nested .rds-expandable-row-details:hover>.rds-cell{background:transparent}.rds-table-nested .rds-expandable-row-details>.rds-cell{position:relative;padding:0 0 0 56px;overflow:hidden}.rds-table-nested .rds-expandable-row-details>.rds-cell:before{content:\"\";position:absolute;left:28px!important;top:0!important;height:100%!important;width:0!important;border-right:1px solid var(--rds-color-grey-2);border-top:none!important}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table{margin-block:0}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table>rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child{position:relative;overflow:visible}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table>rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child:before,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child:before{content:\"\";position:absolute;left:-28px;top:50%;width:20px;height:0;border-top:1px solid var(--rds-color-grey-2)}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-expandable-row:nth-last-child(2)>.rds-cell,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-row:last-child>.rds-cell,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-expandable-row:nth-last-child(2)>.rds-cell,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:last-child>.rds-cell{border-bottom:none}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-expandable-row:nth-last-child(2)>.rds-cell:first-child:after,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-row:last-child>.rds-cell:first-child:after,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-expandable-row:nth-last-child(2)>.rds-cell:first-child:after,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:last-child>.rds-cell:first-child:after{content:\"\";position:absolute;left:-30px;top:calc(50% + 1px);width:20px;bottom:0;background:var(--rds-color-bg-base-1)}.rds-table-nested .rds-expandable-row:not(.rds-expandable-row-expanded):active{background:var(--rds-color-bg-base-1)}.rds-table-nested .rds-expandable-row .rds-cell{border-bottom-width:0}.rds-table-nested .rds-expandable-row-details-container{display:flex;width:100%}.rds-table-nested .rds-expandable-row-details-container>.rds-table{width:100%}.rds-table-nested.rds-table-alternation-horizontal>.rds-expandable-row:nth-child(4n+2)>.rds-cell,.rds-table-nested.rds-table-alternation-horizontal>tbody>.rds-expandable-row:nth-child(4n+1)>.rds-cell{background:var(--rds-color-bg-base-3)}.rds-table-nested.rds-table-alternation-horizontal .rds-expandable-row-details>.rds-cell{background:var(--rds-color-bg-base-1)}.rds-table-nested>.rds-expandable-row-expanded+.rds-expandable-row-details>.rds-cell,.rds-table-nested>tbody>.rds-expandable-row-expanded+.rds-expandable-row-details>.rds-cell{border-bottom:2px solid var(--rds-color-grey-3)}.rds-table-draggable-preview{display:flex;position:absolute;background:var(--rds-color-bg-base-1);z-index:1000}.rds-table-draggable-column-placeholder{flex-shrink:0;background:var(--rds-color-bg-base-2);border-bottom:1px solid var(--rds-color-grey-2);outline:1px dashed var(--rds-color-grey-2);outline-offset:-2px}.rds-table-drag-handle{width:20px;height:20px;border:none;background:none;outline:none;margin-right:4px;cursor:move}.rds-table-drag-handle rds-icon{width:inherit;height:inherit}.rds-table-drag-handle *{pointer-events:none}\n"], dependencies: [{ kind: "directive", type: i1$6.DataRowOutlet, selector: "[rowOutlet]" }, { kind: "directive", type: i1$6.HeaderRowOutlet, selector: "[headerRowOutlet]" }, { kind: "directive", type: i1$6.FooterRowOutlet, selector: "[footerRowOutlet]" }, { kind: "directive", type: i1$6.NoDataRowOutlet, selector: "[noDataRowOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-table, table[rds-table],  table[rdsTable]', exportAs: 'rdsTable', template: CDK_TABLE_TEMPLATE, providers: [
                        {
                            provide: _VIEW_REPEATER_STRATEGY,
                            useClass: _DisposeViewRepeaterStrategy,
                        },
                        { provide: CdkTable, useExisting: RdsTableComponent },
                        { provide: CDK_TABLE, useExisting: RdsTableComponent },
                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },
                        // Prevent nested tables from seeing this table's StickyPositioningListener.
                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },
                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: ["@keyframes rds-table-loading-animation{0%{background-position:100% 0}to{background-position:-100% 0}}.rds-table-size-s .rds-header-cell,.rds-table-size-s .rds-cell{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-m .rds-header-cell{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-m .rds-cell{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-l .rds-header-cell{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-size-l .rds-cell{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-table-density-dense .rds-header-cell{padding:4px 16px}.rds-table-density-dense .rds-cell{--rds-cell-padding-vertical: 4px;--rds-cell-padding-horizontal: 16px;padding:var(--rds-cell-padding-vertical) var(--rds-cell-padding-horizontal)}.rds-table-density-normal .rds-header-cell{padding:8px 16px}.rds-table-density-normal .rds-cell{--rds-cell-padding-vertical: 8px;--rds-cell-padding-horizontal: 16px;padding:var(--rds-cell-padding-vertical) var(--rds-cell-padding-horizontal)}.rds-table-density-spacious .rds-header-cell{padding:12px 16px}.rds-table-density-spacious .rds-cell{--rds-cell-padding-vertical: 16px;--rds-cell-padding-horizontal: 16px;padding:var(--rds-cell-padding-vertical) var(--rds-cell-padding-horizontal)}rds-table{display:block}rds-row,rds-header-row,rds-footer-row{display:flex;align-items:center;box-sizing:border-box}rds-cell,rds-header-cell,rds-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.rds-table{background-color:var(--rds-color-bg-base-1);color:var(--rds-color-high-contrast)}.rds-table .rds-header-cell{--rds-cell-background-color: var(--rds-color-bg-base-2);background:var(--rds-color-bg-base-2);box-shadow:1px 0 0 0 var(--rds-color-bg-base-2);border-bottom:2px solid var(--rds-color-informative);text-align:left;align-self:stretch}.rds-table .rds-header-cell.rds-column-select{text-align:left}.rds-table .rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-1);border-bottom:1px solid var(--rds-color-grey-2);box-shadow:1px 0 0 0 var(--rds-cell-background-color);background-color:var(--rds-cell-background-color);align-self:stretch}.rds-table .rds-table-sticky-border-elem-left{box-shadow:4px 0 8px -4px #c2bab533,2px 0 4px -2px #544f4f33}.rds-table .rds-table-sticky-border-elem-right{box-shadow:-4px 0 8px -4px #c2bab533,-2px 0 4px -2px #544f4f33,1px 0 0 0 var(--rds-cell-background-color)}.rds-table:not(.rds-table-loading-data) .rds-row:hover:not(.disabled)>.rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-2)}.rds-table:not(.rds-table-loading-data) .rds-row.disabled .rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-3);color:var(--rds-color-grey-2)}.rds-table:not(.rds-table-loading-data) .rds-row.disabled .rds-cell .rds-badge{opacity:.3}.rds-table.rds-table-loading-data .rds-row{position:relative}.rds-table.rds-table-loading-data .rds-row:after{position:absolute;z-index:3;content:\"\";pointer-events:none;cursor:default;width:100%;height:100%;left:0;top:0;background-image:linear-gradient(90deg,transparent 0%,var(--rds-color-bg-base-1) 20%,transparent 40%);background-repeat:no-repeat;opacity:.7;animation:rds-table-loading-animation 2s infinite;background-size:200% 100%}.rds-table.rds-table-loading-data .rds-row:not(:last-child) .rds-cell{border-bottom-color:var(--rds-color-bg-base-2)}.rds-table.rds-table-loading-data .rds-row .rds-cell{cursor:default;position:relative;z-index:1}.rds-table.rds-table-loading-data .rds-row .rds-cell:after{position:absolute;z-index:2;content:\"\";pointer-events:none;cursor:default;width:calc(100% - 2 * var(--rds-cell-padding-horizontal));height:calc(100% - 2 * var(--rds-cell-padding-vertical));top:var(--rds-cell-padding-vertical);left:var(--rds-cell-padding-horizontal);background:var(--rds-color-bg-base-2)}.rds-table.rds-table-loading-data:not(.rds-table-accent-outlined) .rds-row:last-child .rds-cell{border-bottom-color:var(--rds-color-bg-base-2)}.rds-table-accent-elevated{box-shadow:0 0 2px #00000029,0 12px 40px #0000002b}.rds-table-accent-outlined{border:1px solid var(--rds-color-grey-2);border-bottom:none}.rds-table-accent-outlined .rds-header-cell:last-child,.rds-table-accent-outlined .rds-cell:last-child{box-shadow:none}.rds-table-alternation-vertical>rds-header-row>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>rds-row>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>rds-footer-row>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>thead>tr>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>tbody>tr>.rds-header-cell:nth-child(2n),.rds-table-alternation-vertical>tfooter>tr>.rds-header-cell:nth-child(2n){background-color:var(--rds-color-bg-base-2)}.rds-table-alternation-vertical>rds-header-row>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>rds-row>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>rds-footer-row>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>thead>tr>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>tbody>tr>.rds-header-cell:nth-child(odd),.rds-table-alternation-vertical>tfooter>tr>.rds-header-cell:nth-child(odd){background-color:var(--rds-color-bg-solid-pressed)}.rds-table-alternation-vertical>rds-header-row>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>rds-row>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>rds-footer-row>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>thead>tr>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>tbody>tr>.rds-cell:nth-child(odd),.rds-table-alternation-vertical>tfooter>tr>.rds-cell:nth-child(odd){--rds-cell-background-color: var(--rds-color-bg-base-3)}.rds-table-alternation-horizontal>thead>.rds-row:nth-child(2n)>.rds-cell,.rds-table-alternation-horizontal>tbody>.rds-row:nth-child(2n)>.rds-cell,.rds-table-alternation-horizontal>tfooter>.rds-row:nth-child(2n)>.rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-3)}.rds-table-alternation-horizontal:not(table)>.rds-row:nth-child(odd)>.rds-cell{--rds-cell-background-color: var(--rds-color-bg-base-3)}.rds-table+.rds-paginator,*:has(.rds-table)+rds-paginator{margin-top:16px}table.rds-table{position:relative;width:100%;max-width:100%;border-collapse:separate;border-spacing:0}.rds-table-sticky{position:sticky!important}.rds-table-fixed-layout{table-layout:fixed}.rds-table-nested td.rds-column-expandToggle [rds-icon-button]{position:relative;top:3px}.rds-table-nested .rds-column-expandToggle{width:56px;flex:0 0 56px}.rds-table-nested .rds-expandable-row-expanded>.rds-column-expandToggle .rds-icon{transform:rotateX(180deg)}.rds-table-nested .rds-expandable-row-expanded+.rds-expandable-row-details{height:auto}.rds-table-nested .rds-expandable-row-expanded+.rds-expandable-row-details>.rds-cell{border-top:1px solid var(--rds-color-grey-2)}.rds-table-nested .rds-expandable-row-details:not(rds-row){height:0}.rds-table-nested .rds-expandable-row-details:hover>.rds-cell{background:transparent}.rds-table-nested .rds-expandable-row-details>.rds-cell{position:relative;padding:0 0 0 56px;overflow:hidden}.rds-table-nested .rds-expandable-row-details>.rds-cell:before{content:\"\";position:absolute;left:28px!important;top:0!important;height:100%!important;width:0!important;border-right:1px solid var(--rds-color-grey-2);border-top:none!important}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table{margin-block:0}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table>rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child{position:relative;overflow:visible}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table>rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child:before,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:not(.rds-expandable-row-details)>.rds-cell:first-child:before{content:\"\";position:absolute;left:-28px;top:50%;width:20px;height:0;border-top:1px solid var(--rds-color-grey-2)}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-expandable-row:nth-last-child(2)>.rds-cell,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-row:last-child>.rds-cell,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-expandable-row:nth-last-child(2)>.rds-cell,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:last-child>.rds-cell{border-bottom:none}.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-expandable-row:nth-last-child(2)>.rds-cell:first-child:after,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table .rds-row:last-child>.rds-cell:first-child:after,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-expandable-row:nth-last-child(2)>.rds-cell:first-child:after,.rds-table-nested .rds-expandable-row-details>.rds-cell .rds-table tbody>.rds-row:last-child>.rds-cell:first-child:after{content:\"\";position:absolute;left:-30px;top:calc(50% + 1px);width:20px;bottom:0;background:var(--rds-color-bg-base-1)}.rds-table-nested .rds-expandable-row:not(.rds-expandable-row-expanded):active{background:var(--rds-color-bg-base-1)}.rds-table-nested .rds-expandable-row .rds-cell{border-bottom-width:0}.rds-table-nested .rds-expandable-row-details-container{display:flex;width:100%}.rds-table-nested .rds-expandable-row-details-container>.rds-table{width:100%}.rds-table-nested.rds-table-alternation-horizontal>.rds-expandable-row:nth-child(4n+2)>.rds-cell,.rds-table-nested.rds-table-alternation-horizontal>tbody>.rds-expandable-row:nth-child(4n+1)>.rds-cell{background:var(--rds-color-bg-base-3)}.rds-table-nested.rds-table-alternation-horizontal .rds-expandable-row-details>.rds-cell{background:var(--rds-color-bg-base-1)}.rds-table-nested>.rds-expandable-row-expanded+.rds-expandable-row-details>.rds-cell,.rds-table-nested>tbody>.rds-expandable-row-expanded+.rds-expandable-row-details>.rds-cell{border-bottom:2px solid var(--rds-color-grey-3)}.rds-table-draggable-preview{display:flex;position:absolute;background:var(--rds-color-bg-base-1);z-index:1000}.rds-table-draggable-column-placeholder{flex-shrink:0;background:var(--rds-color-bg-base-2);border-bottom:1px solid var(--rds-color-grey-2);outline:1px dashed var(--rds-color-grey-2);outline-offset:-2px}.rds-table-drag-handle{width:20px;height:20px;border:none;background:none;outline:none;margin-right:4px;cursor:move}.rds-table-drag-handle rds-icon{width:inherit;height:inherit}.rds-table-drag-handle *{pointer-events:none}\n"] }]
        }], propDecorators: { density: [{
                type: Input
            }], size: [{
                type: Input
            }], visualAccent: [{
                type: Input
            }], alternation: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });

class RdsTableDragHandleDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.classes = 'rds-table-drag-handle';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableDragHandleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTableDragHandleDirective, selector: "[rdsTableDragHandle], [rds-table-drag-handle]", host: { properties: { "class": "this.classes" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableDragHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTableDragHandle], [rds-table-drag-handle]',
                }]
        }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }] } });

function isElement(target) {
    return 'closest' in target;
}
function isInsideRect(event, rect) {
    return (event.clientX > rect.left &&
        event.clientX < rect.right &&
        event.clientY > rect.top &&
        event.clientY < rect.bottom);
}
function cellsToRowsHTML(cells, maxRows) {
    if (typeof maxRows === 'number') {
        cells = cells.slice(0, maxRows);
    }
    return cells
        .map((cell) => {
        const height = cell.parentElement?.offsetHeight;
        return `<tr class="rds-row">
                <td class="rds-cell" style="height: ${height ? height + 'px' : 'unset'}">
                  ${cell.innerHTML}
                </td>
              </tr>`;
    })
        .join('\n');
}

const HEADER_ROW_SELECTOR = '.rds-header-row';
const HEADER_CELL_SELECTOR = '.rds-header-cell';
class RdsTableDraggableDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.document = inject(DOCUMENT);
        this.renderer = inject(Renderer2);
        this.originalTable = inject(ElementRef).nativeElement;
        this.zone = inject(NgZone);
        this.header = null;
        this.columnPreview = null;
        this.columnRects = [];
        this.maxPreviewRows = 10;
        this.rdsTableDragEnd = new EventEmitter();
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.createDragStartObservable().subscribe((e) => this.onDragStart(e));
        });
    }
    onDragStart({ draggedHeaderCell, nativeEvent, }) {
        this.columnRects = [];
        this.createAndInsertContainerElement();
        this.saveCoords(nativeEvent);
        this.getHeaderCells().forEach((headerCell, index) => this.createColumnAndHandleDrag(draggedHeaderCell, headerCell, index));
        this.createDragMoveObservable().subscribe((e) => this.onDragMove(e));
        this.createDragEndObservable().subscribe(() => this.onDragEnd());
    }
    createColumnAndHandleDrag(draggedHeaderCell, headerCell, index) {
        headerCell === draggedHeaderCell
            ? this.addDraggedColumn(headerCell, index)
            : this.addColumn(headerCell, index);
    }
    addColumn(headerCell, index) {
        const { width } = headerCell.getBoundingClientRect();
        const rowsHTML = cellsToRowsHTML(this.getColumnCells(index));
        this.container.innerHTML += this.createColumnHTML(rowsHTML, width, headerCell);
        this.saveLastColumnRect(index);
    }
    addDraggedColumn(headerCell, index) {
        this.currentIndex = index;
        this.originalIndex = index;
        const { width, x, y } = headerCell.getBoundingClientRect();
        const rowsHTML = cellsToRowsHTML(this.getColumnCells(index), this.maxPreviewRows);
        this.container.innerHTML += this.createColumnPlaceholderHTML(width, this.boundingRect.height);
        this.saveLastColumnRect(index);
        this.columnPreview = this.createColumnPreview(headerCell, width, rowsHTML);
        this.renderer.insertBefore(this.document.body, this.columnPreview, null);
        this.moveColumnAnimationFrame = requestAnimationFrame(this.followPointerFactory(x, y));
    }
    saveLastColumnRect(index) {
        this.columnRects[index] =
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.container.lastElementChild.getBoundingClientRect();
    }
    createDragStartObservable() {
        return fromEvent(this.originalTable, 'pointerdown').pipe(map((event) => this.addHeaderCellData(event)), filter(Boolean), takeUntilDestroyed(this.destroyRef));
    }
    createDragMoveObservable() {
        return fromEvent(this.document.body, 'pointermove').pipe(takeUntil(this.rdsTableDragEnd), takeUntilDestroyed(this.destroyRef));
    }
    addHeaderCellData(event) {
        if (!isElement(event.target)) {
            return null;
        }
        if (this.dragHandlesQuery.length &&
            !this.dragHandlesQuery.some((handle) => handle.nativeElement === event.target)) {
            return null;
        }
        // header is rebuilt after each drag end, so we need to query it on each drag start
        this.header = event.target.closest(HEADER_ROW_SELECTOR);
        if (!this.header) {
            return null;
        }
        const draggedHeaderCell = event.target.closest(HEADER_CELL_SELECTOR);
        if (!draggedHeaderCell) {
            return null;
        }
        return { draggedHeaderCell, nativeEvent: event };
    }
    createAndInsertContainerElement() {
        this.boundingRect = this.originalTable.getBoundingClientRect();
        this.container = this.renderer.createElement('div');
        this.renderer.addClass(this.container, 'rds-table-draggable-preview');
        this.renderer.setStyle(this.container, 'width', this.boundingRect.width + 'px');
        this.renderer.setStyle(this.container, 'height', this.boundingRect.height + 'px');
        this.renderer.insertBefore(this.originalTable.parentElement, this.container, this.originalTable);
    }
    getColumnCells(columnIndex) {
        return Array.from(this.originalTable.querySelectorAll(`.rds-cell:nth-child(${columnIndex + 1})`));
    }
    createColumnPreview(headerCell, width, rowsHTML) {
        const columnPreview = this.renderer.createElement('div');
        this.renderer.setStyle(columnPreview, 'position', 'fixed');
        this.renderer.setStyle(columnPreview, 'top', '0');
        this.renderer.setStyle(columnPreview, 'left', '0');
        this.renderer.setStyle(columnPreview, 'z-index', '99999999');
        const height = headerCell.parentElement?.offsetHeight;
        columnPreview.innerHTML = `
      <table class="${this.originalTable.classList.value}" style="width: ${width}px; ">
          <thead>
            <tr class="rds-row">
              <th class="rds-header-cell" style="height: ${height ? height + 'px' : 'unset'}">${headerCell.innerHTML}</th>
            </tr>
          </thead>
          <tbody>
            ${rowsHTML}
          </tbody>
      </table>
        `;
        return columnPreview;
    }
    createColumnHTML(rowsHTML, width, headerCell) {
        const height = headerCell.parentElement?.offsetHeight;
        return `
          <div style="flex-shrink: 0;">
            <table class="${this.originalTable.classList.value}" style="width: ${width}px;">
                <thead>
                  <tr class="rds-row">
                    <th class="rds-header-cell" style="height: ${height ? height + 'px' : 'unset'}">${headerCell.innerHTML}</th>
                  </tr>
                </thead>
                <tbody>
                  ${rowsHTML}
                </tbody>
            </table>
          </div>
        `;
    }
    createColumnPlaceholderHTML(width, height) {
        return `
      <div class="rds-table-draggable-column-placeholder" style="width: ${width}px; height: ${height}px"></div>
    `;
    }
    getHeaderCells() {
        return Array.from(this.header?.querySelectorAll(HEADER_CELL_SELECTOR) ?? []);
    }
    swapColumns(aIndex, bIndex) {
        const aColumn = this.container.children.item(aIndex);
        const bColumn = this.container.children.item(bIndex);
        if (!aColumn || !bColumn) {
            return;
        }
        if (bIndex > aIndex) {
            this.renderer.insertBefore(this.container, bColumn, aColumn);
        }
        else {
            this.renderer.insertBefore(this.container, aColumn, bColumn);
        }
    }
    createDragEndObservable() {
        return fromEvent(window, 'pointerup', { once: true }).pipe(take(1), takeUntilDestroyed(this.destroyRef));
    }
    onDragMove(event) {
        this.saveCoords(event);
        for (let i = 0; i < this.columnRects.length; i++) {
            if (i === this.currentIndex) {
                continue;
            }
            const rect = this.columnRects[i];
            if (isInsideRect(event, rect)) {
                this.swapColumns(this.currentIndex, i);
                this.currentIndex = i;
                break;
            }
        }
    }
    saveCoords({ clientX, clientY }) {
        this.clientX = clientX;
        this.clientY = clientY;
    }
    onDragEnd() {
        cancelAnimationFrame(this.moveColumnAnimationFrame);
        this.removeContainerAndPreview();
        this.emitChange();
    }
    emitChange() {
        this.zone.run(() => {
            this.rdsTableDragEnd.emit({
                oldIndex: this.originalIndex,
                newIndex: this.currentIndex,
            });
        });
    }
    removeContainerAndPreview() {
        this.renderer.removeChild(this.container.parentElement, this.container);
        if (this.columnPreview) {
            this.renderer.removeChild(this.document.body, this.columnPreview);
        }
    }
    followPointerFactory(columnOriginX, columnOriginY) {
        const offsetX = this.clientX - columnOriginX;
        const offsetY = this.clientY - columnOriginY;
        const followPointer = () => {
            this.renderer.setStyle(this.columnPreview, 'transform', `translate(${this.clientX - offsetX}px, ${this.clientY - offsetY}px)`);
            this.moveColumnAnimationFrame = requestAnimationFrame(followPointer);
        };
        return followPointer;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableDraggableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTableDraggableDirective, selector: "[rdsTableDraggable], [rds-table-draggable]", inputs: { maxPreviewRows: ["maxPreviewRows", "maxPreviewRows", numberAttribute] }, outputs: { rdsTableDragEnd: "rdsTableDragEnd" }, queries: [{ propertyName: "dragHandlesQuery", predicate: RdsTableDragHandleDirective, descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableDraggableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTableDraggable], [rds-table-draggable]',
                }]
        }], propDecorators: { dragHandlesQuery: [{
                type: ContentChildren,
                args: [RdsTableDragHandleDirective, { descendants: true }]
            }], maxPreviewRows: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], rdsTableDragEnd: [{
                type: Output
            }] } });

const EXPORTS = [
    RdsTableComponent,
    RdsSortDirective,
    RdsSortHeaderComponent,
    RdsCellDefDirective,
    RdsHeaderCellDefDirective,
    RdsFooterCellDefDirective,
    RdsColumnDefDirective,
    RdsHeaderCellDirective,
    RdsFooterCellDirective,
    RdsCellDirective,
    RdsHeaderRowDefDirective,
    RdsFooterRowDefDirective,
    RdsRowDefDirective,
    RdsHeaderRowComponent,
    RdsFooterRowComponent,
    RdsRowComponent,
    RdsNoDataRowDirective,
    RdsTextColumnComponent,
    RdsTableDraggableDirective,
    RdsTableDragHandleDirective,
];
class RdsTableModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, declarations: [RdsTableComponent,
            RdsSortDirective,
            RdsSortHeaderComponent,
            RdsCellDefDirective,
            RdsHeaderCellDefDirective,
            RdsFooterCellDefDirective,
            RdsColumnDefDirective,
            RdsHeaderCellDirective,
            RdsFooterCellDirective,
            RdsCellDirective,
            RdsHeaderRowDefDirective,
            RdsFooterRowDefDirective,
            RdsRowDefDirective,
            RdsHeaderRowComponent,
            RdsFooterRowComponent,
            RdsRowComponent,
            RdsNoDataRowDirective,
            RdsTextColumnComponent,
            RdsTableDraggableDirective,
            RdsTableDragHandleDirective], imports: [CommonModule, CdkTableModule, RdsIconComponent], exports: [RdsTableComponent,
            RdsSortDirective,
            RdsSortHeaderComponent,
            RdsCellDefDirective,
            RdsHeaderCellDefDirective,
            RdsFooterCellDefDirective,
            RdsColumnDefDirective,
            RdsHeaderCellDirective,
            RdsFooterCellDirective,
            RdsCellDirective,
            RdsHeaderRowDefDirective,
            RdsFooterRowDefDirective,
            RdsRowDefDirective,
            RdsHeaderRowComponent,
            RdsFooterRowComponent,
            RdsRowComponent,
            RdsNoDataRowDirective,
            RdsTextColumnComponent,
            RdsTableDraggableDirective,
            RdsTableDragHandleDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, imports: [CommonModule, CdkTableModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...EXPORTS],
                    exports: [...EXPORTS],
                    imports: [CommonModule, CdkTableModule, RdsIconComponent],
                }]
        }] });

const rdsTableRowExpansionAnimation = trigger('rowExpand', [
    state('collapsed', style({ height: '0px', minHeight: '0' })),
    state('expanded', style({ height: '*' })),
    transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
]);

const RDS_THEME_CONFIG = new InjectionToken('RDS_THEME_CONFIG');

class RdsThemeService {
    static { this.ATTRIBUTE_NAME = 'rds-theme'; }
    constructor() {
        this.documentElement = inject(DOCUMENT).documentElement;
        this.config = inject(RDS_THEME_CONFIG, { optional: true });
        this._killAutoTheme$ = new Subject();
        this._globalThemeChange$ = new Subject();
        this.globalThemeChange$ = this._globalThemeChange$.pipe(distinctUntilChanged());
        if (!this.config || this.config.setAutoTheme) {
            this.setAuto();
        }
        new MutationObserver(() => this.emitValue()).observe(this.documentElement, {
            attributes: true,
            attributeFilter: [RdsThemeService.ATTRIBUTE_NAME],
        });
    }
    setAuto() {
        this._killAutoTheme$.next();
        const savedThemeChoice = localStorage.getItem(RdsThemeService.ATTRIBUTE_NAME);
        if (savedThemeChoice) {
            this.set(savedThemeChoice);
            return;
        }
        if (window.matchMedia) {
            if (window.matchMedia('(prefers-color-scheme: dark)').matches &&
                !this.isDark()) {
                this.setDark();
            }
            fromEvent(window.matchMedia('(prefers-color-scheme: dark)'), 'change')
                .pipe(map((e) => (e.matches ? RdsThemeDark : RdsThemeLight)), filter((t) => t !== this.get()), takeUntil(this._killAutoTheme$))
                .subscribe((t) => this.set(t));
        }
    }
    setLight(element = this.documentElement) {
        this.set(RdsThemeLight, element);
    }
    setDark(element = this.documentElement) {
        this.set(RdsThemeDark, element);
    }
    isDark(element = this.documentElement) {
        return this.get(element) === RdsThemeDark;
    }
    isLight(element = this.documentElement) {
        return [RdsThemeLight, null].includes(this.get(element));
    }
    set(theme, element = this.documentElement) {
        element.setAttribute(RdsThemeService.ATTRIBUTE_NAME, theme);
        localStorage.setItem(RdsThemeService.ATTRIBUTE_NAME, theme);
        if (element === this.documentElement) {
            this.emitValue();
        }
    }
    clear(element = this.documentElement) {
        element.removeAttribute(RdsThemeService.ATTRIBUTE_NAME);
        localStorage.setItem(RdsThemeService.ATTRIBUTE_NAME, RdsThemeLight);
        this.emitValue();
    }
    get(element = this.documentElement) {
        return element.getAttribute(RdsThemeService.ATTRIBUTE_NAME);
    }
    has(element = this.documentElement) {
        return element.hasAttribute(RdsThemeService.ATTRIBUTE_NAME);
    }
    emitValue() {
        this._globalThemeChange$.next(this.documentElement.getAttribute(RdsThemeService.ATTRIBUTE_NAME));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });

class RdsThemeDirective {
    constructor() {
        this.themeService = inject(RdsThemeService);
        this.nativeElement = inject(ElementRef).nativeElement;
    }
    set theme(theme) {
        if (!!theme && this.themeService.get(this.nativeElement) !== theme) {
            this._theme = theme;
            this.themeService.set(this.theme, this.nativeElement);
        }
    }
    get theme() {
        return this._theme;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsThemeDirective, isStandalone: true, selector: "[rds-theme], [rdsTheme]", inputs: { theme: ["rds-theme", "theme"] }, providers: [RdsThemeService], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-theme], [rdsTheme]',
                    standalone: true,
                    providers: [RdsThemeService],
                }]
        }], propDecorators: { theme: [{
                type: Input,
                args: ['rds-theme']
            }] } });

class RdsThemeModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeModule, imports: [RdsThemeDirective], exports: [RdsThemeDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [RdsThemeDirective],
                    exports: [RdsThemeDirective],
                }]
        }] });

class RdsComponentPortal {
    constructor(component, injector) {
        this.component = component;
        this.injector = injector;
    }
    attach(host, newestOnTop) {
        this._attachedHost = host;
        return host.attach(this, newestOnTop);
    }
    detach() {
        const host = this._attachedHost;
        if (host) {
            this._attachedHost = undefined;
            return host.detach();
        }
    }
    get isAttached() {
        return this._attachedHost !== undefined;
    }
    setAttachedHost(host) {
        this._attachedHost = host;
    }
}
class RdsBasePortalHost {
    attach(portal, newestOnTop) {
        this._attachedPortal = portal;
        return this.attachComponentPortal(portal, newestOnTop);
    }
    detach() {
        if (this._attachedPortal) {
            this._attachedPortal.setAttachedHost();
        }
        this._attachedPortal = undefined;
        if (this._disposeFn) {
            this._disposeFn();
            this._disposeFn = undefined;
        }
    }
    setDisposeFn(fn) {
        this._disposeFn = fn;
    }
}

class RdsDomPortalHost extends RdsBasePortalHost {
    constructor(_hostDomElement, _componentFactoryResolver, _applicationRef) {
        super();
        this._hostDomElement = _hostDomElement;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._applicationRef = _applicationRef;
    }
    attachComponentPortal(portal, newestOnTop) {
        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);
        const componentRef = componentFactory.create(portal.injector);
        this._applicationRef.attachView(componentRef.hostView);
        this.setDisposeFn(() => {
            this._applicationRef.detachView(componentRef.hostView);
            componentRef.destroy();
        });
        if (newestOnTop) {
            const newChild = this._getComponentRootNode(componentRef);
            const refChild = this._hostDomElement.firstChild;
            this._hostDomElement.insertBefore(newChild, refChild);
        }
        else {
            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));
        }
        return componentRef;
    }
    _getComponentRootNode(componentRef) {
        return componentRef.hostView
            .rootNodes[0];
    }
}

class RdsToastPackage {
    constructor(toastId, config, message, title, toastRef) {
        this.toastId = toastId;
        this.config = config;
        this.message = message;
        this.title = title;
        this.toastRef = toastRef;
        this._onTap = new Subject();
        this._onAction = new Subject();
        this.toastRef.afterClosed().subscribe(() => {
            this._onAction.complete();
            this._onTap.complete();
        });
    }
    triggerTap() {
        this._onTap.next();
        if (this.config.tapToDismiss) {
            this._onTap.complete();
        }
    }
    onTap() {
        return this._onTap.asObservable();
    }
    triggerAction(action) {
        this._onAction.next(action);
    }
    onAction() {
        return this._onAction.asObservable();
    }
}

class RdsToastComponent {
    get displayStyle() {
        if (this.state.value === 'inactive') {
            return 'none';
        }
        return undefined;
    }
    tapToast() {
        if (this.state.value === 'removed') {
            return;
        }
        this.rdsToastPackage.triggerTap();
        if (this.options.tapToDismiss) {
            this.remove();
        }
    }
    stickAround() {
        if (this.state.value === 'removed') {
            return;
        }
        clearTimeout(this.timeout);
        this.options.timeOut = 0;
        this.hideTime = 0;
    }
    delayedHideToast() {
        if (this.options.disableTimeOut === true ||
            this.options.disableTimeOut === 'extendedTimeOut' ||
            this.options.extendedTimeOut === 0 ||
            this.state.value === 'removed') {
            return;
        }
        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);
        this.options.timeOut = this.options.extendedTimeOut;
        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);
    }
    constructor() {
        this.rdsToastPackage = inject(RdsToastPackage);
        this.destroyRef = inject(DestroyRef);
        this.ngZone = inject(NgZone, { optional: true });
        this.message = this.rdsToastPackage.message || null;
        this.title = this.rdsToastPackage.title || null;
        this.options = this.rdsToastPackage.config;
        this.originalTimeout = this.rdsToastPackage.config.timeOut;
        this.toastClasses = '';
        this.state = {
            value: 'inactive',
            params: {
                easeTime: this.rdsToastPackage.config.easeTime,
                easing: 'ease-in',
            },
        };
        this.toastClasses = `rds-toast-${this.rdsToastPackage.config.type} ${this.rdsToastPackage.config.toastClass}`;
        if (this.rdsToastPackage.config.tapToDismiss) {
            this.toastClasses += ' rds-toast-dismiss-click';
        }
        if (this.rdsToastPackage.config.closeButton) {
            this.toastClasses += ' rds-toast-with-close-icon';
        }
        if (this.title) {
            this.toastClasses += ' rds-toast-with-title';
        }
        this.rdsToastPackage.toastRef
            .afterActivate()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.activateToast());
        this.rdsToastPackage.toastRef
            .manualClosed()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.remove());
    }
    ngOnDestroy() {
        clearTimeout(this.timeout);
    }
    activateToast() {
        this.state = { ...this.state, value: 'active' };
        if (!(this.options.disableTimeOut === true ||
            this.options.disableTimeOut === 'timeOut') &&
            this.options.timeOut) {
            this.outsideTimeout(() => this.remove(), this.options.timeOut);
            this.hideTime = new Date().getTime() + this.options.timeOut;
        }
    }
    remove() {
        if (this.state.value === 'removed') {
            return;
        }
        clearTimeout(this.timeout);
        this.state = { ...this.state, value: 'removed' };
        this.outsideTimeout(() => this.rdsToastPackage.toastRef.close(), +this.rdsToastPackage.config.easeTime);
    }
    outsideTimeout(func, timeout) {
        if (this.ngZone) {
            this.ngZone.runOutsideAngular(() => {
                this.timeout = window.setTimeout(() => this.runInsideAngular(func), timeout);
            });
        }
        else {
            this.timeout = window.setTimeout(() => func(), timeout);
        }
    }
    runInsideAngular(func) {
        if (this.ngZone) {
            this.ngZone.run(() => func());
        }
        else {
            func();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsToastComponent, selector: "[rds-toast-component]", host: { listeners: { "click": "tapToast()", "mouseenter": "stickAround()", "mouseleave": "delayedHideToast()" }, properties: { "class": "this.toastClasses", "@flyInOut": "this.state", "style.display": "this.displayStyle" } }, ngImport: i0, template: "<div class=\"rds-container-left\"></div>\n<div class=\"rds-toast-inner\">\n  @if (options.icon && options.iconNamespace) {\n    <rds-icon\n      [icon]=\"options.icon\"\n      [namespace]=\"options.iconNamespace\"\n      class=\"rds-toast__leading-icon rds-icon\"\n    />\n  }\n  <div class=\"rds-toast-text\">\n    @if (title) {\n      <div\n        class=\"rds-toast-text__header\"\n        [class]=\"options.titleClass\"\n        [attr.aria-label]=\"title\"\n      >\n        {{ title }}\n      </div>\n    }\n    @if (message && options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n        [innerHTML]=\"message\"\n      ></div>\n    }\n    @if (message && !options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n      >\n        {{ message }}\n      </div>\n    }\n  </div>\n</div>\n@if (options.closeButton) {\n  <button rds-icon-button class=\"rds-toast__close-button\" (click)=\"remove()\">\n    <rds-icon icon=\"close\" namespace=\"outlined\" />\n  </button>\n}\n", dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], animations: [
            trigger('flyInOut', [
                state('inactive', style({ opacity: 0 })),
                state('active', style({ opacity: 1 })),
                state('removed', style({ opacity: 0 })),
                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),
                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),
            ]),
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastComponent, decorators: [{
            type: Component,
            args: [{ selector: '[rds-toast-component]', animations: [
                        trigger('flyInOut', [
                            state('inactive', style({ opacity: 0 })),
                            state('active', style({ opacity: 1 })),
                            state('removed', style({ opacity: 0 })),
                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),
                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),
                        ]),
                    ], preserveWhitespaces: false, template: "<div class=\"rds-container-left\"></div>\n<div class=\"rds-toast-inner\">\n  @if (options.icon && options.iconNamespace) {\n    <rds-icon\n      [icon]=\"options.icon\"\n      [namespace]=\"options.iconNamespace\"\n      class=\"rds-toast__leading-icon rds-icon\"\n    />\n  }\n  <div class=\"rds-toast-text\">\n    @if (title) {\n      <div\n        class=\"rds-toast-text__header\"\n        [class]=\"options.titleClass\"\n        [attr.aria-label]=\"title\"\n      >\n        {{ title }}\n      </div>\n    }\n    @if (message && options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n        [innerHTML]=\"message\"\n      ></div>\n    }\n    @if (message && !options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n      >\n        {{ message }}\n      </div>\n    }\n  </div>\n</div>\n@if (options.closeButton) {\n  <button rds-icon-button class=\"rds-toast__close-button\" (click)=\"remove()\">\n    <rds-icon icon=\"close\" namespace=\"outlined\" />\n  </button>\n}\n" }]
        }], ctorParameters: () => [], propDecorators: { toastClasses: [{
                type: HostBinding,
                args: ['class']
            }], state: [{
                type: HostBinding,
                args: ['@flyInOut']
            }], displayStyle: [{
                type: HostBinding,
                args: ['style.display']
            }], tapToast: [{
                type: HostListener,
                args: ['click']
            }], stickAround: [{
                type: HostListener,
                args: ['mouseenter']
            }], delayedHideToast: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });

const DEFAULT_GLOBAL_CONFIG = {
    maxOpened: 0,
    autoDismiss: false,
    newestOnTop: true,
    // Individual
    type: 'info',
    closeButton: true,
    disableTimeOut: false,
    timeOut: 5000,
    extendedTimeOut: 1000,
    enableHtml: false,
    toastClass: 'rds-toast',
    position: 'top-right',
    titleClass: 'rds-toast-title',
    messageClass: 'rds-toast-message',
    easing: 'ease-in',
    easeTime: 300,
    tapToDismiss: false,
    onActivateTick: false,
    icon: null,
    iconNamespace: null,
    announcementMessage: null,
    politeness: 'assertive',
};
const RDS_TOAST_GLOBAL_CONFIG_TOKEN = new InjectionToken('RDS_TOAST_GLOBAL_CONFIG_TOKEN');

class RdsToastContainerDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
    }
    getContainerElement() {
        return this.elementRef.nativeElement;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastContainerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsToastContainerDirective, selector: "[rdsToastContainer]", exportAs: ["rdsToastContainer"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsToastContainer]',
                    exportAs: 'rdsToastContainer',
                }]
        }] });

class RdsToastModule {
    static forRoot(config) {
        return {
            ngModule: RdsToastModule,
            providers: [
                {
                    provide: RDS_TOAST_GLOBAL_CONFIG_TOKEN,
                    useValue: {
                        ...DEFAULT_GLOBAL_CONFIG,
                        ...config,
                    },
                },
            ],
        };
    }
    constructor() {
        this.parentModule = inject(RdsToastModule, {
            optional: true,
            skipSelf: true,
        });
        if (this.parentModule) {
            throw new Error('RdsToastModule is already loaded. Import it in the AppModule only.');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, declarations: [RdsToastComponent, RdsToastContainerDirective], imports: [CommonModule, RdsIconComponent, RdsButtonModule], exports: [RdsToastComponent, RdsToastContainerDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, imports: [CommonModule, RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsIconComponent, RdsButtonModule],
                    declarations: [RdsToastComponent, RdsToastContainerDirective],
                    exports: [RdsToastComponent, RdsToastContainerDirective],
                }]
        }], ctorParameters: () => [] });

class RdsToastOverlayContainerService {
    constructor() {
        this.document = inject(DOCUMENT);
    }
    ngOnDestroy() {
        if (this.containerElement && this.containerElement.parentNode) {
            this.containerElement.parentNode.removeChild(this.containerElement);
        }
    }
    getContainerElement() {
        if (!this.containerElement) {
            this._createContainer();
        }
        return this.containerElement;
    }
    _createContainer() {
        const container = this.document.createElement('div');
        container.classList.add('rds-toast-overlay-container');
        this.document.body.appendChild(container);
        this.containerElement = container;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayContainerService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayContainerService, providedIn: RdsToastModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayContainerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: RdsToastModule,
                }]
        }] });

class RdsToastOverlayRef {
    constructor(_portalHost) {
        this._portalHost = _portalHost;
    }
    attach(portal, newestOnTop = true) {
        return this._portalHost.attach(portal, newestOnTop);
    }
    detach() {
        return this._portalHost.detach();
    }
}

class RdsToastOverlayService {
    constructor() {
        this.toastOverlayContainerService = inject(RdsToastOverlayContainerService);
        this.componentFactoryResolver = inject(ComponentFactoryResolver);
        this.applicationRef = inject(ApplicationRef);
        this.document = inject(DOCUMENT);
        this._paneElements = new Map();
    }
    create(position, overlayContainer) {
        return this._createOverlayRef(this._getPaneElement(position, overlayContainer));
    }
    _getPaneElement(positionClass, overlayContainer) {
        const posClass = `rds-toast-${positionClass}`;
        if (!this._paneElements.get(overlayContainer)) {
            this._paneElements.set(overlayContainer, {});
        }
        const paneElement = this._paneElements.get(overlayContainer);
        if (!paneElement[posClass]) {
            paneElement[posClass] = this._createPaneElement(posClass, overlayContainer);
        }
        return paneElement[posClass];
    }
    _createPaneElement(positionClass, overlayContainer) {
        const pane = this.document.createElement('div');
        pane.id = 'toast-container';
        pane.classList.add(positionClass);
        pane.classList.add('rds-toast-container');
        if (!overlayContainer) {
            this.toastOverlayContainerService.getContainerElement().appendChild(pane);
        }
        else {
            overlayContainer.getContainerElement().appendChild(pane);
        }
        return pane;
    }
    _createPortalHost(pane) {
        return new RdsDomPortalHost(pane, this.componentFactoryResolver, this.applicationRef);
    }
    _createOverlayRef(pane) {
        return new RdsToastOverlayRef(this._createPortalHost(pane));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayService, providedIn: RdsToastModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: RdsToastModule,
                }]
        }] });

class RdsToastInjector {
    constructor(_toastPackage, _parentInjector) {
        this._toastPackage = _toastPackage;
        this._parentInjector = _parentInjector;
    }
    get(token, notFoundValue, options) {
        if (token === RdsToastPackage) {
            return this._toastPackage;
        }
        return this._parentInjector.get(token, notFoundValue, options);
    }
}

class RdsToastRef {
    constructor(_rdsToastOverlayRef) {
        this._rdsToastOverlayRef = _rdsToastOverlayRef;
        this._afterClosed = new Subject();
        this._activate = new Subject();
        this._manualClose = new Subject();
        this._isClosed = false;
    }
    manualClose() {
        this._manualClose.next();
        this._manualClose.complete();
    }
    manualClosed() {
        return this._manualClose.asObservable();
    }
    close() {
        this._isClosed = true;
        this._rdsToastOverlayRef.detach();
        this._afterClosed.next();
        this._manualClose.next();
        this._afterClosed.complete();
        this._manualClose.complete();
        this._activate.complete();
    }
    isClosed() {
        return this._isClosed;
    }
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    isInactive() {
        return this._activate.isStopped;
    }
    activate() {
        this._activate.next();
        this._activate.complete();
    }
    afterActivate() {
        return this._activate.asObservable();
    }
}

class RdsToastService {
    constructor() {
        this.overlayService = inject(RdsToastOverlayService);
        this.injector = inject(Injector);
        this.domSanitizer = inject(DomSanitizer);
        this.ngZone = inject(NgZone);
        this.liveAnnouncer = inject(LiveAnnouncer);
        this.toastGlobalConfig = inject(RDS_TOAST_GLOBAL_CONFIG_TOKEN, {
            optional: true,
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.toasts = [];
        this.currentlyActive = 0;
        this._index = 0;
        if (this.toastGlobalConfig) {
            this.globalConfig = { ...this.toastGlobalConfig };
        }
        else {
            this.globalConfig = { ...DEFAULT_GLOBAL_CONFIG };
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    show(message, title, override = {}) {
        if (override.type === 'info' ||
            override.type === 'warning' ||
            override.type === 'success' ||
            override.type === 'error') {
            return this[override.type](message, title, override);
        }
        else {
            return this._preBuildNotification(message, title, this._applyConfig(override));
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    success(message, title, override = {}) {
        override.type = 'success';
        override.icon = 'checkmark_circle';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error(message, title, override = {}) {
        override.type = 'error';
        override.icon = 'close_circle';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    info(message, title, override = {}) {
        override.type = 'info';
        override.icon = 'info';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    warning(message, title, override = {}) {
        override.type = 'warning';
        override.icon = 'warning_circle';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    clear(toastId) {
        const toast = typeof toastId === 'number'
            ? this.toasts.find((t) => t.toastId === toastId)
            : this.toasts.find((t) => t === toastId);
        if (!toast) {
            this.toasts.forEach((t) => t.toastRef.manualClose());
        }
        else {
            toast.toastRef.manualClose();
        }
    }
    _remove(toastId) {
        const toastIndex = this.toasts.findIndex((t) => t.toastId === toastId);
        if (toastIndex === -1) {
            return false;
        }
        if (!this.toasts[toastIndex].toastRef.isClosed()) {
            this.toasts[toastIndex].toastRef.close();
        }
        this.toasts.splice(toastIndex, 1);
        this.currentlyActive = this.currentlyActive - 1;
        if (!this.globalConfig.maxOpened || !this.toasts.length) {
            return false;
        }
        if (this.currentlyActive < this.globalConfig.maxOpened &&
            this.toasts[this.currentlyActive]) {
            const p = this.toasts[this.currentlyActive].toastRef;
            if (!p.isInactive()) {
                this.currentlyActive = this.currentlyActive + 1;
                p.activate();
            }
        }
        return true;
    }
    _applyConfig(override = {}) {
        return {
            ...this.globalConfig,
            ...override,
            // remove this line when library should allow to pass custom component
            ...{ toastComponent: RdsToastComponent },
        };
    }
    _preBuildNotification(message, title, config) {
        if (config.onActivateTick) {
            return this.ngZone.run(() => this._buildNotification(message, title, config));
        }
        return this._buildNotification(message, title, config);
    }
    _buildNotification(message, title, config) {
        if (!config.toastComponent) {
            throw new Error('toastComponent required');
        }
        if (typeof title !== 'string' || title.trim().length === 0) {
            title = '';
        }
        if (typeof message !== 'string' || message.trim().length === 0) {
            message = title;
            title = '';
        }
        this.previousToastMessage = message;
        let keepInactive = false;
        if (this.globalConfig.maxOpened &&
            this.currentlyActive >= this.globalConfig.maxOpened) {
            keepInactive = true;
            if (this.globalConfig.autoDismiss) {
                this.clear(this.toasts[0]);
            }
        }
        const overlayRef = this.overlayService.create(config.position, this.overlayContainer);
        this._index = this._index + 1;
        let sanitizedMessage = message;
        if (message && config.enableHtml) {
            sanitizedMessage = this.domSanitizer.sanitize(SecurityContext.HTML, message);
        }
        const toastRef = new RdsToastRef(overlayRef);
        const toastPackage = new RdsToastPackage(this._index, config, sanitizedMessage, title, toastRef);
        const toastInjector = new RdsToastInjector(toastPackage, this.injector);
        const component = new RdsComponentPortal(config.toastComponent, toastInjector);
        const portal = overlayRef.attach(component, config.newestOnTop);
        toastRef.componentInstance = portal.instance;
        const ins = {
            toastId: this._index,
            title: title,
            message: message,
            toastRef,
            onShown: toastRef.afterActivate(),
            onHidden: toastRef.afterClosed(),
            onTap: toastPackage.onTap(),
            onAction: toastPackage.onAction(),
            portal,
        };
        if (!keepInactive) {
            this.currentlyActive = this.currentlyActive + 1;
            from(Promise.resolve())
                .pipe(takeUntil(ins.toastRef.afterClosed()))
                .subscribe(() => ins.toastRef.activate());
        }
        toastRef.afterClosed().subscribe(() => {
            this.liveAnnouncer.clear();
            this._remove(ins.toastId);
        });
        toastRef
            .afterActivate()
            .pipe(takeUntil(toastRef.afterClosed()))
            .subscribe(() => {
            if (config.announcementMessage) {
                from(this.liveAnnouncer.announce(config.announcementMessage, config.politeness)).subscribe(noop);
            }
            else {
                from(this.liveAnnouncer.announce(`${config.type} Toast: Title: ${ins.title}: Message: ${ins.message}`, config.politeness)).subscribe(noop);
            }
        });
        this.toasts.push(ins);
        return ins;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastService, providedIn: RdsToastModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: RdsToastModule,
                }]
        }], ctorParameters: () => [] });

class RdsTreeControl extends FlatTreeControl {
}

class RdsTreeDataSource extends DataSource$1 {
    get data() {
        return this._data.value;
    }
    set data(value) {
        this._data.next(value);
        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));
        this._treeControl.dataNodes = this._flattenedData.value;
    }
    constructor(_treeControl, _treeFlattener, initialData = []) {
        super();
        this._treeControl = _treeControl;
        this._treeFlattener = _treeFlattener;
        this._flattenedData = new BehaviorSubject([]);
        this._expandedData = new BehaviorSubject([]);
        this._data = new BehaviorSubject(initialData);
    }
    connect(collectionViewer) {
        const changes = [
            collectionViewer.viewChange,
            this._treeControl.expansionModel.changed.asObservable(),
            this._flattenedData.asObservable(),
        ];
        return merge(...changes).pipe(map(() => {
            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));
            return this._expandedData.value;
        }));
    }
    disconnect() {
        // no op
    }
}

class RdsTreeFlattener {
    constructor(transformFunction, getLevel, isExpandable, getChildren) {
        this.transformFunction = transformFunction;
        this.getLevel = getLevel;
        this.isExpandable = isExpandable;
        this.getChildren = getChildren;
    }
    _flattenNode(node, level, resultNodes, parentMap) {
        const flatNode = this.transformFunction(node, level);
        resultNodes.push(flatNode);
        if (this.isExpandable(flatNode)) {
            const childrenNodes = this.getChildren(node);
            if (childrenNodes) {
                if (Array.isArray(childrenNodes)) {
                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);
                }
                else {
                    childrenNodes.pipe(take(1)).subscribe((children) => {
                        this._flattenChildren(children, level, resultNodes, parentMap);
                    });
                }
            }
        }
        return resultNodes;
    }
    _flattenChildren(children, level, resultNodes, parentMap) {
        children.forEach((child, index) => {
            const childParentMap = parentMap.slice();
            childParentMap.push(index !== children.length - 1);
            this._flattenNode(child, level + 1, resultNodes, childParentMap);
        });
    }
    flattenNodes(structuredData) {
        const resultNodes = [];
        structuredData.forEach((node) => this._flattenNode(node, 0, resultNodes, []));
        return resultNodes;
    }
    expandFlattenedNodes(nodes, treeControl) {
        const results = [];
        const currentExpand = [];
        currentExpand[0] = true;
        nodes.forEach((node) => {
            let expand = true;
            for (let i = 0; i <= this.getLevel(node); i++) {
                expand = expand && currentExpand[i];
            }
            if (expand) {
                results.push(node);
            }
            if (this.isExpandable(node)) {
                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);
            }
        });
        return results;
    }
}

class RdsTreeNodeOutletDirective {
    constructor() {
        this.viewContainer = inject(ViewContainerRef);
        this._node = inject(CDK_TREE_NODE_OUTLET_NODE, { optional: true });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeOutletDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeOutletDirective, selector: "[rdsTreeNodeOutlet], [rds-tree-node-outlet]", providers: [
            {
                provide: CdkTreeNodeOutlet,
                useExisting: RdsTreeNodeOutletDirective,
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeOutlet], [rds-tree-node-outlet]',
                    providers: [
                        {
                            provide: CdkTreeNodeOutlet,
                            useExisting: RdsTreeNodeOutletDirective,
                        },
                    ],
                }]
        }] });

class RdsTreeComponent extends CdkTree {
    constructor() {
        super(...arguments);
        this.class = 'rds-tree';
        this.role = 'tree';
        this.size = 's';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeComponent, selector: "rds-tree", inputs: { treeControl: "treeControl", size: "size" }, host: { properties: { "class": "this.class", "attr.role": "this.role" } }, providers: [{ provide: CdkTree, useExisting: RdsTreeComponent }], viewQueries: [{ propertyName: "_nodeOutlet", first: true, predicate: RdsTreeNodeOutletDirective, descendants: true, static: true }], exportAs: ["rdsTree"], usesInheritance: true, ngImport: i0, template: ` <ng-container rdsTreeNodeOutlet /> `, isInline: true, styles: [".rds-tree{display:block}.rds-tree .rds-tree-invisible{display:none}.rds-tree .rds-nested-tree-node{border-bottom-width:0}.rds-tree .rds-tree-node{color:var(--rds-color-low-contrast);border:2px solid transparent;border-radius:6px;cursor:pointer;display:flex;align-items:center;justify-content:space-between;flex:1;word-wrap:break-word;margin-left:calc((var(--rds-tree-node-level) - 1) * 33px)}.rds-tree .rds-tree-node:hover,.rds-tree .rds-tree-node:focus{outline:none}.rds-tree .rds-tree-node[aria-expanded]{padding-left:8px}.rds-tree .rds-tree-node[aria-expanded=true] [rdstreenodetoggle] rds-icon{transform:rotate(180deg)}.rds-tree .rds-tree-node+.rds-tree-node{margin-top:2px}.rds-tree .rds-tree-node rds-icon{color:var(--rds-color-high-contrast);flex-shrink:0}.rds-tree .rds-tree-node>rds-icon{height:18px;width:18px}.rds-tree .rds-tree-node .rds-checkbox{margin-right:8px;margin-block:0}.rds-tree .rds-tree-node--size-s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:4px 8px 4px 42px}.rds-tree .rds-tree-node--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:6px 8px 6px 42px}.rds-tree .rds-tree-node:hover:not([disabled]){color:var(--rds-color-high-contrast)}.rds-tree .rds-tree-node:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{color:var(--rds-color-high-contrast);border-color:var(--rds-color-informative)}.rds-tree .rds-tree-node--disabled{cursor:default;color:var(--rds-color-disabled)}.rds-tree .rds-tree-node--disabled rds-icon{color:var(--rds-color-disabled)}.rds-tree .rds-tree-node--content-left{display:inline-flex;justify-content:flex-start;align-items:center}.rds-tree .rds-tree-node--content-right{display:inline-flex;justify-content:flex-end;align-items:center}.rds-tree .rds-tree-node--active{background-color:var(--rds-color-bg-base-2)}.rds-tree .rds-tree-node>*:not(.rds-checkbox)+*,.rds-tree .rds-tree-node .rds-tree-node--content-left>*:not(.rds-checkbox)+*,.rds-tree .rds-tree-node .rds-tree-node--content-right>*:not(.rds-checkbox)+*{margin-left:8px}.rds-tree .rds-tree-node .rds-tree-node--content-left+*{margin-left:10px}.rds-tree .rds-tree-node .rds-tree-text-node{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rds-tree .rds-tree-node .rds-tree-text-node__container{width:100%}.rds-tree .rds-tree-node .rds-tree-text-node__container-align-right{justify-content:flex-end}.rds-tree .rds-tree-node .rds-tree-text-node__container-align-center{justify-content:center}.rds-tree:not([aria-multiselectable]) .rds-tree-node[aria-expanded],.rds-tree[aria-multiselectable=false] .rds-tree-node[aria-expanded]{cursor:default}\n"], dependencies: [{ kind: "directive", type: RdsTreeNodeOutletDirective, selector: "[rdsTreeNodeOutlet], [rds-tree-node-outlet]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-tree', exportAs: 'rdsTree', template: ` <ng-container rdsTreeNodeOutlet /> `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: RdsTreeComponent }], styles: [".rds-tree{display:block}.rds-tree .rds-tree-invisible{display:none}.rds-tree .rds-nested-tree-node{border-bottom-width:0}.rds-tree .rds-tree-node{color:var(--rds-color-low-contrast);border:2px solid transparent;border-radius:6px;cursor:pointer;display:flex;align-items:center;justify-content:space-between;flex:1;word-wrap:break-word;margin-left:calc((var(--rds-tree-node-level) - 1) * 33px)}.rds-tree .rds-tree-node:hover,.rds-tree .rds-tree-node:focus{outline:none}.rds-tree .rds-tree-node[aria-expanded]{padding-left:8px}.rds-tree .rds-tree-node[aria-expanded=true] [rdstreenodetoggle] rds-icon{transform:rotate(180deg)}.rds-tree .rds-tree-node+.rds-tree-node{margin-top:2px}.rds-tree .rds-tree-node rds-icon{color:var(--rds-color-high-contrast);flex-shrink:0}.rds-tree .rds-tree-node>rds-icon{height:18px;width:18px}.rds-tree .rds-tree-node .rds-checkbox{margin-right:8px;margin-block:0}.rds-tree .rds-tree-node--size-s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:4px 8px 4px 42px}.rds-tree .rds-tree-node--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:6px 8px 6px 42px}.rds-tree .rds-tree-node:hover:not([disabled]){color:var(--rds-color-high-contrast)}.rds-tree .rds-tree-node:focus:not([disabled]).cdk-focused.cdk-keyboard-focused{color:var(--rds-color-high-contrast);border-color:var(--rds-color-informative)}.rds-tree .rds-tree-node--disabled{cursor:default;color:var(--rds-color-disabled)}.rds-tree .rds-tree-node--disabled rds-icon{color:var(--rds-color-disabled)}.rds-tree .rds-tree-node--content-left{display:inline-flex;justify-content:flex-start;align-items:center}.rds-tree .rds-tree-node--content-right{display:inline-flex;justify-content:flex-end;align-items:center}.rds-tree .rds-tree-node--active{background-color:var(--rds-color-bg-base-2)}.rds-tree .rds-tree-node>*:not(.rds-checkbox)+*,.rds-tree .rds-tree-node .rds-tree-node--content-left>*:not(.rds-checkbox)+*,.rds-tree .rds-tree-node .rds-tree-node--content-right>*:not(.rds-checkbox)+*{margin-left:8px}.rds-tree .rds-tree-node .rds-tree-node--content-left+*{margin-left:10px}.rds-tree .rds-tree-node .rds-tree-text-node{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rds-tree .rds-tree-node .rds-tree-text-node__container{width:100%}.rds-tree .rds-tree-node .rds-tree-text-node__container-align-right{justify-content:flex-end}.rds-tree .rds-tree-node .rds-tree-text-node__container-align-center{justify-content:center}.rds-tree:not([aria-multiselectable]) .rds-tree-node[aria-expanded],.rds-tree[aria-multiselectable=false] .rds-tree-node[aria-expanded]{cursor:default}\n"] }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], _nodeOutlet: [{
                type: ViewChild,
                args: [RdsTreeNodeOutletDirective, { static: true }]
            }], treeControl: [{
                type: Input
            }], size: [{
                type: Input
            }] } });

class RdsTreeNodeDirective extends CdkTreeNode {
    get cssClasses() {
        const cssClasses = ['rds-tree-node'];
        if (this.disabled) {
            cssClasses.push('rds-tree-node--disabled');
        }
        if (!this.disabled && this.active) {
            cssClasses.push('rds-tree-node--active');
        }
        if (this.tree) {
            cssClasses.push(`rds-tree-node--size-${this.tree.size}`);
        }
        return cssClasses.join(' ');
    }
    get attrAriaExpanded() {
        // don't set aria-expanded for leafs as it violates accessibility
        if (!this._tree.treeControl.isExpandable(this._data)) {
            return undefined;
        }
        return this.isExpanded;
    }
    get attrAriaLevel() {
        return this.level + 1;
    }
    get styleLevel() {
        return this.level + 1;
    }
    get attrTabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this.tabIndex;
    }
    onArrowDown() {
        const nextNode = this._elementRef.nativeElement
            .nextElementSibling;
        if (!nextNode) {
            return;
        }
        this.focusMonitor.focusVia(nextNode, 'keyboard');
    }
    onArrowUp() {
        const previousNode = this._elementRef.nativeElement
            .previousElementSibling;
        if (!previousNode) {
            return;
        }
        this.focusMonitor.focusVia(previousNode, 'keyboard');
    }
    onExpand(event) {
        if (this.disabled) {
            return;
        }
        if (this._tree.treeControl.isExpandable(this._data) &&
            !this._tree.treeControl.isExpanded(this._data)) {
            this._tree.treeControl.expand(this.data);
            event.stopPropagation();
        }
    }
    onCollapse(event) {
        if (this.disabled) {
            return;
        }
        if (this._tree.treeControl.isExpandable(this._data) &&
            this._tree.treeControl.isExpanded(this._data)) {
            this._tree.treeControl.collapse(this._data);
            event.stopPropagation();
        }
    }
    constructor(tabIndex) {
        super(inject(ElementRef), inject(RdsTreeComponent));
        this.renderer = inject(Renderer2);
        this.focusMonitor = inject(FocusMonitor);
        this.tree = inject(RdsTreeComponent);
        this.tabIndex = TAB_INDEX_DEFAULT;
        this.disabled = false;
        this.active = false;
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngAfterContentInit() {
        if (!this.disabled) {
            this.focusMonitor.monitor(this._elementRef, true);
        }
        else {
            this.focusMonitor.stopMonitoring(this._elementRef);
        }
    }
    ngOnChanges(changes) {
        if (changes['disabled'] &&
            changes['disabled'].previousValue !== changes['disabled'].currentValue) {
            if (this.disabled) {
                this.focusMonitor.stopMonitoring(this._elementRef);
                this.renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'disabled');
            }
            else {
                this.renderer.removeAttribute(this._elementRef.nativeElement, 'disabled');
                this.focusMonitor.monitor(this._elementRef, true);
            }
            this._checkButtons();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.focusMonitor.stopMonitoring(this._elementRef);
    }
    focus() {
        super.focus();
    }
    _checkButtons() {
        const buttonElements = this._elementRef.nativeElement.querySelectorAll('button');
        buttonElements.forEach((b) => this.renderer.setProperty(b, 'disabled', this.disabled));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeDirective, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTreeNodeDirective, selector: "rds-tree-node", inputs: { tabIndex: ["tabIndex", "tabIndex", numberAttribute], disabled: ["disabled", "disabled", booleanAttribute], active: ["active", "active", booleanAttribute] }, host: { listeners: { "keydown.arrowDown": "onArrowDown()", "keydown.arrowUp": "onArrowUp()", "keydown.arrowRight": "onExpand($event)", "keydown.arrowLeft": "onCollapse($event)" }, properties: { "class": "this.cssClasses", "attr.aria-expanded": "this.attrAriaExpanded", "attr.aria-level": "this.attrAriaLevel", "style.--rds-tree-node-level": "this.styleLevel", "tabIndex": "this.attrTabIndex" } }, providers: [{ provide: CdkTreeNode, useExisting: RdsTreeNodeDirective }], exportAs: ["rdsTreeNode"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-tree-node',
                    exportAs: 'rdsTreeNode',
                    providers: [{ provide: CdkTreeNode, useExisting: RdsTreeNodeDirective }],
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], attrAriaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], attrAriaLevel: [{
                type: HostBinding,
                args: ['attr.aria-level']
            }], styleLevel: [{
                type: HostBinding,
                args: ['style.--rds-tree-node-level']
            }], attrTabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], tabIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], active: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onArrowDown: [{
                type: HostListener,
                args: ['keydown.arrowDown']
            }], onArrowUp: [{
                type: HostListener,
                args: ['keydown.arrowUp']
            }], onExpand: [{
                type: HostListener,
                args: ['keydown.arrowRight', ['$event']]
            }], onCollapse: [{
                type: HostListener,
                args: ['keydown.arrowLeft', ['$event']]
            }] } });

class RdsTreeNodeToggleDirective extends CdkTreeNodeToggle {
    constructor() {
        super(...arguments);
        this.hostTag = inject(ElementRef).nativeElement.tagName;
        this.recursive = false;
        this.disabled = false;
    }
    onInteraction(event) {
        // CdkTreeNodeToggle listens to (click) and button's enter clicks are handled
        // using that event, that's why we omit it here - interaction would be doubled
        if (this.hostTag !== 'BUTTON') {
            this._toggle(event);
        }
    }
    _toggle(event) {
        if (!this.disabled) {
            super._toggle(event);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeToggleDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTreeNodeToggleDirective, selector: "[rdsTreeNodeToggle], [rds-tree-node-toggle]", inputs: { recursive: ["rdsTreeNodeToggleRecursive", "recursive", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, host: { listeners: { "keydown.enter": "onInteraction($event)" } }, providers: [
            { provide: CdkTreeNodeToggle, useExisting: RdsTreeNodeToggleDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeToggle], [rds-tree-node-toggle]',
                    providers: [
                        { provide: CdkTreeNodeToggle, useExisting: RdsTreeNodeToggleDirective },
                    ],
                }]
        }], propDecorators: { recursive: [{
                type: Input,
                args: [{ alias: 'rdsTreeNodeToggleRecursive', transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onInteraction: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });

class RdsTreeNodeDefDirective extends CdkTreeNodeDef {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeDefDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeDefDirective, selector: "[rdsTreeNodeDef], [rds-tree-node-def]", inputs: { data: ["rdsTreeNode", "data"], when: ["rdsTreeNodeDefWhen", "when"] }, providers: [
            { provide: CdkTreeNodeDef, useExisting: RdsTreeNodeDefDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeDefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeDef], [rds-tree-node-def]',
                    providers: [
                        { provide: CdkTreeNodeDef, useExisting: RdsTreeNodeDefDirective },
                    ],
                }]
        }], propDecorators: { data: [{
                type: Input,
                args: ['rdsTreeNode']
            }], when: [{
                type: Input,
                args: ['rdsTreeNodeDefWhen']
            }] } });

class RdsTreeNodeContentLeftDirective {
    constructor() {
        this.contentLeftClass = true;
    }
    onClick(event) {
        event.stopPropagation();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeContentLeftDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeContentLeftDirective, selector: "[rdsTreeNodeContentLeft], [rds-tree-node-content-left]", host: { listeners: { "keydown.space": "onClick($event)", "click": "onClick($event)" }, properties: { "class.rds-tree-node--content-left": "this.contentLeftClass" } }, exportAs: ["rdsTreeNodeContentLeft"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeContentLeftDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeContentLeft], [rds-tree-node-content-left]',
                    exportAs: 'rdsTreeNodeContentLeft',
                }]
        }], propDecorators: { contentLeftClass: [{
                type: HostBinding,
                args: ['class.rds-tree-node--content-left']
            }], onClick: [{
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }, {
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class RdsTreeNodeContentRightDirective {
    constructor() {
        this.contentRightClass = true;
    }
    onClick(event) {
        event.stopPropagation();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeContentRightDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeContentRightDirective, selector: "[rdsTreeNodeContentRight], [rds-tree-node-content-right]", host: { listeners: { "keydown.space": "onClick($event)", "click": "onClick($event)" }, properties: { "class.rds-tree-node--content-right": "this.contentRightClass" } }, exportAs: ["rdsTreeNodeContentRight"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeContentRightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeContentRight], [rds-tree-node-content-right]',
                    exportAs: 'rdsTreeNodeContentRight',
                }]
        }], propDecorators: { contentRightClass: [{
                type: HostBinding,
                args: ['class.rds-tree-node--content-right']
            }], onClick: [{
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }, {
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class RdsTreeNodeTextComponent {
    constructor() {
        this.truncateClass = true;
        this.containerClass = true;
        this.contentLeftClass = true;
        this.alignRightClass = false;
        this.alignCenterClass = false;
        this.textAlignment = 'left';
    }
    ngOnChanges(changes) {
        if (changes['textAlignment'] &&
            changes['textAlignment'].previousValue !==
                changes['textAlignment'].currentValue) {
            if (this.textAlignment === 'right') {
                this.alignRightClass = true;
                this.alignCenterClass = false;
            }
            else if (this.textAlignment === 'center') {
                this.alignRightClass = false;
                this.alignCenterClass = true;
            }
            else {
                this.alignRightClass = false;
                this.alignCenterClass = false;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeTextComponent, selector: "rds-tree-node-text", inputs: { textAlignment: "textAlignment" }, host: { properties: { "class.rds-tree-text-node": "this.truncateClass", "class.rds-tree-text-node__container": "this.containerClass", "class.rds-tree-node--content-left": "this.contentLeftClass", "class.rds-tree-text-node__container-align-right": "this.alignRightClass", "class.rds-tree-text-node__container-align-center": "this.alignCenterClass" } }, viewQueries: [{ propertyName: "rdsTreeNodeElement", first: true, predicate: ["rdsTreeNodeElement"], descendants: true, static: true }], exportAs: ["rdsTreeText"], usesOnChanges: true, ngImport: i0, template: `
    <span class="rds-tree-text-node" #rdsTreeNodeElement>
      <ng-content />
    </span>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeTextComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-tree-node-text',
                    exportAs: 'rdsTreeText',
                    template: `
    <span class="rds-tree-text-node" #rdsTreeNodeElement>
      <ng-content />
    </span>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { truncateClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node']
            }], containerClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node__container']
            }], contentLeftClass: [{
                type: HostBinding,
                args: ['class.rds-tree-node--content-left']
            }], alignRightClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node__container-align-right']
            }], alignCenterClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node__container-align-center']
            }], rdsTreeNodeElement: [{
                type: ViewChild,
                args: ['rdsTreeNodeElement', { static: true }]
            }], textAlignment: [{
                type: Input
            }] } });

const RDS_TREE_ELEMENTS = [
    RdsTreeNodeDefDirective,
    RdsTreeNodeToggleDirective,
    RdsTreeComponent,
    RdsTreeNodeDirective,
    RdsTreeNodeOutletDirective,
    RdsTreeNodeContentLeftDirective,
    RdsTreeNodeContentRightDirective,
    RdsTreeNodeTextComponent,
];
class RdsTreeModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeModule, declarations: [RdsTreeNodeDefDirective,
            RdsTreeNodeToggleDirective,
            RdsTreeComponent,
            RdsTreeNodeDirective,
            RdsTreeNodeOutletDirective,
            RdsTreeNodeContentLeftDirective,
            RdsTreeNodeContentRightDirective,
            RdsTreeNodeTextComponent], imports: [CdkTreeModule], exports: [RdsTreeNodeDefDirective,
            RdsTreeNodeToggleDirective,
            RdsTreeComponent,
            RdsTreeNodeDirective,
            RdsTreeNodeOutletDirective,
            RdsTreeNodeContentLeftDirective,
            RdsTreeNodeContentRightDirective,
            RdsTreeNodeTextComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeModule, imports: [CdkTreeModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CdkTreeModule],
                    exports: [...RDS_TREE_ELEMENTS],
                    declarations: [...RDS_TREE_ELEMENTS],
                }]
        }] });

class RdsTreeSelectionModel extends SelectionModel {
    constructor(treeControl, getLevel, selectionModelOptions) {
        super(true, selectionModelOptions?.initiallySelectedValues, selectionModelOptions?._emitChanges, selectionModelOptions?.compareWith);
        this.treeControl = treeControl;
        this.getLevel = (node) => node.level;
        if (getLevel) {
            this.getLevel = getLevel;
        }
    }
    descendantsAllSelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        return (descendants.length > 0 &&
            descendants.every((child) => {
                return this.isSelected(child);
            }));
    }
    /**
     * @returns false when all or none selected, otherwise true
     */
    descendantsPartiallySelected(node) {
        return (this.descendantsAnySelected(node) && !this.descendantsAllSelected(node));
    }
    /**
     * @returns true when at least one descendant is selected, otherwise false
     */
    descendantsAnySelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        return descendants.some((child) => this.isSelected(child));
    }
    itemSelectionToggle(node) {
        this.toggle(node);
        const descendants = this.treeControl.getDescendants(node);
        this.isSelected(node)
            ? this.select(...descendants)
            : this.deselect(...descendants);
        // Force update for the parent
        descendants.forEach((child) => this.isSelected(child));
        this.checkAllParentsSelection(node);
    }
    leafItemSelectionToggle(node) {
        this.toggle(node);
        this.checkAllParentsSelection(node);
    }
    checkAllParentsSelection(node) {
        let parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    }
    checkRootNodeSelection(node) {
        const nodeSelected = this.isSelected(node);
        const descendants = this.treeControl.getDescendants(node);
        const descAllSelected = descendants.length > 0 &&
            descendants.every((child) => {
                return this.isSelected(child);
            });
        if (nodeSelected && !descAllSelected) {
            this.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.select(node);
        }
    }
    getParentNode(node) {
        const currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (let i = startIndex; i >= 0; i--) {
            const currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    }
}

class RdsTimelineEventIconMarkerDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineEventIconMarkerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTimelineEventIconMarkerDirective, selector: "rds-icon[rds-timeline-event-icon-marker], rds-icon[rdsTimelineEventIconMarker]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineEventIconMarkerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-icon[rds-timeline-event-icon-marker], rds-icon[rdsTimelineEventIconMarker]',
                }]
        }] });

class RdsTimelineOppositeDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineOppositeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTimelineOppositeDirective, selector: "rds-timeline-opposite, [rds-timeline-opposite], [rdsTimelineOpposite]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineOppositeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-timeline-opposite, [rds-timeline-opposite], [rdsTimelineOpposite]',
                }]
        }] });

class RdsTimelineEventComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.contentObserver = inject(ContentObserver);
        this.focusMonitor = inject(FocusMonitor);
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.class = 'rds-timeline-event';
        this.selected = new EventEmitter();
        this._isActive = false;
    }
    set isActive(value) {
        if (this._isActive !== value) {
            this._isActive = value;
            this.cdr.markForCheck();
        }
    }
    get isActive() {
        return this._isActive;
    }
    ngOnInit() {
        this.contentObserver
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.marker);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.marker);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineEventComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsTimelineEventComponent, selector: "rds-timeline-event", inputs: { event: "event" }, outputs: { selected: "selected" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "iconMarkerTemplate", first: true, predicate: RdsTimelineEventIconMarkerDirective, descendants: true }, { propertyName: "oppositeTemplate", first: true, predicate: RdsTimelineOppositeDirective, descendants: true }], viewQueries: [{ propertyName: "marker", first: true, predicate: ["marker"], descendants: true, static: true }], ngImport: i0, template: `
    <div class="rds-timeline-event-content">
      <ng-content />
    </div>
    <div class="rds-timeline-event-separator">
      <div
        #marker
        class="rds-timeline-event{{
          iconMarkerTemplate ? '-icon' : ''
        }}-marker rds-timeline-event{{
          iconMarkerTemplate ? '-icon' : ''
        }}-marker-{{ event.status ?? 'default' }}"
        [tabindex]="event.status === 'disabled' ? -1 : 0"
        [class.active]="isActive"
        (click)="selected.emit()"
        (keydown.enter)="selected.emit()"
        (keydown.space)="selected.emit()"
      >
        <ng-content
          select="rds-icon[rds-timeline-event-icon-marker], rds-icon[rdsTimelineEventIconMarker]"
        />
      </div>
      <div class="rds-timeline-event-connector"></div>
    </div>
    <div class="rds-timeline-event-opposite">
      @if (oppositeTemplate) {
        <ng-content
          select="rds-timeline-opposite, [rds-timeline-opposite], [rdsTimelineOpposite]"
        />
      }
    </div>
  `, isInline: true, styles: [".rds-timeline-event-marker-default{border-color:var(--rds-color-bg-informative);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-default.active{background-color:var(--rds-color-bg-informative)}.rds-timeline-event-marker-default:hover,.rds-timeline-event-marker-default.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-default:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-danger{border-color:var(--rds-color-bg-error);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-danger.active{background-color:var(--rds-color-bg-error)}.rds-timeline-event-marker-danger:hover,.rds-timeline-event-marker-danger.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-danger:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-disabled{border-color:var(--rds-color-grey-2);cursor:default;transition:transform ease .2s}.rds-timeline-event-marker-disabled.active{background-color:var(--rds-color-grey-2)}.rds-timeline-event-marker-disabled:hover,.rds-timeline-event-marker-disabled.cdk-focused.cdk-keyboard-focused{transform:none}.rds-timeline-event-marker-disabled:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-success{border-color:var(--rds-color-bg-success);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-success.active{background-color:var(--rds-color-bg-success)}.rds-timeline-event-marker-success:hover,.rds-timeline-event-marker-success.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-success:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-warning{border-color:var(--rds-color-bg-warning);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-warning.active{background-color:var(--rds-color-bg-warning)}.rds-timeline-event-marker-warning:hover,.rds-timeline-event-marker-warning.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-warning:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker{display:flex;align-items:center;justify-content:center;color:var(--rds-color-on-dark-surface);border-radius:50%;z-index:1;width:32px;height:32px}.rds-timeline-event-icon-marker-default{background-color:var(--rds-color-bg-informative);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-default:hover{background-color:var(--rds-color-bg-informative-hover)}.rds-timeline-event-icon-marker-default.active{background-color:var(--rds-color-bg-informative-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-default:hover,.rds-timeline-event-icon-marker-default.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-default:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-danger{background-color:var(--rds-color-bg-error);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-danger:hover{background-color:var(--rds-color-bg-error-hover)}.rds-timeline-event-icon-marker-danger.active{background-color:var(--rds-color-bg-error-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-danger:hover,.rds-timeline-event-icon-marker-danger.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-danger:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-disabled{background-color:var(--rds-color-grey-2);cursor:default;transition:transform ease .2s}.rds-timeline-event-icon-marker-disabled:hover{background-color:var(--rds-color-grey-2)}.rds-timeline-event-icon-marker-disabled.active{background-color:var(--rds-color-grey-2);transform:scale(1.1)}.rds-timeline-event-icon-marker-disabled:hover,.rds-timeline-event-icon-marker-disabled.cdk-focused.cdk-keyboard-focused{transform:none}.rds-timeline-event-icon-marker-disabled:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-success{background-color:var(--rds-color-bg-success);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-success:hover{background-color:var(--rds-color-bg-success-hover)}.rds-timeline-event-icon-marker-success.active{background-color:var(--rds-color-bg-success-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-success:hover,.rds-timeline-event-icon-marker-success.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-success:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-warning{background-color:var(--rds-color-bg-warning);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-warning:hover{background-color:var(--rds-color-bg-warning-hover)}.rds-timeline-event-icon-marker-warning.active{background-color:var(--rds-color-bg-warning-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-warning:hover,.rds-timeline-event-icon-marker-warning.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-warning:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker rds-icon{width:24px;height:24px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineEventComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-timeline-event', template: `
    <div class="rds-timeline-event-content">
      <ng-content />
    </div>
    <div class="rds-timeline-event-separator">
      <div
        #marker
        class="rds-timeline-event{{
          iconMarkerTemplate ? '-icon' : ''
        }}-marker rds-timeline-event{{
          iconMarkerTemplate ? '-icon' : ''
        }}-marker-{{ event.status ?? 'default' }}"
        [tabindex]="event.status === 'disabled' ? -1 : 0"
        [class.active]="isActive"
        (click)="selected.emit()"
        (keydown.enter)="selected.emit()"
        (keydown.space)="selected.emit()"
      >
        <ng-content
          select="rds-icon[rds-timeline-event-icon-marker], rds-icon[rdsTimelineEventIconMarker]"
        />
      </div>
      <div class="rds-timeline-event-connector"></div>
    </div>
    <div class="rds-timeline-event-opposite">
      @if (oppositeTemplate) {
        <ng-content
          select="rds-timeline-opposite, [rds-timeline-opposite], [rdsTimelineOpposite]"
        />
      }
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-timeline-event-marker-default{border-color:var(--rds-color-bg-informative);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-default.active{background-color:var(--rds-color-bg-informative)}.rds-timeline-event-marker-default:hover,.rds-timeline-event-marker-default.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-default:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-danger{border-color:var(--rds-color-bg-error);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-danger.active{background-color:var(--rds-color-bg-error)}.rds-timeline-event-marker-danger:hover,.rds-timeline-event-marker-danger.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-danger:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-disabled{border-color:var(--rds-color-grey-2);cursor:default;transition:transform ease .2s}.rds-timeline-event-marker-disabled.active{background-color:var(--rds-color-grey-2)}.rds-timeline-event-marker-disabled:hover,.rds-timeline-event-marker-disabled.cdk-focused.cdk-keyboard-focused{transform:none}.rds-timeline-event-marker-disabled:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-success{border-color:var(--rds-color-bg-success);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-success.active{background-color:var(--rds-color-bg-success)}.rds-timeline-event-marker-success:hover,.rds-timeline-event-marker-success.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-success:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-marker-warning{border-color:var(--rds-color-bg-warning);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-marker-warning.active{background-color:var(--rds-color-bg-warning)}.rds-timeline-event-marker-warning:hover,.rds-timeline-event-marker-warning.cdk-focused.cdk-keyboard-focused{transform:scale(1.2)}.rds-timeline-event-marker-warning:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker{display:flex;align-items:center;justify-content:center;color:var(--rds-color-on-dark-surface);border-radius:50%;z-index:1;width:32px;height:32px}.rds-timeline-event-icon-marker-default{background-color:var(--rds-color-bg-informative);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-default:hover{background-color:var(--rds-color-bg-informative-hover)}.rds-timeline-event-icon-marker-default.active{background-color:var(--rds-color-bg-informative-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-default:hover,.rds-timeline-event-icon-marker-default.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-default:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-danger{background-color:var(--rds-color-bg-error);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-danger:hover{background-color:var(--rds-color-bg-error-hover)}.rds-timeline-event-icon-marker-danger.active{background-color:var(--rds-color-bg-error-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-danger:hover,.rds-timeline-event-icon-marker-danger.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-danger:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-disabled{background-color:var(--rds-color-grey-2);cursor:default;transition:transform ease .2s}.rds-timeline-event-icon-marker-disabled:hover{background-color:var(--rds-color-grey-2)}.rds-timeline-event-icon-marker-disabled.active{background-color:var(--rds-color-grey-2);transform:scale(1.1)}.rds-timeline-event-icon-marker-disabled:hover,.rds-timeline-event-icon-marker-disabled.cdk-focused.cdk-keyboard-focused{transform:none}.rds-timeline-event-icon-marker-disabled:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-success{background-color:var(--rds-color-bg-success);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-success:hover{background-color:var(--rds-color-bg-success-hover)}.rds-timeline-event-icon-marker-success.active{background-color:var(--rds-color-bg-success-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-success:hover,.rds-timeline-event-icon-marker-success.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-success:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker-warning{background-color:var(--rds-color-bg-warning);cursor:pointer;transition:transform ease .2s}.rds-timeline-event-icon-marker-warning:hover{background-color:var(--rds-color-bg-warning-hover)}.rds-timeline-event-icon-marker-warning.active{background-color:var(--rds-color-bg-warning-hover);transform:scale(1.1)}.rds-timeline-event-icon-marker-warning:hover,.rds-timeline-event-icon-marker-warning.cdk-focused.cdk-keyboard-focused{transform:scale(1.1)}.rds-timeline-event-icon-marker-warning:focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}.rds-timeline-event-icon-marker rds-icon{width:24px;height:24px}\n"] }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], event: [{
                type: Input,
                args: [{ required: true }]
            }], selected: [{
                type: Output
            }], iconMarkerTemplate: [{
                type: ContentChild,
                args: [RdsTimelineEventIconMarkerDirective]
            }], oppositeTemplate: [{
                type: ContentChild,
                args: [RdsTimelineOppositeDirective]
            }], marker: [{
                type: ViewChild,
                args: ['marker', { static: true }]
            }] } });

class RdsTimelineComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.removeOldHandlers$ = new Subject();
        this.align = 'start';
        this.presentationMode = 'scroll';
        this.orientation = 'vertical';
        this.activePage = 1;
        this.numberOfPages = 0;
        this.triggerCalculation$ = new Subject();
        this.scroll$ = new Subject();
        this.isScrolling = false;
        this.pageOffsetFactor = 0.3;
        this.class = 'rds-timeline';
    }
    get showGradientRight() {
        return (this.presentationMode !== 'scroll' &&
            this.orientation === 'horizontal' &&
            !this.isStartButtonActive &&
            this.isEndButtonActive);
    }
    get showGradientLeft() {
        return (this.presentationMode !== 'scroll' &&
            this.orientation === 'horizontal' &&
            this.isStartButtonActive &&
            !this.isEndButtonActive);
    }
    get showCircleGradientHorizontal() {
        return (this.presentationMode !== 'scroll' &&
            this.orientation === 'horizontal' &&
            this.isStartButtonActive &&
            this.isEndButtonActive);
    }
    get showCircleGradientVertical() {
        return (this.presentationMode !== 'scroll' &&
            this.orientation === 'vertical' &&
            this.isStartButtonActive &&
            this.isEndButtonActive);
    }
    get showGradientTop() {
        return (this.presentationMode !== 'scroll' &&
            this.orientation === 'vertical' &&
            !this.isStartButtonActive &&
            this.isEndButtonActive);
    }
    get showGradientBottom() {
        return (this.presentationMode !== 'scroll' &&
            this.orientation === 'vertical' &&
            this.isStartButtonActive &&
            !this.isEndButtonActive);
    }
    get isStartButtonActive() {
        return this.numberOfPages > 0 && this.activePage > 1;
    }
    get isEndButtonActive() {
        return this.numberOfPages > 0 && this.activePage < this.numberOfPages;
    }
    ngAfterViewInit() {
        this.triggerCalculation$
            .pipe(delay(1), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.calculateNumberOfPages());
        this.setupScrollListeners();
        this.setupEventHandlers(this.events);
        this.events.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((events) => {
            this.removeOldHandlers$.next();
            this.setupEventHandlers(events);
            this.triggerCalculation$.next();
        });
        this.triggerCalculation$.next();
    }
    ngAfterViewChecked() {
        if (this.orientation === 'horizontal') {
            const newValue = this.widgetsContent.nativeElement.scrollWidth >
                this.widgetsContent.nativeElement.clientWidth;
            this.contentScroll(newValue);
        }
        else {
            const newValue = this.widgetsContent.nativeElement.scrollHeight >
                this.widgetsContent.nativeElement.clientHeight;
            this.contentScroll(newValue);
        }
    }
    ngOnChanges(changes) {
        if ('orientation' in changes ||
            'align' in changes ||
            'presentationMode' in changes) {
            this.activePage = 1;
            this.triggerCalculation$.next();
        }
    }
    ngOnDestroy() {
        this.triggerCalculation$.complete();
    }
    hasPrevPage() {
        return 1 < this.activePage && this.activePage <= this.numberOfPages;
    }
    hasNextPage() {
        return this.activePage < this.numberOfPages;
    }
    scrollStart() {
        this.scroll$.next('start');
    }
    scrollEnd() {
        this.scroll$.next('end');
    }
    contentScroll(newValue) {
        if (this.isScrollable !== newValue) {
            this.isScrollable = !!newValue;
            this.cdr.markForCheck();
        }
    }
    setupEventHandlers(events) {
        merge(...events.map((e) => e.selected.pipe(map(() => e))))
            .pipe(takeUntil(this.removeOldHandlers$), takeUntilDestroyed(this.destroyRef))
            .subscribe((e) => this.updateEventStates(e));
    }
    setupScrollListeners() {
        fromEvent(this.widgetsContent.nativeElement, 'scroll')
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => (this.isScrolling = true));
        fromEvent(this.widgetsContent.nativeElement, 'scrollend')
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => (this.isScrolling = false));
        this.scroll$
            .pipe(filter(() => !this.isScrolling), takeUntilDestroyed(this.destroyRef))
            .subscribe((dir) => this.scroll(dir));
    }
    updateEventStates(selected) {
        if (selected.event.status !== 'disabled') {
            this.events.forEach((eventComponent) => {
                eventComponent.isActive = selected === eventComponent;
            });
        }
    }
    scroll(direction) {
        const hasPage = direction === 'end' ? this.hasNextPage() : this.hasPrevPage();
        if (hasPage) {
            const directionSign = direction === 'end' ? 1 : -1;
            this.activePage = this.activePage + directionSign;
            const scrollOptions = { behavior: 'smooth' };
            if (this.orientation === 'horizontal') {
                scrollOptions.left =
                    this.widgetsContent.nativeElement.scrollLeft +
                        this.getScrollOffset() * directionSign;
            }
            else {
                scrollOptions.top =
                    this.widgetsContent.nativeElement.scrollTop +
                        this.getScrollOffset() * directionSign;
            }
            this.widgetsContent.nativeElement.scrollTo(scrollOptions);
            this.cdr.markForCheck();
        }
    }
    calculateNumberOfPages() {
        const beforeNumberOfPages = this.numberOfPages;
        const segments = this.orientation === 'horizontal'
            ? (this.widgetsContent.nativeElement.scrollWidth -
                this.widgetsContent.nativeElement.clientWidth) /
                this.getScrollOffset()
            : (this.widgetsContent.nativeElement.scrollHeight -
                this.widgetsContent.nativeElement.clientHeight) /
                this.getScrollOffset();
        this.numberOfPages = Math.ceil(segments) + 1;
        if (beforeNumberOfPages !== this.numberOfPages) {
            this.cdr.markForCheck();
        }
        setTimeout(() => {
            this.widgetsContent.nativeElement.scrollTo({
                top: 0,
                left: 0,
                behavior: 'instant',
            });
            // when changing orientation something triggers scroll event, that's why the line below is needed
            this.isScrolling = false;
        }, 25);
    }
    getScrollOffset() {
        const pageWidth = this.orientation === 'horizontal'
            ? this.widgetsContent.nativeElement.offsetWidth
            : this.widgetsContent.nativeElement.offsetHeight;
        return pageWidth - pageWidth * this.pageOffsetFactor;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsTimelineComponent, selector: "rds-timeline", inputs: { align: "align", presentationMode: "presentationMode", orientation: "orientation" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "events", predicate: RdsTimelineEventComponent }], viewQueries: [{ propertyName: "widgetsContent", first: true, predicate: ["widgetsContent"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"rds-scrolling rds-scrolling-{{ orientation }}\">\n  @if (presentationMode === 'slider') {\n    @if (isStartButtonActive) {\n      <div\n        class=\"rds-arrow\"\n        [class.rds-arrow-left]=\"orientation === 'horizontal'\"\n        [class.rds-arrow-top]=\"orientation === 'vertical'\"\n      >\n        <button rds-icon-button size=\"s\" (click)=\"scrollStart()\">\n          <rds-icon\n            namespace=\"filled\"\n            [icon]=\"\n              orientation === 'horizontal' ? 'chevron_left' : 'chevron_up'\n            \"\n          />\n        </button>\n      </div>\n    }\n  }\n  <div\n    class=\"rds-scrolling-container\"\n    [class.rds-timeline-circle-gradient-horizontal]=\"\n      showCircleGradientHorizontal\n    \"\n    [class.rds-timeline-circle-gradient-vertical]=\"showCircleGradientVertical\"\n    [class.rds-timeline-gradient-right]=\"showGradientRight\"\n    [class.rds-timeline-gradient-left]=\"showGradientLeft\"\n    [class.rds-timeline-gradient-top]=\"showGradientTop\"\n    [class.rds-timeline-gradient-bottom]=\"showGradientBottom\"\n  >\n    <div\n      #widgetsContent\n      class=\"rds-scrolling-wrapper rds-scrolling-wrapper-{{\n        orientation\n      }} rds-scrolling-wrapper-{{ presentationMode }}\"\n      (scroll)=\"contentScroll()\"\n    >\n      <div\n        class=\"rds-timeline-wrapper rds-timeline-wrapper-{{\n          align\n        }} rds-timeline-wrapper-{{ orientation }}\"\n      >\n        <ng-content select=\"rds-timeline-event\" />\n      </div>\n    </div>\n  </div>\n  @if (presentationMode === 'slider') {\n    @if (isEndButtonActive) {\n      <div\n        class=\"rds-arrow\"\n        [class.rds-arrow-right]=\"orientation === 'horizontal'\"\n        [class.rds-arrow-down]=\"orientation === 'vertical'\"\n      >\n        <button rds-icon-button size=\"s\" (click)=\"scrollEnd()\">\n          <rds-icon\n            namespace=\"filled\"\n            [icon]=\"\n              orientation === 'horizontal' ? 'chevron_right' : 'chevron_down'\n            \"\n          />\n        </button>\n      </div>\n    }\n  }\n  @if (presentationMode === 'pagination') {\n    <div class=\"rds-timeline-pagination\">\n      <button\n        rds-icon-button\n        size=\"s\"\n        [disabled]=\"!isStartButtonActive\"\n        (click)=\"scrollStart()\"\n      >\n        <rds-icon\n          namespace=\"filled\"\n          icon=\"chevron_left\"\n          [class.active]=\"isStartButtonActive\"\n        />\n      </button>\n      <div class=\"rds-timeline-pagination-text\">\n        {{ activePage }}/{{ numberOfPages }}\n      </div>\n      <button\n        rds-icon-button\n        size=\"s\"\n        [disabled]=\"!isEndButtonActive\"\n        (click)=\"scrollEnd()\"\n      >\n        <rds-icon\n          namespace=\"filled\"\n          icon=\"chevron_right\"\n          [class.active]=\"isEndButtonActive\"\n        />\n      </button>\n    </div>\n  }\n</div>\n", styles: ["rds-timeline{display:flex;flex-grow:1;flex-direction:column;height:100%}rds-timeline .rds-timeline-wrapper{display:flex;flex-grow:1;flex-direction:column}rds-timeline .rds-timeline-wrapper .rds-timeline-event{display:grid;position:relative;min-height:72px}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{grid-area:content;padding:0 16px}@media (max-width: 767.999999px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-separator{grid-area:separator;display:flex;align-items:center;flex-direction:column}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-separator .rds-timeline-event-marker{display:flex;align-self:baseline;border-width:2px;border-style:solid;border-radius:50%;min-width:12px;height:12px}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-separator .rds-timeline-event-connector{flex-grow:1;background-color:var(--rds-color-grey-2)}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-opposite{grid-area:opposite;padding:0 16px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal{flex-direction:row;padding:0 4px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event{grid-template-rows:auto auto auto;grid-template-areas:\"content\" \"separator\" \"opposite\";min-width:70px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-content,rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-opposite{padding:16px 0;margin-right:8px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-separator{flex-direction:row}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-separator .rds-timeline-event-connector{height:1px;margin-left:8px;margin-right:8px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal.rds-timeline-wrapper-end .rds-timeline-event{grid-template-areas:\"opposite\" \"separator\" \"content\";text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal.rds-timeline-wrapper-alternate .rds-timeline-event{grid-template-rows:1fr auto 1fr}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n){grid-template-areas:\"opposite\" \"separator\" \"content\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event{grid-template-rows:auto;grid-template-columns:auto auto auto;grid-template-areas:\"content separator opposite\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-start .rds-timeline-event{flex-direction:row}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-start .rds-timeline-event .rds-timeline-event-content{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-start .rds-timeline-event .rds-timeline-event-opposite{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-end .rds-timeline-event{grid-template-areas:\"opposite separator content\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-end .rds-timeline-event .rds-timeline-event-content{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-end .rds-timeline-event .rds-timeline-event-opposite{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event{grid-template-columns:1fr auto 1fr}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n){grid-template-areas:\"opposite separator content\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(odd) .rds-timeline-event-opposite{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(odd) .rds-timeline-event-content{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n) .rds-timeline-event-opposite{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n) .rds-timeline-event-content{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event{margin-bottom:8px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event .rds-timeline-event-marker{margin-inline:6px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event .rds-timeline-event-content,rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event .rds-timeline-event-opposite{margin-top:0;padding:0 16px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event:has(.rds-icon) .rds-timeline-event-content,rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event:has(.rds-icon) .rds-timeline-event-opposite{margin-top:10px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event-separator{padding-top:6px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event-separator .rds-timeline-event-connector{width:1px;margin-top:8px}rds-timeline .rds-scrolling{display:flex;position:relative;flex-direction:column}rds-timeline .rds-scrolling.rds-scrolling-horizontal{padding:0 24px}rds-timeline .rds-scrolling.rds-scrolling-vertical{height:100%;align-items:center}rds-timeline .rds-scrolling-container{display:grid;height:100%}rds-timeline .rds-timeline-circle-gradient-horizontal{mask:radial-gradient(circle,transparent -100%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 30%,transparent 95%)}rds-timeline .rds-timeline-gradient-right{mask:linear-gradient(90deg,transparent -50%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-timeline-gradient-left{mask:linear-gradient(270deg,transparent -50%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-timeline-circle-gradient-vertical{mask:linear-gradient(180deg,transparent 5%,rgb(0,0,0) 30%,rgb(0,0,0) 70%,transparent 95%)}rds-timeline .rds-timeline-gradient-bottom{mask:linear-gradient(360deg,transparent -55%,var(--rds-color-bg-overlay) 30%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-timeline-gradient-top{mask:linear-gradient(180deg,transparent -50%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal{overflow-x:scroll;overflow-y:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-slider,rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination{overflow-x:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination .rds-timeline-wrapper-end,rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination .rds-timeline-wrapper-alternate{margin-bottom:24px}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination .rds-timeline-wrapper-start{margin-bottom:8px}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical{overflow-y:scroll;overflow-x:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical.rds-scrolling-wrapper-slider,rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical.rds-scrolling-wrapper-pagination{overflow-y:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical.rds-scrolling-wrapper-pagination .rds-timeline-wrapper{padding-bottom:12px}rds-timeline .rds-arrow{cursor:pointer;display:flex;align-items:center;position:absolute;z-index:2}rds-timeline .rds-arrow-left{top:calc(50% - 9px);left:16px}rds-timeline .rds-arrow-right{top:calc(50% - 9px);right:16px}rds-timeline .rds-arrow-top{left:calc(50% - 9px);top:0}rds-timeline .rds-arrow-down{left:calc(50% - 9px);bottom:0}rds-timeline .rds-timeline-pagination{width:100%;display:flex;justify-content:center;-webkit-user-select:none;user-select:none}rds-timeline .rds-timeline-pagination .rds-timeline-pagination-text{margin:0 40px}rds-timeline .rds-timeline-pagination rds-icon{color:var(--rds-color-disabled)}rds-timeline .rds-timeline-pagination rds-icon.active{color:var(--rds-color-low-contrast);cursor:pointer}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-timeline', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<div class=\"rds-scrolling rds-scrolling-{{ orientation }}\">\n  @if (presentationMode === 'slider') {\n    @if (isStartButtonActive) {\n      <div\n        class=\"rds-arrow\"\n        [class.rds-arrow-left]=\"orientation === 'horizontal'\"\n        [class.rds-arrow-top]=\"orientation === 'vertical'\"\n      >\n        <button rds-icon-button size=\"s\" (click)=\"scrollStart()\">\n          <rds-icon\n            namespace=\"filled\"\n            [icon]=\"\n              orientation === 'horizontal' ? 'chevron_left' : 'chevron_up'\n            \"\n          />\n        </button>\n      </div>\n    }\n  }\n  <div\n    class=\"rds-scrolling-container\"\n    [class.rds-timeline-circle-gradient-horizontal]=\"\n      showCircleGradientHorizontal\n    \"\n    [class.rds-timeline-circle-gradient-vertical]=\"showCircleGradientVertical\"\n    [class.rds-timeline-gradient-right]=\"showGradientRight\"\n    [class.rds-timeline-gradient-left]=\"showGradientLeft\"\n    [class.rds-timeline-gradient-top]=\"showGradientTop\"\n    [class.rds-timeline-gradient-bottom]=\"showGradientBottom\"\n  >\n    <div\n      #widgetsContent\n      class=\"rds-scrolling-wrapper rds-scrolling-wrapper-{{\n        orientation\n      }} rds-scrolling-wrapper-{{ presentationMode }}\"\n      (scroll)=\"contentScroll()\"\n    >\n      <div\n        class=\"rds-timeline-wrapper rds-timeline-wrapper-{{\n          align\n        }} rds-timeline-wrapper-{{ orientation }}\"\n      >\n        <ng-content select=\"rds-timeline-event\" />\n      </div>\n    </div>\n  </div>\n  @if (presentationMode === 'slider') {\n    @if (isEndButtonActive) {\n      <div\n        class=\"rds-arrow\"\n        [class.rds-arrow-right]=\"orientation === 'horizontal'\"\n        [class.rds-arrow-down]=\"orientation === 'vertical'\"\n      >\n        <button rds-icon-button size=\"s\" (click)=\"scrollEnd()\">\n          <rds-icon\n            namespace=\"filled\"\n            [icon]=\"\n              orientation === 'horizontal' ? 'chevron_right' : 'chevron_down'\n            \"\n          />\n        </button>\n      </div>\n    }\n  }\n  @if (presentationMode === 'pagination') {\n    <div class=\"rds-timeline-pagination\">\n      <button\n        rds-icon-button\n        size=\"s\"\n        [disabled]=\"!isStartButtonActive\"\n        (click)=\"scrollStart()\"\n      >\n        <rds-icon\n          namespace=\"filled\"\n          icon=\"chevron_left\"\n          [class.active]=\"isStartButtonActive\"\n        />\n      </button>\n      <div class=\"rds-timeline-pagination-text\">\n        {{ activePage }}/{{ numberOfPages }}\n      </div>\n      <button\n        rds-icon-button\n        size=\"s\"\n        [disabled]=\"!isEndButtonActive\"\n        (click)=\"scrollEnd()\"\n      >\n        <rds-icon\n          namespace=\"filled\"\n          icon=\"chevron_right\"\n          [class.active]=\"isEndButtonActive\"\n        />\n      </button>\n    </div>\n  }\n</div>\n", styles: ["rds-timeline{display:flex;flex-grow:1;flex-direction:column;height:100%}rds-timeline .rds-timeline-wrapper{display:flex;flex-grow:1;flex-direction:column}rds-timeline .rds-timeline-wrapper .rds-timeline-event{display:grid;position:relative;min-height:72px}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{grid-area:content;padding:0 16px}@media (max-width: 767.999999px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-content{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-separator{grid-area:separator;display:flex;align-items:center;flex-direction:column}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-separator .rds-timeline-event-marker{display:flex;align-self:baseline;border-width:2px;border-style:solid;border-radius:50%;min-width:12px;height:12px}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-separator .rds-timeline-event-connector{flex-grow:1;background-color:var(--rds-color-grey-2)}rds-timeline .rds-timeline-wrapper .rds-timeline-event .rds-timeline-event-opposite{grid-area:opposite;padding:0 16px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal{flex-direction:row;padding:0 4px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event{grid-template-rows:auto auto auto;grid-template-areas:\"content\" \"separator\" \"opposite\";min-width:70px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-content,rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-opposite{padding:16px 0;margin-right:8px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-separator{flex-direction:row}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal .rds-timeline-event .rds-timeline-event-separator .rds-timeline-event-connector{height:1px;margin-left:8px;margin-right:8px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal.rds-timeline-wrapper-end .rds-timeline-event{grid-template-areas:\"opposite\" \"separator\" \"content\";text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal.rds-timeline-wrapper-alternate .rds-timeline-event{grid-template-rows:1fr auto 1fr}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-horizontal.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n){grid-template-areas:\"opposite\" \"separator\" \"content\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event{grid-template-rows:auto;grid-template-columns:auto auto auto;grid-template-areas:\"content separator opposite\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-start .rds-timeline-event{flex-direction:row}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-start .rds-timeline-event .rds-timeline-event-content{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-start .rds-timeline-event .rds-timeline-event-opposite{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-end .rds-timeline-event{grid-template-areas:\"opposite separator content\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-end .rds-timeline-event .rds-timeline-event-content{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-end .rds-timeline-event .rds-timeline-event-opposite{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event{grid-template-columns:1fr auto 1fr}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n){grid-template-areas:\"opposite separator content\"}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(odd) .rds-timeline-event-opposite{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(odd) .rds-timeline-event-content{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n) .rds-timeline-event-opposite{text-align:right}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical.rds-timeline-wrapper-alternate .rds-timeline-event:nth-child(2n) .rds-timeline-event-content{text-align:left}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event{margin-bottom:8px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event .rds-timeline-event-marker{margin-inline:6px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event .rds-timeline-event-content,rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event .rds-timeline-event-opposite{margin-top:0;padding:0 16px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event:has(.rds-icon) .rds-timeline-event-content,rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event:has(.rds-icon) .rds-timeline-event-opposite{margin-top:10px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event-separator{padding-top:6px}rds-timeline .rds-timeline-wrapper.rds-timeline-wrapper-vertical .rds-timeline-event-separator .rds-timeline-event-connector{width:1px;margin-top:8px}rds-timeline .rds-scrolling{display:flex;position:relative;flex-direction:column}rds-timeline .rds-scrolling.rds-scrolling-horizontal{padding:0 24px}rds-timeline .rds-scrolling.rds-scrolling-vertical{height:100%;align-items:center}rds-timeline .rds-scrolling-container{display:grid;height:100%}rds-timeline .rds-timeline-circle-gradient-horizontal{mask:radial-gradient(circle,transparent -100%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 30%,transparent 95%)}rds-timeline .rds-timeline-gradient-right{mask:linear-gradient(90deg,transparent -50%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-timeline-gradient-left{mask:linear-gradient(270deg,transparent -50%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-timeline-circle-gradient-vertical{mask:linear-gradient(180deg,transparent 5%,rgb(0,0,0) 30%,rgb(0,0,0) 70%,transparent 95%)}rds-timeline .rds-timeline-gradient-bottom{mask:linear-gradient(360deg,transparent -55%,var(--rds-color-bg-overlay) 30%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-timeline-gradient-top{mask:linear-gradient(180deg,transparent -50%,var(--rds-color-bg-overlay) 0%,var(--rds-color-bg-overlay) 70%,transparent 95%)}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal{overflow-x:scroll;overflow-y:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-slider,rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination{overflow-x:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination .rds-timeline-wrapper-end,rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination .rds-timeline-wrapper-alternate{margin-bottom:24px}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-horizontal.rds-scrolling-wrapper-pagination .rds-timeline-wrapper-start{margin-bottom:8px}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical{overflow-y:scroll;overflow-x:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical.rds-scrolling-wrapper-slider,rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical.rds-scrolling-wrapper-pagination{overflow-y:hidden}rds-timeline .rds-scrolling-wrapper.rds-scrolling-wrapper-vertical.rds-scrolling-wrapper-pagination .rds-timeline-wrapper{padding-bottom:12px}rds-timeline .rds-arrow{cursor:pointer;display:flex;align-items:center;position:absolute;z-index:2}rds-timeline .rds-arrow-left{top:calc(50% - 9px);left:16px}rds-timeline .rds-arrow-right{top:calc(50% - 9px);right:16px}rds-timeline .rds-arrow-top{left:calc(50% - 9px);top:0}rds-timeline .rds-arrow-down{left:calc(50% - 9px);bottom:0}rds-timeline .rds-timeline-pagination{width:100%;display:flex;justify-content:center;-webkit-user-select:none;user-select:none}rds-timeline .rds-timeline-pagination .rds-timeline-pagination-text{margin:0 40px}rds-timeline .rds-timeline-pagination rds-icon{color:var(--rds-color-disabled)}rds-timeline .rds-timeline-pagination rds-icon.active{color:var(--rds-color-low-contrast);cursor:pointer}\n"] }]
        }], propDecorators: { align: [{
                type: Input
            }], presentationMode: [{
                type: Input
            }], orientation: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], widgetsContent: [{
                type: ViewChild,
                args: ['widgetsContent']
            }], events: [{
                type: ContentChildren,
                args: [RdsTimelineEventComponent]
            }] } });

const ELEMENTS$1 = [
    RdsTimelineComponent,
    RdsTimelineEventComponent,
    RdsTimelineEventIconMarkerDirective,
    RdsTimelineOppositeDirective,
];
class RdsTimelineModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineModule, declarations: [RdsTimelineComponent,
            RdsTimelineEventComponent,
            RdsTimelineEventIconMarkerDirective,
            RdsTimelineOppositeDirective], imports: [CommonModule, RdsIconComponent, RdsButtonModule], exports: [RdsTimelineComponent,
            RdsTimelineEventComponent,
            RdsTimelineEventIconMarkerDirective,
            RdsTimelineOppositeDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineModule, imports: [CommonModule, RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTimelineModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsIconComponent, RdsButtonModule],
                    declarations: [...ELEMENTS$1],
                    exports: [...ELEMENTS$1],
                }]
        }] });

let id = 0;
class RdsFileItem {
    get errorIntlToken() {
        return this._errorIntlToken;
    }
    get state() {
        return this._state$.value;
    }
    set state(v) {
        if (v !== this.state) {
            this._state$.next(v);
        }
    }
    get isUploading() {
        return this.state === 'uploading';
    }
    constructor(file, failedFilters) {
        this.file = file;
        this.failedFilters = failedFilters;
        this._errorIntlToken = 'EMPTY';
        this._progress$ = new BehaviorSubject(0);
        this._state$ = new BehaviorSubject('ready');
        this.progress$ = this._progress$.asObservable();
        this.state$ = this._state$.asObservable();
        this.id = id++;
        this.hasFailedFilters = !!this.failedFilters.length;
        if (this.hasFailedFilters) {
            this._errorIntlToken = this.failedFilters[0].descriptionIntlToken;
            this.state = 'error';
        }
    }
    onBeforeUpload() {
        this._errorIntlToken = 'EMPTY';
        this.state = 'uploading';
        this._progress$.next(0);
    }
    onProgress(progress) {
        this._progress$.next(progress);
    }
    onSuccess() {
        this.state = 'success';
        this._progress$.next(100);
    }
    onError() {
        this._errorIntlToken = 'uploadFailed';
        this.state = 'error';
    }
    onAbort() {
        this.state = 'aborted';
    }
}

// those consts exist to avoid circular reference in type definition
const FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN = 'queueLimitFilterDescription';
const FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN = 'fileSizeFilterDescription';
const FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN = 'fileTypeFilterDescription';
class RdsUploadFilters {
    static { this.queueLimit = {
        name: 'queueLimit',
        descriptionIntlToken: FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN,
        preventsAddingToQueue: true,
        fn: (item, config, queue) => !config.queueLimit || queue.length < config.queueLimit,
    }; }
    static { this.fileSize = {
        name: 'fileSize',
        descriptionIntlToken: FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN,
        fn: (item, config) => !(config.maxFileSize && item.size > config.maxFileSize),
    }; }
    static { this.fileType = {
        name: 'fileType',
        descriptionIntlToken: FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN,
        fn: verifyAccept,
    }; }
    static compose(currentFilters, config) {
        const filters = new Set([...currentFilters, RdsUploadFilters.queueLimit]);
        config.maxFileSize && filters.add(RdsUploadFilters.fileSize);
        config.accept && filters.add(RdsUploadFilters.fileType);
        return Array.from(filters);
    }
}
function verifyAccept(file, config) {
    const accept = config.accept?.filter((v) => !!v);
    if (!accept || !accept.length) {
        return true;
    }
    const allowed = parseAccept(accept);
    const extension = extractExtension(file.name);
    return (allowed.extension.includes(extension) ||
        allowed.mime.some((regex) => regex.test(file.type)));
}
function parseAccept(accept) {
    return accept.reduce((acc, curr) => {
        curr = curr.trim().toLowerCase();
        if (curr.startsWith('.')) {
            acc.extension.push(...unifyJpgExtensionsIfNeeded(curr));
        }
        else {
            acc.mime.push(new RegExp(curr.replace('*', '.*')));
        }
        return acc;
    }, { extension: [], mime: [] });
}
function unifyJpgExtensionsIfNeeded(extension) {
    if (extension === '.jpg' || extension === '.jpeg') {
        return ['.jpeg', '.jpg'];
    }
    else {
        return [extension];
    }
}
function extractExtension(filename) {
    const splitName = filename.split('.');
    return '.' + splitName[splitName.length - 1].toLowerCase();
}

class RdsHttpClientWrapper {
    constructor(item, config, client) {
        this.item = item;
        this.config = config;
        this.client = client;
        this.form = new FormData();
        this.form.append('file', item.file, item.file.name);
        const method = config.method ?? 'POST';
        this.request = new HttpRequest(method, config.url, this.form, {
            headers: config.headers,
            reportProgress: true,
            withCredentials: !!config.authToken,
            responseType: config.responseType,
        });
        if (config.authToken) {
            this.request = this.request.clone({
                headers: this.request.headers.set('Authorization', config.authToken),
            });
        }
        this.response$ = this.client.request(this.request);
    }
    abort() {
        this.responseSubscription?.unsubscribe();
        this.responseSubscription = undefined;
        this.onAbort();
    }
    send() {
        this.responseSubscription = this.response$.subscribe({
            error: (e) => this.onError(e),
            next: (e) => {
                if (e.type === HttpEventType.UploadProgress) {
                    this.onProgress(e);
                }
                else if (e.type === HttpEventType.Response) {
                    this.onSuccess(e);
                }
            },
        });
    }
    onSuccess(event) {
        const change = {
            item: this.item,
            event,
        };
        this.success && this.success(change);
        this.complete && this.complete(change);
    }
    onError(event) {
        const change = {
            item: this.item,
            event,
        };
        this.error && this.error(change);
        this.complete && this.complete(change);
    }
    onProgress(event) {
        const progress = event.total != undefined
            ? Math.round((event.loaded * 100) / event.total)
            : null;
        this.progress && this.progress({ item: this.item, progress });
    }
    onAbort() {
        const change = {
            item: this.item,
        };
        this.cancel && this.cancel(change);
        this.complete && this.complete(change);
    }
}

class RdsFileUploader {
    get config() {
        return this._config;
    }
    get isUploading() {
        return this.events.isUploading.value;
    }
    set isUploading(v) {
        this.events.isUploading.next(v);
    }
    constructor(config, client) {
        this.client = client;
        this._config = {
            autoUpload: true,
            filters: [],
            url: '',
        };
        this.queue = [];
        this.itemIdToRequest = new Map();
        this.events = {
            fileInvalid: new Subject(),
            fileItemSuccess: new Subject(),
            fileItemError: new Subject(),
            fileItemCanceled: new Subject(),
            fileItemCompleted: new Subject(),
            allComplete: new Subject(),
            isUploading: new BehaviorSubject(false),
            config: new BehaviorSubject(this._config),
            queue: new BehaviorSubject(this.queue),
        };
        this.fileInvalid$ = this.events.fileInvalid.asObservable();
        this.fileItemSuccess$ = this.events.fileItemSuccess.asObservable();
        this.fileItemError$ = this.events.fileItemError.asObservable();
        this.fileItemCanceled$ = this.events.fileItemCanceled.asObservable();
        this.fileItemCompleted$ = this.events.fileItemCompleted.asObservable();
        this.allComplete$ = this.events.allComplete.asObservable();
        this.isUploading$ = this.events.isUploading.asObservable();
        this.config$ = this.events.config.asObservable();
        this.queue$ = this.events.queue.asObservable();
        this.setConfig(config);
    }
    setConfig(config) {
        this._config = {
            ...config,
            filters: RdsUploadFilters.compose(config.filters ?? [], config),
        };
        if (this._config.queueLimit == undefined) {
            this._config.queueLimit = this._config.multiple ? undefined : 1;
        }
        this.events.config.next(this.config);
    }
    updateConfig(update) {
        this._config = Object.assign(this._config, update);
        this._config.filters = RdsUploadFilters.compose(this._config.filters, this._config);
        this._config = { ...this._config };
        this.events.config.next(this.config);
    }
    addToQueue(files, filters, bypassAutoUpload = false) {
        const list = [...files];
        const selectedFilters = this.getFilters(filters);
        const addedItems = [];
        list.forEach((file) => {
            const fileItem = this.addFileToQueue(file, selectedFilters);
            if (!fileItem) {
                return;
            }
            addedItems.push(fileItem);
            if (!bypassAutoUpload && this._config.autoUpload) {
                this.uploadItem(fileItem);
            }
        });
        this.events.queue.next(this.queue);
        return addedItems;
    }
    removeFromQueue(value) {
        const index = this.getIndexOfItem(value);
        if (index == null) {
            return false;
        }
        this.removeItem(index);
        return true;
    }
    clearQueue() {
        for (let i = this.queue.length; i >= 0; i--) {
            this.removeItem(i, false);
        }
        this.events.queue.next(this.queue);
    }
    uploadItem(value) {
        const index = this.getIndexOfItem(value);
        if (index == null) {
            return;
        }
        const item = this.queue[index];
        if ((this.isUploading && this._config.uploadSequentially) ||
            item.hasFailedFilters) {
            return;
        }
        if (!this.client) {
            throw new Error('Missing HttpClient! Pass it as a RdsUploader\'s constructor param or use "registerHttpClient" method to provide one.');
        }
        this.isUploading = true;
        const request = new RdsHttpClientWrapper(item, this._config, this.client);
        request.progress = (change) => this.onProgressItem(change);
        request.success = (change) => this.onSuccessItem(change);
        request.cancel = (change) => this.onCancelItem(change);
        request.error = (change) => this.onErrorItem(change);
        request.complete = (change) => this.onCompleteItem(change);
        item.onBeforeUpload();
        request.send();
        this.itemIdToRequest.set(item.id, request);
    }
    cancelItem(value) {
        const index = this.getIndexOfItem(value);
        if (index == null) {
            return;
        }
        const item = this.queue[index];
        if (item && item.isUploading) {
            const request = this.itemIdToRequest.get(item.id);
            request?.abort();
        }
    }
    uploadAll() {
        const items = this.queue.filter((item) => item.state !== 'success' && !item.isUploading && !item.hasFailedFilters);
        if (!items.length) {
            return;
        }
        items.forEach((item) => {
            this.uploadItem(item);
        });
    }
    cancelAll() {
        this.queue
            .filter((item) => item.isUploading)
            .forEach((item) => this.cancelItem(item));
    }
    destroy() {
        this.cancelAll();
        Object.values(this.events).forEach((subject) => subject.complete());
    }
    registerHttpClient(client) {
        this.client = client;
    }
    isHttpClientRegistered() {
        return !!this.client;
    }
    removeItem(index, emitEvent = true) {
        const fileItem = this.queue[index];
        if (fileItem.isUploading) {
            this.cancelItem(fileItem);
        }
        this.queue.splice(index, 1);
        this.itemIdToRequest.delete(fileItem.id);
        emitEvent && this.events.queue.next(this.queue);
    }
    getIndexOfItem(value) {
        if (typeof value === 'number') {
            return this.isValidIndex(value) ? value : null;
        }
        else {
            return this.queue.indexOf(value);
        }
    }
    isValidIndex(index) {
        return 0 <= index && index < this.queue.length;
    }
    getReadyItems() {
        return this.queue.filter((item) => item.state === 'ready');
    }
    onErrorItem(event) {
        event.item.onError();
        this.events.fileItemError.next(event);
    }
    onCompleteItem(change) {
        if (this._config.removeAfterUpload && change.item.state === 'success') {
            this.removeFromQueue(change.item);
        }
        this.events.fileItemCompleted.next(change);
        const nextItem = this.getReadyItems()[0];
        this.isUploading = false;
        if (nextItem) {
            this.uploadItem(nextItem);
            return;
        }
        this.events.allComplete.next();
    }
    addFileToQueue(file, filters) {
        const { isValid, failedFilters } = this.isValidFile(file, filters);
        if (!isValid) {
            this.events.fileInvalid.next({
                file,
                failedFilters,
                config: this.config,
            });
        }
        if (failedFilters.some((f) => f.preventsAddingToQueue)) {
            return null;
        }
        const fileItem = new RdsFileItem(file, failedFilters);
        this.queue.push(fileItem);
        return fileItem;
    }
    getFilters(filters) {
        if (!filters) {
            return this._config.filters;
        }
        if (Array.isArray(filters)) {
            return filters;
        }
        const names = filters.match(/[^\s,]+/g);
        if (!names) {
            return this._config.filters;
        }
        return this._config.filters.filter((filter) => names.includes(filter.name));
    }
    isValidFile(file, filters) {
        const failedFilters = [];
        filters.forEach((filter) => {
            if (!filter.fn(file, this.config, this.queue)) {
                failedFilters.push(filter);
            }
        });
        return { isValid: failedFilters.length === 0, failedFilters };
    }
    onProgressItem(change) {
        change.item.onProgress(change.progress);
    }
    onSuccessItem(change) {
        change.item.onSuccess();
        this.events.fileItemSuccess.next(change);
    }
    onCancelItem(change) {
        change.item.onAbort();
        this.events.fileItemCanceled.next(change);
    }
}

class RdsUploadIntlService {
    constructor() {
        this._change$ = new BehaviorSubject(RdsUploadIntlService.translations);
        this.change$ = this._change$.asObservable();
        this.fileItemUploadSuccessMessageFactory = (fileItem) => {
            return fileItem.file.name + ' upload completed successfully';
        };
        this.fileItemUploadErrorMessageFactory = (fileItem) => {
            return (fileItem.file.name +
                ' error: ' +
                RdsUploadIntlService.translations[fileItem.errorIntlToken]);
        };
        this.fileItemFilterFailedMessageFactory = (fileItem) => {
            return (fileItem.file.name +
                ' error: ' +
                RdsUploadIntlService.translations[fileItem.errorIntlToken]);
        };
        this.fileItemProgressMessageFactory = (progress) => {
            return progress == null ? '' : `${progress}% Uploaded`;
        };
    }
    static { this.translations = {
        EMPTY: '',
        chooseFilesButtonLabel: 'Upload',
        dropZoneChooseFiles: 'Upload',
        dropZoneOrDropFiles: 'or drop files here',
        uploadListAriaLabel: 'File upload queue',
        startUploadButtonLabel: 'Upload',
        retryButtonAriaLabel: 'Retry',
        cancelButtonAriaLabel: 'Cancel',
        uploadFailed: 'Upload failed.',
        [FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN]: '',
        [FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN]: 'File exceeds size limit.',
        [FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN]: 'Invalid file type.',
    }; }
    setTranslation(key, value) {
        RdsUploadIntlService.translations[key] = value;
        this._change$.next({ ...RdsUploadIntlService.translations });
    }
    setFileItemUploadSuccessMessageFactory(fn) {
        this.fileItemUploadSuccessMessageFactory = fn;
    }
    setFileItemUploadErrorMessageFactory(fn) {
        this.fileItemUploadErrorMessageFactory = fn;
    }
    setFileItemFilterFailedMessageFactory(fn) {
        this.fileItemFilterFailedMessageFactory = fn;
    }
    setFileItemProgressMessageFactory(fn) {
        this.fileItemProgressMessageFactory = fn;
    }
    getFileItemUploadSuccessMessage(fileItem) {
        return this.fileItemUploadSuccessMessageFactory(fileItem);
    }
    getFileItemUploadErrorMessage(fileItem) {
        return this.fileItemUploadErrorMessageFactory(fileItem);
    }
    getFileItemFilterFailedMessage(fileItem) {
        return this.fileItemFilterFailedMessageFactory(fileItem);
    }
    getFileItemProgressMessage(progress) {
        return this.fileItemProgressMessageFactory(progress);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadIntlService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadIntlService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadIntlService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class RdsUploadErrorDirective {
    constructor() {
        this.nativeElement = inject((ElementRef))
            .nativeElement;
        this.renderer = inject(Renderer2);
    }
    setId(id) {
        this.renderer.setAttribute(this.nativeElement, 'id', id);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadErrorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsUploadErrorDirective, selector: "rds-upload-error, [rds-upload-error], [rdsUploadError]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadErrorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `rds-upload-error, [rds-upload-error], [rdsUploadError]`,
                }]
        }] });

class RdsUploadDirective {
    constructor() {
        this.renderer = inject(Renderer2);
        this.nativeElement = inject(ElementRef).nativeElement;
        this.fileSelected = new EventEmitter();
        this.display = 'none';
        this.type = 'file';
    }
    set config(v) {
        this._config = v;
        this.onConfigChange();
    }
    onChange() {
        const files = Array.from(this.nativeElement.files ?? []);
        this.fileSelected.emit(files);
        this.nativeElement.value = '';
    }
    ngOnInit() {
        if (ngDevMode && !this._config) {
            throw new Error(`The "config" input is required, received "${JSON.stringify(this._config)}"`);
        }
        this.onConfigChange();
    }
    onConfigChange() {
        this._config.multiple
            ? this.renderer.setAttribute(this.nativeElement, 'multiple', '')
            : this.renderer.removeAttribute(this.nativeElement, 'multiple');
        const accept = this._config.accept?.join(',');
        accept
            ? this.renderer.setAttribute(this.nativeElement, 'accept', accept)
            : this.renderer.removeAttribute(this.nativeElement, 'accept');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsUploadDirective, selector: "input[rds-upload], input[rdsUpload]", inputs: { config: "config" }, outputs: { fileSelected: "fileSelected" }, host: { listeners: { "change": "onChange()" }, properties: { "style.display": "this.display", "type": "this.type" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rds-upload], input[rdsUpload]',
                }]
        }], propDecorators: { config: [{
                type: Input
            }], fileSelected: [{
                type: Output
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }], type: [{
                type: HostBinding,
                args: ['type']
            }], onChange: [{
                type: HostListener,
                args: ['change']
            }] } });

const RDS_DROPZONE_DRAGOVER_CLASS_TOKEN = 'rds-upload-drop-zone-dragover';
const RDS_DROPZONE_DISABLED_CLASS_TOKEN = 'rds-upload-drop-zone-disabled';
class RdsUploadDropZoneDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.renderer = inject(Renderer2);
        this._disabled = false;
        this.fileOver = new EventEmitter();
        this.fileDropped = new EventEmitter();
    }
    set disabled(v) {
        this._disabled = booleanAttribute(v);
        this.onDisabledChange();
    }
    get disabled() {
        return this._disabled;
    }
    onDragenter(e) {
        if (!this.hasFiles(e)) {
            return;
        }
        this.fileOver.emit(true);
        this.toggleDragoverClass(true);
    }
    onDragover(e) {
        if (!this.hasFiles(e)) {
            return;
        }
        e.dataTransfer.dropEffect = this.disabled ? 'none' : 'copy';
        // without this 'drop' event won't be fired in chrome
        e.preventDefault();
    }
    onDragleave() {
        this.fileOver.emit(false);
        this.toggleDragoverClass(false);
    }
    onDrop(e) {
        if (!this.hasFiles(e) || this.disabled) {
            return;
        }
        e.preventDefault();
        this.fileOver.emit(false);
        this.toggleDragoverClass(false);
        this.fileDropped.emit(Array.from(e.dataTransfer.files));
    }
    hasFiles(event) {
        return !!event.dataTransfer?.types?.includes('Files');
    }
    toggleDragoverClass(hasDragover) {
        if (hasDragover) {
            this.renderer.addClass(this.nativeElement, RDS_DROPZONE_DRAGOVER_CLASS_TOKEN);
        }
        else {
            this.renderer.removeClass(this.nativeElement, RDS_DROPZONE_DRAGOVER_CLASS_TOKEN);
        }
    }
    onDisabledChange() {
        if (this.disabled) {
            this.renderer.setAttribute(this.nativeElement, 'disabled', '');
            this.renderer.addClass(this.nativeElement, RDS_DROPZONE_DISABLED_CLASS_TOKEN);
        }
        else {
            this.renderer.removeAttribute(this.nativeElement, 'disabled');
            this.renderer.removeClass(this.nativeElement, RDS_DROPZONE_DISABLED_CLASS_TOKEN);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDropZoneDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsUploadDropZoneDirective, selector: "[rds-upload-drop-zone], [rdsUploadDropZone]", inputs: { disabled: "disabled" }, outputs: { fileOver: "fileOver", fileDropped: "fileDropped" }, host: { listeners: { "dragenter": "onDragenter($event)", "dragover": "onDragover($event)", "dragleave": "onDragleave()", "drop": "onDrop($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDropZoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-upload-drop-zone], [rdsUploadDropZone]',
                }]
        }], propDecorators: { disabled: [{
                type: Input
            }], fileOver: [{
                type: Output
            }], fileDropped: [{
                type: Output
            }], onDragenter: [{
                type: HostListener,
                args: ['dragenter', ['$event']]
            }], onDragover: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragleave: [{
                type: HostListener,
                args: ['dragleave']
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });

const THRESHOLD = 1024;
class RdsFileSizePipe {
    transform(sizeInBytes, decimalPrecision = 1) {
        if (sizeInBytes < THRESHOLD) {
            return sizeInBytes + 'B';
        }
        const units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
        let unitIndex = -1;
        const r = Math.pow(10, decimalPrecision);
        do {
            sizeInBytes /= THRESHOLD;
            ++unitIndex;
        } while (Math.round(sizeInBytes * r) / r >= THRESHOLD &&
            unitIndex < units.length - 1);
        return sizeInBytes.toFixed(decimalPrecision) + units[unitIndex];
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFileSizePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsFileSizePipe, name: "rdsFileSize" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsFileSizePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'rdsFileSize' }]
        }] });

let rdsUploadItemNextId = 0;
class RdsUploadListItemComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.intl = inject(RdsUploadIntlService);
        this.stateClass = '';
        this.ariaLiveContent = '';
        this.disabled = false;
        this.upload = new EventEmitter();
        this.remove = new EventEmitter();
        this.nameId = `rds-upload-item-${rdsUploadItemNextId++}-name`;
    }
    set size(v) {
        this._size = v;
        this.actionButtonSize = v === 'l' ? 'm' : 's';
    }
    get size() {
        return this._size;
    }
    get classes() {
        return [this.stateClass, `rds-upload-item-size-${this.size}`];
    }
    ngOnInit() {
        this.fileItem.state$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((state) => {
            this.stateClass = `rds-upload-item-${state}`;
            this.updateAriaLiveRegion();
            this.cdr.markForCheck();
        });
    }
    updateAriaLiveRegion() {
        if (this.fileItem.hasFailedFilters) {
            // we need to delay the update in case of immediately known errors, like incorrect file type,
            // because otherwise screen readers will miss the difference and won't announce anything
            setTimeout(() => {
                this.ariaLiveContent = this.intl.getFileItemFilterFailedMessage(this.fileItem);
                this.cdr.markForCheck();
            });
            return;
        }
        if (this.fileItem.state === 'success') {
            this.ariaLiveContent = this.intl.getFileItemUploadSuccessMessage(this.fileItem);
        }
        if (this.fileItem.state === 'error') {
            this.ariaLiveContent = this.intl.getFileItemUploadErrorMessage(this.fileItem);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsUploadListItemComponent, selector: "li[rds-upload-list-item], li[rdsUploadListItem]", inputs: { fileItem: "fileItem", disabled: ["disabled", "disabled", booleanAttribute], size: "size" }, outputs: { upload: "upload", remove: "remove" }, host: { properties: { "class": "this.classes", "attr.aria-labelledby": "this.nameId" } }, ngImport: i0, template: "@if (intl.change$ | async; as t) {\n  <div class=\"rds-upload-name-and-actions\">\n    <div class=\"rds-upload-name\" [id]=\"nameId\">{{ fileItem.file.name }}</div>\n    <div class=\"rds-upload-actions\">\n      <ng-content />\n      @if (fileItem.state === 'error') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-error\"\n          namespace=\"outlined\"\n          icon=\"warning_circle\"\n        />\n        @if (!fileItem.hasFailedFilters) {\n          <button\n            rds-icon-button\n            [attr.aria-label]=\"t.retryButtonAriaLabel\"\n            [disabled]=\"disabled\"\n            [size]=\"actionButtonSize\"\n            (click)=\"upload.emit(fileItem)\"\n          >\n            <rds-icon namespace=\"outlined\" icon=\"repeat\" />\n          </button>\n        }\n      }\n      @if (fileItem.state === 'success') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-success\"\n          namespace=\"outlined\"\n          icon=\"checkmark_circle\"\n        />\n      } @else {\n        <button\n          rds-icon-button\n          [attr.aria-label]=\"t.cancelButtonAriaLabel\"\n          [disabled]=\"disabled\"\n          [size]=\"actionButtonSize\"\n          (click)=\"remove.emit(fileItem)\"\n        >\n          <rds-icon namespace=\"outlined\" icon=\"close\" />\n        </button>\n      }\n    </div>\n  </div>\n  @if ({ progress: fileItem.progress$ | async }; as fi) {\n    @if (!fileItem.hasFailedFilters) {\n      <rds-progress-bar\n        [mode]=\"fi.progress === null ? 'indeterminate' : 'determinate'\"\n        [value]=\"fi.progress\"\n      />\n    }\n    <div class=\"rds-upload-size-and-state\">\n      <span class=\"rds-upload-size\">{{\n        fileItem.file.size | rdsFileSize\n      }}</span>\n      {{ fileItem.isUploading || t[fileItem.errorIntlToken] ? '-' : '' }}\n      @if (fileItem.isUploading) {\n        <span>{{ intl.getFileItemProgressMessage(fi.progress) }}</span>\n      }\n      @if (fileItem.errorIntlToken !== 'EMPTY') {\n        <span>{{ t[fileItem.errorIntlToken] }}</span>\n      }\n      <div class=\"sr-only\" aria-live=\"polite\">\n        {{ ariaLiveContent }}\n      </div>\n    </div>\n  }\n}\n", styles: [":host.rds-upload-item-success .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-success)}:host.rds-upload-item-error .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-error)}:host.rds-upload-item-error .rds-upload-size-and-state,:host.rds-upload-item-error .rds-upload-size-and-state>.rds-upload-size{color:var(--rds-color-error)}:host.rds-upload-item-size-s .rds-upload-name-and-actions{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-s .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-m .rds-upload-name-and-actions{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-m .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-l .rds-upload-name-and-actions{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-l .rds-upload-name-and-actions .rds-upload-status-icon{width:24px;height:24px}.rds-upload-name-and-actions{display:flex;align-items:center;justify-content:space-between;gap:16px}.rds-upload-name-and-actions .rds-upload-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rds-upload-name-and-actions .rds-upload-actions{display:flex;align-items:center;justify-content:flex-end;gap:16px}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon{display:inline-flex}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-success{color:var(--rds-color-success)}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-error{color:var(--rds-color-error)}.rds-progress-bar{margin-block:8px 0}.rds-upload-size-and-state{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-top:4px;color:var(--rds-color-grey-3)}.rds-upload-size-and-state .rds-upload-size{color:var(--rds-color-low-contrast)}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: RdsProgressBarComponent, selector: "rds-progress-bar", inputs: ["value", "bufferValue", "mode"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }, { kind: "pipe", type: RdsFileSizePipe, name: "rdsFileSize" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadListItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'li[rds-upload-list-item], li[rdsUploadListItem]', changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (intl.change$ | async; as t) {\n  <div class=\"rds-upload-name-and-actions\">\n    <div class=\"rds-upload-name\" [id]=\"nameId\">{{ fileItem.file.name }}</div>\n    <div class=\"rds-upload-actions\">\n      <ng-content />\n      @if (fileItem.state === 'error') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-error\"\n          namespace=\"outlined\"\n          icon=\"warning_circle\"\n        />\n        @if (!fileItem.hasFailedFilters) {\n          <button\n            rds-icon-button\n            [attr.aria-label]=\"t.retryButtonAriaLabel\"\n            [disabled]=\"disabled\"\n            [size]=\"actionButtonSize\"\n            (click)=\"upload.emit(fileItem)\"\n          >\n            <rds-icon namespace=\"outlined\" icon=\"repeat\" />\n          </button>\n        }\n      }\n      @if (fileItem.state === 'success') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-success\"\n          namespace=\"outlined\"\n          icon=\"checkmark_circle\"\n        />\n      } @else {\n        <button\n          rds-icon-button\n          [attr.aria-label]=\"t.cancelButtonAriaLabel\"\n          [disabled]=\"disabled\"\n          [size]=\"actionButtonSize\"\n          (click)=\"remove.emit(fileItem)\"\n        >\n          <rds-icon namespace=\"outlined\" icon=\"close\" />\n        </button>\n      }\n    </div>\n  </div>\n  @if ({ progress: fileItem.progress$ | async }; as fi) {\n    @if (!fileItem.hasFailedFilters) {\n      <rds-progress-bar\n        [mode]=\"fi.progress === null ? 'indeterminate' : 'determinate'\"\n        [value]=\"fi.progress\"\n      />\n    }\n    <div class=\"rds-upload-size-and-state\">\n      <span class=\"rds-upload-size\">{{\n        fileItem.file.size | rdsFileSize\n      }}</span>\n      {{ fileItem.isUploading || t[fileItem.errorIntlToken] ? '-' : '' }}\n      @if (fileItem.isUploading) {\n        <span>{{ intl.getFileItemProgressMessage(fi.progress) }}</span>\n      }\n      @if (fileItem.errorIntlToken !== 'EMPTY') {\n        <span>{{ t[fileItem.errorIntlToken] }}</span>\n      }\n      <div class=\"sr-only\" aria-live=\"polite\">\n        {{ ariaLiveContent }}\n      </div>\n    </div>\n  }\n}\n", styles: [":host.rds-upload-item-success .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-success)}:host.rds-upload-item-error .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-error)}:host.rds-upload-item-error .rds-upload-size-and-state,:host.rds-upload-item-error .rds-upload-size-and-state>.rds-upload-size{color:var(--rds-color-error)}:host.rds-upload-item-size-s .rds-upload-name-and-actions{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-s .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-m .rds-upload-name-and-actions{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-m .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-l .rds-upload-name-and-actions{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-l .rds-upload-name-and-actions .rds-upload-status-icon{width:24px;height:24px}.rds-upload-name-and-actions{display:flex;align-items:center;justify-content:space-between;gap:16px}.rds-upload-name-and-actions .rds-upload-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rds-upload-name-and-actions .rds-upload-actions{display:flex;align-items:center;justify-content:flex-end;gap:16px}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon{display:inline-flex}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-success{color:var(--rds-color-success)}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-error{color:var(--rds-color-error)}.rds-progress-bar{margin-block:8px 0}.rds-upload-size-and-state{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-top:4px;color:var(--rds-color-grey-3)}.rds-upload-size-and-state .rds-upload-size{color:var(--rds-color-low-contrast)}\n"] }]
        }], propDecorators: { fileItem: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], size: [{
                type: Input
            }], upload: [{
                type: Output
            }], remove: [{
                type: Output
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }], nameId: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }] } });

let nextId$2 = 0;
class RdsUploadComponent {
    get hasError() {
        return !!(this.ngControl && this.ngControl.errors);
    }
    set uploader(uploader) {
        this._uploader = uploader;
        if (!this._uploader.isHttpClientRegistered()) {
            this._uploader.registerHttpClient(this.httpClient);
        }
    }
    get uploader() {
        return this._uploader;
    }
    get class() {
        return [`rds-upload-size-${this.size}`];
    }
    constructor() {
        this.intl = inject(RdsUploadIntlService);
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.httpClient = inject(HttpClient);
        this.ngControl = inject(NgControl, {
            self: true,
            optional: true,
        });
        this.ariaErrorMessage = null;
        this.onChange = noop;
        this.onTouched = noop;
        this.size = 'm';
        this.hasBackground = false;
        this.hasDropZone = false;
        this.disabled = false;
        // can be used to transform/filter the files before they get added to the queue
        this.beforeAddFn = (files) => files;
        if (this.ngControl != null) {
            // Setting the value accessor directly (instead of using
            // the providers) to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
    }
    ngOnInit() {
        this.uploader.config$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr.markForCheck());
        this.uploader.queue$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((v) => this.onChange(v));
        if (this.ngControl) {
            // Setting the validator directly (instead of using
            // the providers) to avoid running into a circular import.
            this.ngControl.control?.addValidators((control) => this.validate(control));
            this.ngControl.statusChanges
                ?.pipe(filter((status) => status === 'VALID' && !!this.uploader.config.autoUpload), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this.uploader.uploadAll());
        }
    }
    ngAfterContentInit() {
        this.errors.changes
            .pipe(startWith(this.errors), takeUntilDestroyed(this.destroyRef))
            .subscribe((errors) => this.setupErrors(errors));
    }
    ngOnDestroy() {
        this.uploader?.destroy();
    }
    onFilesSelected(files) {
        this.onTouched();
        this.uploader.addToQueue(this.beforeAddFn(files), [], !!this.ngControl);
    }
    writeValue(files) {
        this.uploader.addToQueue(files);
    }
    registerOnChange(onChange) {
        this.onChange = onChange;
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState(disabled) {
        if (this.disabled !== disabled) {
            this.disabled = disabled;
            this.cdr.markForCheck();
        }
    }
    validate(control) {
        if (!control.value) {
            return null;
        }
        const errors = control.value.reduce((acc, curr) => {
            if (!curr.hasFailedFilters) {
                return acc;
            }
            curr.failedFilters.forEach((failedFilter) => {
                if (acc[failedFilter.name]) {
                    acc[failedFilter.name].push(curr.file.name);
                }
                else {
                    acc[failedFilter.name] = [curr.file.name];
                }
            });
            return acc;
        }, {});
        if (Object.keys(errors).length > 0) {
            return errors;
        }
        return null;
    }
    openDialog() {
        this.fileInput?.nativeElement.click();
    }
    setupErrors(errors) {
        const errorMessageIds = [];
        errors.forEach((err) => {
            const id = `rds-upload-error-${nextId$2++}`;
            err.setId(id);
            errorMessageIds.push(id);
        });
        this.ariaErrorMessage = errorMessageIds.length
            ? errorMessageIds.join(',')
            : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsUploadComponent, selector: "rds-upload", inputs: { size: "size", hasBackground: ["hasBackground", "hasBackground", booleanAttribute], uploader: "uploader", hasDropZone: ["hasDropZone", "hasDropZone", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], beforeAddFn: "beforeAddFn" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "errors", predicate: RdsUploadErrorDirective }], viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true }], exportAs: ["rdsUpload"], ngImport: i0, template: "@if (intl.change$ | async; as t) {\n  @if (hasDropZone) {\n    <button\n      rds-upload-drop-zone\n      [disabled]=\"disabled\"\n      (click)=\"openDialog()\"\n      (fileDropped)=\"onFilesSelected($event)\"\n      [attr.aria-errormessage]=\"ariaErrorMessage\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"upload\" />\n      <strong>{{ t.dropZoneChooseFiles }}</strong>\n      {{ t.dropZoneOrDropFiles }}\n    </button>\n  } @else {\n    <button\n      rds-secondary-button\n      class=\"rds-upload-simple-button\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      (click)=\"openDialog()\"\n      [attr.aria-errormessage]=\"ariaErrorMessage\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"upload\" />\n      {{ t.chooseFilesButtonLabel }}\n    </button>\n  }\n  <div class=\"rds-upload-error-container\">\n    <ng-content\n      select=\"rds-upload-error, [rds-upload-error], [rdsUploadError]\"\n    />\n  </div>\n  <input\n    #fileInput\n    rds-upload\n    [config]=\"uploader.config\"\n    (fileSelected)=\"onFilesSelected($event)\"\n  />\n  <ul\n    [class.rds-upload-item-with-background]=\"hasBackground\"\n    [attr.aria-label]=\"t.uploadListAriaLabel\"\n  >\n    @for (item of uploader.queue; track item) {\n      <li\n        rds-upload-list-item\n        [disabled]=\"disabled\"\n        [size]=\"size\"\n        [fileItem]=\"item\"\n        (remove)=\"uploader.removeFromQueue($event)\"\n        (upload)=\"uploader.uploadItem($event)\"\n      ></li>\n    }\n  </ul>\n  @if (!uploader.config.autoUpload && uploader.queue.length) {\n    <button\n      rds-primary-button\n      [size]=\"size\"\n      [disabled]=\"uploader.isUploading || disabled || hasError\"\n      (click)=\"uploader.uploadAll()\"\n    >\n      {{ t.startUploadButtonLabel }}\n    </button>\n  }\n}\n", styles: [":host{display:block}:host.rds-upload-size-s [rds-upload-drop-zone]{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:16px 32px}:host.rds-upload-size-s [rds-upload-drop-zone] strong{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-size-s li+li{margin-top:8px}:host.rds-upload-size-s ul.rds-upload-item-with-background li{padding:8px}:host.rds-upload-size-s ul.rds-upload-item-with-background li+li{margin-top:4px}:host.rds-upload-size-m [rds-upload-drop-zone]{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:24px 32px}:host.rds-upload-size-m [rds-upload-drop-zone] strong{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-size-m li+li{margin-top:16px}:host.rds-upload-size-m ul.rds-upload-item-with-background li{padding:12px}:host.rds-upload-size-m ul.rds-upload-item-with-background li+li{margin-top:4px}:host.rds-upload-size-l [rds-upload-drop-zone]{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:32px}:host.rds-upload-size-l [rds-upload-drop-zone] strong{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-size-l li+li{margin-top:24px}:host.rds-upload-size-l ul.rds-upload-item-with-background li{padding:16px}:host.rds-upload-size-l ul.rds-upload-item-with-background li+li{margin-top:8px}:host [rds-upload-drop-zone]{display:flex;align-items:center;justify-content:center;gap:8px;width:100%;cursor:pointer;background-color:var(--rds-color-bg-base-1);border:1px dashed var(--rds-color-grey-2);border-radius:2px;color:var(--rds-color-high-contrast)}:host [rds-upload-drop-zone] rds-icon{height:18px;width:18px}:host [rds-upload-drop-zone] rds-icon,:host [rds-upload-drop-zone] strong{color:var(--rds-color-informative);pointer-events:none}:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled).rds-upload-drop-zone-dragover,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):hover{border-color:var(--rds-color-bg-informative-hover)}:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled).rds-upload-drop-zone-dragover rds-icon,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled).rds-upload-drop-zone-dragover strong,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):hover rds-icon,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):hover strong{color:var(--rds-color-bg-informative-hover)}:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}:host.ng-invalid:not(.ng-untouched) [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled,[disabled]),:host.ng-invalid:not(.ng-untouched) .rds-upload-simple-button:not(.rds-upload-drop-zone-disabled,[disabled]){border-color:var(--rds-color-error);color:var(--rds-color-error)}:host.ng-invalid:not(.ng-untouched) [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled,[disabled]) rds-icon,:host.ng-invalid:not(.ng-untouched) [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled,[disabled]) strong,:host.ng-invalid:not(.ng-untouched) .rds-upload-simple-button:not(.rds-upload-drop-zone-disabled,[disabled]) rds-icon,:host.ng-invalid:not(.ng-untouched) .rds-upload-simple-button:not(.rds-upload-drop-zone-disabled,[disabled]) strong{color:inherit}:host .rds-upload-drop-zone-disabled,:host button[disabled]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled);cursor:not-allowed}:host .rds-upload-drop-zone-disabled rds-icon,:host .rds-upload-drop-zone-disabled strong,:host button[disabled] rds-icon,:host button[disabled] strong{color:inherit}:host ul{list-style-type:none;margin-top:24px;padding-left:0}:host ul>li:before{display:none}:host ul.rds-upload-item-with-background li{background-color:var(--rds-color-bg-disabled)}:host ul+button{display:flex;margin-top:24px;margin-left:auto}:host .rds-upload-error-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-top:8px;color:var(--rds-color-error)}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: RdsButtonComponent, selector: "\n    button[rds-primary-button],\n    button[rds-warning-button],\n    button[rds-secondary-button],\n    button[rds-secondary-warning-button],\n    button[rdsPrimaryButton],\n    button[rdsWarningButton],\n    button[rdsSecondaryButton],\n    button[rdsSecondaryWarningButton],\n  " }, { kind: "directive", type: RdsUploadDirective, selector: "input[rds-upload], input[rdsUpload]", inputs: ["config"], outputs: ["fileSelected"] }, { kind: "directive", type: RdsUploadDropZoneDirective, selector: "[rds-upload-drop-zone], [rdsUploadDropZone]", inputs: ["disabled"], outputs: ["fileOver", "fileDropped"] }, { kind: "component", type: RdsUploadListItemComponent, selector: "li[rds-upload-list-item], li[rdsUploadListItem]", inputs: ["fileItem", "disabled", "size"], outputs: ["upload", "remove"] }, { kind: "pipe", type: i1$1.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-upload', exportAs: 'rdsUpload', changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (intl.change$ | async; as t) {\n  @if (hasDropZone) {\n    <button\n      rds-upload-drop-zone\n      [disabled]=\"disabled\"\n      (click)=\"openDialog()\"\n      (fileDropped)=\"onFilesSelected($event)\"\n      [attr.aria-errormessage]=\"ariaErrorMessage\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"upload\" />\n      <strong>{{ t.dropZoneChooseFiles }}</strong>\n      {{ t.dropZoneOrDropFiles }}\n    </button>\n  } @else {\n    <button\n      rds-secondary-button\n      class=\"rds-upload-simple-button\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      (click)=\"openDialog()\"\n      [attr.aria-errormessage]=\"ariaErrorMessage\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"upload\" />\n      {{ t.chooseFilesButtonLabel }}\n    </button>\n  }\n  <div class=\"rds-upload-error-container\">\n    <ng-content\n      select=\"rds-upload-error, [rds-upload-error], [rdsUploadError]\"\n    />\n  </div>\n  <input\n    #fileInput\n    rds-upload\n    [config]=\"uploader.config\"\n    (fileSelected)=\"onFilesSelected($event)\"\n  />\n  <ul\n    [class.rds-upload-item-with-background]=\"hasBackground\"\n    [attr.aria-label]=\"t.uploadListAriaLabel\"\n  >\n    @for (item of uploader.queue; track item) {\n      <li\n        rds-upload-list-item\n        [disabled]=\"disabled\"\n        [size]=\"size\"\n        [fileItem]=\"item\"\n        (remove)=\"uploader.removeFromQueue($event)\"\n        (upload)=\"uploader.uploadItem($event)\"\n      ></li>\n    }\n  </ul>\n  @if (!uploader.config.autoUpload && uploader.queue.length) {\n    <button\n      rds-primary-button\n      [size]=\"size\"\n      [disabled]=\"uploader.isUploading || disabled || hasError\"\n      (click)=\"uploader.uploadAll()\"\n    >\n      {{ t.startUploadButtonLabel }}\n    </button>\n  }\n}\n", styles: [":host{display:block}:host.rds-upload-size-s [rds-upload-drop-zone]{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:16px 32px}:host.rds-upload-size-s [rds-upload-drop-zone] strong{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-size-s li+li{margin-top:8px}:host.rds-upload-size-s ul.rds-upload-item-with-background li{padding:8px}:host.rds-upload-size-s ul.rds-upload-item-with-background li+li{margin-top:4px}:host.rds-upload-size-m [rds-upload-drop-zone]{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:24px 32px}:host.rds-upload-size-m [rds-upload-drop-zone] strong{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-size-m li+li{margin-top:16px}:host.rds-upload-size-m ul.rds-upload-item-with-background li{padding:12px}:host.rds-upload-size-m ul.rds-upload-item-with-background li+li{margin-top:4px}:host.rds-upload-size-l [rds-upload-drop-zone]{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:32px}:host.rds-upload-size-l [rds-upload-drop-zone] strong{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-size-l li+li{margin-top:24px}:host.rds-upload-size-l ul.rds-upload-item-with-background li{padding:16px}:host.rds-upload-size-l ul.rds-upload-item-with-background li+li{margin-top:8px}:host [rds-upload-drop-zone]{display:flex;align-items:center;justify-content:center;gap:8px;width:100%;cursor:pointer;background-color:var(--rds-color-bg-base-1);border:1px dashed var(--rds-color-grey-2);border-radius:2px;color:var(--rds-color-high-contrast)}:host [rds-upload-drop-zone] rds-icon{height:18px;width:18px}:host [rds-upload-drop-zone] rds-icon,:host [rds-upload-drop-zone] strong{color:var(--rds-color-informative);pointer-events:none}:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled).rds-upload-drop-zone-dragover,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):hover{border-color:var(--rds-color-bg-informative-hover)}:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled).rds-upload-drop-zone-dragover rds-icon,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled).rds-upload-drop-zone-dragover strong,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):hover rds-icon,:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):hover strong{color:var(--rds-color-bg-informative-hover)}:host [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled):focus-visible{outline:2px solid var(--rds-color-stroke-active-focus)}:host.ng-invalid:not(.ng-untouched) [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled,[disabled]),:host.ng-invalid:not(.ng-untouched) .rds-upload-simple-button:not(.rds-upload-drop-zone-disabled,[disabled]){border-color:var(--rds-color-error);color:var(--rds-color-error)}:host.ng-invalid:not(.ng-untouched) [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled,[disabled]) rds-icon,:host.ng-invalid:not(.ng-untouched) [rds-upload-drop-zone]:not(.rds-upload-drop-zone-disabled,[disabled]) strong,:host.ng-invalid:not(.ng-untouched) .rds-upload-simple-button:not(.rds-upload-drop-zone-disabled,[disabled]) rds-icon,:host.ng-invalid:not(.ng-untouched) .rds-upload-simple-button:not(.rds-upload-drop-zone-disabled,[disabled]) strong{color:inherit}:host .rds-upload-drop-zone-disabled,:host button[disabled]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled);cursor:not-allowed}:host .rds-upload-drop-zone-disabled rds-icon,:host .rds-upload-drop-zone-disabled strong,:host button[disabled] rds-icon,:host button[disabled] strong{color:inherit}:host ul{list-style-type:none;margin-top:24px;padding-left:0}:host ul>li:before{display:none}:host ul.rds-upload-item-with-background li{background-color:var(--rds-color-bg-disabled)}:host ul+button{display:flex;margin-top:24px;margin-left:auto}:host .rds-upload-error-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-top:8px;color:var(--rds-color-error)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { size: [{
                type: Input
            }], hasBackground: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], uploader: [{
                type: Input
            }], hasDropZone: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], fileInput: [{
                type: ViewChild,
                args: ['fileInput']
            }], errors: [{
                type: ContentChildren,
                args: [RdsUploadErrorDirective]
            }], beforeAddFn: [{
                type: Input
            }] } });

const publicElements = [
    RdsUploadComponent,
    RdsUploadDirective,
    RdsUploadDropZoneDirective,
    RdsFileSizePipe,
    RdsUploadListItemComponent,
    RdsUploadErrorDirective,
];
class RdsUploadModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadModule, declarations: [RdsUploadComponent,
            RdsUploadDirective,
            RdsUploadDropZoneDirective,
            RdsFileSizePipe,
            RdsUploadListItemComponent,
            RdsUploadErrorDirective], imports: [CommonModule,
            RdsIconComponent,
            RdsButtonModule,
            RdsProgressBarModule], exports: [RdsUploadComponent,
            RdsUploadDirective,
            RdsUploadDropZoneDirective,
            RdsFileSizePipe,
            RdsUploadListItemComponent,
            RdsUploadErrorDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadModule, imports: [CommonModule,
            RdsButtonModule,
            RdsProgressBarModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadModule, decorators: [{
            type: NgModule,
            args: [{
                    exports: [...publicElements],
                    declarations: [...publicElements],
                    imports: [
                        CommonModule,
                        RdsIconComponent,
                        RdsButtonModule,
                        RdsProgressBarModule,
                    ],
                }]
        }] });

let nextId$1 = 0;
class RdsAnchorMenuComponent {
    constructor() {
        this.headerId = `rds-anchor-menu-header-${nextId$1++}`;
    }
    get labelledBy() {
        return this.navAriaLabel ? undefined : this.headerId;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsAnchorMenuComponent, selector: "rds-anchor-menu", inputs: { navAriaLabel: "navAriaLabel" }, ngImport: i0, template: "<section>\n  <header [id]=\"headerId\">\n    <ng-content\n      select=\"rds-anchor-menu-title, [rds-anchor-menu-title], [rdsAnchorMenuTitle]\"\n    />\n  </header>\n  <nav [attr.aria-labelledby]=\"labelledBy\" [attr.aria-label]=\"navAriaLabel\">\n    <ng-content />\n  </nav>\n</section>\n", styles: ["header{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-grey-3)}header:not(:empty){margin-bottom:12px}nav{display:flex;flex-direction:column}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-anchor-menu', changeDetection: ChangeDetectionStrategy.OnPush, template: "<section>\n  <header [id]=\"headerId\">\n    <ng-content\n      select=\"rds-anchor-menu-title, [rds-anchor-menu-title], [rdsAnchorMenuTitle]\"\n    />\n  </header>\n  <nav [attr.aria-labelledby]=\"labelledBy\" [attr.aria-label]=\"navAriaLabel\">\n    <ng-content />\n  </nav>\n</section>\n", styles: ["header{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-grey-3)}header:not(:empty){margin-bottom:12px}nav{display:flex;flex-direction:column}\n"] }]
        }], propDecorators: { navAriaLabel: [{
                type: Input
            }] } });

class RdsAnchorMenuItemComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.classes = 'rds-anchor-menu-item';
        this.isActive = false;
        this.killItemSubscription$ = new Subject();
    }
    ngOnInit() {
        this.subscribeItem();
    }
    ngOnChanges(changes) {
        if (changes['item'] && !changes['item'].isFirstChange()) {
            this.killItemSubscription$.next();
            this.subscribeItem();
        }
    }
    ngOnDestroy() {
        this.killItemSubscription$.complete();
    }
    subscribeItem() {
        this.item?.isActive$
            .pipe(filter((v) => v !== this.isActive), takeUntil(this.killItemSubscription$), takeUntilDestroyed(this.destroyRef))
            .subscribe((v) => {
            this.isActive = v;
            this.cdr.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsAnchorMenuItemComponent, selector: "a[rdsAnchorMenuItem], a[rds-anchor-menu-item]", inputs: { item: ["rdsAnchorMenuItem", "item"] }, host: { properties: { "class": "this.classes", "class.rds-anchor-menu-item-active": "this.isActive" } }, usesOnChanges: true, ngImport: i0, template: "<ng-content />\n", styles: [".rds-anchor-menu-item{--rds-anchor-menu-item-shadow-color: var(--rds-color-grey-1);font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 16px;box-shadow:inset 1px 0 0 0 var(--rds-anchor-menu-item-shadow-color);text-decoration:none;color:var(--rds-color-low-contrast)}.rds-anchor-menu-item:hover{--rds-anchor-menu-item-shadow-color: var(--rds-color-informative);color:var(--rds-color-high-contrast)}.rds-anchor-menu-item:focus-visible{border-radius:2px;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:-2px}.rds-anchor-menu-item-active,.rds-anchor-menu-item-active:hover{--rds-anchor-menu-item-shadow-color: var(--rds-color-informative);color:var(--rds-color-informative)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'a[rdsAnchorMenuItem], a[rds-anchor-menu-item]', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<ng-content />\n", styles: [".rds-anchor-menu-item{--rds-anchor-menu-item-shadow-color: var(--rds-color-grey-1);font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 16px;box-shadow:inset 1px 0 0 0 var(--rds-anchor-menu-item-shadow-color);text-decoration:none;color:var(--rds-color-low-contrast)}.rds-anchor-menu-item:hover{--rds-anchor-menu-item-shadow-color: var(--rds-color-informative);color:var(--rds-color-high-contrast)}.rds-anchor-menu-item:focus-visible{border-radius:2px;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:-2px}.rds-anchor-menu-item-active,.rds-anchor-menu-item-active:hover{--rds-anchor-menu-item-shadow-color: var(--rds-color-informative);color:var(--rds-color-informative)}\n"] }]
        }], propDecorators: { item: [{
                type: Input,
                args: ['rdsAnchorMenuItem']
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }], isActive: [{
                type: HostBinding,
                args: ['class.rds-anchor-menu-item-active']
            }] } });

class RdsAnchorMenuSectionDirective {
    constructor() {
        this._element = inject((ElementRef));
    }
    ngOnInit() {
        if (isDevMode() && !this.id) {
            throw new Error('You must specify an id input for rds-anchor-menu-section');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuSectionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAnchorMenuSectionDirective, selector: "[rds-anchor-menu-section], [rdsAnchorMenuSection]", inputs: { id: "id", label: "label" }, host: { properties: { "id": "this.id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuSectionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-anchor-menu-section], [rdsAnchorMenuSection]',
                }]
        }], propDecorators: { id: [{
                type: HostBinding,
                args: ['id']
            }, {
                type: Input
            }], label: [{
                type: Input
            }] } });

/* eslint-disable @typescript-eslint/no-non-null-assertion */
class IntersectionObserverFactory {
    create(callback, options) {
        return typeof IntersectionObserver === 'undefined'
            ? null
            : new IntersectionObserver(callback, options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: IntersectionObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: IntersectionObserverFactory, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: IntersectionObserverFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
class IntersectionObserverRx {
    constructor() {
        this.intersectionObserverFactory = inject(IntersectionObserverFactory);
        this._observedElements = new Map();
    }
    ngOnDestroy() {
        this._observedElements.forEach((_, element) => this._cleanupObserver(element));
    }
    observe(elementOrRef, options) {
        const element = coerceElement(elementOrRef);
        return new Observable((observer) => {
            const stream = this._observeElement(element, options);
            const subscription = stream.subscribe(observer);
            return () => {
                subscription.unsubscribe();
                this._unobserveElement(element);
            };
        });
    }
    _observeElement(element, options) {
        if (!this._observedElements.has(element)) {
            const stream = new Subject();
            const observer = this.intersectionObserverFactory.create((mutations) => stream.next(mutations), options);
            if (observer) {
                observer.observe(element);
            }
            this._observedElements.set(element, { observer, stream, count: 1 });
        }
        else {
            this._observedElements.get(element).count++;
        }
        return this._observedElements.get(element).stream;
    }
    _unobserveElement(element) {
        if (this._observedElements.has(element)) {
            this._observedElements.get(element).count--;
            if (!this._observedElements.get(element).count) {
                this._cleanupObserver(element);
            }
        }
    }
    _cleanupObserver(element) {
        if (this._observedElements.has(element)) {
            const { observer, stream } = this._observedElements.get(element);
            if (observer) {
                observer.disconnect();
            }
            stream.complete();
            this._observedElements.delete(element);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: IntersectionObserverRx, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: IntersectionObserverRx }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: IntersectionObserverRx, decorators: [{
            type: Injectable
        }] });

let nextId = 0;
const DEFAULT_OBSERVER_CONFIG = Object.freeze({
    rootMargin: '-10% 0px -70%',
    threshold: 0.02,
});
class RdsAnchorMenuSectionsContainerDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.activeRoute = inject(ActivatedRoute);
        this.intersectionObserver = inject(IntersectionObserverRx);
        this.cdr = inject(ChangeDetectorRef);
        this._sections$ = new BehaviorSubject([]);
        this.killIntersectionSubscriptions$ = new Subject();
        this.activeSection$ = new BehaviorSubject(undefined);
        this.sections$ = this._sections$.asObservable();
        this.id = `rdsAnchorMenuSectionsContainer-${nextId++}`;
        this.scrollIntoViewOptions = {
            behavior: 'smooth',
        };
    }
    ngAfterContentInit() {
        this.sectionQuery.changes
            .pipe(startWith(this.sectionQuery), map((sections) => this.queryListToAnchorMenuSectionData(sections)), takeUntilDestroyed(this.destroyRef))
            .subscribe((v) => {
            this._sections$.next(v);
            // Force change detection cause otherwise we get ExpressionChangedAfterItHasBeenCheckedError"
            // Deferring value propagation helps only in case of initial value
            this.cdr.detectChanges();
        });
    }
    ngAfterViewInit() {
        this.activeRoute.fragment
            .pipe(map((fragment) => {
            return fragment
                ? this.sectionQuery.find((section) => section.id === fragment)
                : null;
        }), takeUntilDestroyed(this.destroyRef))
            .subscribe((target) => {
            if (!target) {
                return;
            }
            target._element.nativeElement.scrollIntoView(this.scrollIntoViewOptions);
            if (typeof this.scrollIntoViewOptions !== 'object' ||
                this.scrollIntoViewOptions.behavior !== 'smooth') {
                // intersection observer might be confused in case of an instant scroll
                // we emit correct active section just a tiny bit after its events are handled
                setTimeout(() => {
                    this.activeSection$.next(target);
                }, 100);
            }
        });
    }
    ngOnDestroy() {
        this.killIntersectionSubscriptions$.complete();
    }
    queryListToAnchorMenuSectionData(list) {
        this.killIntersectionSubscriptions$.next();
        return list.map((section, index) => {
            this.createIntersectionObservable(section)
                .pipe(withLatestFrom(this.activeSection$), takeUntil(this.killIntersectionSubscriptions$), takeUntilDestroyed(this.destroyRef))
                .subscribe(([entry, activeSection]) => this.onIntersectionEvent(entry, index, activeSection));
            return {
                section,
                isActive$: this.activeSection$.pipe(map((active) => active === section)),
            };
        });
    }
    onIntersectionEvent(entry, sectionIndex, activeSection) {
        const section = this._sections$.value[sectionIndex].section;
        if (entry.isIntersecting) {
            const nextSection = this._sections$.value[sectionIndex + 1]?.section;
            if (nextSection && nextSection === activeSection) {
                // this is the event which occurs when previous section is entering intersection area
                // we want to ignore it because change is emitted when user scrolls further and the current section leaves
                return;
            }
            this.activeSection$.next(section);
            return;
        }
        if (this.isScrolledOutDownwards(entry)) {
            // user scrolls up, so the section is lower than rootBounds,
            // so we emit previous item as the active one
            const previousItemIndex = sectionIndex > 0 ? sectionIndex - 1 : 0;
            this.activeSection$.next(this._sections$.value[previousItemIndex]?.section);
        }
    }
    createIntersectionObservable(section) {
        // emit section once it's intersecting
        return this.intersectionObserver
            .observe(section._element.nativeElement, {
            ...DEFAULT_OBSERVER_CONFIG,
            ...this.intersectionObserverOptions,
        })
            .pipe(map((entries) => entries[0]), 
        // we don't need any information about the section until its first intersection,
        // it makes initialization process and active item logic harder to manage
        skipWhile((entry) => !entry.isIntersecting));
    }
    isScrolledOutDownwards(entry) {
        // honestly I haven't found any mention of rootBounds being nullable value in MDN
        // but Typescript says it could be null, so we're setting fallback value that should
        // be reasonable in most cases
        const rootBounds = entry.rootBounds ||
            {
                bottom: 200,
            };
        return (!entry.isIntersecting &&
            entry.boundingClientRect.bottom > rootBounds.bottom);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuSectionsContainerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAnchorMenuSectionsContainerDirective, selector: "[rds-anchor-menu-sections-container], [rdsAnchorMenuSectionsContainer]", inputs: { intersectionObserverOptions: "intersectionObserverOptions", scrollIntoViewOptions: "scrollIntoViewOptions" }, providers: [IntersectionObserverRx], queries: [{ propertyName: "sectionQuery", predicate: RdsAnchorMenuSectionDirective, descendants: true }], exportAs: ["rdsAnchorMenuSectionsContainer"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuSectionsContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-anchor-menu-sections-container], [rdsAnchorMenuSectionsContainer]',
                    exportAs: 'rdsAnchorMenuSectionsContainer',
                    providers: [IntersectionObserverRx],
                }]
        }], propDecorators: { sectionQuery: [{
                type: ContentChildren,
                args: [RdsAnchorMenuSectionDirective, { descendants: true }]
            }], intersectionObserverOptions: [{
                type: Input
            }], scrollIntoViewOptions: [{
                type: Input
            }] } });

class RdsAnchorMenuTitleDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAnchorMenuTitleDirective, selector: "rds-anchor-menu-title, [rds-anchor-menu-title], [rdsAnchorMenuTitle]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-anchor-menu-title, [rds-anchor-menu-title], [rdsAnchorMenuTitle]',
                }]
        }] });

const ELEMENTS = [
    RdsAnchorMenuComponent,
    RdsAnchorMenuItemComponent,
    RdsAnchorMenuSectionDirective,
    RdsAnchorMenuSectionsContainerDirective,
    RdsAnchorMenuTitleDirective,
];
class RdsAnchorMenuModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuModule, declarations: [RdsAnchorMenuComponent,
            RdsAnchorMenuItemComponent,
            RdsAnchorMenuSectionDirective,
            RdsAnchorMenuSectionsContainerDirective,
            RdsAnchorMenuTitleDirective], imports: [CommonModule, RouterLink, RouterLinkActive], exports: [RdsAnchorMenuComponent,
            RdsAnchorMenuItemComponent,
            RdsAnchorMenuSectionDirective,
            RdsAnchorMenuSectionsContainerDirective,
            RdsAnchorMenuTitleDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuModule, imports: [CommonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterLink, RouterLinkActive],
                    declarations: [...ELEMENTS],
                    exports: [...ELEMENTS],
                }]
        }] });

/*
 * Public API Surface of angular-components
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AsyncSelectionModel, Breakpoint, BreakpointUtil, DEFAULT_GLOBAL_CONFIG, DateAdapter, DateRange, DefaultRdsCalendarRangeStrategy, DialogSizeWidth, DialogTotalInlineMargin, DimensionsObserver, EXPANSION_PANEL_ANIMATION_TIMING$1 as EXPANSION_PANEL_ANIMATION_TIMING, ErrorStateMatcher, MAX_VISIBLE_AVATARS_IN_GROUP, NativeDateAdapter, NativeDateModule, RDS_ACCORDION, RDS_AUTOCOMPLETE_CONFIG, RDS_AUTOCOMPLETE_DEFAULT_CONFIG, RDS_AVATAR_DIRECTIVES, RDS_AVATAR_MAX_IN_GROUP, RDS_BADGE_COLORS, RDS_BADGE_DEFAULT_COLOR, RDS_BADGE_DIRECTIVES, RDS_BREADCRUMBS_DIRECTIVES, RDS_CALENDAR_VIEW_ORDERED, RDS_CHIPS_DEFAULT_OPTIONS, RDS_CHIP_LIST, RDS_DATEPICKER_SCROLL_STRATEGY, RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY, RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, RDS_DATEPICKER_VALIDATORS, RDS_DATEPICKER_VALUE_ACCESSOR, RDS_DATE_FORMATS, RDS_DATE_LOCALE, RDS_DATE_LOCALE_FACTORY, RDS_DATE_RANGE_SELECTION_STRATEGY, RDS_DIALOG_DATA, RDS_DRAWER_DIRECTIVES, RDS_FORM_FIELD, RDS_ICON_LOADER_CONFIG, RDS_LIST_ITEM_TEMPLATE, RDS_MENU_CONTENT, RDS_MENU_DEFAULT_OPTIONS, RDS_MENU_PANEL, RDS_MENU_SCROLL_STRATEGY, RDS_MULTI_SELECT_LIST_ITEM_TEMPLATE, RDS_NATIVE_DATE_FORMATS, RDS_NATIVE_LOCALE_DATE_FORMATS, RDS_NESTABLE_LIST_ITEM_TEMPLATE, RDS_PAGINATOR_DEFAULT_OPTIONS, RDS_PAGINATOR_INTL_PROVIDER, RDS_PAGINATOR_INTL_PROVIDER_FACTORY, RDS_POPOVER_DEFAULT_OPTIONS, RDS_POPOVER_DEFAULT_OPTIONS_FACTORY, RDS_POPOVER_SCROLL_STRATEGY, RDS_POPOVER_SCROLL_STRATEGY_FACTORY, RDS_POPOVER_SCROLL_STRATEGY_FACTORY_PROVIDER, RDS_RADIO_GROUP, RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, RDS_RANGE_DATE_SELECTION_MODEL_FACTORY, RDS_RANGE_DATE_SELECTION_MODEL_PROVIDER, RDS_SIDENAV_MENU_PANEL, RDS_SINGLE_DATE_SELECTION_MODEL_FACTORY, RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER, RDS_SINGLE_SELECT_LIST_ITEM_TEMPLATE, RDS_SLIDER_VALUE_ACCESSOR, RDS_SORT_DEFAULT_OPTIONS, RDS_SORT_HEADER_COLUMN_DEF, RDS_SWITCH_REQUIRED_VALIDATOR, RDS_TOAST_GLOBAL_CONFIG_TOKEN, RDS_TOOLTIP_DEFAULT_OPTIONS, RDS_TOOLTIP_DEFAULT_OPTIONS_FACTORY, RDS_TOOLTIP_SCROLL_STRATEGY, RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY, RDS_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, RDS_VERSION, RDS_VERSION_AS_FILENAME_SUFFIX, RdsAbstractAutocompleteComponent, RdsAbstractFormFieldControl, RdsAbstractSelectComponent, RdsAbstractSelectOptionSelectionChangedEvent, RdsAbstractSelectableListItemComponent, RdsAccordionDirective, RdsAccordionModule, RdsAlertComponent, RdsAlertModule, RdsAnchorMenuComponent, RdsAnchorMenuItemComponent, RdsAnchorMenuModule, RdsAnchorMenuSectionDirective, RdsAnchorMenuSectionsContainerDirective, RdsAnchorMenuTitleDirective, RdsAutocompleteComponent, RdsAutocompleteContainerComponent, RdsAutocompleteHighlightDirective, RdsAutocompleteIntl, RdsAutocompleteOptionDirective, RdsAutocompleteValidators, RdsAvatarComponent, RdsAvatarDescriptionDirective, RdsAvatarGroupComponent, RdsAvatarIconDirective, RdsAvatarImageDirective, RdsAvatarInitialsDirective, RdsAvatarLabelDirective, RdsAvatarModule, RdsBadgeComponent, RdsBadgeDirective, RdsBadgeModule, RdsBasePortalHost, RdsBasicCardComponent, RdsBreadcrumbItemComponent, RdsBreadcrumbsComponent, RdsBreadcrumbsModule, RdsButtonBaseComponent, RdsButtonComponent, RdsButtonModule, RdsCalendarBodyComponent, RdsCalendarCell, RdsCalendarComponent, RdsCalendarHeaderComponent, RdsCardBottomTextDirective, RdsCardComponent, RdsCardContentDirective, RdsCardExtraContentDirective, RdsCardHeaderComponent, RdsCardImageDirective, RdsCardLabelDirective, RdsCardModule, RdsCardOverlineDirective, RdsCardSelectableDirective, RdsCardTitleDirective, RdsCarouselComponent, RdsCarouselItemDirective, RdsCarouselModule, RdsCellDefDirective, RdsCellDirective, RdsCheckboxChangeEvent, RdsCheckboxComponent, RdsCheckboxModule, RdsChipActionDirective, RdsChipAvatarDirective, RdsChipComponent, RdsChipGridChange, RdsChipGridComponent, RdsChipInputDirective, RdsChipLeadingIconDirective, RdsChipListComponent, RdsChipSelectableComponent, RdsChipsModule, RdsColumnDefDirective, RdsComponentPortal, RdsDashboardCardComponent, RdsDateRangeInputComponent, RdsDateRangePickerComponent, RdsDateSelectionModel, RdsDatepickerActionsComponent, RdsDatepickerApplyDirective, RdsDatepickerCancelDirective, RdsDatepickerComponent, RdsDatepickerContentComponent, RdsDatepickerInputDirective, RdsDatepickerInputEvent, RdsDatepickerIntl, RdsDatepickerModule, RdsDatepickerToggleComponent, RdsDatepickerToggleIconDirective, RdsDialogActionsContainerDirective, RdsDialogCloseDirective, RdsDialogConfig, RdsDialogContainerComponent, RdsDialogContentDirective, RdsDialogHeaderDirective, RdsDialogIconPlaceholderDirective, RdsDialogModule, RdsDialogRef, RdsDialogService, RdsDividerComponent, RdsDividerModule, RdsDomPortalHost, RdsDrawerActionsDirective, RdsDrawerComponent, RdsDrawerContainerComponent, RdsDrawerContentComponent, RdsDrawerHeaderDirective, RdsDrawerModule, RdsDropdownContainerComponent, RdsDropdownDirective, RdsDropdownMenuDirective, RdsDropdownModule, RdsDropdownToggleButtonComponent, RdsDropdownToggleDirective, RdsEmptyStateButtonDirective, RdsEmptyStateComponent, RdsEmptyStateIconDirective, RdsEmptyStateImageDirective, RdsEmptyStateModule, RdsEmptyStateSubtitleDirective, RdsEmptyStateTitleDirective, RdsEndDateDirective, RdsErrorDirective, RdsExpansionPanelComponent, RdsExpansionPanelContentDirective, RdsExpansionPanelHeaderComponent, RdsExpansionPanelTitleDirective, RdsFabButtonComponent, RdsFileItem, RdsFileSizePipe, RdsFileUploader, RdsFooterCaptionDirective, RdsFooterCellDefDirective, RdsFooterCellDirective, RdsFooterComponent, RdsFooterCustomContentDirective, RdsFooterDisclaimerDirective, RdsFooterIntl, RdsFooterLinkComponent, RdsFooterModule, RdsFooterNavigationDirective, RdsFooterRowComponent, RdsFooterRowDefDirective, RdsFooterSitemapDirective, RdsFooterSitemapSectionDirective, RdsFooterTitleDirective, RdsFormFieldComponent, RdsFormFieldModule, RdsGlobalSearchComponent, RdsHeaderActionsDirective, RdsHeaderAppNameDirective, RdsHeaderCellDefDirective, RdsHeaderCellDirective, RdsHeaderComponent, RdsHeaderEndDividerDirective, RdsHeaderLinkComponent, RdsHeaderListItemDirective, RdsHeaderModule, RdsHeaderNavigationPrimaryDirective, RdsHeaderNavigationSecondaryDirective, RdsHeaderRowComponent, RdsHeaderRowDefDirective, RdsHeaderSearchbarComponent, RdsHeaderStartDividerDirective, RdsHintDirective, RdsIconButtonComponent, RdsIconComponent, RdsIconsModule, RdsInputChipComponent, RdsInputDirective, RdsInputWithChipsComponent, RdsLabelDirective, RdsLabelIconDirective, RdsLinkComponent, RdsLinkModule, RdsListItemComponent, RdsListItemContainerDirective, RdsListItemModule, RdsMenuComponent, RdsMenuContentDirective, RdsMenuHeaderDirective, RdsMenuItemComponent, RdsMenuModule, RdsMenuSeparatorDirective, RdsMenuTriggerDirective, RdsMonthViewComponent, RdsMultiAutocompleteComponent, RdsMultiSelectComponent, RdsMultiSelectListItemComponent, RdsMultiSelectOptionComponent, RdsMultiSelectOptionSelectionChangedEvent, RdsMultiYearViewComponent, RdsNativeDateModule, RdsNestableListItemComponent, RdsNoDataRowDirective, RdsObserveResizeDirective, RdsPaginatorComponent, RdsPaginatorIntl, RdsPaginatorModule, RdsPopoverDirective, RdsPopoverHeaderDirective, RdsPopoverModule, RdsPopoverParagraphDirective, RdsPopoverTextContentComponent, RdsPrefixDirective, RdsPrefixSeparatorComponent, RdsProgressBarComponent, RdsProgressBarModule, RdsProgressSpinnerComponent, RdsProgressSpinnerModule, RdsPseudoCheckboxComponent, RdsRadioButtonComponent, RdsRadioButtonModule, RdsRadioGroupDirective, RdsRangeDateSelectionModel, RdsRowComponent, RdsRowDefDirective, RdsSearchComponent, RdsSearchIntl, RdsSearchModule, RdsSelectAllChangedEvent, RdsSelectAllOptionComponent, RdsSelectComponent, RdsSelectOptionSelectionChangedEvent, RdsSelectOptionSeparatorComponent, RdsSelectSearchInputComponent, RdsSidenavComponent, RdsSidenavGroupComponent, RdsSidenavGroupTitleDirective, RdsSidenavMenuComponent, RdsSidenavMenuHeaderComponent, RdsSidenavMenuTriggerComponent, RdsSidenavMenuitemComponent, RdsSidenavModule, RdsSingleDateSelectionModel, RdsSingleSelectListItemComponent, RdsSingleSelectOptionComponent, RdsSliderChange, RdsSliderComponent, RdsSliderModule, RdsSortDirective, RdsSortHeaderComponent, RdsStartDateDirective, RdsStepComponent, RdsStepContentDirective, RdsStepHeaderComponent, RdsStepLabelDirective, RdsStepperComponent, RdsStepperModule, RdsStepperNextDirective, RdsStepperPreviousDirective, RdsStoryTeaserCardComponent, RdsSuffixDirective, RdsSuffixSeparatorComponent, RdsSwitchChange, RdsSwitchComponent, RdsSwitchModule, RdsSwitchRequiredValidatorDirective, RdsTabComponent, RdsTabLabelDirective, RdsTabLabelWrapperDirective, RdsTabModule, RdsTableAsyncDataSource, RdsTableComponent, RdsTableDataSource, RdsTableDragHandleDirective, RdsTableDraggableDirective, RdsTableModule, RdsTabsComponent, RdsTeaserCardComponent, RdsTextButtonComponent, RdsTextColumnComponent, RdsTextareaResizeDirective, RdsThemeDirective, RdsThemeModule, RdsThemeService, RdsTimelineComponent, RdsTimelineEventComponent, RdsTimelineEventIconMarkerDirective, RdsTimelineModule, RdsTimelineOppositeDirective, RdsToastComponent, RdsToastContainerDirective, RdsToastInjector, RdsToastModule, RdsToastOverlayContainerService, RdsToastOverlayRef, RdsToastOverlayService, RdsToastPackage, RdsToastRef, RdsToastService, RdsToggleButtonComponent, RdsToggleButtonModule, RdsToggleDirective, RdsTooltipComponent, RdsTooltipDirective, RdsTooltipModule, RdsTreeComponent, RdsTreeControl, RdsTreeDataSource, RdsTreeFlattener, RdsTreeModule, RdsTreeNodeContentLeftDirective, RdsTreeNodeContentRightDirective, RdsTreeNodeDefDirective, RdsTreeNodeDirective, RdsTreeNodeOutletDirective, RdsTreeNodeTextComponent, RdsTreeNodeToggleDirective, RdsTreeSelectionModel, RdsTriggerValuesComponent, RdsUploadComponent, RdsUploadDirective, RdsUploadDropZoneDirective, RdsUploadErrorDirective, RdsUploadIntlService, RdsUploadListItemComponent, RdsUploadModule, RdsVisualCardComponent, RdsYearViewComponent, ResizeObserverFactory, SELECT_PANEL_MAX_HEIGHT, SelectAnimations, TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE, _RdsTableDataSource, getFirstFocusableChild, getMultipleValuesInSingleSelectionError, getScrollingAncestor, getSvgHref, isEqual, isErrorState, isHoverSupported, rdsCheckboxAnimations, rdsDrawerAnimations, rdsExpansionAnimations, rdsFormFieldAnimations, rdsMenuAnimations, rdsRadioAnimations, rdsSwitchAnimations, rdsTableRowExpansionAnimation, updateErrorState, yearsPerPage, yearsPerRow };
//# sourceMappingURL=rds-angular-components.mjs.map
