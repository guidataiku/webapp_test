import { FormControlName, FormGroupDirective, NG_VALUE_ACCESSOR, NgControl, NgForm, NgModel, } from '@angular/forms';
import { booleanAttribute, ChangeDetectorRef, ContentChildren, DestroyRef, Directive, EventEmitter, forwardRef, HostBinding, inject, InjectionToken, Injector, Input, Output, QueryList, } from '@angular/core';
import { RdsRadioButtonComponent, } from './radio-button.component';
import { RdsRadioChangedEvent } from './radio-button-changed-event';
import { tap } from 'rxjs/operators';
import { updateErrorState } from '../utils';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
/**
 * Provider Expression that allows rds-radio-group to register as a ControlValueAccessor. This
 * allows it to support [(ngModel)] and ngControl.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const RDS_RADIO_GROUP = new InjectionToken('RDS_RADIO_GROUP');
/**
 * Injection token that can be used to inject instances of `RdsRadioGroupDirective`. It serves as
 * alternative token to the actual `RdsRadioGroupDirective` class which could cause unnecessary
 * retention of the class and its component metadata.
 */
export const RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => RdsRadioGroupDirective),
    multi: true,
};
let nextUniqueId = 0;
export class RdsRadioGroupDirective {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.injector = inject(Injector);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, { optional: true });
        this._name = `rds-radio-group-${nextUniqueId++}`;
        this._selected = null;
        this._isInitialized = false;
        this._labelPosition = 'after';
        this._errorState = false;
        this.hostClass = 'rds-radio-group';
        this.disabled = false;
        this.required = false;
        this.buttonChanged = new EventEmitter();
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this._controlValueAccessorChangeFn = () => { };
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        this.onTouched = () => { };
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
        this.updateRadioButtonNames();
    }
    get labelPosition() {
        return this._labelPosition;
    }
    set labelPosition(v) {
        const oldPosition = this._labelPosition;
        this._labelPosition = v === 'before' ? 'before' : 'after';
        if (oldPosition !== this._labelPosition) {
            this._radios?.forEach((r) => (r.labelPosition = this.labelPosition));
            this.markRadiosForCheck();
        }
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (this._value !== newValue) {
            this._value = newValue;
            this.updateSelectedRadioFromValue();
            this.checkSelectedRadioButton();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(selected) {
        this._selected = selected;
        this.value = selected ? selected.value : null;
        this.checkSelectedRadioButton();
    }
    ngOnInit() {
        const injectedControl = this.injector.get(NgControl);
        switch (injectedControl.constructor) {
            case NgModel: {
                const { control, update } = injectedControl;
                this.control = control;
                this.control.valueChanges
                    .pipe(tap((value) => update.emit(value)), takeUntilDestroyed(this.destroyRef))
                    .subscribe();
                break;
            }
            case FormControlName: {
                this.control = this.injector
                    .get(FormGroupDirective)
                    .getControl(injectedControl);
                break;
            }
            default: {
                this.control = injectedControl
                    .form;
                break;
            }
        }
    }
    ngAfterContentInit() {
        // Mark this component as initialized in AfterContentInit because the initial value can
        // possibly be set by NgModel on RdsRadioGroupDirective, and it is possible that the OnInit of the
        // NgModel occurs *after* the OnInit of the RdsRadioGroupDirective.
        this._isInitialized = true;
        this._radios?.forEach((r) => (r.labelPosition = this.labelPosition));
        this.markRadiosForCheck();
    }
    ngDoCheck() {
        if (this.control) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._errorState = updateErrorState(this._errorState, this.parentFormGroup, this.parentForm, this.control);
        }
    }
    checkSelectedRadioButton() {
        if (this._selected && !this._selected.checked) {
            this._selected.checked = true;
        }
    }
    touch() {
        if (this.onTouched) {
            this.onTouched();
        }
    }
    updateRadioButtonNames() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.name = this.name;
                radio.markForCheck();
            });
        }
    }
    updateSelectedRadioFromValue() {
        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;
        if (this._radios && !isAlreadySelected) {
            this._selected = null;
            this._radios.forEach((radio) => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    emitChangeEvent() {
        if (this._isInitialized) {
            this.buttonChanged.emit(new RdsRadioChangedEvent(this._selected, this._value));
        }
    }
    markRadiosForCheck() {
        if (this._radios) {
            this._radios.forEach((radio) => radio.markForCheck());
        }
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    registerOnChange(fn) {
        this._controlValueAccessorChangeFn = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsRadioGroupDirective, selector: "rds-radio-group", inputs: { name: "name", labelPosition: "labelPosition", value: "value", selected: "selected", disabled: ["disabled", "disabled", booleanAttribute], required: ["required", "required", booleanAttribute] }, outputs: { buttonChanged: "buttonChanged" }, host: { properties: { "class": "this.hostClass" } }, providers: [
            RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,
            { provide: RDS_RADIO_GROUP, useExisting: RdsRadioGroupDirective },
        ], queries: [{ propertyName: "_radios", predicate: i0.forwardRef(() => RdsRadioButtonComponent), descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-radio-group',
                    providers: [
                        RDS_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,
                        { provide: RDS_RADIO_GROUP, useExisting: RdsRadioGroupDirective },
                    ],
                }]
        }], propDecorators: { _radios: [{
                type: ContentChildren,
                args: [forwardRef(() => RdsRadioButtonComponent), {
                        descendants: true,
                    }]
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], name: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], value: [{
                type: Input
            }], selected: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,