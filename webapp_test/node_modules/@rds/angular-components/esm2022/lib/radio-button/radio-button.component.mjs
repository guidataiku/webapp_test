import { FocusMonitor } from '@angular/cdk/a11y';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { RDS_RADIO_GROUP, } from './radio-button-group.directive';
import { RdsRadioChangedEvent } from './radio-button-changed-event';
import { animate, state, style, transition, trigger, } from '@angular/animations';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { FormGroupDirective } from '@angular/forms';
import { noop } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
let nextUniqueId = 0;
export const rdsRadioAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
export class RdsRadioButtonComponent {
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    get errorState() {
        if (this.radioGroup) {
            const parent = this.radioGroup.parentFormGroup || this.radioGroup.parentForm;
            const control = this.radioGroup.control;
            if (control) {
                return (control.invalid && (control.touched || parent?.submitted || false));
            }
        }
        return false;
    }
    set checked(value) {
        const newCheckedState = booleanAttribute(value);
        if (this._checked !== newCheckedState) {
            this._checked = newCheckedState;
            if (newCheckedState &&
                this.radioGroup &&
                this.radioGroup.value !== this.value) {
                this.radioGroup.selected = this;
            }
            else if (!newCheckedState &&
                this.radioGroup &&
                this.radioGroup.value === this.value) {
                this.radioGroup.selected = null;
            }
            if (newCheckedState) {
                this.radioDispatcher.notify(this.id, this.name);
            }
        }
    }
    get checked() {
        return this._checked;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            if (this.radioGroup !== null) {
                if (!this.checked) {
                    this.checked = this.radioGroup.value === value;
                }
                if (this.checked) {
                    this.radioGroup.selected = this;
                }
            }
        }
    }
    get labelPosition() {
        return (this._labelPosition ||
            (this.radioGroup && this.radioGroup.labelPosition) ||
            'after');
    }
    set labelPosition(value) {
        this._labelPosition = value;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
    }
    get disabled() {
        return (this._disabled || (this.radioGroup !== null && this.radioGroup.disabled));
    }
    set required(value) {
        this._required = booleanAttribute(value);
    }
    get required() {
        return (this._required || (this.radioGroup && this.radioGroup.required) || false);
    }
    onFocus() {
        this._inputElement.nativeElement.focus();
    }
    get isErrorMessageVisible() {
        return this.errorState;
    }
    constructor() {
        this.radioGroup = inject(RDS_RADIO_GROUP, { optional: true });
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.focusMonitor = inject(FocusMonitor);
        this.radioDispatcher = inject(UniqueSelectionDispatcher);
        this._uniqueId = `rds-radio-${++nextUniqueId}`;
        this.subscriptAnimationState = '';
        this.hostClass = 'rds-radio-button';
        this.id = this._uniqueId;
        this.size = 'l';
        this._checked = false;
        this.buttonChanged = new EventEmitter();
        this.removeUniqueSelectionListener = noop;
        this.removeUniqueSelectionListener = this.radioDispatcher.listen((id, name) => {
            if (id !== this.id && name === this.name) {
                this.checked = false;
            }
        });
    }
    focus(options) {
        this.focusMonitor.focusVia(this._inputElement, 'keyboard', options);
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    ngOnInit() {
        if (this.radioGroup) {
            this.checked = this.radioGroup.value === this._value;
            this.name = this.radioGroup.name;
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((focusOrigin) => {
            if (!focusOrigin && this.radioGroup) {
                this.radioGroup.touch();
            }
        });
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
        // Run change detection if the value changes.
        if (this.radioGroup) {
            if (this.radioGroup.control && this.radioGroup.control.valueChanges) {
                this.radioGroup.control.valueChanges
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => {
                    this.radioGroup?.control?.markAsDirty();
                    this.radioGroup?.control?.markAsTouched();
                    this.cdr.markForCheck();
                });
            }
            const parent = this.radioGroup.parentFormGroup || this.radioGroup.control.parent;
            if (parent instanceof FormGroupDirective) {
                parent.ngSubmit
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => {
                    this.cdr.markForCheck();
                });
            }
        }
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this.removeUniqueSelectionListener();
    }
    emitChangeEvent() {
        this.buttonChanged.emit(new RdsRadioChangedEvent(this, this._value));
    }
    onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `radio-button` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
    }
    onInputChange(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `buttonChange` output.
        event.stopPropagation();
        const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;
        this.checked = true;
        this.emitChangeEvent();
        if (this.radioGroup) {
            this.radioGroup._controlValueAccessorChangeFn(this.value);
            if (groupValueChanged) {
                this.radioGroup.emitChangeEvent();
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsRadioButtonComponent, selector: "rds-radio-button", inputs: { id: "id", name: "name", size: "size", ariaLabel: "ariaLabel", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], checked: "checked", value: "value", labelPosition: "labelPosition", disabled: "disabled", required: "required" }, outputs: { buttonChanged: "buttonChanged" }, host: { listeners: { "focus": "onFocus()" }, properties: { "class": "this.hostClass", "class.rds-radio--invalid": "this.errorState", "attr.id": "this.id", "attr.aria-label": "this.ariaLabel", "attr.aria-labelledby": "this.ariaLabelledby", "attr.aria-describedby": "this.ariaDescribedby", "class.rds-radio-checked": "this.checked", "class.rds-radio-disabled": "this.disabled" } }, viewQueries: [{ propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: `
    <label [attr.for]="inputId" class="rds-radio-label">
      <!-- The actual 'radio' part of the control. -->
      <div class="rds-radio-container">
        <div class="rds-radio-checkmark-outer-circle"></div>
        <div class="rds-radio-checkmark-inner-circle"></div>
        <input
          class="rds-radio-input"
          type="radio"
          [id]="inputId"
          [checked]="checked"
          [disabled]="disabled"
          [attr.name]="name"
          [attr.value]="value"
          [required]="required"
          [attr.aria-label]="ariaLabel"
          [attr.aria-labelledby]="ariaLabelledby"
          [attr.aria-describedby]="ariaDescribedby"
          (change)="onInputChange($event)"
          (click)="onInputClick($event)"
        />
        <div class="rds-checkmark-hover"></div>
      </div>

      <!-- The label content for radio control. -->
      <div
        class="rds-radio-label-content"
        [class.rds-radio-label-before]="labelPosition === 'before'"
        [ngClass]="'rds-radio-label-content--' + size"
      >
        <!-- Add an invisible span so JAWS can read the label -->
        <span style="display:none">&nbsp;</span>
        <ng-content />
      </div>
    </label>
    <div class="rds-radio__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-radio__subscript rds-radio__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-radio__subscript rds-radio__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, isInline: true, styles: [".rds-radio-checkmark-inner-circle{border-radius:50%;height:20px;left:0;position:absolute;top:0;transition:transform ease .28s,background-color ease .28s;width:20px;background:var(--rds-color-informative);transform:scale(.001)}.rds-radio-checked .rds-radio-checkmark-inner-circle{transform:scale(.5)}.cdk-keyboard-focused.rds-radio-button .rds-checkmark-hover{display:flex;border:2px solid var(--rds-color-stroke-active-focus)}.rds-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-inner-circle{background:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-600-grey-2)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-inner-circle{background:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.rds-radio-button .rds-radio-container .rds-radio-checkmark-outer-circle{height:20px;left:0;position:absolute;top:0;transition:border-color ease .28s;width:20px;border-width:2px;border-style:solid;border-radius:50%}.rds-radio-button .rds-radio-container .rds-radio-input{bottom:0;left:50%;border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none}.rds-radio-button.rds-radio-disabled .rds-radio-label-content{color:var(--rds-color-disabled)}.rds-radio-button.rds-radio-disabled .rds-radio-label{cursor:default}.rds-radio-button .rds-checkmark-hover{display:none;position:absolute;top:-8px;left:-8px;height:36px;width:36px;border-radius:50%;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-radio-button .rds-radio-label-content{padding-left:10px;color:var(--rds-color-high-contrast)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-checkmark-outer-circle,.rds-radio-button .rds-radio-checkmark-inner-circle{z-index:1}.rds-radio-button:hover:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex}.rds-radio-button:active:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex;background-color:var(--rds-color-bg-transparent-pressed)}.rds-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.rds-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:10px;padding-right:0}.rds-radio-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content.rds-radio-label-before{order:-1;padding-left:0;padding-right:10px}.rds-radio__subscript-wrapper>div:not(:empty){margin-top:8px}.rds-radio-button.rds-radio-disabled .rds-radio__subscript--hint{color:var(--rds-color-disabled)}.rds-radio__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-radio__subscript--hint{color:var(--rds-color-low-contrast)}.rds-radio__subscript--error{color:var(--rds-color-error)}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [rdsRadioAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRadioButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-radio-button', template: `
    <label [attr.for]="inputId" class="rds-radio-label">
      <!-- The actual 'radio' part of the control. -->
      <div class="rds-radio-container">
        <div class="rds-radio-checkmark-outer-circle"></div>
        <div class="rds-radio-checkmark-inner-circle"></div>
        <input
          class="rds-radio-input"
          type="radio"
          [id]="inputId"
          [checked]="checked"
          [disabled]="disabled"
          [attr.name]="name"
          [attr.value]="value"
          [required]="required"
          [attr.aria-label]="ariaLabel"
          [attr.aria-labelledby]="ariaLabelledby"
          [attr.aria-describedby]="ariaDescribedby"
          (change)="onInputChange($event)"
          (click)="onInputClick($event)"
        />
        <div class="rds-checkmark-hover"></div>
      </div>

      <!-- The label content for radio control. -->
      <div
        class="rds-radio-label-content"
        [class.rds-radio-label-before]="labelPosition === 'before'"
        [ngClass]="'rds-radio-label-content--' + size"
      >
        <!-- Add an invisible span so JAWS can read the label -->
        <span style="display:none">&nbsp;</span>
        <ng-content />
      </div>
    </label>
    <div class="rds-radio__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-radio__subscript rds-radio__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-radio__subscript rds-radio__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, encapsulation: ViewEncapsulation.None, animations: [rdsRadioAnimations.transitionMessages], changeDetection: ChangeDetectionStrategy.OnPush, styles: [".rds-radio-checkmark-inner-circle{border-radius:50%;height:20px;left:0;position:absolute;top:0;transition:transform ease .28s,background-color ease .28s;width:20px;background:var(--rds-color-informative);transform:scale(.001)}.rds-radio-checked .rds-radio-checkmark-inner-circle{transform:scale(.5)}.cdk-keyboard-focused.rds-radio-button .rds-checkmark-hover{display:flex;border:2px solid var(--rds-color-stroke-active-focus)}.rds-radio-button{display:inline-block;-webkit-tap-highlight-color:transparent;outline:0}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid .rds-radio-checkmark-inner-circle{background:var(--rds-color-error)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button.rds-radio--invalid.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-600-grey-2)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio--invalid):not(.rds-radio-checked).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked .rds-radio-checkmark-inner-circle{background:var(--rds-color-informative)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button:not(.rds-radio--invalid).rds-radio-checked.rds-radio-disabled .rds-radio-checkmark-inner-circle{background:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-container{box-sizing:border-box;display:inline-block;position:relative;width:20px;height:20px;flex-shrink:0}.rds-radio-button .rds-radio-container .rds-radio-checkmark-outer-circle{height:20px;left:0;position:absolute;top:0;transition:border-color ease .28s;width:20px;border-width:2px;border-style:solid;border-radius:50%}.rds-radio-button .rds-radio-container .rds-radio-input{bottom:0;left:50%;border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none}.rds-radio-button.rds-radio-disabled .rds-radio-label-content{color:var(--rds-color-disabled)}.rds-radio-button.rds-radio-disabled .rds-radio-label{cursor:default}.rds-radio-button .rds-checkmark-hover{display:none;position:absolute;top:-8px;left:-8px;height:36px;width:36px;border-radius:50%;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-radio-button .rds-radio-label-content{padding-left:10px;color:var(--rds-color-high-contrast)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid) .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-3)}.rds-radio-button:not(.rds-radio-checked):not(.rds-radio--invalid).rds-radio-disabled .rds-radio-checkmark-outer-circle{border-color:var(--rds-color-grey-2)}.rds-radio-button .rds-radio-checkmark-outer-circle,.rds-radio-button .rds-radio-checkmark-inner-circle{z-index:1}.rds-radio-button:hover:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex}.rds-radio-button:active:not(.rds-radio-disabled) .rds-checkmark-hover{display:flex;background-color:var(--rds-color-bg-transparent-pressed)}.rds-radio-label{cursor:pointer;display:inline-flex;align-items:center;white-space:nowrap;vertical-align:middle;width:100%}.rds-radio-label-content{display:inline-block;order:0;line-height:inherit;padding-left:10px;padding-right:0}.rds-radio-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-radio-label-content.rds-radio-label-before{order:-1;padding-left:0;padding-right:10px}.rds-radio__subscript-wrapper>div:not(:empty){margin-top:8px}.rds-radio-button.rds-radio-disabled .rds-radio__subscript--hint{color:var(--rds-color-disabled)}.rds-radio__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-radio__subscript--hint{color:var(--rds-color-low-contrast)}.rds-radio__subscript--error{color:var(--rds-color-error)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { _inputElement: [{
                type: ViewChild,
                args: ['input']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], errorState: [{
                type: HostBinding,
                args: ['class.rds-radio--invalid']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }, {
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }, {
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], checked: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.rds-radio-checked']
            }], value: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.rds-radio-disabled']
            }, {
                type: Input
            }], required: [{
                type: Input
            }], buttonChanged: [{
                type: Output
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }] } });
//# sourceMappingURL=data:application/json;base64,