import { booleanAttribute, ContentChildren, DestroyRef, Directive, ErrorHandler, EventEmitter, HostBinding, inject, Input, Output, QueryList, } from '@angular/core';
import { asyncScheduler, merge, Subject } from 'rxjs';
import { delay, filter, takeUntil } from 'rxjs/operators';
import { RdsToggleButtonComponent } from './toggle-button.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsToggleDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.errorHandler = inject(ErrorHandler);
        this._changedDestroy$ = new Subject();
        this.type = 'basic';
        this.hostRole = 'group';
        this._disabled = false;
        this.valueChange = new EventEmitter();
    }
    get hostClass() {
        return ['rds-toggle', `rds-toggle--${this.type}`];
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this.buttonToggles) {
            this.buttonToggles.forEach((item) => (item.disabled = this._disabled));
        }
    }
    get disabled() {
        return this._disabled;
    }
    ngAfterContentInit() {
        Promise.resolve().then(() => {
            const valueItem = this.buttonToggles.find((b) => b.value === this.value);
            if (valueItem) {
                this.selected = valueItem;
                valueItem.checked = true;
                const checkedButtons = this.buttonToggles.filter((b) => b.checked && b.value !== this.value);
                if (checkedButtons.length > 0) {
                    checkedButtons.forEach((b) => (b.checked = false));
                }
            }
            else {
                const checkedToggles = this.buttonToggles.filter((b) => b.checked);
                if (checkedToggles.length > 1) {
                    this.errorHandler.handleError(new Error('Invalid status, more than one toggle is checked'));
                }
                const firstCheckedToggle = checkedToggles[0];
                if (firstCheckedToggle) {
                    firstCheckedToggle.checked = true;
                    this.rawValue = firstCheckedToggle.value;
                    this.selected = firstCheckedToggle;
                }
                if (this.disabled) {
                    this.buttonToggles.forEach((item) => (item.disabled = this.disabled));
                }
            }
            this.refreshSeparators();
            this.refreshChangeListener();
        });
        this.buttonToggles.changes
            .pipe(delay(0, asyncScheduler), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.refreshChangeListener();
            this.refreshSeparators();
        });
    }
    ngOnChanges(changes) {
        if (changes['value'] &&
            changes['value'].previousValue !== changes['value'].currentValue &&
            this.buttonToggles &&
            this.buttonToggles.some((bc) => bc.value === this.value)) {
            this.buttonToggles.find((bc) => bc.value === this.value)?.onButtonClick();
        }
        this.refreshSeparators();
    }
    ngOnDestroy() {
        this._changedDestroy$.next();
        this._changedDestroy$.complete();
    }
    handleToggleButtonChange(toggleChangedEvent) {
        const { buttonToggle, checked } = toggleChangedEvent;
        if (this.selected === buttonToggle) {
            return; // cannot deselect
        }
        if (this.selected) {
            this.selected.checked = false;
        }
        buttonToggle.checked = checked;
        this.rawValue = buttonToggle.value;
        this.selected = buttonToggle;
    }
    refreshSeparators() {
        if (this.buttonToggles && this.type === 'outlined') {
            this.buttonToggles.forEach((item, index, array) => {
                if (item.disabled) {
                    item.showSeparator = true;
                }
                else if (index === array.length - 1) {
                    item.showSeparator = false;
                }
                else if (index !== array.length - 1) {
                    item.showSeparator = !item.checked;
                }
                else if (item.showSeparator) {
                    item.showSeparator = false;
                }
                if (item.checked && index > 0) {
                    array[index - 1].showSeparator = false;
                }
            });
        }
        else if (this.buttonToggles && this.type === 'basic') {
            this.buttonToggles.forEach((item, index, array) => {
                item.showSeparator = index !== array.length - 1;
            });
        }
    }
    refreshChangeListener() {
        this._changedDestroy$.next();
        merge(...this.buttonToggles.map((toggle) => toggle.changed))
            .pipe(filter((event) => event.checked), takeUntil(this._changedDestroy$))
            .subscribe((toggleChangedEvent) => {
            this.handleToggleButtonChange(toggleChangedEvent);
            this.valueChange.emit(this.rawValue);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsToggleDirective, selector: "rds-toggle", inputs: { type: "type", disabled: "disabled", value: "value" }, outputs: { valueChange: "valueChange" }, host: { properties: { "attr.role": "this.hostRole", "class": "this.hostClass", "attr.aria-disabled": "this.disabled", "class.rds-toggle--disabled": "this.disabled" } }, queries: [{ propertyName: "buttonToggles", predicate: RdsToggleButtonComponent }], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-toggle',
                }]
        }], propDecorators: { type: [{
                type: Input
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: HostBinding,
                args: ['class.rds-toggle--disabled']
            }, {
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], buttonToggles: [{
                type: ContentChildren,
                args: [RdsToggleButtonComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvdG9nZ2xlLWJ1dHRvbi90b2dnbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLFVBQVUsRUFDVixTQUFTLEVBQ1QsWUFBWSxFQUNaLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFHTCxNQUFNLEVBQ04sU0FBUyxHQUVWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVyRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFRaEUsTUFBTSxPQUFPLGtCQUFrQjtJQUgvQjtRQU1tQixlQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hDLGlCQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3BDLHFCQUFnQixHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7UUFNeEQsU0FBSSxHQUFrQixPQUFPLENBQUM7UUFFSixhQUFRLEdBQUcsT0FBTyxDQUFDO1FBcUJyQyxjQUFTLEdBQUcsS0FBSyxDQUFDO1FBR2hCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUssQ0FBQztLQWdJL0M7SUF0SkMsSUFBMEIsU0FBUztRQUNqQyxPQUFPLENBQUMsWUFBWSxFQUFFLGVBQWUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJ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QyxhQUFhO3NCQUF2RCxlQUFlO3VCQUFDLHdCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRGVzdHJveVJlZixcbiAgRGlyZWN0aXZlLFxuICBFcnJvckhhbmRsZXIsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG4gIFF1ZXJ5TGlzdCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBhc3luY1NjaGVkdWxlciwgbWVyZ2UsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRlbGF5LCBmaWx0ZXIsIHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJkc1RvZ2dsZUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vdG9nZ2xlLWJ1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmRzVG9nZ2xlQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi9tb2RlbC90b2dnbGUtY2hhbmdlZC1ldmVudCc7XG5pbXBvcnQgeyB0YWtlVW50aWxEZXN0cm95ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5pbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuXG5leHBvcnQgdHlwZSBSZHNUb2dnbGVUeXBlID0gJ2Jhc2ljJyB8ICdvdXRsaW5lZCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3Jkcy10b2dnbGUnLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNUb2dnbGVEaXJlY3RpdmU8VD5cbiAgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveVxue1xuICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3lSZWYgPSBpbmplY3QoRGVzdHJveVJlZik7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXJyb3JIYW5kbGVyID0gaW5qZWN0KEVycm9ySGFuZGxlcik7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2NoYW5nZWREZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgcHJpdmF0ZSBzZWxlY3RlZDogUmRzVG9nZ2xlQnV0dG9uQ29tcG9uZW50PFQ+O1xuICBwcml2YXRlIHJhd1ZhbHVlOiBUO1xuXG4gIEBJbnB1dCgpXG4gIHR5cGU6IFJkc1RvZ2dsZVR5cGUgPSAnYmFzaWMnO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJykgaG9zdFJvbGUgPSAnZ3JvdXAnO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBnZXQgaG9zdENsYXNzKCk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gWydyZHMtdG9nZ2xlJywgYHJkcy10b2dnbGUtLSR7dGhpcy50eXBlfWBdO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZGlzYWJsZWQnKVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy10b2dnbGUtLWRpc2FibGVkJylcbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICB0aGlzLl9kaXNhYmxlZCA9IGJvb2xlYW5BdHRyaWJ1dGUodmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuYnV0dG9uVG9nZ2xlcykge1xuICAgICAgdGhpcy5idXR0b25Ub2dnbGVzLmZvckVhY2goKGl0ZW0pID0+IChpdGVtLmRpc2FibGVkID0gdGhpcy5fZGlzYWJsZWQpKTtcbiAgICB9XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2Rpc2FibGVkO1xuICB9XG5cbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASW5wdXQoKSB2YWx1ZTogVDtcbiAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xuXG4gIEBDb250ZW50Q2hpbGRyZW4oUmRzVG9nZ2xlQnV0dG9uQ29tcG9uZW50KSBidXR0b25Ub2dnbGVzOiBRdWVyeUxpc3Q8XG4gICAgUmRzVG9nZ2xlQnV0dG9uQ29tcG9uZW50PFQ+XG4gID47XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWVJdGVtID0gdGhpcy5idXR0b25Ub2dnbGVzLmZpbmQoKGIpID0+IGIudmFsdWUgPT09IHRoaXMudmFsdWUpO1xuXG4gICAgICBpZiAodmFsdWVJdGVtKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB2YWx1ZUl0ZW07XG4gICAgICAgIHZhbHVlSXRlbS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgY2hlY2tlZEJ1dHRvbnMgPSB0aGlzLmJ1dHRvblRvZ2dsZXMuZmlsdGVyKFxuICAgICAgICAgIChiKSA9PiBiLmNoZWNrZWQgJiYgYi52YWx1ZSAhPT0gdGhpcy52YWx1ZSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoY2hlY2tlZEJ1dHRvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNoZWNrZWRCdXR0b25zLmZvckVhY2goKGIpID0+IChiLmNoZWNrZWQgPSBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjaGVja2VkVG9nZ2xlcyA9IHRoaXMuYnV0dG9uVG9nZ2xlcy5maWx0ZXIoKGIpID0+IGIuY2hlY2tlZCk7XG5cbiAgICAgICAgaWYgKGNoZWNrZWRUb2dnbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihcbiAgICAgICAgICAgIG5ldyBFcnJvcignSW52YWxpZCBzdGF0dXMsIG1vcmUgdGhhbiBvbmUgdG9nZ2xlIGlzIGNoZWNrZWQnKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlyc3RDaGVja2VkVG9nZ2xlID0gY2hlY2tlZFRvZ2dsZXNbMF07XG5cbiAgICAgICAgaWYgKGZpcnN0Q2hlY2tlZFRvZ2dsZSkge1xuICAgICAgICAgIGZpcnN0Q2hlY2tlZFRvZ2dsZS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnJhd1ZhbHVlID0gZmlyc3RDaGVja2VkVG9nZ2xlLnZhbHVlO1xuICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBmaXJzdENoZWNrZWRUb2dnbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgIHRoaXMuYnV0dG9uVG9nZ2xlcy5mb3JFYWNoKChpdGVtKSA9PiAoaXRlbS5kaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJlZnJlc2hTZXBhcmF0b3JzKCk7XG4gICAgICB0aGlzLnJlZnJlc2hDaGFuZ2VMaXN0ZW5lcigpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5idXR0b25Ub2dnbGVzLmNoYW5nZXNcbiAgICAgIC5waXBlKGRlbGF5KDAsIGFzeW5jU2NoZWR1bGVyKSwgdGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZikpXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5yZWZyZXNoQ2hhbmdlTGlzdGVuZXIoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoU2VwYXJhdG9ycygpO1xuICAgICAgfSk7XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgY2hhbmdlc1sndmFsdWUnXSAmJlxuICAgICAgY2hhbmdlc1sndmFsdWUnXS5wcmV2aW91c1ZhbHVlICE9PSBjaGFuZ2VzWyd2YWx1ZSddLmN1cnJlbnRWYWx1ZSAmJlxuICAgICAgdGhpcy5idXR0b25Ub2dnbGVzICYmXG4gICAgICB0aGlzLmJ1dHRvblRvZ2dsZXMuc29tZSgoYmMpID0+IGJjLnZhbHVlID09PSB0aGlzLnZhbHVlKVxuICAgICkge1xuICAgICAgdGhpcy5idXR0b25Ub2dnbGVzLmZpbmQoKGJjKSA9PiBiYy52YWx1ZSA9PT0gdGhpcy52YWx1ZSk/Lm9uQnV0dG9uQ2xpY2soKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlZnJlc2hTZXBhcmF0b3JzKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9jaGFuZ2VkRGVzdHJveSQubmV4dCgpO1xuICAgIHRoaXMuX2NoYW5nZWREZXN0cm95JC5jb21wbGV0ZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVUb2dnbGVCdXR0b25DaGFuZ2UoXG4gICAgdG9nZ2xlQ2hhbmdlZEV2ZW50OiBSZHNUb2dnbGVDaGFuZ2VkRXZlbnQ8VD4sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHsgYnV0dG9uVG9nZ2xlLCBjaGVja2VkIH0gPSB0b2dnbGVDaGFuZ2VkRXZlbnQ7XG5cbiAgICBpZiAodGhpcy5zZWxlY3RlZCA9PT0gYnV0dG9uVG9nZ2xlKSB7XG4gICAgICByZXR1cm47IC8vIGNhbm5vdCBkZXNlbGVjdFxuICAgIH1cblxuICAgIGlmICh0aGlzLnNlbGVjdGVkKSB7XG4gICAgICB0aGlzLnNlbGVjdGVkLmNoZWNrZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBidXR0b25Ub2dnbGUuY2hlY2tlZCA9IGNoZWNrZWQ7XG4gICAgdGhpcy5yYXdWYWx1ZSA9IGJ1dHRvblRvZ2dsZS52YWx1ZTtcbiAgICB0aGlzLnNlbGVjdGVkID0gYnV0dG9uVG9nZ2xlO1xuICB9XG5cbiAgcHJpdmF0ZSByZWZyZXNoU2VwYXJhdG9ycygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5idXR0b25Ub2dnbGVzICYmIHRoaXMudHlwZSA9PT0gJ291dGxpbmVkJykge1xuICAgICAgdGhpcy5idXR0b25Ub2dnbGVzLmZvckVhY2goKGl0ZW0sIGluZGV4LCBhcnJheSkgPT4ge1xuICAgICAgICBpZiAoaXRlbS5kaXNhYmxlZCkge1xuICAgICAgICAgIGl0ZW0uc2hvd1NlcGFyYXRvciA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IGFycmF5Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBpdGVtLnNob3dTZXBhcmF0b3IgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCAhPT0gYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGl0ZW0uc2hvd1NlcGFyYXRvciA9ICFpdGVtLmNoZWNrZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5zaG93U2VwYXJhdG9yKSB7XG4gICAgICAgICAgaXRlbS5zaG93U2VwYXJhdG9yID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbS5jaGVja2VkICYmIGluZGV4ID4gMCkge1xuICAgICAgICAgIGFycmF5W2luZGV4IC0gMV0uc2hvd1NlcGFyYXRvciA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYnV0dG9uVG9nZ2xlcyAmJiB0aGlzLnR5cGUgPT09ICdiYXNpYycpIHtcbiAgICAgIHRoaXMuYnV0dG9uVG9nZ2xlcy5mb3JFYWNoKChpdGVtLCBpbmRleCwgYXJyYXkpID0+IHtcbiAgICAgICAgaXRlbS5zaG93U2VwYXJhdG9yID0gaW5kZXggIT09IGFycmF5Lmxlbmd0aCAtIDE7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlZnJlc2hDaGFuZ2VMaXN0ZW5lcigpOiB2b2lkIHtcbiAgICB0aGlzLl9jaGFuZ2VkRGVzdHJveSQubmV4dCgpO1xuICAgIG1lcmdlPFJkc1RvZ2dsZUNoYW5nZWRFdmVudDxUPltdPihcbiAgICAgIC4uLnRoaXMuYnV0dG9uVG9nZ2xlcy5tYXAoKHRvZ2dsZSkgPT4gdG9nZ2xlLmNoYW5nZWQpLFxuICAgIClcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC5jaGVja2VkKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMuX2NoYW5nZWREZXN0cm95JCksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCh0b2dnbGVDaGFuZ2VkRXZlbnQ6IFJkc1RvZ2dsZUNoYW5nZWRFdmVudDxUPikgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZVRvZ2dsZUJ1dHRvbkNoYW5nZSh0b2dnbGVDaGFuZ2VkRXZlbnQpO1xuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodGhpcy5yYXdWYWx1ZSk7XG4gICAgICB9KTtcbiAgfVxufVxuIl19