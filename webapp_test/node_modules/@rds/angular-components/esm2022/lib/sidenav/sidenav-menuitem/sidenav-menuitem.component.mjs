import { ChangeDetectionStrategy, Component, DestroyRef, ElementRef, HostBinding, HostListener, inject, ViewEncapsulation, } from '@angular/core';
import { Subject } from 'rxjs';
import { FocusMonitor } from '@angular/cdk/a11y';
import { RdsSidenavService } from '../sidenav.service';
import { filter } from 'rxjs/operators';
import { rdsExpansionAnimations } from '../../accordion';
import { RDS_SIDENAV_MENU_PANEL } from '../sidenav.types';
import { SidenavItem } from '../sidenav-item';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsSidenavMenuitemComponent {
    constructor() {
        this._parentMenu = inject(RDS_SIDENAV_MENU_PANEL, {
            optional: true,
        });
        this.sidenavService = inject(RdsSidenavService);
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.role = 'menuitem';
        this._hovered = new Subject();
        this._focused = new Subject();
        this.nativeElement = this.elementRef.nativeElement;
        this.rdsMenuItemClass = true;
        this.rdsFocusIndicatorClass = true;
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.nativeElement, origin, options);
        }
        else {
            this.nativeElement.focus(options);
        }
    }
    ngOnInit() {
        this.sidenavService.isMinimal$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((v) => (this.isMinimal = v));
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, false)
            .pipe(filter((v) => !!v), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._focused.next(this));
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this._hovered.complete();
        this._focused.complete();
    }
    _handleMouseEnter() {
        this._hovered.next(this);
    }
    getLabel() {
        const clone = this.elementRef.nativeElement.cloneNode(true);
        const icons = clone.querySelectorAll('rds-icon');
        for (let i = 0; i < icons.length; i++) {
            icons[i].remove();
        }
        return clone.textContent?.trim() || '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuitemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavMenuitemComponent, selector: "rds-sidenav-menuitem, [rds-sidenav-menuitem], [rdsSidenavMenuitem]", host: { listeners: { "mouseenter": "_handleMouseEnter()" }, properties: { "attr.role": "this.role", "class.rds-sidenav-minimal": "this.isMinimal", "class.rds-sidenav-menuitem": "this.rdsMenuItemClass", "class.rds-focus-indicator": "this.rdsFocusIndicatorClass" } }, providers: [
            { provide: SidenavItem, useExisting: RdsSidenavMenuitemComponent },
        ], exportAs: ["rdsSidenavMenuitem"], ngImport: i0, template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n", animations: [rdsExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuitemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-sidenav-menuitem, [rds-sidenav-menuitem], [rdsSidenavMenuitem]', exportAs: 'rdsSidenavMenuitem', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [rdsExpansionAnimations.bodyExpansion], providers: [
                        { provide: SidenavItem, useExisting: RdsSidenavMenuitemComponent },
                    ], template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n" }]
        }], propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], isMinimal: [{
                type: HostBinding,
                args: ['class.rds-sidenav-minimal']
            }], rdsMenuItemClass: [{
                type: HostBinding,
                args: ['class.rds-sidenav-menuitem']
            }], rdsFocusIndicatorClass: [{
                type: HostBinding,
                args: ['class.rds-focus-indicator']
            }], _handleMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1tZW51aXRlbS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3NpZGVuYXYvc2lkZW5hdi1tZW51aXRlbS9zaWRlbmF2LW1lbnVpdGVtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvc2lkZW5hdi9zaWRlbmF2LW1lbnVpdGVtL3NpZGVuYXYtbWVudWl0ZW0uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFHTixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQW1CLFlBQVksRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQWlCLHNCQUFzQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQWNoRSxNQUFNLE9BQU8sMkJBQTJCO0lBWnhDO1FBZWtCLGdCQUFXLEdBQUcsTUFBTSxDQUFDLHNCQUFzQixFQUFFO1lBQzNELFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO1FB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QUFDOzsyRkFLdkMsMkJBQTJCO2tCQVp2QyxTQUFTOytCQUVOLG9FQUFvRSxZQUM1RCxvQkFBb0IsbUJBRWIsdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsSUFBSSxjQUN6QixDQUFDLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxhQUN2Qzt3QkFDVCxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyw2QkFBNkIsRUFBRTtxQkFDbkU7OEJBY0QsSUFBSTtzQkFESCxXQUFXO3VCQUFDLFdBQVc7Z0JBT2tCLFNBQVM7c0JBQWxELFdBQVc7dUJBQUMsMkJBQTJCO2dCQUNHLGdCQUFnQjtzQkFBMUQsV0FBVzt1QkFBQyw0QkFBNEI7Z0JBQ0Msc0JBQXNCO3NCQUEvRCxXQUFXO3VCQUFDLDJCQUEyQjtnQkFrQ3hDLGlCQUFpQjtzQkFEaEIsWUFBWTt1QkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRGVzdHJveVJlZixcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRm9jdXNhYmxlT3B0aW9uLCBGb2N1c01vbml0b3IsIEZvY3VzT3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgUmRzU2lkZW5hdlNlcnZpY2UgfSBmcm9tICcuLi9zaWRlbmF2LnNlcnZpY2UnO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgcmRzRXhwYW5zaW9uQW5pbWF0aW9ucyB9IGZyb20gJy4uLy4uL2FjY29yZGlvbic7XG5pbXBvcnQgeyBOYXRpdmVFbGVtZW50LCBSRFNfU0lERU5BVl9NRU5VX1BBTkVMIH0gZnJvbSAnLi4vc2lkZW5hdi50eXBlcyc7XG5pbXBvcnQgeyBTaWRlbmF2SXRlbSB9IGZyb20gJy4uL3NpZGVuYXYtaXRlbSc7XG5pbXBvcnQgeyB0YWtlVW50aWxEZXN0cm95ZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3J4anMtaW50ZXJvcCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjpcbiAgICAncmRzLXNpZGVuYXYtbWVudWl0ZW0sIFtyZHMtc2lkZW5hdi1tZW51aXRlbV0sIFtyZHNTaWRlbmF2TWVudWl0ZW1dJyxcbiAgZXhwb3J0QXM6ICdyZHNTaWRlbmF2TWVudWl0ZW0nLFxuICB0ZW1wbGF0ZVVybDogJy4vc2lkZW5hdi1tZW51aXRlbS5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBhbmltYXRpb25zOiBbcmRzRXhwYW5zaW9uQW5pbWF0aW9ucy5ib2R5RXhwYW5zaW9uXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgeyBwcm92aWRlOiBTaWRlbmF2SXRlbSwgdXNlRXhpc3Rpbmc6IFJkc1NpZGVuYXZNZW51aXRlbUNvbXBvbmVudCB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNTaWRlbmF2TWVudWl0ZW1Db21wb25lbnRcbiAgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRm9jdXNhYmxlT3B0aW9uLCBOYXRpdmVFbGVtZW50XG57XG4gIHB1YmxpYyByZWFkb25seSBfcGFyZW50TWVudSA9IGluamVjdChSRFNfU0lERU5BVl9NRU5VX1BBTkVMLCB7XG4gICAgb3B0aW9uYWw6IHRydWUsXG4gIH0pO1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZGVuYXZTZXJ2aWNlID0gaW5qZWN0KFJkc1NpZGVuYXZTZXJ2aWNlKTtcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95UmVmID0gaW5qZWN0KERlc3Ryb3lSZWYpO1xuICBwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuICBwcml2YXRlIHJlYWRvbmx5IGZvY3VzTW9uaXRvciA9IGluamVjdChGb2N1c01vbml0b3IpO1xuXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgcm9sZSA9ICdtZW51aXRlbSc7XG5cbiAgcmVhZG9ubHkgX2hvdmVyZWQgPSBuZXcgU3ViamVjdDxSZHNTaWRlbmF2TWVudWl0ZW1Db21wb25lbnQ+KCk7XG4gIHJlYWRvbmx5IF9mb2N1c2VkID0gbmV3IFN1YmplY3Q8UmRzU2lkZW5hdk1lbnVpdGVtQ29tcG9uZW50PigpO1xuICByZWFkb25seSBuYXRpdmVFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5yZHMtc2lkZW5hdi1taW5pbWFsJykgaXNNaW5pbWFsOiBib29sZWFuO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy1zaWRlbmF2LW1lbnVpdGVtJykgcmRzTWVudUl0ZW1DbGFzcyA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MucmRzLWZvY3VzLWluZGljYXRvcicpIHJkc0ZvY3VzSW5kaWNhdG9yQ2xhc3MgPSB0cnVlO1xuXG4gIGZvY3VzKG9yaWdpbj86IEZvY3VzT3JpZ2luLCBvcHRpb25zPzogRm9jdXNPcHRpb25zKTogdm9pZCB7XG4gICAgaWYgKG9yaWdpbikge1xuICAgICAgdGhpcy5mb2N1c01vbml0b3IuZm9jdXNWaWEodGhpcy5uYXRpdmVFbGVtZW50LCBvcmlnaW4sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuZm9jdXMob3B0aW9ucyk7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zaWRlbmF2U2VydmljZS5pc01pbmltYWwkXG4gICAgICAucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSlcbiAgICAgIC5zdWJzY3JpYmUoKHYpID0+ICh0aGlzLmlzTWluaW1hbCA9IHYpKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvclxuICAgICAgLm1vbml0b3IodGhpcy5lbGVtZW50UmVmLCBmYWxzZSlcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIoKHYpID0+ICEhdiksXG4gICAgICAgIHRha2VVbnRpbERlc3Ryb3llZCh0aGlzLmRlc3Ryb3lSZWYpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB0aGlzLl9mb2N1c2VkLm5leHQodGhpcykpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5mb2N1c01vbml0b3Iuc3RvcE1vbml0b3JpbmcodGhpcy5lbGVtZW50UmVmKTtcblxuICAgIHRoaXMuX2hvdmVyZWQuY29tcGxldGUoKTtcbiAgICB0aGlzLl9mb2N1c2VkLmNvbXBsZXRlKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgX2hhbmRsZU1vdXNlRW50ZXIoKTogdm9pZCB7XG4gICAgdGhpcy5faG92ZXJlZC5uZXh0KHRoaXMpO1xuICB9XG5cbiAgZ2V0TGFiZWwoKTogc3RyaW5nIHtcbiAgICBjb25zdCBjbG9uZSA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBpY29ucyA9IGNsb25lLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Jkcy1pY29uJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGljb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpY29uc1tpXS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJztcbiAgfVxufVxuIiwiPG5nLWNvbnRlbnQgc2VsZWN0PVwicmRzLWljb25cIiAvPlxuPGRpdiBjbGFzcz1cInNyLW9ubHktd2hlbi1taW5pbWFsLWFuZC1maXJzdC1sZXZlbFwiPlxuICA8bmctY29udGVudCAvPlxuPC9kaXY+XG48ZGl2IGNsYXNzPVwicmRzLXNpZGVuYXYtYmFkZ2UtY29udGFpbmVyXCI+XG4gIDxuZy1jb250ZW50IHNlbGVjdD1cInJkcy1iYWRnZVwiIC8+XG48L2Rpdj5cbiJdfQ==