import { ChangeDetectionStrategy, Component, DestroyRef, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, Output, ViewContainerRef, } from '@angular/core';
import { RdsSidenavMenuComponent } from '../sidenav-menu/sidenav-menu.component';
import { RdsSidenavService } from '../sidenav.service';
import { delay, filter, map, tap } from 'rxjs/operators';
import { asapScheduler, EMPTY, fromEvent, merge, Subject, Subscription, } from 'rxjs';
import { FocusMonitor, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, } from '@angular/cdk/a11y';
import { TemplatePortal } from '@angular/cdk/portal';
import { Overlay, OverlayConfig, } from '@angular/cdk/overlay';
import { Directionality } from '@angular/cdk/bidi';
import { ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { rdsSidenavExpansionAnimations } from '../sidenav-menu/sidenav-menu-expansion.animation';
import { throwRdsMenuMissingError } from '../../menu/menu-error';
import { isHoverSupported } from '../../utils';
import { SidenavItem } from '../sidenav-item';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "../../icons/icon.component";
import * as i2 from "@angular/common";
const passiveEventListenerOptions = normalizePassiveListenerOptions({
    passive: true,
});
export class RdsSidenavMenuTriggerComponent {
    get _ariaExpanded() {
        return this.menuOpen || null;
    }
    get _ariaControl() {
        return this.menuOpen ? this.menu.panelId : null;
    }
    get menu() {
        return this._menu;
    }
    set menu(menu) {
        if (menu === this._menu) {
            return;
        }
        this._menu = menu;
        this._menuCloseSubscription.unsubscribe();
        if (menu) {
            this._menuCloseSubscription = menu.closed.subscribe(() => {
                this._destroyMenu();
            });
        }
    }
    constructor() {
        this.sidenavService = inject(RdsSidenavService);
        this.destroyRef = inject(DestroyRef);
        this.overlay = inject(Overlay);
        this.element = inject(ElementRef);
        this.viewContainerRef = inject(ViewContainerRef);
        this._dir = inject(Directionality, {
            optional: true,
        });
        this.focusMonitor = inject(FocusMonitor);
        this.menuOpened = new EventEmitter();
        this.menuClosed = new EventEmitter();
        this.role = 'menuitem';
        this._ariaHaspopup = true;
        this.class = 'rds-sidenav-menu-trigger';
        this.isHovered = false;
        this._openedBy = undefined;
        this._overlayRef = null;
        this._menuOpen = false;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._menuCloseSubscription = Subscription.EMPTY;
        this.scrollStrategy = () => this.overlay.scrollStrategies.reposition();
        this._focused = new Subject();
        this.isMinimal$ = this.sidenavService.isMinimal$;
        this.nativeElement = this.element.nativeElement;
        this._handleTouchStart = (event) => {
            if (!isFakeTouchstartFromScreenReader(event)) {
                this._openedBy = 'touch';
            }
        };
        fromEvent(this.element.nativeElement, 'touchstart', passiveEventListenerOptions)
            .pipe(takeUntilDestroyed())
            .subscribe((e) => this._handleTouchStart(e));
    }
    ngAfterContentInit() {
        this._checkMenu();
        if (isHoverSupported()) {
            this._handleHover();
        }
        this.menu.title = this.element.nativeElement.textContent ?? '';
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.element, false)
            .pipe(filter((v) => !!v), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._focused.next(this));
        if (!this.sidenavService.isMinimal && this.menu?.openOnInit) {
            // set hover to omit focusing first element
            this._openedBy = 'hover';
            this.openMenu();
        }
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        if (this.focusMonitor) {
            this.focusMonitor.stopMonitoring(this.element);
        }
        this._menuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
        this._focused.complete();
    }
    get menuOpen() {
        return this._menuOpen;
    }
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    toggleMenu() {
        return this._menuOpen ? this.closeMenu() : this.openMenu();
    }
    openMenu(withBackdrop) {
        if (this._menuOpen) {
            return;
        }
        this._checkMenu();
        if (this.sidenavService.isMinimal) {
            const overlayRef = this._createOverlay();
            const overlayConfig = overlayRef.getConfig();
            this._setPosition(overlayConfig.positionStrategy);
            overlayConfig.hasBackdrop =
                withBackdrop == undefined ? true : withBackdrop;
            overlayRef.attach(this._getPortal());
        }
        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());
        this._initMenu();
        if (this.menu instanceof RdsSidenavMenuComponent) {
            this.menu._startAnimation();
        }
    }
    closeMenu() {
        this.menu.closed.emit();
        this.menu.isOpened = false;
    }
    focus(origin, options) {
        if (origin && origin === 'hover') {
            return;
        }
        if (this.focusMonitor && origin) {
            this.focusMonitor.focusVia(this.element, origin, options);
        }
        else {
            this.element.nativeElement.focus(options);
        }
        this._focused.next(this);
    }
    _destroyMenu() {
        if (!this.menuOpen) {
            return;
        }
        const menu = this.menu;
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef?.detach();
        // without setTimeout doesn't work for expandable menu
        setTimeout(() => {
            this.focus(this._openedBy);
            this._openedBy = undefined;
        });
        if (menu instanceof RdsSidenavMenuComponent) {
            menu._resetAnimation();
        }
        this._setIsMenuOpen(false);
    }
    _initMenu() {
        this.menu.parentMenu = undefined;
        this.menu.direction = this.dir;
        if (this._openedBy !== 'hover') {
            this.menu.focusFirstItem(this._openedBy || 'program');
        }
        this._setIsMenuOpen(true);
    }
    _setIsMenuOpen(isOpen) {
        this._menuOpen = isOpen;
        this.menu.isOpened = isOpen;
        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
    }
    _checkMenu() {
        if (ngDevMode && !this.menu) {
            throwRdsMenuMissingError();
        }
    }
    _createOverlay() {
        const config = this._getOverlayConfig();
        if (!this._overlayRef ||
            this._overlayRef.getConfig().backdropClass !== config.backdropClass ||
            this._overlayRef.getConfig().panelClass !== config.panelClass ||
            this._overlayRef.getConfig().direction !== config.direction) {
            if (this._overlayRef) {
                this._overlayRef.dispose();
            }
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this.overlay.create(config);
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this.overlay
                .position()
                .flexibleConnectedTo(this.element)
                .withFlexibleDimensions(false)
                .withGrowAfterOpen()
                .withTransformOriginOn('.rds-menu-panel'),
            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',
            panelClass: this.menu.overlayPanelClass,
            scrollStrategy: this.scrollStrategy(),
            direction: this._dir,
        });
    }
    _subscribeToPositions(position) {
        if (this.menu.setPositionClasses) {
            position.positionChanges.subscribe((change) => {
                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                if (this.menu.setPositionClasses) {
                    this.menu.setPositionClasses(posX, posY);
                }
            });
        }
    }
    _setPosition(positionStrategy) {
        const originX = 'start';
        const [overlayY, overlayFallbackY] = [
            'top',
            'bottom',
        ];
        const overlayX = originX;
        const originY = overlayY === 'top' ? 'bottom' : 'top';
        const originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        const offsetX = 61;
        const offsetYWhenBelow = -115;
        const offsetYWhenAbove = 65;
        positionStrategy.withPositions([
            {
                originX,
                originY,
                overlayX,
                overlayY,
                offsetX,
                offsetY: offsetYWhenBelow,
            },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetX,
                offsetY: offsetYWhenAbove,
            },
        ]);
    }
    _menuClosingActions() {
        const backdrop = this._overlayRef
            ? this._overlayRef.backdropClick()
            : EMPTY;
        const detachments = this._overlayRef
            ? this._overlayRef.detachments()
            : EMPTY;
        return merge(backdrop, detachments);
    }
    _handleMousedown(event) {
        if (!isFakeMousedownFromScreenReader(event)) {
            this._openedBy = event.button === 0 ? 'mouse' : undefined;
        }
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        const openedByArrow = (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||
            (keyCode === LEFT_ARROW && this.dir === 'rtl');
        if (keyCode === ENTER) {
            // handled by _handleClick
            return;
        }
        if (keyCode === SPACE || openedByArrow) {
            this._openedBy = 'keyboard';
            this.openMenu();
        }
    }
    _handleClick({ keyCode }) {
        if (keyCode === ENTER) {
            this._openedBy = 'keyboard';
        }
        this.toggleMenu();
    }
    hovered() {
        let isPanelHovered = false;
        return merge(fromEvent(this.element.nativeElement, 'mouseenter').pipe(map(() => true)), this.menu.hovered.pipe(tap((v) => (isPanelHovered = v))), fromEvent(this.element.nativeElement, 'mouseleave').pipe(delay(0), filter(() => !isPanelHovered), map(() => false)));
    }
    _handleHover() {
        this.hovered()
            .pipe(filter(() => this.sidenavService.isMinimal), delay(0, asapScheduler), takeUntilDestroyed(this.destroyRef))
            .subscribe((isHovered) => {
            this.isHovered = isHovered;
            if (isHovered) {
                this._openedBy = 'hover';
                this.openMenu(false);
            }
            else {
                this.closeMenu();
            }
        });
    }
    _getPortal() {
        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {
            this._portal = new TemplatePortal(this.menu.templateRef, this.viewContainerRef);
        }
        return this._portal;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuTriggerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSidenavMenuTriggerComponent, selector: "button[rds-sidenav-menu-trigger-for], button[rdsSidenavMenuTriggerFor]", inputs: { menu: ["rdsSidenavMenuTriggerFor", "menu"] }, outputs: { menuOpened: "menuOpened", menuClosed: "menuClosed" }, host: { listeners: { "mousedown": "_handleMousedown($event)", "keydown": "_handleKeydown($event)", "click": "_handleClick($event)" }, properties: { "attr.role": "this.role", "attr.aria-haspopup": "this._ariaHaspopup", "class": "this.class", "class.rds-sidenav-menu-hovered": "this.isHovered", "attr.aria-expanded": "this._ariaExpanded", "attr.aria-controls": "this._ariaControl" } }, providers: [
            { provide: SidenavItem, useExisting: RdsSidenavMenuTriggerComponent },
        ], ngImport: i0, template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n@if ((isMinimal$ | async) === false) {\n  <rds-icon\n    [@indicatorRotate]=\"menu.expandedState\"\n    class=\"rds-sidenav-expansion-indicator\"\n    namespace=\"filled\"\n    icon=\"chevron_down\"\n  />\n}\n", styles: [":host{position:relative;-webkit-tap-highlight-color:transparent}:host:after{content:\"\";position:absolute;top:-30px;bottom:-30px;height:100px;right:-24px;clip-path:polygon(0px 20px,100% 0%,100% 100%,0px 80px);width:24px;background:none;visibility:hidden}:host(.rds-sidenav-menu-hovered):after{visibility:visible}.rds-sidenav-expansion-indicator{height:24px;width:24px}.rds-sidenav-badge-container:empty+rds-sidenav-expansion-indicator{margin-left:auto}\n"], dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], animations: [rdsSidenavExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuTriggerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'button[rds-sidenav-menu-trigger-for], button[rdsSidenavMenuTriggerFor]', changeDetection: ChangeDetectionStrategy.OnPush, animations: [rdsSidenavExpansionAnimations.indicatorRotate], providers: [
                        { provide: SidenavItem, useExisting: RdsSidenavMenuTriggerComponent },
                    ], template: "<ng-content select=\"rds-icon\" />\n<div class=\"sr-only-when-minimal-and-first-level\">\n  <ng-content />\n</div>\n<div class=\"rds-sidenav-badge-container\">\n  <ng-content select=\"rds-badge\" />\n</div>\n@if ((isMinimal$ | async) === false) {\n  <rds-icon\n    [@indicatorRotate]=\"menu.expandedState\"\n    class=\"rds-sidenav-expansion-indicator\"\n    namespace=\"filled\"\n    icon=\"chevron_down\"\n  />\n}\n", styles: [":host{position:relative;-webkit-tap-highlight-color:transparent}:host:after{content:\"\";position:absolute;top:-30px;bottom:-30px;height:100px;right:-24px;clip-path:polygon(0px 20px,100% 0%,100% 100%,0px 80px);width:24px;background:none;visibility:hidden}:host(.rds-sidenav-menu-hovered):after{visibility:visible}.rds-sidenav-expansion-indicator{height:24px;width:24px}.rds-sidenav-badge-container:empty+rds-sidenav-expansion-indicator{margin-left:auto}\n"] }]
        }], ctorParameters: () => [], propDecorators: { menuOpened: [{
                type: Output
            }], menuClosed: [{
                type: Output
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], _ariaHaspopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], isHovered: [{
                type: HostBinding,
                args: ['class.rds-sidenav-menu-hovered']
            }], _ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _ariaControl: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], menu: [{
                type: Input,
                args: ['rdsSidenavMenuTriggerFor']
            }], _handleMousedown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], _handleClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,