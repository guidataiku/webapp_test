import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, inject, } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { filter } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "../../icons/icon.component";
export class RdsSidenavMenuHeaderComponent {
    constructor() {
        this.focusMonitor = inject(FocusMonitor);
        this.nativeElement = inject(ElementRef).nativeElement;
        this.disabled = false;
        this._focused = this.focusMonitor.monitor(this.nativeElement, false).pipe(filter((v) => !!v), takeUntilDestroyed());
        this.classes = 'rds-sidenav-menu-header';
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.nativeElement);
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.nativeElement, origin, options);
        }
        else {
            this.nativeElement.focus(options);
        }
    }
    getLabel() {
        const clone = this.nativeElement.cloneNode(true);
        const icons = clone.querySelectorAll('rds-icon');
        for (let i = 0; i < icons.length; i++) {
            icons[i].remove();
        }
        return clone.textContent?.trim() || '';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSidenavMenuHeaderComponent, selector: "a[rds-sidenav-menu-header], a[rdsSidenavMenuHeader]", host: { properties: { "class": "this.classes" } }, ngImport: i0, template: "<ng-content /> <rds-icon icon=\"arrow_right\" />\n", dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSidenavMenuHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'a[rds-sidenav-menu-header], a[rdsSidenavMenuHeader]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content /> <rds-icon icon=\"arrow_right\" />\n" }]
        }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZW5hdi1tZW51LWhlYWRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3NpZGVuYXYvc2lkZW5hdi1tZW51LWhlYWRlci9zaWRlbmF2LW1lbnUtaGVhZGVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvc2lkZW5hdi9zaWRlbmF2LW1lbnUtaGVhZGVyL3NpZGVuYXYtbWVudS1oZWFkZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEdBRVAsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFtQixZQUFZLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUUvRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQU9oRSxNQUFNLE9BQU8sNkJBQTZCO0lBTDFDO1FBUW1CLGlCQUFZLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRTVDLGtCQUFhLEdBQ3BCLE1BQU0sQ0FBMEIsVUFBVSxDQUFDLENBQUMsYUFBYSxDQUFDO1FBQ25ELGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsYUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUMzRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEIsa0JBQWtCLEVBQUUsQ0FDckIsQ0FBQztRQUdPLFlBQU8sR0FBRyx5QkFBeUIsQ0FBQztLQXdCOUM7SUF0QkMsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQW9CLEVBQUUsT0FBc0I7UUFDaEQsSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ2xFLENBQUM7YUFBTSxDQUFDO1lBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEMsQ0FBQztJQUNILENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFnQixDQUFDO1FBQ2hFLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUVqRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNwQixDQUFDO1FBRUQsT0FBTyxLQUFLLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN6QyxDQUFDOzhHQXJDVSw2QkFBNkI7a0dBQTdCLDZCQUE2Qiw4SUNsQjFDLG9EQUNBOzsyRkRpQmEsNkJBQTZCO2tCQUx6QyxTQUFTOytCQUNFLHFEQUFxRCxtQkFFOUMsdUJBQXVCLENBQUMsTUFBTTs4QkFnQnRDLE9BQU87c0JBRGYsV0FBVzt1QkFBQyxPQUFPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIGluamVjdCxcbiAgT25EZXN0cm95LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvY3VzYWJsZU9wdGlvbiwgRm9jdXNNb25pdG9yLCBGb2N1c09yaWdpbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IE5hdGl2ZUVsZW1lbnQgfSBmcm9tICcuLi9zaWRlbmF2LnR5cGVzJztcbmltcG9ydCB7IGZpbHRlciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYVtyZHMtc2lkZW5hdi1tZW51LWhlYWRlcl0sIGFbcmRzU2lkZW5hdk1lbnVIZWFkZXJdJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NpZGVuYXYtbWVudS1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUmRzU2lkZW5hdk1lbnVIZWFkZXJDb21wb25lbnRcbiAgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEZvY3VzYWJsZU9wdGlvbiwgTmF0aXZlRWxlbWVudFxue1xuICBwcml2YXRlIHJlYWRvbmx5IGZvY3VzTW9uaXRvciA9IGluamVjdChGb2N1c01vbml0b3IpO1xuXG4gIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPVxuICAgIGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZikubmF0aXZlRWxlbWVudDtcbiAgcmVhZG9ubHkgZGlzYWJsZWQgPSBmYWxzZTtcbiAgcmVhZG9ubHkgX2ZvY3VzZWQgPSB0aGlzLmZvY3VzTW9uaXRvci5tb25pdG9yKHRoaXMubmF0aXZlRWxlbWVudCwgZmFsc2UpLnBpcGUoXG4gICAgZmlsdGVyKCh2KSA9PiAhIXYpLFxuICAgIHRha2VVbnRpbERlc3Ryb3llZCgpLFxuICApO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICByZWFkb25seSBjbGFzc2VzID0gJ3Jkcy1zaWRlbmF2LW1lbnUtaGVhZGVyJztcblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvci5zdG9wTW9uaXRvcmluZyh0aGlzLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgZm9jdXMob3JpZ2luPzogRm9jdXNPcmlnaW4sIG9wdGlvbnM/OiBGb2N1c09wdGlvbnMpOiB2b2lkIHtcbiAgICBpZiAob3JpZ2luKSB7XG4gICAgICB0aGlzLmZvY3VzTW9uaXRvci5mb2N1c1ZpYSh0aGlzLm5hdGl2ZUVsZW1lbnQsIG9yaWdpbiwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubmF0aXZlRWxlbWVudC5mb2N1cyhvcHRpb25zKTtcbiAgICB9XG4gIH1cblxuICBnZXRMYWJlbCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGNsb25lID0gdGhpcy5uYXRpdmVFbGVtZW50LmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MRWxlbWVudDtcbiAgICBjb25zdCBpY29ucyA9IGNsb25lLnF1ZXJ5U2VsZWN0b3JBbGwoJ3Jkcy1pY29uJyk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGljb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpY29uc1tpXS5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmUudGV4dENvbnRlbnQ/LnRyaW0oKSB8fCAnJztcbiAgfVxufVxuIiwiPG5nLWNvbnRlbnQgLz4gPHJkcy1pY29uIGljb249XCJhcnJvd19yaWdodFwiIC8+XG4iXX0=