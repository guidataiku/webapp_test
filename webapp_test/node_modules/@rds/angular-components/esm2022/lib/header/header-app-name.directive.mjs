import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, inject, Output, } from '@angular/core';
import { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';
import { FocusMonitor } from '@angular/cdk/a11y';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
export class RdsHeaderAppNameDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.class = 'rds-header-app-name';
        this.triggered = new EventEmitter();
    }
    get isTriggerable() {
        return this.triggered.observed;
    }
    get tabIndex() {
        return this.isTriggerable ? TAB_INDEX_DEFAULT : TAB_INDEX_NOT_FOCUSABLE;
    }
    ngOnInit() {
        this.focusMonitor.monitor(this.elementRef.nativeElement);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    onLogoClick(event) {
        if ((event instanceof KeyboardEvent &&
            !hasModifierKey(event, 'shiftKey', 'altKey', 'ctrlKey') &&
            (event.keyCode === SPACE || event.keyCode === ENTER)) ||
            event instanceof MouseEvent) {
            if (event instanceof KeyboardEvent && event.keyCode === SPACE) {
                event.stopPropagation();
                event.preventDefault();
            }
            this.triggered.next(event);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderAppNameDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsHeaderAppNameDirective, selector: "rds-header-app-name", outputs: { triggered: "triggered" }, host: { listeners: { "click": "onLogoClick($event)", "keydown": "onLogoClick($event)" }, properties: { "class": "this.class", "class.rds-header-app-name-triggerable": "this.isTriggerable", "tabIndex": "this.tabIndex" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsHeaderAppNameDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-header-app-name',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], isTriggerable: [{
                type: HostBinding,
                args: ['class.rds-header-app-name-triggerable']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], triggered: [{
                type: Output
            }], onLogoClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLWFwcC1uYW1lLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvaGVhZGVyL2hlYWRlci1hcHAtbmFtZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUdOLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsS0FBSyxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLHVCQUF1QixFQUFFLE1BQU0sVUFBVSxDQUFDOztBQUt0RSxNQUFNLE9BQU8seUJBQXlCO0lBSHRDO1FBSW1CLGVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEMsaUJBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFL0IsVUFBSyxHQUFHLHFCQUFxQixDQUFDO1FBWTFDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBOEIsQ0FBQztLQTJCdEU7SUFyQ0MsSUFDSSxhQUFhO1FBQ2YsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFDSSxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsdUJBQXVCLENBQUM7SUFDMUUsQ0FBQztJQUlELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBSUQsV0FBVyxDQUFDLEtBQWlDO1FBQzNDLElBQ0UsQ0FBQyxLQUFLLFlBQVksYUFBYTtZQUM3QixDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7WUFDdkQsQ0FBQyxLQUFLLENBQUMsT0FBTyxLQUFLLEtBQUssSUFBSSxLQUFLLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELEtBQUssWUFBWSxVQUFVLEVBQzNCLENBQUM7WUFDRCxJQUFJLEtBQUssWUFBWSxhQUFhLElBQUksS0FBSyxDQUFDLE9BQU8sS0FBSyxLQUFLLEVBQUUsQ0FBQztnQkFDOUQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO2dCQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDekIsQ0FBQztZQUVELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzdCLENBQUM7SUFDSCxDQUFDOzhHQTFDVSx5QkFBeUI7a0dBQXpCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFIckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO2lCQUNoQzs4QkFLdUIsS0FBSztzQkFBMUIsV0FBVzt1QkFBQyxPQUFPO2dCQUdoQixhQUFhO3NCQURoQixXQUFXO3VCQUFDLHVDQUF1QztnQkFNaEQsUUFBUTtzQkFEWCxXQUFXO3VCQUFDLFVBQVU7Z0JBS2IsU0FBUztzQkFBbEIsTUFBTTtnQkFZUCxXQUFXO3NCQUZWLFlBQVk7dUJBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDOztzQkFDaEMsWUFBWTt1QkFBQyxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVOVEVSLCBoYXNNb2RpZmllcktleSwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgRm9jdXNNb25pdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgVEFCX0lOREVYX0RFRkFVTFQsIFRBQl9JTkRFWF9OT1RfRk9DVVNBQkxFIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdyZHMtaGVhZGVyLWFwcC1uYW1lJyxcbn0pXG5leHBvcnQgY2xhc3MgUmRzSGVhZGVyQXBwTmFtZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25Jbml0IHtcbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0KEVsZW1lbnRSZWYpO1xuICBwcml2YXRlIHJlYWRvbmx5IGZvY3VzTW9uaXRvciA9IGluamVjdChGb2N1c01vbml0b3IpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbGFzcyA9ICdyZHMtaGVhZGVyLWFwcC1uYW1lJztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy1oZWFkZXItYXBwLW5hbWUtdHJpZ2dlcmFibGUnKVxuICBnZXQgaXNUcmlnZ2VyYWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy50cmlnZ2VyZWQub2JzZXJ2ZWQ7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ3RhYkluZGV4JylcbiAgZ2V0IHRhYkluZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaXNUcmlnZ2VyYWJsZSA/IFRBQl9JTkRFWF9ERUZBVUxUIDogVEFCX0lOREVYX05PVF9GT0NVU0FCTEU7XG4gIH1cblxuICBAT3V0cHV0KCkgdHJpZ2dlcmVkID0gbmV3IEV2ZW50RW1pdHRlcjxNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudD4oKTtcblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvci5tb25pdG9yKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZm9jdXNNb25pdG9yLnN0b3BNb25pdG9yaW5nKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIG9uTG9nb0NsaWNrKGV2ZW50OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIChldmVudCBpbnN0YW5jZW9mIEtleWJvYXJkRXZlbnQgJiZcbiAgICAgICAgIWhhc01vZGlmaWVyS2V5KGV2ZW50LCAnc2hpZnRLZXknLCAnYWx0S2V5JywgJ2N0cmxLZXknKSAmJlxuICAgICAgICAoZXZlbnQua2V5Q29kZSA9PT0gU1BBQ0UgfHwgZXZlbnQua2V5Q29kZSA9PT0gRU5URVIpKSB8fFxuICAgICAgZXZlbnQgaW5zdGFuY2VvZiBNb3VzZUV2ZW50XG4gICAgKSB7XG4gICAgICBpZiAoZXZlbnQgaW5zdGFuY2VvZiBLZXlib2FyZEV2ZW50ICYmIGV2ZW50LmtleUNvZGUgPT09IFNQQUNFKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRyaWdnZXJlZC5uZXh0KGV2ZW50KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==