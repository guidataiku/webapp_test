import { FocusKeyManager } from '@angular/cdk/a11y';
import { ENTER, hasModifierKey, SPACE, TAB } from '@angular/cdk/keycodes';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, DestroyRef, inject, Input, QueryList, ViewChildren, ViewEncapsulation, } from '@angular/core';
import { merge, Subscription } from 'rxjs';
import { startWith, switchMap } from 'rxjs/operators';
import { RdsTabLabelWrapperDirective } from './tab-label-wrapper.directive';
import { RdsTabComponent } from './tab.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/portal";
import * as i2 from "./tab-label-wrapper.directive";
export class RdsTabsComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this._tabLabelSubscription = Subscription.EMPTY;
        this.size = 'm';
        this.stretch = false;
    }
    ngAfterContentInit() {
        if (this._tabLabelSubscription) {
            this._tabLabelSubscription.unsubscribe();
        }
        this._tabLabelSubscription = merge(...this.tabs.map((tab) => tab.stateChanges)).subscribe(() => this.cdr.markForCheck());
        this.tabs.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.getActiveTabIndex() !== this.selectedIndex) {
                this.selectTab(this.getActiveTabIndex());
            }
            this.cdr.markForCheck();
        });
        this.selectTab(this.getActiveTabIndex());
    }
    ngAfterViewInit() {
        this.focusKeyManager = new FocusKeyManager(this.labelWrappers)
            .skipPredicate((item) => item.disabled)
            .withHorizontalOrientation('ltr')
            .withWrap()
            .withHomeAndEnd();
        this.focusKeyManager.updateActiveItem(this.getActiveTabIndex());
        this.labelWrappers.changes
            .pipe(startWith(this.labelWrappers), switchMap((items) => merge(...items.map((item) => item._focused))), takeUntilDestroyed(this.destroyRef))
            .subscribe((focusedItem) => {
            this.focusKeyManager.updateActiveItem(focusedItem);
        });
    }
    selectTab(tabIndex) {
        const rdsTabComponents = this.tabs.toArray();
        const rdsTabComponent = rdsTabComponents[tabIndex];
        if (rdsTabComponent.disabled) {
            return;
        }
        this.selectedIndex = tabIndex;
        rdsTabComponents.forEach((tab) => (tab.active = false));
        rdsTabComponent.active = true;
    }
    onKeydown(event) {
        if (hasModifierKey(event)) {
            if (event.keyCode === TAB && hasModifierKey(event, 'shiftKey')) {
                if (this.focusKeyManager.activeItemIndex !== null &&
                    this.focusKeyManager.activeItemIndex > 0) {
                    this.focusKeyManager.setFocusOrigin('keyboard');
                    this.focusKeyManager.setPreviousItemActive();
                    event.preventDefault();
                    this.focusKeyManager.onKeydown(event);
                }
                else {
                    this.resetActiveItem();
                }
            }
            return;
        }
        switch (event.keyCode) {
            case ENTER:
            case SPACE:
                if (this.getIndexOfFocusedElement() !== this.selectedIndex) {
                    this.selectTab(this.getIndexOfFocusedElement());
                }
                break;
            case TAB:
                if (this.focusKeyManager.activeItemIndex ===
                    this.labelWrappers.filter((l) => !l.disabled).length - 1) {
                    this.resetActiveItem();
                }
                else {
                    event.preventDefault();
                    this.focusKeyManager.setFocusOrigin('keyboard');
                    this.focusKeyManager.setNextItemActive();
                    this.focusKeyManager.onKeydown(event);
                }
                break;
            default:
                this.focusKeyManager.onKeydown(event);
        }
    }
    resetActiveItem() {
        this.focusKeyManager.setActiveItem(-1);
    }
    getIndexOfFocusedElement() {
        return this.focusKeyManager
            ? this.focusKeyManager.activeItemIndex
            : 0;
    }
    getActiveTabIndex() {
        const activeTabs = this.tabs ? this.tabs.filter((tab) => tab.active) : [];
        return activeTabs.length > 0
            ? this.tabs.toArray().indexOf(activeTabs[0])
            : 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsTabsComponent, selector: "rds-tabs", inputs: { size: "size", stretch: ["stretch", "stretch", booleanAttribute] }, queries: [{ propertyName: "tabs", predicate: RdsTabComponent }], viewQueries: [{ propertyName: "labelWrappers", predicate: RdsTabLabelWrapperDirective, descendants: true }], ngImport: i0, template: `
    <div class="rds-tabs" [class.rds-tabs-stretch]="stretch">
      <div
        class="rds-tabs__header"
        role="tablist"
        (blur)="resetActiveItem()"
        (keydown)="onKeydown($event)"
      >
        @for (tab of tabs; track tab.label; let i = $index) {
          <div
            class="rds-tabs__tab rds-tabs__tab-size-{{ size }}"
            role="tab"
            rdsTabLabelWrapper
            [disabled]="tab.disabled"
            [attr.tabIndex]="tab.disabled ? '-1' : '0'"
            [attr.aria-posinset]="i + 1"
            [attr.aria-setsize]="tabs.length"
            [attr.aria-disabled]="tab.disabled"
            [attr.aria-selected]="selectedIndex === i"
            [class.rds-tabs__tab--active]="selectedIndex === i"
            [class.rds-tabs__tab--disabled]="tab.disabled"
            (click)="selectTab(i)"
          >
            @if (tab.templateLabel) {
              <ng-template [cdkPortalOutlet]="tab.templateLabel" />
            }
            @if (!tab.templateLabel) {
              {{ tab.label }}
            }
          </div>
        }
      </div>

      <div class="rds-tabs__content-wrapper">
        <ng-content />
      </div>
    </div>
  `, isInline: true, styles: [".rds-tabs .rds-tabs__header{display:flex;border-bottom:1px solid var(--rds-color-grey-2)}.rds-tabs .rds-tabs__tab{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;top:1px;display:flex;align-items:center;border-bottom:3px solid transparent;margin:0 16px;height:59px;color:var(--rds-color-low-contrast);cursor:pointer}.rds-tabs .rds-tabs__tab:hover,.rds-tabs .rds-tabs__tab:focus{outline:none}.rds-tabs .rds-tabs__tab>*{margin-left:12px}.rds-tabs .rds-tabs__tab>*:first-child{margin-left:0}.rds-tabs .rds-tabs__tab:first-child{padding-left:0;margin-left:0}.rds-tabs .rds-tabs__tab.rds-tabs__tab--active{border-bottom:3px solid var(--rds-color-informative-hover);color:var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.rds-tabs__tab--disabled{color:var(--rds-color-disabled);pointer-events:none;cursor:default}.rds-tabs .rds-tabs__tab:hover:not(.rds-tabs__tab--disabled):not(.rds-tabs__tab--active){border-bottom:3px solid var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.cdk-focused.cdk-keyboard-focused:not(.rds-tabs__tab--disabled){border-radius:2px;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px}.rds-tabs .rds-tabs__tab-size-s{margin:0 12px;height:43px}.rds-tabs.rds-tabs-stretch .rds-tabs__tab{flex-basis:0;flex-grow:1}\n"], dependencies: [{ kind: "directive", type: i1.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "directive", type: i2.RdsTabLabelWrapperDirective, selector: "[rdsTabLabelWrapper]", inputs: ["disabled"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTabsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-tabs', template: `
    <div class="rds-tabs" [class.rds-tabs-stretch]="stretch">
      <div
        class="rds-tabs__header"
        role="tablist"
        (blur)="resetActiveItem()"
        (keydown)="onKeydown($event)"
      >
        @for (tab of tabs; track tab.label; let i = $index) {
          <div
            class="rds-tabs__tab rds-tabs__tab-size-{{ size }}"
            role="tab"
            rdsTabLabelWrapper
            [disabled]="tab.disabled"
            [attr.tabIndex]="tab.disabled ? '-1' : '0'"
            [attr.aria-posinset]="i + 1"
            [attr.aria-setsize]="tabs.length"
            [attr.aria-disabled]="tab.disabled"
            [attr.aria-selected]="selectedIndex === i"
            [class.rds-tabs__tab--active]="selectedIndex === i"
            [class.rds-tabs__tab--disabled]="tab.disabled"
            (click)="selectTab(i)"
          >
            @if (tab.templateLabel) {
              <ng-template [cdkPortalOutlet]="tab.templateLabel" />
            }
            @if (!tab.templateLabel) {
              {{ tab.label }}
            }
          </div>
        }
      </div>

      <div class="rds-tabs__content-wrapper">
        <ng-content />
      </div>
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-tabs .rds-tabs__header{display:flex;border-bottom:1px solid var(--rds-color-grey-2)}.rds-tabs .rds-tabs__tab{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;position:relative;top:1px;display:flex;align-items:center;border-bottom:3px solid transparent;margin:0 16px;height:59px;color:var(--rds-color-low-contrast);cursor:pointer}.rds-tabs .rds-tabs__tab:hover,.rds-tabs .rds-tabs__tab:focus{outline:none}.rds-tabs .rds-tabs__tab>*{margin-left:12px}.rds-tabs .rds-tabs__tab>*:first-child{margin-left:0}.rds-tabs .rds-tabs__tab:first-child{padding-left:0;margin-left:0}.rds-tabs .rds-tabs__tab.rds-tabs__tab--active{border-bottom:3px solid var(--rds-color-informative-hover);color:var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.rds-tabs__tab--disabled{color:var(--rds-color-disabled);pointer-events:none;cursor:default}.rds-tabs .rds-tabs__tab:hover:not(.rds-tabs__tab--disabled):not(.rds-tabs__tab--active){border-bottom:3px solid var(--rds-color-informative-hover)}.rds-tabs .rds-tabs__tab.cdk-focused.cdk-keyboard-focused:not(.rds-tabs__tab--disabled){border-radius:2px;outline:2px solid var(--rds-color-stroke-active-focus);outline-offset:2px}.rds-tabs .rds-tabs__tab-size-s{margin:0 12px;height:43px}.rds-tabs.rds-tabs-stretch .rds-tabs__tab{flex-basis:0;flex-grow:1}\n"] }]
        }], propDecorators: { tabs: [{
                type: ContentChildren,
                args: [RdsTabComponent]
            }], labelWrappers: [{
                type: ViewChildren,
                args: [RdsTabLabelWrapperDirective]
            }], size: [{
                type: Input
            }], stretch: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,