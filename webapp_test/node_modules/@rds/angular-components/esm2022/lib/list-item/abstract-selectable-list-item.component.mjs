import { ContentObserver } from '@angular/cdk/observers';
import { booleanAttribute, ChangeDetectorRef, Component, ContentChild, DestroyRef, EventEmitter, HostBinding, HostListener, inject, Input, Output, } from '@angular/core';
import { RdsAvatarComponent } from '../avatar';
import { RdsListItemComponent } from './list-item.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const RDS_LIST_ITEM_SIZE_TO_AVATAR_SIZE_MAP = {
    s: 'xs',
    m: 's',
    l: 'm',
};
export class RdsAbstractSelectableListItemComponent extends RdsListItemComponent {
    constructor() {
        super(...arguments);
        this.destroyRef = inject(DestroyRef);
        this.contentObserver = inject(ContentObserver);
        this.cdr = inject(ChangeDetectorRef);
        this.checkedChanged = new EventEmitter();
        this.role = 'option';
        this.checked = false;
    }
    get cssClasses() {
        return [...super.cssClasses, this.getSelectTypeClass()];
    }
    ngAfterViewInit() {
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.avatar) {
                this.avatar.disableInteractions = true;
                this.adjustAvatarSize();
            }
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        if (changes['size']) {
            this.adjustAvatarSize();
        }
    }
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.checkedChanged.emit(this.checked);
            this.cdr.markForCheck();
        }
    }
    adjustAvatarSize() {
        if (this.avatar &&
            this.avatar.size !== RDS_LIST_ITEM_SIZE_TO_AVATAR_SIZE_MAP[this.size]) {
            this.avatar.size = RDS_LIST_ITEM_SIZE_TO_AVATAR_SIZE_MAP[this.size];
        }
    }
    focus(origin) {
        this.renderer.addClass(this.elementRef.nativeElement, 'cdk-focused');
        if (origin === 'keyboard') {
            this.renderer.addClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        }
        this.cdr.markForCheck();
        this._focused.next(this);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectableListItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsAbstractSelectableListItemComponent, selector: "ng-component", inputs: { role: "role", checked: ["checked", "checked", booleanAttribute] }, outputs: { checkedChanged: "checkedChanged" }, host: { listeners: { "click": "toggle()" }, properties: { "attr.role": "this.role", "class": "this.cssClasses", "class.rds-list-item--checked": "this.checked" } }, queries: [{ propertyName: "avatar", first: true, predicate: RdsAvatarComponent, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectableListItemComponent, decorators: [{
            type: Component,
            args: [{ template: '' }]
        }], propDecorators: { avatar: [{
                type: ContentChild,
                args: [RdsAvatarComponent]
            }], checkedChanged: [{
                type: Output
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], checked: [{
                type: HostBinding,
                args: ['class.rds-list-item--checked']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], toggle: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3Qtc2VsZWN0YWJsZS1saXN0LWl0ZW0uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9saXN0LWl0ZW0vYWJzdHJhY3Qtc2VsZWN0YWJsZS1saXN0LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBRUwsZ0JBQWdCLEVBQ2hCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsWUFBWSxFQUNaLFVBQVUsRUFDVixZQUFZLEVBQ1osV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUVMLE1BQU0sR0FFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQWlCLE1BQU0sV0FBVyxDQUFDO0FBQzlELE9BQU8sRUFBRSxvQkFBb0IsRUFBbUIsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFaEUsTUFBTSxxQ0FBcUMsR0FHdkM7SUFDRixDQUFDLEVBQUUsSUFBSTtJQUNQLENBQUMsRUFBRSxHQUFHO0lBQ04sQ0FBQyxFQUFFLEdBQUc7Q0FDUCxDQUFDO0FBR0YsTUFBTSxPQUFnQixzQ0FDcEIsU0FBUSxvQkFBb0I7SUFGOUI7O1FBS21CLGVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUIsb0JBQWUsR0FBRyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUMsUUFBRyxHQUFHLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBSWhDLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQUl2RCxTQUFJLEdBQTBCLFFBQVEsQ0FBQztRQVNoRCxZQUFPLEdBQUcsS0FBSyxDQUFDO0tBdURqQjtJQTlEQyxJQUN1QixVQUFVO1FBQy9CLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBTUQsZUFBZTtRQUNiLElBQUksQ0FBQyxlQUFlO2FBQ2pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQzthQUN0QyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2FBQ3pDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7WUFDZCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7Z0JBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQzFCLENBQUM7WUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQzFCLENBQUM7SUFDSCxDQUFDO0lBR0QsTUFBTTtRQUNKLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7WUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDMUIsQ0FBQztJQUNILENBQUM7SUFJTyxnQkFBZ0I7UUFDdEIsSUFDRSxJQUFJLENBQUMsTUFBTTtZQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDckUsQ0FBQztZQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLHFDQUFxQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0RSxDQUFDO0lBQ0gsQ0FBQztJQUVRLEtBQUssQ0FBQyxNQUFvQjtRQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUVyRSxJQUFJLE1BQU0sS0FBSyxVQUFVLEVBQUUsQ0FBQztZQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FDcEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQzdCLHNCQUFzQixDQUN2QixDQUFDO1FBQ0osQ0FBQztRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQzs4R0E3RW1CLHNDQUFzQztrR0FBdEMsc0NBQXNDLG9GQXNCdEMsZ0JBQWdCLG9SQWR0QixrQkFBa0IsNEZBVFgsRUFBRTs7MkZBQ0gsc0NBQXNDO2tCQUQzRCxTQUFTO21CQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTs4QkFTbUIsTUFBTTtzQkFBakQsWUFBWTt1QkFBQyxrQkFBa0I7Z0JBRWIsY0FBYztzQkFBaEMsTUFBTTtnQkFJRSxJQUFJO3NCQUZaLEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsV0FBVztnQkFJRCxVQUFVO3NCQURoQyxXQUFXO3VCQUFDLE9BQU87Z0JBT3BCLE9BQU87c0JBRk4sV0FBVzt1QkFBQyw4QkFBOEI7O3NCQUMxQyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQXdCdEMsTUFBTTtzQkFETCxZQUFZO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb2N1c09yaWdpbiB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IENvbnRlbnRPYnNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgQ29udGVudENoaWxkLFxuICBEZXN0cm95UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT3V0cHV0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJkc0F2YXRhckNvbXBvbmVudCwgUmRzQXZhdGFyU2l6ZSB9IGZyb20gJy4uL2F2YXRhcic7XG5pbXBvcnQgeyBSZHNMaXN0SXRlbUNvbXBvbmVudCwgUmRzTGlzdEl0ZW1TaXplIH0gZnJvbSAnLi9saXN0LWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcblxuY29uc3QgUkRTX0xJU1RfSVRFTV9TSVpFX1RPX0FWQVRBUl9TSVpFX01BUDogUmVjb3JkPFxuICBSZHNMaXN0SXRlbVNpemUsXG4gIFJkc0F2YXRhclNpemVcbj4gPSB7XG4gIHM6ICd4cycsXG4gIG06ICdzJyxcbiAgbDogJ20nLFxufTtcblxuQENvbXBvbmVudCh7IHRlbXBsYXRlOiAnJyB9KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJkc0Fic3RyYWN0U2VsZWN0YWJsZUxpc3RJdGVtQ29tcG9uZW50XG4gIGV4dGVuZHMgUmRzTGlzdEl0ZW1Db21wb25lbnRcbiAgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXNcbntcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95UmVmID0gaW5qZWN0KERlc3Ryb3lSZWYpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgY29udGVudE9ic2VydmVyID0gaW5qZWN0KENvbnRlbnRPYnNlcnZlcik7XG4gIHByb3RlY3RlZCByZWFkb25seSBjZHIgPSBpbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuXG4gIEBDb250ZW50Q2hpbGQoUmRzQXZhdGFyQ29tcG9uZW50KSBwcm90ZWN0ZWQgYXZhdGFyOiBSZHNBdmF0YXJDb21wb25lbnQ7XG5cbiAgQE91dHB1dCgpIHJlYWRvbmx5IGNoZWNrZWRDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnYXR0ci5yb2xlJylcbiAgb3ZlcnJpZGUgcm9sZTogJ21lbnVpdGVtJyB8ICdvcHRpb24nID0gJ29wdGlvbic7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpXG4gIHByb3RlY3RlZCBvdmVycmlkZSBnZXQgY3NzQ2xhc3NlcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIFsuLi5zdXBlci5jc3NDbGFzc2VzLCB0aGlzLmdldFNlbGVjdFR5cGVDbGFzcygpXTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmRzLWxpc3QtaXRlbS0tY2hlY2tlZCcpXG4gIEBJbnB1dCh7IHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuICBjaGVja2VkID0gZmFsc2U7XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udGVudE9ic2VydmVyXG4gICAgICAub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudClcbiAgICAgIC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCh0aGlzLmRlc3Ryb3lSZWYpKVxuICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmF2YXRhcikge1xuICAgICAgICAgIHRoaXMuYXZhdGFyLmRpc2FibGVJbnRlcmFjdGlvbnMgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuYWRqdXN0QXZhdGFyU2l6ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlc1snc2l6ZSddKSB7XG4gICAgICB0aGlzLmFkanVzdEF2YXRhclNpemUoKTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIHRvZ2dsZSgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XG4gICAgICB0aGlzLmNoZWNrZWRDaGFuZ2VkLmVtaXQodGhpcy5jaGVja2VkKTtcbiAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBhYnN0cmFjdCBnZXRTZWxlY3RUeXBlQ2xhc3MoKTogc3RyaW5nO1xuXG4gIHByaXZhdGUgYWRqdXN0QXZhdGFyU2l6ZSgpOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmF2YXRhciAmJlxuICAgICAgdGhpcy5hdmF0YXIuc2l6ZSAhPT0gUkRTX0xJU1RfSVRFTV9TSVpFX1RPX0FWQVRBUl9TSVpFX01BUFt0aGlzLnNpemVdXG4gICAgKSB7XG4gICAgICB0aGlzLmF2YXRhci5zaXplID0gUkRTX0xJU1RfSVRFTV9TSVpFX1RPX0FWQVRBUl9TSVpFX01BUFt0aGlzLnNpemVdO1xuICAgIH1cbiAgfVxuXG4gIG92ZXJyaWRlIGZvY3VzKG9yaWdpbj86IEZvY3VzT3JpZ2luKTogdm9pZCB7XG4gICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Nkay1mb2N1c2VkJyk7XG5cbiAgICBpZiAob3JpZ2luID09PSAna2V5Ym9hcmQnKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCxcbiAgICAgICAgJ2Nkay1rZXlib2FyZC1mb2N1c2VkJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgdGhpcy5fZm9jdXNlZC5uZXh0KHRoaXMpO1xuICB9XG59XG4iXX0=