import { ContentChildren, DestroyRef, Directive, HostBinding, HostListener, inject, Input, isDevMode, QueryList, } from '@angular/core';
import { merge } from 'rxjs';
import { RdsListItemComponent } from './list-item.component';
import { startWith, switchMap, tap } from 'rxjs/operators';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { DOWN_ARROW, ENTER, SPACE, UP_ARROW } from '@angular/cdk/keycodes';
import { RdsMultiSelectListItemComponent } from './multi-select-list-item.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
export class RdsListItemContainerDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this._directDescendantItems = new QueryList();
        this.attrRole = 'menu';
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.ariaMultiSelectable = false;
        this.ariaActiveDescendant = null;
        this.class = 'rds-list-item-container';
    }
    ngAfterContentInit() {
        this._updateDirectDescendants();
        this._keyManager = new FocusKeyManager(this._directDescendantItems)
            .skipPredicate((i) => i.disabled)
            .withWrap()
            .withTypeAhead()
            .withHomeAndEnd();
        this._directDescendantItems.changes
            .pipe(startWith(this._directDescendantItems), tap(() => {
            this.tabIndex = this._directDescendantItems.filter((i) => !i.disabled)
                ? TAB_INDEX_DEFAULT
                : TAB_INDEX_NOT_FOCUSABLE;
            this.setRoleTagsIfParentNotSetAndChildrenHasSameValue();
            this.checkRoleTags();
        }), switchMap((items) => merge(...items.map((item) => item._focused))), takeUntilDestroyed(this.destroyRef))
            .subscribe((focusedItem) => this._keyManager.updateActiveItem(focusedItem));
    }
    ngOnChanges(changes) {
        if (changes['role'] && changes['role'].currentValue) {
            this.attrRole = this.role;
            this.checkRoleTags();
        }
    }
    ngOnDestroy() {
        this._directDescendantItems.destroy();
    }
    focus() {
        if (!this._keyManager.activeItem) {
            this._keyManager.setFirstItemActive();
        }
        if (this._keyManager.activeItem) {
            const firstSelected = this._directDescendantItems
                .toArray()
                .findIndex((i) => i.checked);
            if (firstSelected) {
                this._directDescendantItems.get(firstSelected)?.focus('keyboard');
            }
            this._keyManager.activeItem.focus('keyboard');
            this.ariaActiveDescendant = this._keyManager.activeItem.getLabel();
        }
    }
    blur() {
        this._keyManager.activeItem?.blur();
        this.ariaActiveDescendant = null;
    }
    handleKeydown(event) {
        if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {
            this._keyManager.setFocusOrigin('keyboard');
        }
        const lastActiveItem = this._keyManager.activeItem;
        this._keyManager.onKeydown(event);
        if (this._keyManager.activeItem !== lastActiveItem) {
            lastActiveItem?.blur();
        }
        if (this._keyManager.activeItem) {
            if (event.keyCode === ENTER || event.keyCode === SPACE) {
                this._keyManager.activeItem.click();
                this._keyManager.activeItem.markAsActive();
            }
            this.ariaActiveDescendant = this._keyManager.activeItem.getLabel();
        }
    }
    handleKeyup(event) {
        if ((event.keyCode === ENTER || event.keyCode === SPACE) &&
            this._keyManager.activeItem) {
            this._keyManager.activeItem.markAsInactive();
        }
    }
    _updateDirectDescendants() {
        this._allItems.changes
            .pipe(startWith(this._allItems), takeUntilDestroyed(this.destroyRef))
            .subscribe((items) => {
            this._directDescendantItems.reset(items.toArray());
            this._directDescendantItems.notifyOnChanges();
        });
    }
    setRoleTagsIfParentNotSetAndChildrenHasSameValue() {
        if (!this.role) {
            const childRoles = this._directDescendantItems.reduce((acc, curr) => {
                if (!acc.includes(curr.role)) {
                    acc.push(curr.role);
                }
                return acc;
            }, []);
            if (childRoles.length === 1) {
                this.attrRole = childRoles[0] === 'menuitem' ? 'menu' : 'listbox';
            }
        }
    }
    checkRoleTags() {
        this.ariaMultiSelectable =
            this._directDescendantItems.filter((i) => !(i instanceof RdsMultiSelectListItemComponent)).length === 0;
        if (isDevMode()) {
            if (this.attrRole === 'menu') {
                const hasOptionsInsideMenu = this._directDescendantItems.some((i) => i.role !== 'menuitem');
                if (hasOptionsInsideMenu) {
                    throw new Error(`Defining role other than 'menuitem' for 'menu' parent is forbidden.`);
                }
            }
            else if (this.attrRole === 'listbox') {
                const hasMenuitemInsideListbox = this._directDescendantItems.some((i) => i.role !== 'option');
                if (hasMenuitemInsideListbox) {
                    throw new Error(`Defining role other than 'option' for 'listbox' parent is forbidden.`);
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemContainerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsListItemContainerDirective, selector: "[rds-list-item-container], [rdsListItemContainer]", inputs: { role: "role" }, host: { listeners: { "focus": "focus()", "blur": "blur()", "keydown": "handleKeydown($event)", "keyup": "handleKeyup($event)" }, properties: { "attr.role": "this.attrRole", "tabIndex": "this.tabIndex", "attr.aria-multiselectable": "this.ariaMultiSelectable", "attr.aria-activedescendant": "this.ariaActiveDescendant", "class": "this.class" } }, queries: [{ propertyName: "_allItems", predicate: RdsListItemComponent, descendants: true }], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-list-item-container], [rdsListItemContainer]',
                }]
        }], propDecorators: { _allItems: [{
                type: ContentChildren,
                args: [RdsListItemComponent, { descendants: true }]
            }], role: [{
                type: Input
            }], attrRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], ariaMultiSelectable: [{
                type: HostBinding,
                args: ['attr.aria-multiselectable']
            }], ariaActiveDescendant: [{
                type: HostBinding,
                args: ['attr.aria-activedescendant']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], handleKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,