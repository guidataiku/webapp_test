import { booleanAttribute, ChangeDetectionStrategy, Component, ContentChild, ElementRef, HostBinding, HostListener, inject, Input, Renderer2, ViewEncapsulation, } from '@angular/core';
import { Subject } from 'rxjs';
import { RdsIconComponent } from '../icons';
import { RDS_LIST_ITEM_TEMPLATE } from './list-item.templates';
import { TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
export class RdsListItemComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this._focused = new Subject();
        this.size = 'm';
        this.role = 'menuitem';
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.disabled = false;
    }
    get cssClasses() {
        return [
            'rds-list-item',
            `rds-list-item--${this.size}`,
            'rds-focus-indicator',
        ];
    }
    get attrAriaDisabled() {
        return this.disabled.toString();
    }
    get attrDisabled() {
        return this.disabled ? 'disabled' : null;
    }
    focus(origin) {
        if (origin === 'keyboard') {
            this.renderer.addClass(this.elementRef.nativeElement, 'cdk-focused');
            this.renderer.addClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        }
        this._focused.next(this);
    }
    blur() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'cdk-focused');
        this.renderer.removeClass(this.elementRef.nativeElement, 'cdk-keyboard-focused');
        this.markAsInactive();
    }
    click() {
        this.elementRef.nativeElement.click();
    }
    getLabel() {
        const clone = this.elementRef.nativeElement.cloneNode(true);
        this.removeNodes(clone.querySelectorAll('rds-icon'));
        this.removeNodes(clone.querySelectorAll('rds-avatar'));
        this.removeNodes(clone.querySelectorAll('rds-pseudo-checkbox'));
        return clone.textContent?.trim() || '';
    }
    markAsActive() {
        this.renderer.addClass(this.elementRef.nativeElement, 'rds-list-item-active');
    }
    markAsInactive() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'rds-list-item-active');
    }
    removeNodes(nodes) {
        for (let i = 0; i < nodes.length; i++) {
            nodes[i].remove();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsListItemComponent, selector: "button[rds-list-item], button[rdsListItem]", inputs: { size: "size", role: "role", disabled: ["disabled", "disabled", booleanAttribute] }, host: { listeners: { "focus": "focus()", "blur": "blur()" }, properties: { "attr.role": "this.role", "tabIndex": "this.tabIndex", "class": "this.cssClasses", "class.rds-list-item--disabled": "this.disabled", "attr.aria-disabled": "this.attrAriaDisabled", "attr.disabled": "this.attrDisabled" } }, queries: [{ propertyName: "icon", first: true, predicate: RdsIconComponent, descendants: true }], ngImport: i0, template: "<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsListItemComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_LIST_ITEM_TEMPLATE,
                    selector: 'button[rds-list-item], button[rdsListItem]',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { icon: [{
                type: ContentChild,
                args: [RdsIconComponent]
            }], size: [{
                type: Input
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['class.rds-list-item--disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], attrAriaDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,