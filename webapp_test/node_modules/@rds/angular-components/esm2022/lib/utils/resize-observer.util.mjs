/* eslint-disable @typescript-eslint/no-non-null-assertion */
import { coerceElement, } from '@angular/cdk/coercion';
import { booleanAttribute, Directive, ElementRef, EventEmitter, inject, Injectable, Input, numberAttribute, Output, } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class ResizeObserverFactory {
    create(callback) {
        return typeof ResizeObserver === 'undefined'
            ? null
            : new ResizeObserver(callback);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ResizeObserverFactory, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ResizeObserverFactory, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: ResizeObserverFactory, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
export class DimensionsObserver {
    constructor() {
        this.resizeObserverFactory = inject(ResizeObserverFactory);
        this._observedElements = new Map();
    }
    ngOnDestroy() {
        this._observedElements.forEach((_, element) => this._cleanupObserver(element));
    }
    observe(elementOrRef) {
        const element = coerceElement(elementOrRef);
        return new Observable((observer) => {
            const stream = this._observeElement(element);
            const subscription = stream.subscribe(observer);
            return () => {
                subscription.unsubscribe();
                this._unobserveElement(element);
            };
        });
    }
    _observeElement(element) {
        if (!this._observedElements.has(element)) {
            const stream = new Subject();
            const observer = this.resizeObserverFactory.create((mutations) => stream.next(mutations));
            if (observer) {
                observer.observe(element);
            }
            this._observedElements.set(element, { observer, stream, count: 1 });
        }
        else {
            this._observedElements.get(element).count++;
        }
        return this._observedElements.get(element).stream;
    }
    _unobserveElement(element) {
        if (this._observedElements.has(element)) {
            this._observedElements.get(element).count--;
            if (!this._observedElements.get(element).count) {
                this._cleanupObserver(element);
            }
        }
    }
    _cleanupObserver(element) {
        if (this._observedElements.has(element)) {
            const { observer, stream } = this._observedElements.get(element);
            if (observer) {
                observer.disconnect();
            }
            stream.complete();
            this._observedElements.delete(element);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DimensionsObserver, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DimensionsObserver, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DimensionsObserver, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
/**
 * Directive that triggers a callback whenever the content of
 * its associated element has changed.
 */
export class RdsObserveResizeDirective {
    constructor() {
        this.dimensionsObserver = inject(DimensionsObserver);
        this.elementRef = inject(ElementRef);
        this.rdsObserveResize = new EventEmitter();
        this._disabled = false;
        this._currentSubscription = null;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
    }
    get disabled() {
        return this._disabled;
    }
    set debounce(value) {
        this._debounce = numberAttribute(value);
        this._subscribe();
    }
    get debounce() {
        return this._debounce;
    }
    ngAfterContentInit() {
        if (!this._currentSubscription && !this.disabled) {
            this._subscribe();
        }
    }
    ngOnDestroy() {
        this._unsubscribe();
    }
    _subscribe() {
        this._unsubscribe();
        const stream = this.dimensionsObserver.observe(this.elementRef);
        this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.rdsObserveResize);
    }
    _unsubscribe() {
        this._currentSubscription?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsObserveResizeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsObserveResizeDirective, isStandalone: true, selector: "[rdsObserveResize]", inputs: { disabled: ["rdsObserveResizeDisabled", "disabled"], debounce: "debounce" }, outputs: { rdsObserveResize: "rdsObserveResize" }, exportAs: ["rdsObserveResize"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsObserveResizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsObserveResize]',
                    exportAs: 'rdsObserveResize',
                    standalone: true,
                }]
        }], propDecorators: { rdsObserveResize: [{
                type: Output
            }], disabled: [{
                type: Input,
                args: ['rdsObserveResizeDisabled']
            }], debounce: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,