import { DestroyRef, Directive, ElementRef, HostBinding, HostListener, inject, Input, } from '@angular/core';
import { fromEvent, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsDropdownToggleDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.toggle = new Subject();
        this._isOpen = false;
        this._eventsDestroyer$ = new Subject();
        this.trigger = 'click';
        this.class = 'rds-dropdown-toggle';
        this.disabled = false;
    }
    static { this.TRIGGER_SPLITTER = ', '; }
    get isOpen() {
        return this._isOpen;
    }
    set isOpen(isOpen) {
        this._isOpen = isOpen;
    }
    onEnter($event) {
        this.toggle.next($event);
    }
    ngOnChanges(changes) {
        if (changes['trigger'] && !changes['trigger'].isFirstChange()) {
            this._refreshEvents();
        }
    }
    ngAfterContentInit() {
        this._refreshEvents();
    }
    ngOnDestroy() {
        this._eventsDestroyer$.next();
        this._eventsDestroyer$.complete();
    }
    _refreshEvents() {
        this._eventsDestroyer$.next();
        if (this.trigger === null || this.trigger === undefined) {
            this.trigger = 'click';
        }
        this.trigger
            .split(RdsDropdownToggleDirective.TRIGGER_SPLITTER)
            .forEach((trigger) => fromEvent(this.elementRef.nativeElement, trigger)
            .pipe(takeUntil(this._eventsDestroyer$), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => this.toggle.next(event)));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownToggleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDropdownToggleDirective, selector: "[rdsDropdownToggle], [rds-dropdown-toggle]", inputs: { trigger: "trigger", isOpen: "isOpen" }, host: { listeners: { "keydown.enter": "onEnter($event)" }, properties: { "class": "this.class", "disabled": "this.disabled", "attr.aria-expanded": "this.isOpen" } }, exportAs: ["rdsDropdownToggle"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDropdownToggle], [rds-dropdown-toggle]',
                    exportAs: 'rdsDropdownToggle',
                }]
        }], propDecorators: { trigger: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['disabled']
            }], isOpen: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], onEnter: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvZHJvcGRvd24vZHJvcGRvd24tdG9nZ2xlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsVUFBVSxFQUNWLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUlOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFNaEUsTUFBTSxPQUFPLDBCQUEwQjtJQUp2QztRQVNrQixlQUFVLEdBQUcsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQztRQUN0RCxlQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTFDLFdBQU0sR0FBRyxJQUFJLE9BQU8sRUFBOEIsQ0FBQztRQUNsRCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ1Qsc0JBQWlCLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztRQUd6RCxZQUFPLEdBQTZCLE9BQU8sQ0FBQztRQUc1QyxVQUFLLEdBQUcscUJBQXFCLENBQUM7UUFHOUIsYUFBUSxHQUFHLEtBQUssQ0FBQztLQWtEbEI7YUFsRXlCLHFCQUFnQixHQUFHLElBQUksQUFBUCxDQUFRO0lBa0JoRCxJQUVJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQUksTUFBTSxDQUFDLE1BQWU7UUFDeEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUdELE9BQU8sQ0FBQyxNQUFxQjtRQUMzQixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksT0FBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDOUQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLENBQUM7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVPLGNBQWM7UUFDcEIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxDQUFDO1FBRTlCLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztZQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN6QixDQUFDO1FBRUQsSUFBSSxDQUFDLE9BQU87YUFDVCxLQUFLLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUM7YUFDbEQsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FDbkIsU0FBUyxDQUFhLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQzthQUMxRCxJQUFJLENBQ0gsU0FBUyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUNqQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQ3BDO2FBQ0EsU0FBUyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUNqRCxDQUFDO0lBQ04sQ0FBQzs4R0FwRVUsMEJBQTBCO2tHQUExQiwwQkFBMEI7OzJGQUExQiwwQkFBMEI7a0JBSnRDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDRDQUE0QztvQkFDdEQsUUFBUSxFQUFFLG1CQUFtQjtpQkFDOUI7OEJBY0MsT0FBTztzQkFETixLQUFLO2dCQUlOLEtBQUs7c0JBREosV0FBVzt1QkFBQyxPQUFPO2dCQUlwQixRQUFRO3NCQURQLFdBQVc7dUJBQUMsVUFBVTtnQkFLbkIsTUFBTTtzQkFGVCxLQUFLOztzQkFDTCxXQUFXO3VCQUFDLG9CQUFvQjtnQkFVakMsT0FBTztzQkFETixZQUFZO3VCQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIERlc3Ryb3lSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBPbkRlc3Ryb3ksXG4gIFNpbXBsZUNoYW5nZXMsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZHNEcm9wZG93blRvZ2dsZVRyaWdnZXIgfSBmcm9tICcuL2Ryb3Bkb3duLnR5cGVzJztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Jkc0Ryb3Bkb3duVG9nZ2xlXSwgW3Jkcy1kcm9wZG93bi10b2dnbGVdJyxcbiAgZXhwb3J0QXM6ICdyZHNEcm9wZG93blRvZ2dsZScsXG59KVxuZXhwb3J0IGNsYXNzIFJkc0Ryb3Bkb3duVG9nZ2xlRGlyZWN0aXZlXG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3lcbntcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVFJJR0dFUl9TUExJVFRFUiA9ICcsICc7XG5cbiAgcHVibGljIHJlYWRvbmx5IGVsZW1lbnRSZWYgPSBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpO1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKTtcblxuICByZWFkb25seSB0b2dnbGUgPSBuZXcgU3ViamVjdDxNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudD4oKTtcbiAgcHJvdGVjdGVkIF9pc09wZW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSByZWFkb25seSBfZXZlbnRzRGVzdHJveWVyJCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgQElucHV0KClcbiAgdHJpZ2dlcjogUmRzRHJvcGRvd25Ub2dnbGVUcmlnZ2VyID0gJ2NsaWNrJztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJylcbiAgY2xhc3MgPSAncmRzLWRyb3Bkb3duLXRvZ2dsZSc7XG5cbiAgQEhvc3RCaW5kaW5nKCdkaXNhYmxlZCcpXG4gIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtZXhwYW5kZWQnKVxuICBnZXQgaXNPcGVuKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc09wZW47XG4gIH1cblxuICBzZXQgaXNPcGVuKGlzT3BlbjogYm9vbGVhbikge1xuICAgIHRoaXMuX2lzT3BlbiA9IGlzT3BlbjtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uZW50ZXInLCBbJyRldmVudCddKVxuICBvbkVudGVyKCRldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIHRoaXMudG9nZ2xlLm5leHQoJGV2ZW50KTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlc1sndHJpZ2dlciddICYmICFjaGFuZ2VzWyd0cmlnZ2VyJ10uaXNGaXJzdENoYW5nZSgpKSB7XG4gICAgICB0aGlzLl9yZWZyZXNoRXZlbnRzKCk7XG4gICAgfVxuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX3JlZnJlc2hFdmVudHMoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX2V2ZW50c0Rlc3Ryb3llciQubmV4dCgpO1xuICAgIHRoaXMuX2V2ZW50c0Rlc3Ryb3llciQuY29tcGxldGUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlZnJlc2hFdmVudHMoKTogdm9pZCB7XG4gICAgdGhpcy5fZXZlbnRzRGVzdHJveWVyJC5uZXh0KCk7XG5cbiAgICBpZiAodGhpcy50cmlnZ2VyID09PSBudWxsIHx8IHRoaXMudHJpZ2dlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnRyaWdnZXIgPSAnY2xpY2snO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlclxuICAgICAgLnNwbGl0KFJkc0Ryb3Bkb3duVG9nZ2xlRGlyZWN0aXZlLlRSSUdHRVJfU1BMSVRURVIpXG4gICAgICAuZm9yRWFjaCgodHJpZ2dlcikgPT5cbiAgICAgICAgZnJvbUV2ZW50PE1vdXNlRXZlbnQ+KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB0cmlnZ2VyKVxuICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuX2V2ZW50c0Rlc3Ryb3llciQpLFxuICAgICAgICAgICAgdGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZiksXG4gICAgICAgICAgKVxuICAgICAgICAgIC5zdWJzY3JpYmUoKGV2ZW50KSA9PiB0aGlzLnRvZ2dsZS5uZXh0KGV2ZW50KSksXG4gICAgICApO1xuICB9XG59XG4iXX0=