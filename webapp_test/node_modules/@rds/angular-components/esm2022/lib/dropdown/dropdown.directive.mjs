import { booleanAttribute, ChangeDetectorRef, ContentChild, DestroyRef, Directive, ElementRef, EventEmitter, HostListener, inject, Input, NgZone, Output, Renderer2, } from '@angular/core';
import { fromEvent, noop, race, Subject } from 'rxjs';
import { delay, filter, map, switchMap, take, takeUntil, tap, timeout, withLatestFrom, } from 'rxjs/operators';
import { RdsDropdownToggleDirective } from './dropdown-toggle.directive';
import { RdsDropdownMenuDirective } from './dropdown-menu.directive';
import { CdkOverlayOrigin, Overlay, } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { RdsDropdownContainerComponent } from './dropdown-container.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const SECONDARY_MOUSE_BUTTON_CLICK = 2;
export class RdsDropdownDirective {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.ngZone = inject(NgZone);
        this.elementRef = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this.overlay = inject(Overlay);
        this.autoClose = true;
        this.placement = 'bottom-left';
        this.disabled = false;
        this.backdrop = false;
        this.openChanged = new EventEmitter();
        this.shown = new EventEmitter();
        this.hidden = new EventEmitter();
        this._open = false;
        this._overlayRef = null;
        this._closed$ = new Subject();
    }
    onHover() {
        this._handleMouseOver(this.elementRef);
    }
    onLeave() {
        this._handleMouseLeave(this.elementRef);
    }
    ngAfterContentInit() {
        const target = this.elementRef.nativeElement.firstElementChild;
        if (target) {
            fromEvent(target, 'focus')
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this._handleFocus(this.elementRef);
            });
            fromEvent(target, 'blur')
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this._handleBlur(this.elementRef);
            });
        }
        this.ngZone.onStable
            .pipe(take(1), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this._open) {
                this._setCloseHandlers();
            }
        });
        this._toggle.toggle
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            if (this._toggle.trigger === 'mouseenter, mouseleave') {
                if (event.type === 'mouseenter' && !this.isOpen()) {
                    this.show();
                }
                else if (event.type === 'mouseleave' && this.isOpen()) {
                    const hideObserver = {
                        next: noop,
                        error: () => this.hide(),
                    };
                    if (this._overlayRef) {
                        fromEvent(this._overlayRef.overlayElement, 'mouseenter')
                            .pipe(take(1), tap(() => {
                            if (this._overlayRef) {
                                fromEvent(this._overlayRef.overlayElement, 'mouseleave')
                                    .pipe(take(1), switchMap(() => fromEvent(this._toggle.elementRef.nativeElement, 'mouseenter').pipe(take(1), timeout(1), takeUntil(this._closed$))), takeUntil(this._closed$))
                                    .subscribe(hideObserver);
                            }
                        }), timeout(1), takeUntil(this._closed$))
                            .subscribe(hideObserver);
                    }
                }
            }
            else {
                this.toggle();
            }
        });
        this._toggle.disabled = this.disabled;
    }
    ngOnChanges(changes) {
        if (changes['backdrop']) {
            this._checkToggle();
            this.hide();
            this._overlayRef = null;
        }
        if (changes['placement']) {
            if (this.placement === null || this.placement === undefined) {
                this.placement = 'bottom-left';
            }
            if (this._overlayRef !== null) {
                this._overlayRef.updatePositionStrategy(this._getPositionStrategy());
            }
        }
        if (this._toggle &&
            changes['disabled'] &&
            changes['disabled'].previousValue !== changes['disabled'].currentValue) {
            this._toggle.disabled = this.disabled;
            if (this.disabled) {
                this.hide();
            }
        }
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.detach();
        }
        this._closed$.next();
        this._closed$.complete();
    }
    isOpen() {
        return this._open;
    }
    show() {
        if (!this.disabled && !this._open) {
            this._checkToggle();
            this._open = true;
            if (!this._overlayRef) {
                this._overlayRef = this.overlay.create({
                    hasBackdrop: this.backdrop !== false,
                    backdropClass: this.backdrop === 'transparent'
                        ? 'cdk-overlay-transparent-backdrop'
                        : undefined,
                    positionStrategy: this._getPositionStrategy(),
                });
                this._overlayRef.backdropClick().subscribe(() => this.hide());
                this._portal = new ComponentPortal(RdsDropdownContainerComponent, null);
            }
            const dropdownContainerComponentRef = this._overlayRef.attach(this._portal);
            dropdownContainerComponentRef.instance.templateRef =
                this._menu.templateRef;
            dropdownContainerComponentRef.changeDetectorRef.markForCheck();
            this.openChanged.emit(true);
            this.shown.emit();
            this._setCloseHandlers();
            if (this._toggle) {
                this._toggle.isOpen = true;
                this._toggle.elementRef.nativeElement.focus();
            }
        }
    }
    hide() {
        if (this._open) {
            this._open = false;
            this._toggle.isOpen = false;
            if (this._overlayRef) {
                this._overlayRef.detach();
            }
            this._closed$.next();
            this.openChanged.emit(false);
            this.hidden.emit();
            this.cdr.markForCheck();
        }
    }
    toggle() {
        if (this.isOpen()) {
            this.hide();
        }
        else {
            this.show();
        }
    }
    _getPlacement() {
        return this.placement !== null && this.placement !== undefined
            ? this.placement
            : 'bottom-left';
    }
    _setCloseHandlers() {
        if (this.autoClose) {
            this.ngZone.runOutsideAngular(() => {
                const shouldCloseOnClick = (event) => {
                    const element = event.target;
                    if (event.button === SECONDARY_MOUSE_BUTTON_CLICK ||
                        this._toggle.elementRef.nativeElement.contains(element)) {
                        return false;
                    }
                    if (this.autoClose === 'inside') {
                        return this._overlayRef?.overlayElement.contains(element) || true;
                    }
                    else if (this.autoClose === 'outside') {
                        return !this._overlayRef?.overlayElement.contains(element) || false;
                    }
                    else {
                        return true;
                    }
                };
                const escapes$ = fromEvent(document, 'keydown').pipe(filter((e) => e.key === 'Escape'), tap((e) => e.preventDefault()), takeUntil(this._closed$));
                const mouseDowns$ = fromEvent(document, 'mousedown').pipe(map((e) => shouldCloseOnClick(e)), takeUntil(this._closed$));
                const closeableClicks$ = fromEvent(document, 'mouseup').pipe(withLatestFrom(mouseDowns$), 
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                filter(([_, shouldClose]) => shouldClose), delay(0), takeUntil(this._closed$));
                race([
                    escapes$.pipe(map(() => 'ESCAPE')),
                    closeableClicks$.pipe(map(() => 'CLICK')),
                ])
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe((source) => this.ngZone.run(() => {
                    this.hide();
                    if (source === 'ESCAPE') {
                        this._toggle.elementRef.nativeElement.focus();
                    }
                }));
            });
        }
    }
    _handleMouseOver(el) {
        this.handleIsPrevButton();
        this.handleIsPrevFocused();
        this.renderer.addClass(el.nativeElement, 'rds-dropdown--hover');
    }
    _handleMouseLeave(el) {
        this.handleIsPrevButton();
        this.handleIsPrevFocused();
        this.renderer.removeClass(el.nativeElement, 'rds-dropdown--hover');
    }
    _handleFocus(el) {
        this.handleIsPrevButton();
        this.renderer.addClass(el.nativeElement, 'rds-dropdown--focused');
    }
    _handleBlur(el) {
        this.handleIsPrevButton();
        this.renderer.removeClass(el.nativeElement, 'rds-dropdown--focused');
    }
    _getPositions() {
        const placement = this._getPlacement();
        const positions = {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 0,
        };
        if (placement.includes('top')) {
            positions.originY = 'top';
            positions.overlayY = 'bottom';
        }
        if (placement.includes('center')) {
            positions.originX = 'center';
            positions.overlayX = 'center';
        }
        if (placement.includes('right')) {
            positions.originX = placement.includes('start') ? 'start' : 'end';
            positions.overlayX = 'end';
        }
        else if (placement.includes('end')) {
            positions.originX = 'end';
        }
        return positions;
    }
    _getPositionStrategy() {
        const overlayOrigin = new CdkOverlayOrigin(this._toggle.elementRef);
        return this.overlay
            .position()
            .flexibleConnectedTo(overlayOrigin.elementRef)
            .withPositions([this._getPositions()]);
    }
    _checkToggle() {
        if (this.backdrop && this._toggle && this._toggle.trigger !== 'click') {
            throw new Error(`Backdrop is only allowed for 'click' trigger`);
        }
    }
    handleIsPrevButton() {
        const isPrevButton = this.elementRef?.nativeElement?.nextElementSibling?.tagName === 'BUTTON';
        if (isPrevButton) {
            this.renderer.addClass(this.elementRef.nativeElement, 'rds-dropdown--prev-button');
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'rds-dropdown--prev-button');
        }
    }
    handleIsPrevFocused() {
        const input = this.elementRef.nativeElement.nextElementSibling?.querySelector('input');
        if (input) {
            if (input.parentElement?.classList.contains('rds-form-field_content-infix--focused')) {
                this.renderer.addClass(this.elementRef.nativeElement, 'rds-dropdown--prev-focused');
            }
            else {
                this.renderer.removeClass(this.elementRef.nativeElement, 'rds-dropdown--prev-focused');
            }
        }
        else {
            this.renderer.removeClass(this.elementRef.nativeElement, 'rds-dropdown--prev-focused');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsDropdownDirective, selector: "[rdsDropdown], [rds-dropdown]", inputs: { autoClose: "autoClose", placement: "placement", disabled: ["disabled", "disabled", booleanAttribute], backdrop: "backdrop" }, outputs: { openChanged: "openChanged", shown: "shown", hidden: "hidden" }, host: { listeners: { "mouseover": "onHover()", "mouseleave": "onLeave()" } }, queries: [{ propertyName: "_menu", first: true, predicate: RdsDropdownMenuDirective, descendants: true }, { propertyName: "_toggle", first: true, predicate: RdsDropdownToggleDirective, descendants: true }], exportAs: ["rdsDropdown"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDropdownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDropdown], [rds-dropdown]',
                    exportAs: 'rdsDropdown',
                }]
        }], propDecorators: { _menu: [{
                type: ContentChild,
                args: [RdsDropdownMenuDirective, { static: false }]
            }], _toggle: [{
                type: ContentChild,
                args: [RdsDropdownToggleDirective, { static: false }]
            }], autoClose: [{
                type: Input
            }], placement: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], backdrop: [{
                type: Input
            }], openChanged: [{
                type: Output
            }], shown: [{
                type: Output
            }], hidden: [{
                type: Output
            }], onHover: [{
                type: HostListener,
                args: ['mouseover']
            }], onLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });
//# sourceMappingURL=data:application/json;base64,