import { CommonModule } from '@angular/common';
import { inject, NgModule } from '@angular/core';
import { RdsToastComponent } from './rds-toast.component';
import { RdsIconComponent } from '../icons';
import { DEFAULT_GLOBAL_CONFIG, RDS_TOAST_GLOBAL_CONFIG_TOKEN, } from './rds-toast.config';
import { RdsToastContainerDirective } from './rds-toast-container.directive';
import { RdsButtonModule } from '../button';
import * as i0 from "@angular/core";
export class RdsToastModule {
    static forRoot(config) {
        return {
            ngModule: RdsToastModule,
            providers: [
                {
                    provide: RDS_TOAST_GLOBAL_CONFIG_TOKEN,
                    useValue: {
                        ...DEFAULT_GLOBAL_CONFIG,
                        ...config,
                    },
                },
            ],
        };
    }
    constructor() {
        this.parentModule = inject(RdsToastModule, {
            optional: true,
            skipSelf: true,
        });
        if (this.parentModule) {
            throw new Error('RdsToastModule is already loaded. Import it in the AppModule only.');
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, declarations: [RdsToastComponent, RdsToastContainerDirective], imports: [CommonModule, RdsIconComponent, RdsButtonModule], exports: [RdsToastComponent, RdsToastContainerDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, imports: [CommonModule, RdsButtonModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RdsIconComponent, RdsButtonModule],
                    declarations: [RdsToastComponent, RdsToastContainerDirective],
                    exports: [RdsToastComponent, RdsToastContainerDirective],
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXRvYXN0Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvdG9hc3QvcmRzLXRvYXN0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzFELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM1QyxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLDZCQUE2QixHQUU5QixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7O0FBTzVDLE1BQU0sT0FBTyxjQUFjO0lBTXpCLE1BQU0sQ0FBQyxPQUFPLENBQ1osTUFBcUM7UUFFckMsT0FBTztZQUNMLFFBQVEsRUFBRSxjQUFjO1lBQ3hCLFNBQVMsRUFBRTtnQkFDVDtvQkFDRSxPQUFPLEVBQUUsNkJBQTZCO29CQUN0QyxRQUFRLEVBQUU7d0JBQ1IsR0FBRyxxQkFBcUI7d0JBQ3hCLEdBQUcsTUFBTTtxQkFDVjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRDtRQXRCaUIsaUJBQVksR0FBRyxNQUFNLENBQUMsY0FBYyxFQUFFO1lBQ3JELFFBQVEsRUFBRSxJQUFJO1lBQ2QsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUM7UUFvQkQsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7WUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FDYixvRUFBb0UsQ0FDckUsQ0FBQztRQUNKLENBQUM7SUFDSCxDQUFDOzhHQTdCVSxjQUFjOytHQUFkLGNBQWMsaUJBSFYsaUJBQWlCLEVBQUUsMEJBQTBCLGFBRGxELFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLGFBRS9DLGlCQUFpQixFQUFFLDBCQUEwQjsrR0FFNUMsY0FBYyxZQUpmLFlBQVksRUFBb0IsZUFBZTs7MkZBSTlDLGNBQWM7a0JBTDFCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLGdCQUFnQixFQUFFLGVBQWUsQ0FBQztvQkFDMUQsWUFBWSxFQUFFLENBQUMsaUJBQWlCLEVBQUUsMEJBQTBCLENBQUM7b0JBQzdELE9BQU8sRUFBRSxDQUFDLGlCQUFpQixFQUFFLDBCQUEwQixDQUFDO2lCQUN6RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBpbmplY3QsIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFJkc1RvYXN0Q29tcG9uZW50IH0gZnJvbSAnLi9yZHMtdG9hc3QuY29tcG9uZW50JztcbmltcG9ydCB7IFJkc0ljb25Db21wb25lbnQgfSBmcm9tICcuLi9pY29ucyc7XG5pbXBvcnQge1xuICBERUZBVUxUX0dMT0JBTF9DT05GSUcsXG4gIFJEU19UT0FTVF9HTE9CQUxfQ09ORklHX1RPS0VOLFxuICBSZHNUb2FzdEdsb2JhbENvbmZpZyxcbn0gZnJvbSAnLi9yZHMtdG9hc3QuY29uZmlnJztcbmltcG9ydCB7IFJkc1RvYXN0Q29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi9yZHMtdG9hc3QtY29udGFpbmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSZHNCdXR0b25Nb2R1bGUgfSBmcm9tICcuLi9idXR0b24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSZHNJY29uQ29tcG9uZW50LCBSZHNCdXR0b25Nb2R1bGVdLFxuICBkZWNsYXJhdGlvbnM6IFtSZHNUb2FzdENvbXBvbmVudCwgUmRzVG9hc3RDb250YWluZXJEaXJlY3RpdmVdLFxuICBleHBvcnRzOiBbUmRzVG9hc3RDb21wb25lbnQsIFJkc1RvYXN0Q29udGFpbmVyRGlyZWN0aXZlXSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzVG9hc3RNb2R1bGUge1xuICBwcml2YXRlIHJlYWRvbmx5IHBhcmVudE1vZHVsZSA9IGluamVjdChSZHNUb2FzdE1vZHVsZSwge1xuICAgIG9wdGlvbmFsOiB0cnVlLFxuICAgIHNraXBTZWxmOiB0cnVlLFxuICB9KTtcblxuICBzdGF0aWMgZm9yUm9vdChcbiAgICBjb25maWc6IFBhcnRpYWw8UmRzVG9hc3RHbG9iYWxDb25maWc+LFxuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJkc1RvYXN0TW9kdWxlPiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBSZHNUb2FzdE1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgcHJvdmlkZTogUkRTX1RPQVNUX0dMT0JBTF9DT05GSUdfVE9LRU4sXG4gICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgIC4uLkRFRkFVTFRfR0xPQkFMX0NPTkZJRyxcbiAgICAgICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKHRoaXMucGFyZW50TW9kdWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdSZHNUb2FzdE1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSBBcHBNb2R1bGUgb25seS4nLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==