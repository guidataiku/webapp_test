import { DOCUMENT } from '@angular/common';
import { ApplicationRef, ComponentFactoryResolver, inject, Injectable, } from '@angular/core';
import { RdsDomPortalHost } from '../portal/rds-dom-portal-host';
import { RdsToastOverlayContainerService } from './rds-toast-overlay-container.service';
import { RdsToastOverlayRef } from './rds-toast-overlay-ref';
import { RdsToastModule } from '../rds-toast.module';
import * as i0 from "@angular/core";
export class RdsToastOverlayService {
    constructor() {
        this.toastOverlayContainerService = inject(RdsToastOverlayContainerService);
        this.componentFactoryResolver = inject(ComponentFactoryResolver);
        this.applicationRef = inject(ApplicationRef);
        this.document = inject(DOCUMENT);
        this._paneElements = new Map();
    }
    create(position, overlayContainer) {
        return this._createOverlayRef(this._getPaneElement(position, overlayContainer));
    }
    _getPaneElement(positionClass, overlayContainer) {
        const posClass = `rds-toast-${positionClass}`;
        if (!this._paneElements.get(overlayContainer)) {
            this._paneElements.set(overlayContainer, {});
        }
        const paneElement = this._paneElements.get(overlayContainer);
        if (!paneElement[posClass]) {
            paneElement[posClass] = this._createPaneElement(posClass, overlayContainer);
        }
        return paneElement[posClass];
    }
    _createPaneElement(positionClass, overlayContainer) {
        const pane = this.document.createElement('div');
        pane.id = 'toast-container';
        pane.classList.add(positionClass);
        pane.classList.add('rds-toast-container');
        if (!overlayContainer) {
            this.toastOverlayContainerService.getContainerElement().appendChild(pane);
        }
        else {
            overlayContainer.getContainerElement().appendChild(pane);
        }
        return pane;
    }
    _createPortalHost(pane) {
        return new RdsDomPortalHost(pane, this.componentFactoryResolver, this.applicationRef);
    }
    _createOverlayRef(pane) {
        return new RdsToastOverlayRef(this._createPortalHost(pane));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayService, providedIn: RdsToastModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastOverlayService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: RdsToastModule,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXRvYXN0LW92ZXJsYXkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvdG9hc3Qvb3ZlcmxheS9yZHMtdG9hc3Qtb3ZlcmxheS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsY0FBYyxFQUNkLHdCQUF3QixFQUN4QixNQUFNLEVBQ04sVUFBVSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBRWpFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7QUFNckQsTUFBTSxPQUFPLHNCQUFzQjtJQUhuQztRQUltQixpQ0FBNEIsR0FBRyxNQUFNLENBQ3BELCtCQUErQixDQUNoQyxDQUFDO1FBQ2UsNkJBQXdCLEdBQUcsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDNUQsbUJBQWMsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDeEMsYUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU1QixrQkFBYSxHQUcxQixJQUFJLEdBQUcsRUFBRSxDQUFDO0tBaUVmO0lBL0RDLE1BQU0sQ0FDSixRQUEwQixFQUMxQixnQkFBNkM7UUFFN0MsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQzNCLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLGdCQUFnQixDQUFDLENBQ2pELENBQUM7SUFDSixDQUFDO0lBRU8sZUFBZSxDQUNyQixhQUErQixFQUMvQixnQkFBNkM7UUFFN0MsTUFBTSxRQUFRLEdBQUcsYUFBYSxhQUFhLEVBQUUsQ0FBQztRQUU5QyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQTZCLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztZQUMxRSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBNkIsZ0JBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDM0UsQ0FBQztRQUVELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUNaLGdCQUFnQixDQUNkLENBQUM7UUFFakMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBQzNCLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQzdDLFFBQVEsRUFDUixnQkFBZ0IsQ0FDakIsQ0FBQztRQUNKLENBQUM7UUFFRCxPQUFPLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBRU8sa0JBQWtCLENBQ3hCLGFBQXFCLEVBQ3JCLGdCQUE2QztRQUU3QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVoRCxJQUFJLENBQUMsRUFBRSxHQUFHLGlCQUFpQixDQUFDO1FBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDdEIsSUFBSSxDQUFDLDRCQUE0QixDQUFDLG1CQUFtQixFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVFLENBQUM7YUFBTSxDQUFDO1lBQ04sZ0JBQWdCLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLGlCQUFpQixDQUFJLElBQWlCO1FBQzVDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FDekIsSUFBSSxFQUNKLElBQUksQ0FBQyx3QkFBd0IsRUFDN0IsSUFBSSxDQUFDLGNBQWMsQ0FDcEIsQ0FBQztJQUNKLENBQUM7SUFFTyxpQkFBaUIsQ0FBSSxJQUFpQjtRQUM1QyxPQUFPLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs4R0EzRVUsc0JBQXNCO2tIQUF0QixzQkFBc0IsY0FGckIsY0FBYzs7MkZBRWYsc0JBQXNCO2tCQUhsQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxjQUFjO2lCQUMzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7XG4gIEFwcGxpY2F0aW9uUmVmLFxuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIGluamVjdCxcbiAgSW5qZWN0YWJsZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFJkc0RvbVBvcnRhbEhvc3QgfSBmcm9tICcuLi9wb3J0YWwvcmRzLWRvbS1wb3J0YWwtaG9zdCc7XG5pbXBvcnQgeyBSZHNUb2FzdENvbnRhaW5lckRpcmVjdGl2ZSB9IGZyb20gJy4uL3Jkcy10b2FzdC1jb250YWluZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IFJkc1RvYXN0T3ZlcmxheUNvbnRhaW5lclNlcnZpY2UgfSBmcm9tICcuL3Jkcy10b2FzdC1vdmVybGF5LWNvbnRhaW5lci5zZXJ2aWNlJztcbmltcG9ydCB7IFJkc1RvYXN0T3ZlcmxheVJlZiB9IGZyb20gJy4vcmRzLXRvYXN0LW92ZXJsYXktcmVmJztcbmltcG9ydCB7IFJkc1RvYXN0TW9kdWxlIH0gZnJvbSAnLi4vcmRzLXRvYXN0Lm1vZHVsZSc7XG5pbXBvcnQgeyBSZHNUb2FzdFBvc2l0aW9uIH0gZnJvbSAnLi4vcmRzLXRvYXN0LmNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogUmRzVG9hc3RNb2R1bGUsXG59KVxuZXhwb3J0IGNsYXNzIFJkc1RvYXN0T3ZlcmxheVNlcnZpY2Uge1xuICBwcml2YXRlIHJlYWRvbmx5IHRvYXN0T3ZlcmxheUNvbnRhaW5lclNlcnZpY2UgPSBpbmplY3QoXG4gICAgUmRzVG9hc3RPdmVybGF5Q29udGFpbmVyU2VydmljZSxcbiAgKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSBpbmplY3QoQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyKTtcbiAgcHJpdmF0ZSByZWFkb25seSBhcHBsaWNhdGlvblJlZiA9IGluamVjdChBcHBsaWNhdGlvblJlZik7XG4gIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnQgPSBpbmplY3QoRE9DVU1FTlQpO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgX3BhbmVFbGVtZW50czogTWFwPFxuICAgIFJkc1RvYXN0Q29udGFpbmVyRGlyZWN0aXZlLFxuICAgIFJlY29yZDxzdHJpbmcsIEhUTUxFbGVtZW50PlxuICA+ID0gbmV3IE1hcCgpO1xuXG4gIGNyZWF0ZTxUPihcbiAgICBwb3NpdGlvbjogUmRzVG9hc3RQb3NpdGlvbixcbiAgICBvdmVybGF5Q29udGFpbmVyPzogUmRzVG9hc3RDb250YWluZXJEaXJlY3RpdmUsXG4gICk6IFJkc1RvYXN0T3ZlcmxheVJlZjxUPiB7XG4gICAgcmV0dXJuIHRoaXMuX2NyZWF0ZU92ZXJsYXlSZWY8VD4oXG4gICAgICB0aGlzLl9nZXRQYW5lRWxlbWVudChwb3NpdGlvbiwgb3ZlcmxheUNvbnRhaW5lciksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX2dldFBhbmVFbGVtZW50KFxuICAgIHBvc2l0aW9uQ2xhc3M6IFJkc1RvYXN0UG9zaXRpb24sXG4gICAgb3ZlcmxheUNvbnRhaW5lcj86IFJkc1RvYXN0Q29udGFpbmVyRGlyZWN0aXZlLFxuICApOiBIVE1MRWxlbWVudCB7XG4gICAgY29uc3QgcG9zQ2xhc3MgPSBgcmRzLXRvYXN0LSR7cG9zaXRpb25DbGFzc31gO1xuXG4gICAgaWYgKCF0aGlzLl9wYW5lRWxlbWVudHMuZ2V0KDxSZHNUb2FzdENvbnRhaW5lckRpcmVjdGl2ZT5vdmVybGF5Q29udGFpbmVyKSkge1xuICAgICAgdGhpcy5fcGFuZUVsZW1lbnRzLnNldCg8UmRzVG9hc3RDb250YWluZXJEaXJlY3RpdmU+b3ZlcmxheUNvbnRhaW5lciwge30pO1xuICAgIH1cblxuICAgIGNvbnN0IHBhbmVFbGVtZW50ID0gdGhpcy5fcGFuZUVsZW1lbnRzLmdldChcbiAgICAgIDxSZHNUb2FzdENvbnRhaW5lckRpcmVjdGl2ZT5vdmVybGF5Q29udGFpbmVyLFxuICAgICkgYXMgUmVjb3JkPHN0cmluZywgSFRNTEVsZW1lbnQ+O1xuXG4gICAgaWYgKCFwYW5lRWxlbWVudFtwb3NDbGFzc10pIHtcbiAgICAgIHBhbmVFbGVtZW50W3Bvc0NsYXNzXSA9IHRoaXMuX2NyZWF0ZVBhbmVFbGVtZW50KFxuICAgICAgICBwb3NDbGFzcyxcbiAgICAgICAgb3ZlcmxheUNvbnRhaW5lcixcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhbmVFbGVtZW50W3Bvc0NsYXNzXTtcbiAgfVxuXG4gIHByaXZhdGUgX2NyZWF0ZVBhbmVFbGVtZW50KFxuICAgIHBvc2l0aW9uQ2xhc3M6IHN0cmluZyxcbiAgICBvdmVybGF5Q29udGFpbmVyPzogUmRzVG9hc3RDb250YWluZXJEaXJlY3RpdmUsXG4gICk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBwYW5lID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgIHBhbmUuaWQgPSAndG9hc3QtY29udGFpbmVyJztcbiAgICBwYW5lLmNsYXNzTGlzdC5hZGQocG9zaXRpb25DbGFzcyk7XG4gICAgcGFuZS5jbGFzc0xpc3QuYWRkKCdyZHMtdG9hc3QtY29udGFpbmVyJyk7XG5cbiAgICBpZiAoIW92ZXJsYXlDb250YWluZXIpIHtcbiAgICAgIHRoaXMudG9hc3RPdmVybGF5Q29udGFpbmVyU2VydmljZS5nZXRDb250YWluZXJFbGVtZW50KCkuYXBwZW5kQ2hpbGQocGFuZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG92ZXJsYXlDb250YWluZXIuZ2V0Q29udGFpbmVyRWxlbWVudCgpLmFwcGVuZENoaWxkKHBhbmUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYW5lO1xuICB9XG5cbiAgcHJpdmF0ZSBfY3JlYXRlUG9ydGFsSG9zdDxUPihwYW5lOiBIVE1MRWxlbWVudCk6IFJkc0RvbVBvcnRhbEhvc3Q8VD4ge1xuICAgIHJldHVybiBuZXcgUmRzRG9tUG9ydGFsSG9zdDxUPihcbiAgICAgIHBhbmUsXG4gICAgICB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICAgIHRoaXMuYXBwbGljYXRpb25SZWYsXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgX2NyZWF0ZU92ZXJsYXlSZWY8VD4ocGFuZTogSFRNTEVsZW1lbnQpOiBSZHNUb2FzdE92ZXJsYXlSZWY8VD4ge1xuICAgIHJldHVybiBuZXcgUmRzVG9hc3RPdmVybGF5UmVmKHRoaXMuX2NyZWF0ZVBvcnRhbEhvc3QocGFuZSkpO1xuICB9XG59XG4iXX0=