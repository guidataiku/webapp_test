import { inject, Injectable, Injector, NgZone, SecurityContext, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { from, noop } from 'rxjs';
import { RdsComponentPortal } from './portal/rds-component-portal';
import { RdsToastOverlayService } from './overlay/rds-toast-overlay.service';
import { RdsToastInjector } from './rds-toast.injector';
import { RdsToastRef } from './rds-toast.ref';
import { DEFAULT_GLOBAL_CONFIG, RDS_TOAST_GLOBAL_CONFIG_TOKEN, } from './rds-toast.config';
import { RdsToastPackage } from './rds-toast.package';
import { LiveAnnouncer } from '@angular/cdk/a11y';
import { RdsToastComponent } from './rds-toast.component';
import { takeUntil } from 'rxjs/operators';
import { RdsToastModule } from './rds-toast.module';
import * as i0 from "@angular/core";
export class RdsToastService {
    constructor() {
        this.overlayService = inject(RdsToastOverlayService);
        this.injector = inject(Injector);
        this.domSanitizer = inject(DomSanitizer);
        this.ngZone = inject(NgZone);
        this.liveAnnouncer = inject(LiveAnnouncer);
        this.toastGlobalConfig = inject(RDS_TOAST_GLOBAL_CONFIG_TOKEN, {
            optional: true,
        });
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        this.toasts = [];
        this.currentlyActive = 0;
        this._index = 0;
        if (this.toastGlobalConfig) {
            this.globalConfig = { ...this.toastGlobalConfig };
        }
        else {
            this.globalConfig = { ...DEFAULT_GLOBAL_CONFIG };
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    show(message, title, override = {}) {
        if (override.type === 'info' ||
            override.type === 'warning' ||
            override.type === 'success' ||
            override.type === 'error') {
            return this[override.type](message, title, override);
        }
        else {
            return this._preBuildNotification(message, title, this._applyConfig(override));
        }
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    success(message, title, override = {}) {
        override.type = 'success';
        override.icon = 'checkmark_circle';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    error(message, title, override = {}) {
        override.type = 'error';
        override.icon = 'close_circle';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    info(message, title, override = {}) {
        override.type = 'info';
        override.icon = 'info';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    warning(message, title, override = {}) {
        override.type = 'warning';
        override.icon = 'warning_circle';
        override.iconNamespace = 'outlined';
        return this._preBuildNotification(message, title, this._applyConfig(override));
    }
    clear(toastId) {
        const toast = typeof toastId === 'number'
            ? this.toasts.find((t) => t.toastId === toastId)
            : this.toasts.find((t) => t === toastId);
        if (!toast) {
            this.toasts.forEach((t) => t.toastRef.manualClose());
        }
        else {
            toast.toastRef.manualClose();
        }
    }
    _remove(toastId) {
        const toastIndex = this.toasts.findIndex((t) => t.toastId === toastId);
        if (toastIndex === -1) {
            return false;
        }
        if (!this.toasts[toastIndex].toastRef.isClosed()) {
            this.toasts[toastIndex].toastRef.close();
        }
        this.toasts.splice(toastIndex, 1);
        this.currentlyActive = this.currentlyActive - 1;
        if (!this.globalConfig.maxOpened || !this.toasts.length) {
            return false;
        }
        if (this.currentlyActive < this.globalConfig.maxOpened &&
            this.toasts[this.currentlyActive]) {
            const p = this.toasts[this.currentlyActive].toastRef;
            if (!p.isInactive()) {
                this.currentlyActive = this.currentlyActive + 1;
                p.activate();
            }
        }
        return true;
    }
    _applyConfig(override = {}) {
        return {
            ...this.globalConfig,
            ...override,
            // remove this line when library should allow to pass custom component
            ...{ toastComponent: RdsToastComponent },
        };
    }
    _preBuildNotification(message, title, config) {
        if (config.onActivateTick) {
            return this.ngZone.run(() => this._buildNotification(message, title, config));
        }
        return this._buildNotification(message, title, config);
    }
    _buildNotification(message, title, config) {
        if (!config.toastComponent) {
            throw new Error('toastComponent required');
        }
        if (typeof title !== 'string' || title.trim().length === 0) {
            title = '';
        }
        if (typeof message !== 'string' || message.trim().length === 0) {
            message = title;
            title = '';
        }
        this.previousToastMessage = message;
        let keepInactive = false;
        if (this.globalConfig.maxOpened &&
            this.currentlyActive >= this.globalConfig.maxOpened) {
            keepInactive = true;
            if (this.globalConfig.autoDismiss) {
                this.clear(this.toasts[0]);
            }
        }
        const overlayRef = this.overlayService.create(config.position, this.overlayContainer);
        this._index = this._index + 1;
        let sanitizedMessage = message;
        if (message && config.enableHtml) {
            sanitizedMessage = this.domSanitizer.sanitize(SecurityContext.HTML, message);
        }
        const toastRef = new RdsToastRef(overlayRef);
        const toastPackage = new RdsToastPackage(this._index, config, sanitizedMessage, title, toastRef);
        const toastInjector = new RdsToastInjector(toastPackage, this.injector);
        const component = new RdsComponentPortal(config.toastComponent, toastInjector);
        const portal = overlayRef.attach(component, config.newestOnTop);
        toastRef.componentInstance = portal.instance;
        const ins = {
            toastId: this._index,
            title: title,
            message: message,
            toastRef,
            onShown: toastRef.afterActivate(),
            onHidden: toastRef.afterClosed(),
            onTap: toastPackage.onTap(),
            onAction: toastPackage.onAction(),
            portal,
        };
        if (!keepInactive) {
            this.currentlyActive = this.currentlyActive + 1;
            from(Promise.resolve())
                .pipe(takeUntil(ins.toastRef.afterClosed()))
                .subscribe(() => ins.toastRef.activate());
        }
        toastRef.afterClosed().subscribe(() => {
            this.liveAnnouncer.clear();
            this._remove(ins.toastId);
        });
        toastRef
            .afterActivate()
            .pipe(takeUntil(toastRef.afterClosed()))
            .subscribe(() => {
            if (config.announcementMessage) {
                from(this.liveAnnouncer.announce(config.announcementMessage, config.politeness)).subscribe(noop);
            }
            else {
                from(this.liveAnnouncer.announce(`${config.type} Toast: Title: ${ins.title}: Message: ${ins.message}`, config.politeness)).subscribe(noop);
            }
        });
        this.toasts.push(ins);
        return ins;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastService, providedIn: RdsToastModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: RdsToastModule,
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,