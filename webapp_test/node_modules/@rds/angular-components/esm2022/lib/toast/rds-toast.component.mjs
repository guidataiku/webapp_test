import { animate, state, style, transition, trigger, } from '@angular/animations';
import { Component, DestroyRef, HostBinding, HostListener, inject, NgZone, } from '@angular/core';
import { RdsToastPackage } from './rds-toast.package';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "../icons/icon.component";
import * as i2 from "../button/icon-button.component";
export class RdsToastComponent {
    get displayStyle() {
        if (this.state.value === 'inactive') {
            return 'none';
        }
        return undefined;
    }
    tapToast() {
        if (this.state.value === 'removed') {
            return;
        }
        this.rdsToastPackage.triggerTap();
        if (this.options.tapToDismiss) {
            this.remove();
        }
    }
    stickAround() {
        if (this.state.value === 'removed') {
            return;
        }
        clearTimeout(this.timeout);
        this.options.timeOut = 0;
        this.hideTime = 0;
    }
    delayedHideToast() {
        if (this.options.disableTimeOut === true ||
            this.options.disableTimeOut === 'extendedTimeOut' ||
            this.options.extendedTimeOut === 0 ||
            this.state.value === 'removed') {
            return;
        }
        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);
        this.options.timeOut = this.options.extendedTimeOut;
        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);
    }
    constructor() {
        this.rdsToastPackage = inject(RdsToastPackage);
        this.destroyRef = inject(DestroyRef);
        this.ngZone = inject(NgZone, { optional: true });
        this.message = this.rdsToastPackage.message || null;
        this.title = this.rdsToastPackage.title || null;
        this.options = this.rdsToastPackage.config;
        this.originalTimeout = this.rdsToastPackage.config.timeOut;
        this.toastClasses = '';
        this.state = {
            value: 'inactive',
            params: {
                easeTime: this.rdsToastPackage.config.easeTime,
                easing: 'ease-in',
            },
        };
        this.toastClasses = `rds-toast-${this.rdsToastPackage.config.type} ${this.rdsToastPackage.config.toastClass}`;
        if (this.rdsToastPackage.config.tapToDismiss) {
            this.toastClasses += ' rds-toast-dismiss-click';
        }
        if (this.rdsToastPackage.config.closeButton) {
            this.toastClasses += ' rds-toast-with-close-icon';
        }
        if (this.title) {
            this.toastClasses += ' rds-toast-with-title';
        }
        this.rdsToastPackage.toastRef
            .afterActivate()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.activateToast());
        this.rdsToastPackage.toastRef
            .manualClosed()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.remove());
    }
    ngOnDestroy() {
        clearTimeout(this.timeout);
    }
    activateToast() {
        this.state = { ...this.state, value: 'active' };
        if (!(this.options.disableTimeOut === true ||
            this.options.disableTimeOut === 'timeOut') &&
            this.options.timeOut) {
            this.outsideTimeout(() => this.remove(), this.options.timeOut);
            this.hideTime = new Date().getTime() + this.options.timeOut;
        }
    }
    remove() {
        if (this.state.value === 'removed') {
            return;
        }
        clearTimeout(this.timeout);
        this.state = { ...this.state, value: 'removed' };
        this.outsideTimeout(() => this.rdsToastPackage.toastRef.close(), +this.rdsToastPackage.config.easeTime);
    }
    outsideTimeout(func, timeout) {
        if (this.ngZone) {
            this.ngZone.runOutsideAngular(() => {
                this.timeout = window.setTimeout(() => this.runInsideAngular(func), timeout);
            });
        }
        else {
            this.timeout = window.setTimeout(() => func(), timeout);
        }
    }
    runInsideAngular(func) {
        if (this.ngZone) {
            this.ngZone.run(() => func());
        }
        else {
            func();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsToastComponent, selector: "[rds-toast-component]", host: { listeners: { "click": "tapToast()", "mouseenter": "stickAround()", "mouseleave": "delayedHideToast()" }, properties: { "class": "this.toastClasses", "@flyInOut": "this.state", "style.display": "this.displayStyle" } }, ngImport: i0, template: "<div class=\"rds-container-left\"></div>\n<div class=\"rds-toast-inner\">\n  @if (options.icon && options.iconNamespace) {\n    <rds-icon\n      [icon]=\"options.icon\"\n      [namespace]=\"options.iconNamespace\"\n      class=\"rds-toast__leading-icon rds-icon\"\n    />\n  }\n  <div class=\"rds-toast-text\">\n    @if (title) {\n      <div\n        class=\"rds-toast-text__header\"\n        [class]=\"options.titleClass\"\n        [attr.aria-label]=\"title\"\n      >\n        {{ title }}\n      </div>\n    }\n    @if (message && options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n        [innerHTML]=\"message\"\n      ></div>\n    }\n    @if (message && !options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n      >\n        {{ message }}\n      </div>\n    }\n  </div>\n</div>\n@if (options.closeButton) {\n  <button rds-icon-button class=\"rds-toast__close-button\" (click)=\"remove()\">\n    <rds-icon icon=\"close\" namespace=\"outlined\" />\n  </button>\n}\n", dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: i2.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], animations: [
            trigger('flyInOut', [
                state('inactive', style({ opacity: 0 })),
                state('active', style({ opacity: 1 })),
                state('removed', style({ opacity: 0 })),
                transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),
                transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),
            ]),
        ] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsToastComponent, decorators: [{
            type: Component,
            args: [{ selector: '[rds-toast-component]', animations: [
                        trigger('flyInOut', [
                            state('inactive', style({ opacity: 0 })),
                            state('active', style({ opacity: 1 })),
                            state('removed', style({ opacity: 0 })),
                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),
                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}')),
                        ]),
                    ], preserveWhitespaces: false, template: "<div class=\"rds-container-left\"></div>\n<div class=\"rds-toast-inner\">\n  @if (options.icon && options.iconNamespace) {\n    <rds-icon\n      [icon]=\"options.icon\"\n      [namespace]=\"options.iconNamespace\"\n      class=\"rds-toast__leading-icon rds-icon\"\n    />\n  }\n  <div class=\"rds-toast-text\">\n    @if (title) {\n      <div\n        class=\"rds-toast-text__header\"\n        [class]=\"options.titleClass\"\n        [attr.aria-label]=\"title\"\n      >\n        {{ title }}\n      </div>\n    }\n    @if (message && options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n        [innerHTML]=\"message\"\n      ></div>\n    }\n    @if (message && !options.enableHtml) {\n      <div\n        role=\"alertdialog\"\n        aria-live=\"polite\"\n        class=\"rds-toast-text__message\"\n        [class]=\"options.messageClass\"\n        [attr.aria-label]=\"message\"\n      >\n        {{ message }}\n      </div>\n    }\n  </div>\n</div>\n@if (options.closeButton) {\n  <button rds-icon-button class=\"rds-toast__close-button\" (click)=\"remove()\">\n    <rds-icon icon=\"close\" namespace=\"outlined\" />\n  </button>\n}\n" }]
        }], ctorParameters: () => [], propDecorators: { toastClasses: [{
                type: HostBinding,
                args: ['class']
            }], state: [{
                type: HostBinding,
                args: ['@flyInOut']
            }], displayStyle: [{
                type: HostBinding,
                args: ['style.display']
            }], tapToast: [{
                type: HostListener,
                args: ['click']
            }], stickAround: [{
                type: HostListener,
                args: ['mouseenter']
            }], delayedHideToast: [{
                type: HostListener,
                args: ['mouseleave']
            }] } });
//# sourceMappingURL=data:application/json;base64,