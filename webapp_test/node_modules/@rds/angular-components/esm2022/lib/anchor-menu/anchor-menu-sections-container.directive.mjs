import { ChangeDetectorRef, ContentChildren, DestroyRef, Directive, inject, Input, QueryList, } from '@angular/core';
import { map, skipWhile, startWith, takeUntil, withLatestFrom, } from 'rxjs/operators';
import { BehaviorSubject, Subject } from 'rxjs';
import { IntersectionObserverRx } from '../utils/intersection-observer.util';
import { RdsAnchorMenuSectionDirective } from './anchor-menu-section.directive';
import { ActivatedRoute } from '@angular/router';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
let nextId = 0;
const DEFAULT_OBSERVER_CONFIG = Object.freeze({
    rootMargin: '-10% 0px -70%',
    threshold: 0.02,
});
export class RdsAnchorMenuSectionsContainerDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.activeRoute = inject(ActivatedRoute);
        this.intersectionObserver = inject(IntersectionObserverRx);
        this.cdr = inject(ChangeDetectorRef);
        this._sections$ = new BehaviorSubject([]);
        this.killIntersectionSubscriptions$ = new Subject();
        this.activeSection$ = new BehaviorSubject(undefined);
        this.sections$ = this._sections$.asObservable();
        this.id = `rdsAnchorMenuSectionsContainer-${nextId++}`;
        this.scrollIntoViewOptions = {
            behavior: 'smooth',
        };
    }
    ngAfterContentInit() {
        this.sectionQuery.changes
            .pipe(startWith(this.sectionQuery), map((sections) => this.queryListToAnchorMenuSectionData(sections)), takeUntilDestroyed(this.destroyRef))
            .subscribe((v) => {
            this._sections$.next(v);
            // Force change detection cause otherwise we get ExpressionChangedAfterItHasBeenCheckedError"
            // Deferring value propagation helps only in case of initial value
            this.cdr.detectChanges();
        });
    }
    ngAfterViewInit() {
        this.activeRoute.fragment
            .pipe(map((fragment) => {
            return fragment
                ? this.sectionQuery.find((section) => section.id === fragment)
                : null;
        }), takeUntilDestroyed(this.destroyRef))
            .subscribe((target) => {
            if (!target) {
                return;
            }
            target._element.nativeElement.scrollIntoView(this.scrollIntoViewOptions);
            if (typeof this.scrollIntoViewOptions !== 'object' ||
                this.scrollIntoViewOptions.behavior !== 'smooth') {
                // intersection observer might be confused in case of an instant scroll
                // we emit correct active section just a tiny bit after its events are handled
                setTimeout(() => {
                    this.activeSection$.next(target);
                }, 100);
            }
        });
    }
    ngOnDestroy() {
        this.killIntersectionSubscriptions$.complete();
    }
    queryListToAnchorMenuSectionData(list) {
        this.killIntersectionSubscriptions$.next();
        return list.map((section, index) => {
            this.createIntersectionObservable(section)
                .pipe(withLatestFrom(this.activeSection$), takeUntil(this.killIntersectionSubscriptions$), takeUntilDestroyed(this.destroyRef))
                .subscribe(([entry, activeSection]) => this.onIntersectionEvent(entry, index, activeSection));
            return {
                section,
                isActive$: this.activeSection$.pipe(map((active) => active === section)),
            };
        });
    }
    onIntersectionEvent(entry, sectionIndex, activeSection) {
        const section = this._sections$.value[sectionIndex].section;
        if (entry.isIntersecting) {
            const nextSection = this._sections$.value[sectionIndex + 1]?.section;
            if (nextSection && nextSection === activeSection) {
                // this is the event which occurs when previous section is entering intersection area
                // we want to ignore it because change is emitted when user scrolls further and the current section leaves
                return;
            }
            this.activeSection$.next(section);
            return;
        }
        if (this.isScrolledOutDownwards(entry)) {
            // user scrolls up, so the section is lower than rootBounds,
            // so we emit previous item as the active one
            const previousItemIndex = sectionIndex > 0 ? sectionIndex - 1 : 0;
            this.activeSection$.next(this._sections$.value[previousItemIndex]?.section);
        }
    }
    createIntersectionObservable(section) {
        // emit section once it's intersecting
        return this.intersectionObserver
            .observe(section._element.nativeElement, {
            ...DEFAULT_OBSERVER_CONFIG,
            ...this.intersectionObserverOptions,
        })
            .pipe(map((entries) => entries[0]), 
        // we don't need any information about the section until its first intersection,
        // it makes initialization process and active item logic harder to manage
        skipWhile((entry) => !entry.isIntersecting));
    }
    isScrolledOutDownwards(entry) {
        // honestly I haven't found any mention of rootBounds being nullable value in MDN
        // but Typescript says it could be null, so we're setting fallback value that should
        // be reasonable in most cases
        const rootBounds = entry.rootBounds ||
            {
                bottom: 200,
            };
        return (!entry.isIntersecting &&
            entry.boundingClientRect.bottom > rootBounds.bottom);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuSectionsContainerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAnchorMenuSectionsContainerDirective, selector: "[rds-anchor-menu-sections-container], [rdsAnchorMenuSectionsContainer]", inputs: { intersectionObserverOptions: "intersectionObserverOptions", scrollIntoViewOptions: "scrollIntoViewOptions" }, providers: [IntersectionObserverRx], queries: [{ propertyName: "sectionQuery", predicate: RdsAnchorMenuSectionDirective, descendants: true }], exportAs: ["rdsAnchorMenuSectionsContainer"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAnchorMenuSectionsContainerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-anchor-menu-sections-container], [rdsAnchorMenuSectionsContainer]',
                    exportAs: 'rdsAnchorMenuSectionsContainer',
                    providers: [IntersectionObserverRx],
                }]
        }], propDecorators: { sectionQuery: [{
                type: ContentChildren,
                args: [RdsAnchorMenuSectionDirective, { descendants: true }]
            }], intersectionObserverOptions: [{
                type: Input
            }], scrollIntoViewOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,