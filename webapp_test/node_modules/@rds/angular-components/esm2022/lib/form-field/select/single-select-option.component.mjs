import { Component, HostBinding, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { RdsListItemComponent } from '../../list-item';
import { RDS_SINGLE_SELECT_LIST_ITEM_TEMPLATE, RdsSingleSelectListItemComponent, } from '../../list-item';
import { AbstractFocusableOption } from './abstract-focusable-option';
import { RdsSelectOptionSelectionChangedEvent } from './select-option-selection-changed.event';
import * as i0 from "@angular/core";
import * as i1 from "../../icons/icon.component";
let nextId = 0;
export class RdsSingleSelectOptionComponent extends RdsSingleSelectListItemComponent {
    constructor() {
        super(...arguments);
        this._currentViewValue = '';
        this.hostClass = 'rds-select__option';
        this.id = `rds-option-${nextId++}`;
        this.selectionChange$ = new Subject();
    }
    get viewValue() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    ngAfterViewChecked() {
        if (this.checked) {
            const viewValue = this.viewValue;
            if (viewValue !== this._currentViewValue) {
                this._currentViewValue = viewValue;
            }
        }
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return !this.elementRef.nativeElement.classList.contains('hide');
    }
    toggleVisibility(value) {
        if (value === true) {
            this.show();
        }
        else if (value === false) {
            this.hide();
        }
        else {
            if (this.isVisible()) {
                this.hide();
            }
            else if (!this.isVisible()) {
                this.show();
            }
        }
    }
    hide() {
        this.renderer.addClass(this.elementRef.nativeElement, 'hide');
    }
    show() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'hide');
    }
    toggle() {
        this.handleClick();
    }
    handleClick() {
        if (!this.disabled && !this.checked) {
            this.checked = true;
            this.selectionChange$.next(new RdsSelectOptionSelectionChangedEvent(this, true));
        }
    }
    setActiveStyles() {
        this.focus('keyboard');
    }
    setInactiveStyles() {
        if (this._focused) {
            this.blur();
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleSelectOptionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSingleSelectOptionComponent, selector: "rds-select-option", inputs: { id: "id", value: "value" }, host: { properties: { "class": "this.hostClass", "attr.id": "this.id" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsSingleSelectOptionComponent,
            },
            {
                provide: AbstractFocusableOption,
                useExisting: RdsSingleSelectOptionComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-avatar\"/>\n<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n\n<rds-icon icon=\"checkmark\" class=\"rds-list-item-checkmark\"/>", isInline: true, dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_SINGLE_SELECT_LIST_ITEM_TEMPLATE,
                    selector: 'rds-select-option',
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsSingleSelectOptionComponent,
                        },
                        {
                            provide: AbstractFocusableOption,
                            useExisting: RdsSingleSelectOptionComponent,
                        },
                    ],
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLXNlbGVjdC1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9mb3JtLWZpZWxkL3NlbGVjdC9zaW5nbGUtc2VsZWN0LW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFvQixTQUFTLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9CLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3ZELE9BQU8sRUFDTCxvQ0FBb0MsRUFDcEMsZ0NBQWdDLEdBQ2pDLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0seUNBQXlDLENBQUM7OztBQUUvRixJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFnQmYsTUFBTSxPQUFPLDhCQUNYLFNBQVEsZ0NBQWdDO0lBZjFDOztRQWtCVSxzQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFFVCxjQUFTLEdBQUcsb0JBQW9CLENBQUM7UUFJdkQsT0FBRSxHQUFHLGNBQWMsTUFBTSxFQUFFLEVBQUUsQ0FBQztRQUlyQixxQkFBZ0IsR0FBRyxJQUFJLE9BQU8sRUFFcEMsQ0FBQztLQXFFTDtJQW5FQyxJQUFJLFNBQVM7UUFDWCxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsV0FBVyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xFLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDakIsTUFBTSxTQUFT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Szs7c0JBQ0wsV0FBVzt1QkFBQyxTQUFTO2dCQUdiLEtBQUs7c0JBQWIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0NoZWNrZWQsIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZHNMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpc3QtaXRlbSc7XG5pbXBvcnQge1xuICBSRFNfU0lOR0xFX1NFTEVDVF9MSVNUX0lURU1fVEVNUExBVEUsXG4gIFJkc1NpbmdsZVNlbGVjdExpc3RJdGVtQ29tcG9uZW50LFxufSBmcm9tICcuLi8uLi9saXN0LWl0ZW0nO1xuaW1wb3J0IHsgQWJzdHJhY3RGb2N1c2FibGVPcHRpb24gfSBmcm9tICcuL2Fic3RyYWN0LWZvY3VzYWJsZS1vcHRpb24nO1xuaW1wb3J0IHsgUmRzU2VsZWN0T3B0aW9uU2VsZWN0aW9uQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi9zZWxlY3Qtb3B0aW9uLXNlbGVjdGlvbi1jaGFuZ2VkLmV2ZW50JztcblxubGV0IG5leHRJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogUkRTX1NJTkdMRV9TRUxFQ1RfTElTVF9JVEVNX1RFTVBMQVRFLFxuICBzZWxlY3RvcjogJ3Jkcy1zZWxlY3Qtb3B0aW9uJyxcbiAgcHJvdmlkZXJzOiBbXG4gICAge1xuICAgICAgcHJvdmlkZTogUmRzTGlzdEl0ZW1Db21wb25lbnQsXG4gICAgICB1c2VFeGlzdGluZzogUmRzU2luZ2xlU2VsZWN0T3B0aW9uQ29tcG9uZW50LFxuICAgIH0sXG4gICAge1xuICAgICAgcHJvdmlkZTogQWJzdHJhY3RGb2N1c2FibGVPcHRpb24sXG4gICAgICB1c2VFeGlzdGluZzogUmRzU2luZ2xlU2VsZWN0T3B0aW9uQ29tcG9uZW50LFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFJkc1NpbmdsZVNlbGVjdE9wdGlvbkNvbXBvbmVudDxUPlxuICBleHRlbmRzIFJkc1NpbmdsZVNlbGVjdExpc3RJdGVtQ29tcG9uZW50XG4gIGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWJzdHJhY3RGb2N1c2FibGVPcHRpb25cbntcbiAgcHJpdmF0ZSBfY3VycmVudFZpZXdWYWx1ZSA9ICcnO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBob3N0Q2xhc3MgPSAncmRzLXNlbGVjdF9fb3B0aW9uJztcblxuICBASW5wdXQoKVxuICBASG9zdEJpbmRpbmcoJ2F0dHIuaWQnKVxuICBpZCA9IGByZHMtb3B0aW9uLSR7bmV4dElkKyt9YDtcblxuICBASW5wdXQoKSB2YWx1ZTogVDtcblxuICByZWFkb25seSBzZWxlY3Rpb25DaGFuZ2UkID0gbmV3IFN1YmplY3Q8XG4gICAgUmRzU2VsZWN0T3B0aW9uU2VsZWN0aW9uQ2hhbmdlZEV2ZW50PFQ+XG4gID4oKTtcblxuICBnZXQgdmlld1ZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCB8fCAnJykudHJpbSgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcbiAgICAgIGNvbnN0IHZpZXdWYWx1ZSA9IHRoaXMudmlld1ZhbHVlO1xuXG4gICAgICBpZiAodmlld1ZhbHVlICE9PSB0aGlzLl9jdXJyZW50Vmlld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVjdCgpOiBET01SZWN0IHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBpc1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGUnKTtcbiAgfVxuXG4gIHRvZ2dsZVZpc2liaWxpdHkodmFsdWU6IGJvb2xlYW4gfCBudWxsKTogdm9pZCB7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoaWRlKCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoaWRlJyk7XG4gIH1cblxuICBzaG93KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoaWRlJyk7XG4gIH1cblxuICBvdmVycmlkZSB0b2dnbGUoKTogdm9pZCB7XG4gICAgdGhpcy5oYW5kbGVDbGljaygpO1xuICB9XG5cbiAgaGFuZGxlQ2xpY2soKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRpc2FibGVkICYmICF0aGlzLmNoZWNrZWQpIHtcbiAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XG4gICAgICB0aGlzLnNlbGVjdGlvbkNoYW5nZSQubmV4dChcbiAgICAgICAgbmV3IFJkc1NlbGVjdE9wdGlvblNlbGVjdGlvbkNoYW5nZWRFdmVudCh0aGlzLCB0cnVlKSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgc2V0QWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIHRoaXMuZm9jdXMoJ2tleWJvYXJkJyk7XG4gIH1cblxuICBzZXRJbmFjdGl2ZVN0eWxlcygpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5fZm9jdXNlZCkge1xuICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==