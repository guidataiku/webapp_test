import { ChangeDetectionStrategy, Component, EventEmitter, Output, ViewEncapsulation, } from '@angular/core';
import { RdsAbstractSelectableListItemComponent } from '../../list-item';
import { AbstractFocusableOption } from './abstract-focusable-option';
import { RdsSelectAllChangedEvent } from './select-all-changed.event';
import * as i0 from "@angular/core";
import * as i1 from "../../checkbox/pseudo-checkbox.component";
let uniqueId = 0;
export class RdsSelectAllOptionComponent extends RdsAbstractSelectableListItemComponent {
    constructor() {
        super(...arguments);
        this.id = `rds-select__select-all-${uniqueId++}`;
        this.selectAllChanged = new EventEmitter();
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return true;
    }
    get hostElement() {
        return this.elementRef.nativeElement;
    }
    setActiveStyles() {
        this.focus('keyboard');
    }
    setInactiveStyles() {
        this.blur();
    }
    getSelectTypeClass() {
        return 'rds-select__option--select-all';
    }
    toggle() {
        super.toggle();
        this.selectAllChanged.emit(new RdsSelectAllChangedEvent(this, this.checked));
        this.cdr.markForCheck();
    }
    handleClick() {
        this.toggle();
    }
    markForCheck() {
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectAllOptionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsSelectAllOptionComponent, selector: "rds-select-all-option", outputs: { selectAllChanged: "selectAllChanged" }, providers: [
            {
                provide: AbstractFocusableOption,
                useExisting: RdsSelectAllOptionComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: `
    <rds-pseudo-checkbox noSpacing [checked]="checked" [disabled]="disabled" />
    <span>Select all</span>
  `, isInline: true, dependencies: [{ kind: "component", type: i1.RdsPseudoCheckboxComponent, selector: "rds-pseudo-checkbox", inputs: ["checked", "disabled", "indeterminate", "noSpacing"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSelectAllOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-select-all-option',
                    template: `
    <rds-pseudo-checkbox noSpacing [checked]="checked" [disabled]="disabled" />
    <span>Select all</span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        {
                            provide: AbstractFocusableOption,
                            useExisting: RdsSelectAllOptionComponent,
                        },
                    ],
                }]
        }], propDecorators: { selectAllChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LWFsbC1vcHRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9mb3JtLWZpZWxkL3NlbGVjdC9zZWxlY3QtYWxsLW9wdGlvbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsWUFBWSxFQUNaLE1BQU0sRUFDTixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7OztBQUV0RSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFpQmpCLE1BQU0sT0FBTywyQkFDWCxTQUFRLHNDQUFzQztJQWhCaEQ7O1FBbUJFLE9BQUUsR0FBRywwQkFBMEIsUUFBUSxFQUFFLEVBQUUsQ0FBQztRQUduQyxxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBK0IsQ0FBQztLQTBDN0U7SUF4Q0MsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUMvRCxDQUFDO0lBRUQsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7SUFDdkMsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxpQkFBaUI7UUFDZixJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRWtCLGtCQUFrQjtRQUNuQyxPQUFPLGdDQUFnQyxDQUFDO0lBQzFDLENBQUM7SUFFUSxNQUFNO1FBQ2IsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FDeEIsSUFBSSx3QkFBd0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUNqRCxDQUFDO1FBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0FoRFUsMkJBQTJCO2tHQUEzQiwyQkFBMkIsbUdBUDNCO1lBQ1Q7Z0JBQ0UsT0FBTyxFQUFFLHVCQUF1QjtnQkFDaEMsV0FBVyxFQUFFLDJCQUEyQjthQUN6QztTQUNGLGlEQVhTOzs7R0FHVDs7MkZBVVUsMkJBQTJCO2tCQWZ2QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFFBQVEsRUFBRTs7O0dBR1Q7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLHVCQUF1Qjs0QkFDaEMsV0FBVyw2QkFBNkI7eUJBQ3pDO3FCQUNGO2lCQUNGOzhCQVFVLGdCQUFnQjtzQkFEeEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgT3V0cHV0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZHNBYnN0cmFjdFNlbGVjdGFibGVMaXN0SXRlbUNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2xpc3QtaXRlbSc7XG5pbXBvcnQgeyBBYnN0cmFjdEZvY3VzYWJsZU9wdGlvbiB9IGZyb20gJy4vYWJzdHJhY3QtZm9jdXNhYmxlLW9wdGlvbic7XG5pbXBvcnQgeyBSZHNTZWxlY3RBbGxDaGFuZ2VkRXZlbnQgfSBmcm9tICcuL3NlbGVjdC1hbGwtY2hhbmdlZC5ldmVudCc7XG5cbmxldCB1bmlxdWVJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3Jkcy1zZWxlY3QtYWxsLW9wdGlvbicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHJkcy1wc2V1ZG8tY2hlY2tib3ggbm9TcGFjaW5nIFtjaGVja2VkXT1cImNoZWNrZWRcIiBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIiAvPlxuICAgIDxzcGFuPlNlbGVjdCBhbGw8L3NwYW4+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBBYnN0cmFjdEZvY3VzYWJsZU9wdGlvbixcbiAgICAgIHVzZUV4aXN0aW5nOiBSZHNTZWxlY3RBbGxPcHRpb25Db21wb25lbnQsXG4gICAgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzU2VsZWN0QWxsT3B0aW9uQ29tcG9uZW50PFQ+XG4gIGV4dGVuZHMgUmRzQWJzdHJhY3RTZWxlY3RhYmxlTGlzdEl0ZW1Db21wb25lbnRcbiAgaW1wbGVtZW50cyBBYnN0cmFjdEZvY3VzYWJsZU9wdGlvblxue1xuICBpZCA9IGByZHMtc2VsZWN0X19zZWxlY3QtYWxsLSR7dW5pcXVlSWQrK31gO1xuXG4gIEBPdXRwdXQoKVxuICByZWFkb25seSBzZWxlY3RBbGxDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcjxSZHNTZWxlY3RBbGxDaGFuZ2VkRXZlbnQ8VD4+KCk7XG5cbiAgcmVjdCgpOiBET01SZWN0IHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBpc1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBnZXQgaG9zdEVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgfVxuXG4gIHNldEFjdGl2ZVN0eWxlcygpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzKCdrZXlib2FyZCcpO1xuICB9XG5cbiAgc2V0SW5hY3RpdmVTdHlsZXMoKTogdm9pZCB7XG4gICAgdGhpcy5ibHVyKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgZ2V0U2VsZWN0VHlwZUNsYXNzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdyZHMtc2VsZWN0X19vcHRpb24tLXNlbGVjdC1hbGwnO1xuICB9XG5cbiAgb3ZlcnJpZGUgdG9nZ2xlKCk6IHZvaWQge1xuICAgIHN1cGVyLnRvZ2dsZSgpO1xuXG4gICAgdGhpcy5zZWxlY3RBbGxDaGFuZ2VkLmVtaXQoXG4gICAgICBuZXcgUmRzU2VsZWN0QWxsQ2hhbmdlZEV2ZW50KHRoaXMsIHRoaXMuY2hlY2tlZCksXG4gICAgKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMudG9nZ2xlKCk7XG4gIH1cblxuICBtYXJrRm9yQ2hlY2soKTogdm9pZCB7XG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cbn1cbiJdfQ==