import { ChangeDetectionStrategy, Component, DestroyRef, ElementRef, HostBinding, inject, Input, Output, } from '@angular/core';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { distinctUntilChanged, startWith } from 'rxjs/operators';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const COUNT_BADGE_MIN_WIDTH = 48;
export class RdsTriggerValuesComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this._hiddenValues = new BehaviorSubject(0);
        this.hiddenValues = this._hiddenValues.pipe(distinctUntilChanged());
        this._multiple = false;
        this._triggerValues = [' '];
    }
    get triggerValues() {
        return this._triggerValues;
    }
    set triggerValues(val) {
        if (this.hasDifferentValues(val)) {
            this._triggerValues = val;
            this.countVisibleCharacters();
        }
    }
    set multiple(multiple) {
        this._multiple = coerceBooleanProperty(multiple);
    }
    get multiple() {
        return this._multiple;
    }
    ngOnChanges(changes) {
        if (changes['wrapperElement'] || changes['multiple']) {
            this.countVisibleCharacters();
        }
    }
    ngAfterViewInit() {
        fromEvent(window, 'resize')
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.countVisibleCharacters());
    }
    countVisibleCharacters() {
        if (this.multiple) {
            if (this.triggerValues.length === 0 ||
                (this.triggerValues.length === 1 && this.triggerValues[0] === ' ')) {
                this.elementRef.nativeElement.innerHTML = ' ';
                this._hiddenValues.next(0);
            }
            let visibleValues = 0;
            while (visibleValues < this.triggerValues.length) {
                this.elementRef.nativeElement.innerHTML = this.triggerValues
                    .slice(0, visibleValues + 1)
                    .join('; ');
                if (this.elementRef.nativeElement.offsetWidth >= this.getValuesMaxWidth()) {
                    break;
                }
                visibleValues++;
            }
            this._hiddenValues.next(this.triggerValues.length - visibleValues - 1);
        }
        else {
            this.elementRef.nativeElement.innerHTML = this.triggerValues[0];
            this._hiddenValues.next(0);
        }
    }
    getValuesMaxWidth() {
        const wrapperWidth = this.wrapperElement?.offsetWidth || 0;
        const badgeWidth = this.wrapperElement?.getElementsByClassName('rds-form-field__select-hidden-trigger-values-placeholder')[0]?.offsetWidth || 0;
        return Math.max(wrapperWidth - Math.max(badgeWidth, COUNT_BADGE_MIN_WIDTH), 0);
    }
    // provided arrays are sorted
    hasDifferentValues(newValue) {
        return (this._triggerValues.length !== newValue.length ||
            this._triggerValues.some((val, i) => val !== newValue[i]));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTriggerValuesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTriggerValuesComponent, selector: "[rds-trigger-values]", inputs: { triggerValues: "triggerValues", wrapperElement: "wrapperElement", multiple: "multiple" }, outputs: { hiddenValues: "hiddenValues" }, host: { properties: { "title": "this.triggerValues" } }, exportAs: ["rdsTriggerValues"], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTriggerValuesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[rds-trigger-values]',
                    template: '',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    exportAs: 'rdsTriggerValues',
                }]
        }], propDecorators: { hiddenValues: [{
                type: Output
            }], triggerValues: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['title']
            }], wrapperElement: [{
                type: Input
            }], multiple: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,