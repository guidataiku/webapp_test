import { ActiveDescendantKeyManager, LiveAnnouncer } from '@angular/cdk/a11y';
import { CdkConnectedOverlay, ScrollStrategyOptions, } from '@angular/cdk/overlay';
import { ViewportRuler } from '@angular/cdk/scrolling';
import { booleanAttribute, ChangeDetectorRef, ContentChild, ContentChildren, DestroyRef, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, inject, Input, NgZone, Output, QueryList, Renderer2, ViewChild, } from '@angular/core';
import { Validators } from '@angular/forms';
import { defer, merge, noop, Subject } from 'rxjs';
import { debounceTime, delay, distinctUntilChanged, startWith, switchMap, take, takeUntil, } from 'rxjs/operators';
import { RdsListItemComponent } from '../../list-item';
import { updateErrorState } from '../../utils';
import { RdsAbstractFormFieldControl } from '../abstract-form-field-control';
import { RdsFormFieldComponent, } from '../form-field.component';
import { AbstractFocusableOption } from './abstract-focusable-option';
import { RdsSelectSearchInputComponent } from './select-search-input.component';
import { SELECT_PANEL_MAX_HEIGHT, } from './select-types';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
let nextUniqueId = 0;
export class RdsAbstractSelectComponent extends RdsAbstractFormFieldControl {
    get hostAriaDescribedBy() {
        return this._ariaDescribedby || null;
    }
    get hostTabindex() {
        return this.disabled ? '-1' : '0';
    }
    get hostAriaOwns() {
        return this.panelOpen ? this.optionIds : null;
    }
    get hostActivedescendant() {
        if (this.panelOpen && this.keyManager && this.keyManager.activeItem) {
            return this.keyManager.activeItem.id;
        }
        return null;
    }
    get hostAriaLabelledBy() {
        return this.ariaLabelledby || null;
    }
    get attrDisabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled ? this.ngControl.disabled : null;
        }
        return this._disabled ? this._disabled : null;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    set required(value) {
        const newValue = booleanAttribute(value);
        if (newValue !== this._required) {
            this._required = newValue;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    get errorState() {
        return this._errorState;
    }
    get hostAriaLabel() {
        if (this.ariaLabelledby) {
            return null;
        }
        if (this._ariaLabel) {
            return this._ariaLabel;
        }
        else {
            return null;
        }
    }
    set hostAriaLabel(newValue) {
        if (newValue !== this._ariaLabel) {
            this._ariaLabel = newValue;
            this.stateChanges.next();
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
        this.stateChanges.next();
    }
    set disabled(newValue) {
        const disabled = booleanAttribute(newValue);
        if (disabled !== this._disabled) {
            if (!this.panelOpen && this.keyManager) {
                this.keyManager.updateActiveItem(-1);
            }
            this._disabled = disabled;
        }
    }
    get disabled() {
        return this.attrDisabled || false;
    }
    set hideValue(value) {
        const newValue = booleanAttribute(value);
        if (this._hideValue !== newValue) {
            this._hideValue = booleanAttribute(value);
            this.stateChanges.emit();
        }
    }
    get hideValue() {
        return this._hideValue;
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.emit();
    }
    get value() {
        return this._value;
    }
    set value(newValue) {
        if (newValue !== this._value) {
            this.writeValue(newValue);
            this._value = newValue;
        }
    }
    get filterBy() {
        return this._filterBy;
    }
    set filterBy(fn) {
        this._filterBy = fn;
    }
    handleKeydown(event) {
        if (!this.disabled) {
            this.panelOpen
                ? this.handleOpenKeydown(event)
                : this.handleClosedKeydown(event);
        }
    }
    onFocus() {
        if (!this.disabled) {
            this._focused = true;
            this.stateChanges.next();
        }
    }
    onBlur() {
        this._focused = false;
        if (!this.disabled) {
            this.onTouched();
            this.cdr.markForCheck();
            this.stateChanges.next();
        }
    }
    get focused() {
        return this._focused || this._panelOpen;
    }
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    onContainerClick() {
        this.focus();
        this.open();
    }
    get shouldLabelFloat() {
        return !this.hideValue && (this._panelOpen || !this.empty);
    }
    get empty() {
        return !this.selectionModel || this.selectionModel.isEmpty();
    }
    get controlType() {
        return 'select';
    }
    get panelOpen() {
        return this._panelOpen;
    }
    constructor() {
        super();
        this.destroyRef = inject(DestroyRef);
        this.viewportRuler = inject(ViewportRuler);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.scrollStrategyOptions = inject(ScrollStrategyOptions);
        this.elementRef = inject(ElementRef);
        this.liveAnnouncer = inject(LiveAnnouncer);
        this.renderer = inject(Renderer2);
        this.formField = inject(forwardRef(() => RdsFormFieldComponent));
        this._name = 'rds-abstract-select';
        this._uid = `${this._name}-${nextUniqueId++}`;
        this.selectAllDestroy$ = new Subject();
        this.destroyKeyManager$ = new Subject();
        this.minPanelWidth = 170;
        this._filterValue = null;
        this._panelOpen = false;
        /** The scroll position of the overlay panel, calculated to center the selected option. */
        this._scrollTop = 0;
        this._ariaLabel = '';
        this.optionIds = '';
        this._hideValue = false;
        this._placeholder = '';
        this.positions = [
            {
                originX: 'start',
                originY: 'bottom',
                overlayX: 'start',
                overlayY: 'top',
            },
            {
                originX: 'start',
                originY: 'top',
                overlayX: 'start',
                overlayY: 'bottom',
            },
        ];
        this.optionSelectionChanges = defer(() => {
            const options = this.options;
            if (options) {
                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map((option) => option.selectionChange$))), 
                // should emit one time if many selection changes at one time e.g.: select/deselect all
                debounceTime(1));
            }
            return this.ngZone.onStable.asObservable().pipe(take(1), switchMap(() => this.optionSelectionChanges));
        });
        this._id = this._uid;
        this.minWidth = this.minPanelWidth;
        this.transformOrigin = 'top';
        this.panelDoneAnimatingStream = new Subject();
        this.hostRole = 'listbox';
        this.hostClass = 'rds-form-field__control';
        this.valueChange = new EventEmitter();
        this.openChange = new EventEmitter();
        this.onChange = noop;
        this.onTouched = noop;
        this._filterBy = (t, o) => this._defaultFilterBy(t, o);
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        const scrollStrategy = () => this.scrollStrategyOptions.block();
        this.scrollStrategy = scrollStrategy();
        if (!this.compareWith) {
            this.compareWith = (o1, o2) => o1 === o2;
        }
    }
    ngOnInit() {
        this.stateChanges.next();
        this.stateChanges
            .pipe(delay(1), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this._setSize(this.formField.size);
            this.cdr.markForCheck();
        });
        // We need `distinctUntilChanged` here, because some browsers will
        // fire the animation end event twice for the same animation. See:
        // https://github.com/angular/angular/issues/24084
        this.panelDoneAnimatingStream
            .pipe(distinctUntilChanged(), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.panelOpen) {
                this._scrollTop = 0;
            }
            else {
                this.overlayDir.offsetX = 0;
                this.cdr.markForCheck();
            }
        });
        this.viewportRuler
            .change()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this._panelOpen) {
                this.triggerClientRect =
                    this.trigger.nativeElement.getBoundingClientRect();
                this.minWidth = Math.max(this.minPanelWidth, this.triggerClientRect.width);
                this.cdr.markForCheck();
            }
        });
    }
    ngAfterContentInit() {
        this.initKeyManager();
        this.selectionModel.changed
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            event.added.forEach((option) => (option.checked = true));
            event.removed.forEach((option) => (option.checked = false));
            this.cdr.markForCheck();
        });
        this.options.changes
            .pipe(startWith([null]), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.resetOptions();
            this.initializeSelection();
        });
        if (this.selectSearch) {
            this.selectSearch.changed
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe((filterValue) => {
                this._filterValue = filterValue;
                this.refreshOptionsVisibility();
                this.options.forEach((o) => o.setInactiveStyles());
                this.initKeyManager();
            });
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            const oldState = this._errorState;
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (oldState !== this._errorState) {
                this.stateChanges.next();
            }
        }
        this.dirtyDisabledValue();
    }
    ngOnChanges(changes) {
        if (changes['disabled']) {
            this.stateChanges.next();
        }
    }
    ngOnDestroy() {
        this.selectAllDestroy$.complete();
        this.destroyKeyManager$.next();
        this.destroyKeyManager$.complete();
        this.stateChanges.complete();
        this.openChange.complete();
    }
    dirtyDisabledValue() {
        if (this._disabled !== this.disabled) {
            this._disabled = this.disabled;
            this.stateChanges.next();
        }
    }
    removeValue(index) {
        const values = Array.from(this.options.filter((item) => item.checked && !item.disabled));
        values.splice(index, 1);
        this.selectionModel.clear();
        this.selectionModel.select(...values);
        this.propagateChanges();
    }
    toggle() {
        this.panelOpen ? this.close() : this.open();
    }
    resetFilterValue() {
        this.selectSearch?.reset();
    }
    open() {
        if (this.disabled ||
            !this.options ||
            !this.options.length ||
            this._panelOpen) {
            return;
        }
        this.initKeyManager();
        this.triggerClientRect = this.trigger.nativeElement.getBoundingClientRect();
        this.minWidth = Math.max(this.minPanelWidth, this.triggerClientRect.width);
        this._panelOpen = true;
        this.keyManager.withHorizontalOrientation(null);
        this.cdr.markForCheck();
        this.openChange.emit(true);
    }
    close() {
        if (this._panelOpen) {
            this.focus();
            this.options.forEach((i) => i.setInactiveStyles());
            this._panelOpen = false;
            this.keyManager.withHorizontalOrientation('rtl');
            this.onTouched();
            this.cdr.markForCheck();
            this.openChange.emit(false);
        }
    }
    writeValue(value) {
        if (this.options) {
            this.setSelectionByValue(value);
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
        this.stateChanges.next();
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    onAttached() {
        this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {
            this.cdr.detectChanges();
            this.overlayDir.overlayRef.updatePosition();
            this.panel.nativeElement.scrollTop = this._scrollTop;
            this.selectSearch?.focus();
        });
    }
    refreshOptionsVisibility() {
        if (this.panel &&
            this.panel.nativeElement &&
            this.options &&
            this.options.length > 0) {
            this.options.forEach((item, index, array) => {
                if (typeof this._filterBy === 'function') {
                    item.toggleVisibility(this._filterBy(this._filterValue, item, index, array));
                }
                else {
                    item.toggleVisibility(this._defaultFilterBy(this._filterValue, item));
                }
            });
            if (this.options.filter((item) => item.isVisible()).length === 0) {
                this.renderer.setStyle(this.panel.nativeElement, 'overflow', 'hidden');
            }
            else {
                this.renderer.removeStyle(this.panel.nativeElement, 'overflow');
            }
            this.cdr.markForCheck();
        }
    }
    shouldShowPlaceholder() {
        return (this.hasPlaceholderValue() &&
            (this.formField._labelPosition !== 'floating' ||
                (this.formField._labelPosition === 'floating' &&
                    this.selectionModel.isEmpty() &&
                    this.shouldLabelFloat)));
    }
    shouldShowValue() {
        return (!this.hideValue &&
            (this.selectionModel.hasValue() || !this.hasPlaceholderValue()));
    }
    hasPlaceholderValue() {
        return !!this.placeholder && String(this.placeholder).trim().length > 0;
    }
    _defaultFilterBy(text, option) {
        if (text === null || text === '') {
            return true;
        }
        else if (option &&
            typeof option.value === 'string' &&
            typeof text === 'string') {
            return option.value.includes(text);
        }
        else {
            return option.value === text;
        }
    }
    initializeSelection() {
        Promise.resolve().then(() => {
            if (this.ngControl) {
                this._value = this.ngControl.value;
            }
            this.setSelectionByValue(this._value);
            this.stateChanges.next();
        });
    }
    selectValue(value) {
        const correspondingOption = this.options.find((option) => {
            try {
                // Treat null as a special reset value.
                return option.value != null && this.compareWith(option.value, value);
            }
            catch (error) {
                return false;
            }
        });
        if (correspondingOption) {
            this.selectionModel.select(correspondingOption);
        }
        return correspondingOption;
    }
    initKeyManager() {
        this.destroyKeyManager$.next();
        this.keyManager = new ActiveDescendantKeyManager(this.focusableOptions.filter((o) => o.isVisible()))
            .withVerticalOrientation()
            .withHorizontalOrientation('rtl')
            .withAllowedModifierKeys(['shiftKey'])
            .withHomeAndEnd();
        if (this.selectionModel.selected[0]) {
            const selectedIndex = this.focusableOptions
                .filter((o) => o.isVisible())
                .indexOf(this.selectionModel.selected[0]);
            this.keyManager.updateActiveItem(selectedIndex);
        }
        this.keyManager.tabOut
            .pipe(takeUntil(this.destroyKeyManager$), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.panelOpen) {
                this.close();
            }
        });
        this.keyManager.change
            .pipe(takeUntil(this.destroyKeyManager$), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this._panelOpen && this.panel) {
                this.scrollActiveOptionIntoView();
            }
        });
    }
    resetOptions() {
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        merge(...this.options.map((option) => option.checkedChanged))
            .pipe(
        // should emit one time if states changes for many options
        debounceTime(1), takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.stateChanges.next();
        });
        this.optionIds = this.options.map((option) => option.id).join(' ');
    }
    onSelect(option) {
        const wasSelected = this.selectionModel.isSelected(option);
        if (wasSelected !== option.checked) {
            option.checked
                ? this.selectionModel.select(option)
                : this.selectionModel.deselect(option);
        }
        if (wasSelected !== this.selectionModel.isSelected(option)) {
            this.propagateChanges();
        }
        this.stateChanges.next();
    }
    propagateChanges() {
        const valueToEmit = this.getValueToEmit();
        this._value = valueToEmit;
        this.valueChange.emit(valueToEmit);
        this.onChange(valueToEmit);
        this.cdr.markForCheck();
    }
    scrollActiveOptionIntoView() {
        const itemHeight = this.keyManager.activeItem?.rect().height || 0;
        const scrollContainerHeight = this.panel.nativeElement.scrollHeight;
        const panelHeight = Math.min(scrollContainerHeight, SELECT_PANEL_MAX_HEIGHT);
        const maxScroll = scrollContainerHeight - panelHeight;
        const scrollBuffer = panelHeight / 2;
        const optionOffsetFormScrollTop = (this.keyManager.activeItemIndex || 0) * itemHeight;
        const halfOptionHeight = itemHeight / 2;
        const optimalScrollPosition = optionOffsetFormScrollTop - scrollBuffer + halfOptionHeight;
        this._scrollTop = Math.min(Math.max(0, optimalScrollPosition), maxScroll);
        this.panel.nativeElement.scrollTop = this._scrollTop;
    }
    _setSize(size) {
        this.options?.forEach((option) => (option.size = size));
        if (this.selectSearch) {
            this.selectSearch.size = size;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAbstractSelectComponent, inputs: { required: "required", hostAriaLabel: ["aria-label", "hostAriaLabel"], id: "id", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], sortComparator: "sortComparator", compareWith: "compareWith", disabled: "disabled", hideValue: "hideValue", placeholder: "placeholder", value: "value", filterBy: "filterBy" }, outputs: { valueChange: "valueChange", openChange: "openChange" }, host: { listeners: { "keydown": "handleKeydown($event)", "focus": "onFocus()", "blur": "onBlur()" }, properties: { "attr.role": "this.hostRole", "class": "this.hostClass", "attr.aria-describedby": "this.hostAriaDescribedBy", "tabIndex": "this.hostTabindex", "attr.aria-owns": "this.hostAriaOwns", "attr.aria-activedescendant": "this.hostActivedescendant", "attr.aria-labelledby": "this.hostAriaLabelledBy", "attr.disabled": "this.attrDisabled", "attr.required": "this.attrRequired", "attr.aria-invalid": "this.errorState", "attr.aria-label": "this.hostAriaLabel", "attr.id": "this.id" } }, queries: [{ propertyName: "selectSearch", first: true, predicate: RdsSelectSearchInputComponent, descendants: true }, { propertyName: "options", predicate: RdsListItemComponent }, { propertyName: "focusableOptions", predicate: AbstractFocusableOption }], viewQueries: [{ propertyName: "panel", first: true, predicate: ["panel"], descendants: true }, { propertyName: "overlayDir", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSelectComponent, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], hostTabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], hostAriaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], hostActivedescendant: [{
                type: HostBinding,
                args: ['attr.aria-activedescendant']
            }], hostAriaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], errorState: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], hostAriaLabel: [{
                type: Input,
                args: ['aria-label']
            }, {
                type: HostBinding,
                args: ['attr.aria-label']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], sortComparator: [{
                type: Input
            }], compareWith: [{
                type: Input
            }], disabled: [{
                type: Input
            }], hideValue: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], openChange: [{
                type: Output
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], overlayDir: [{
                type: ViewChild,
                args: [CdkConnectedOverlay]
            }], options: [{
                type: ContentChildren,
                args: [RdsListItemComponent]
            }], focusableOptions: [{
                type: ContentChildren,
                args: [AbstractFocusableOption]
            }], selectSearch: [{
                type: ContentChild,
                args: [RdsSelectSearchInputComponent]
            }], filterBy: [{
                type: Input
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,