import { A, DOWN_ARROW, ENTER, hasModifierKey, LEFT_ARROW, RIGHT_ARROW, SPACE, UP_ARROW, } from '@angular/cdk/keycodes';
import { booleanAttribute, ChangeDetectionStrategy, Component, ContentChildren, inject, Input, QueryList, ViewChildren, ViewEncapsulation, } from '@angular/core';
import { merge } from 'rxjs';
import { debounceTime, filter, map, startWith, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { RdsAbstractFormFieldControl } from '../abstract-form-field-control';
import { SelectAnimations } from './select.animations';
import { RdsAbstractSelectComponent } from './abstract-select.component';
import { SelectionModel } from '@angular/cdk/collections';
import { RdsSelectAllOptionComponent } from './select-all-option.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { RdsChipComponent } from '../../chips';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/overlay";
import * as i2 from "../../icons/icon.component";
import * as i3 from "../../button/icon-button.component";
import * as i4 from "../../chips/chip-list/chip-list.component";
import * as i5 from "../../chips/chip/chip.component";
import * as i6 from "../../badge/badge.component";
import * as i7 from "./trigger-values.component";
import * as i8 from "@angular/common";
export class RdsMultiSelectComponent extends RdsAbstractSelectComponent {
    constructor() {
        super(...arguments);
        this.dir = inject(Directionality, { optional: true });
        this._name = 'rds-multi-select';
        this.allOptionsSelected = false;
        this._withChips = false;
        this.focusedChip = null;
        this.chipActions = new QueryList();
    }
    get selected() {
        return this.selectionModel.selected;
    }
    get triggerValues() {
        if (this.empty) {
            return [''];
        }
        return this.selectionModel.selected.map((option) => option.viewValue);
    }
    get controlType() {
        if (this.withChips) {
            return 'select-with-chips';
        }
        else {
            return 'select';
        }
    }
    set withChips(value) {
        const newValue = booleanAttribute(value);
        if (this._withChips !== newValue) {
            this._withChips = newValue;
            this.stateChanges.emit();
        }
    }
    get withChips() {
        return this._withChips;
    }
    ngOnInit() {
        super.ngOnInit();
        this.selectionModel = new SelectionModel(true);
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        this.selectionModel.changed
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            // check it
            this.calculateAllOptionsSelected();
            this.refreshSelectAllCheck();
            this.cdr.markForCheck();
        });
        this.calculateAllOptionsSelected();
        this.selectAllElements.changes
            .pipe(startWith(this.selectAllElements), tap(() => this.selectAllDestroy$.next()), filter(() => this.selectAllElements.length > 0), switchMap(() => merge(...this.selectAllElements.map((all) => all.selectAllChanged)).pipe(takeUntil(this.selectAllDestroy$), takeUntilDestroyed(this.destroyRef))), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.toggleAllOptions();
        });
    }
    ngAfterViewInit() {
        this.setUpFocusManagement();
    }
    close() {
        super.close();
        if (this._panelOpen) {
            this.selectAllElements.forEach((all) => all.setInactiveStyles());
        }
    }
    toggleAllOptions(selectAll = !this.allOptionsSelected) {
        if (this.allOptionsSelected !== selectAll) {
            this.selectionModel.clear();
            this.allOptionsSelected = selectAll;
            this.selectionModel.select(...this.options.filter((item) => this.allOptionsSelected
                ? item.checked || !item.disabled
                : item.checked && item.disabled));
            this.sortValues();
            this.propagateChanges();
        }
    }
    selectAllOptions() {
        this.toggleAllOptions(true);
    }
    deselectAllOptions() {
        this.toggleAllOptions(false);
    }
    clearSelectedOptions(event) {
        event.preventDefault();
        event.stopPropagation();
        this.selectionModel.clear();
        this.propagateChanges();
    }
    handleClosedKeydown(event) {
        if (this.withChips) {
            return;
        }
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW ||
            keyCode === UP_ARROW ||
            keyCode === LEFT_ARROW ||
            keyCode === RIGHT_ARROW;
        const isOpenKey = keyCode === ENTER || keyCode === SPACE;
        const manager = this.keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||
            isArrowKey) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.open();
        }
    }
    handleOpenKeydown(event) {
        const manager = this.keyManager;
        const keyCode = event.keyCode;
        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;
        const isTyping = manager.isTyping();
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.close();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping &&
            (keyCode === ENTER || keyCode === SPACE) &&
            manager.activeItem &&
            !hasModifierKey(event)) {
            event.preventDefault();
            manager.activeItem.handleClick();
        }
        else if (!isTyping && keyCode === A && event.ctrlKey) {
            event.preventDefault();
            this.toggleAllOptions();
            this.selectAllElements.forEach((option) => option.markForCheck());
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (isArrowKey &&
                event.shiftKey &&
                manager.activeItem &&
                manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem.handleClick();
            }
        }
    }
    setSelectionByValue(value) {
        if (value) {
            this.selectionModel.clear();
            value.forEach((currentValue) => this.selectValue(currentValue));
            this.sortValues();
        }
        this.cdr.markForCheck();
    }
    resetOptions() {
        super.resetOptions();
        this.optionSelectionChanges
            .pipe(takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => this.onSelect(event.source));
        // Listen to changes in the internal state of the options and react accordingly.
        // Handles cases like the labels of the selected options changing.
        merge(...this.options.map((option) => option.checkedChanged))
            .pipe(
        // should emit one time if states changes for many options
        debounceTime(1), takeUntil(this.options.changes), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.calculateAllOptionsSelected();
            this.refreshSelectAllCheck();
            this.selectAllElements.forEach((option) => option.markForCheck());
            this.stateChanges.next();
        });
        this.calculateAllOptionsSelected();
        this.refreshSelectAllCheck();
    }
    onSelect(option) {
        super.onSelect(option);
        this.sortValues();
        this.stateChanges.next();
    }
    sortValues() {
        const options = this.options.toArray();
        this.selectionModel.sort((a, b) => {
            return this.sortComparator
                ? this.sortComparator(a, b, options)
                : options.indexOf(a) - options.indexOf(b);
        });
        this.stateChanges.next();
    }
    getValueToEmit() {
        return this.selected.map((s) => s.value);
    }
    setUpFocusManagement() {
        this.chips.changes
            .pipe(startWith(this.chips), takeUntilDestroyed(this.destroyRef))
            .subscribe((chips) => {
            const actions = [];
            chips.forEach((chip) => chip.getActions().forEach((action) => actions.push(action)));
            this.chipActions.reset(actions);
            this.chipActions.notifyOnChanges();
        });
        this.keyManagerChips = new FocusKeyManager(this.chipActions)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr')
            .withHomeAndEnd()
            .skipPredicate((action) => action.disabled);
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$))), takeUntilDestroyed(this.destroyRef))
            .subscribe(({ source: chip }) => {
            const action = chip.getSourceAction(document.activeElement);
            if (action) {
                this.keyManagerChips.updateActiveItem(action);
            }
        });
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$.pipe(map((e) => ({ focused: true, source: e.source })))), ...this.chips.map((c) => c.blur$.pipe(map((e) => ({ focused: false, source: e.source })))))), takeUntilDestroyed(this.destroyRef))
            .subscribe((chip) => {
            if (chip.focused) {
                this.focusedChip = chip.source;
            }
            else if (this.focusedChip === chip.source) {
                this.focusedChip = null;
            }
            this.cdr.markForCheck();
        });
        this.dir?.change
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((direction) => this.keyManagerChips.withHorizontalOrientation(direction));
    }
    refreshSelectAllCheck() {
        this.selectAllElements.forEach((all) => (all.checked = this.allOptionsSelected));
        this.cdr.markForCheck();
    }
    calculateAllOptionsSelected() {
        this.allOptionsSelected = this.options
            .toArray()
            .filter((item) => !item.disabled)
            .every((item) => item.checked);
        this.cdr.markForCheck();
    }
    _setSize(size) {
        super._setSize(size);
        this.selectAllElements?.forEach((element) => (element.size = size));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiSelectComponent, selector: "rds-multi-select", inputs: { withChips: "withChips" }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: RdsMultiSelectComponent,
            },
        ], queries: [{ propertyName: "selectAllElements", predicate: RdsSelectAllOptionComponent }], viewQueries: [{ propertyName: "chips", predicate: RdsChipComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-container aria-hidden="true" (click)="toggle()">
      @if (shouldShowValue()) {
        <div class="rds-form-field__select-value" #wrapperElement>
          @if (withChips) {
            @if (triggerValues.length && triggerValues[0]) {
              <rds-chip-list size="s">
                @for (value of triggerValues; track value; let i = $index) {
                  <rds-chip
                    closable
                    (closeChip)="removeValue(i)"
                    #valueContainer
                    [disabled]="disabled"
                    [tabindex]="
                      !focusedChip || focusedChip === valueContainer ? 0 : -1
                    "
                  >
                    {{ value }}
                  </rds-chip>
                }
              </rds-chip-list>
            }
          } @else {
            <span
              class="rds-form-field__select-trigger-value"
              rds-trigger-values
              multiple
              #rdsTriggerValues="rdsTriggerValues"
              [triggerValues]="triggerValues"
              [wrapperElement]="wrapperElement"
            ></span>
            @if (((rdsTriggerValues.hiddenValues | async) || 0) > 0) {
              <span
                class="rds-form-field__select-hidden-trigger-values-placeholder"
              >
                <rds-badge
                  type="minimal"
                  size="s"
                  [color]="disabled ? 'black' : 'blue'"
                  [label]="'+' + (rdsTriggerValues.hiddenValues | async)"
                />
              </span>
            }
          }
          @if (withChips && triggerValues.length && triggerValues[0]) {
            <div class="rds-form-field__select-x-wrapper">
              <button
                rds-icon-button
                size="m"
                [disabled]="disabled"
                (click)="clearSelectedOptions($event)"
              >
                <rds-icon namespace="filled" icon="close" />
              </button>
            </div>
          }
        </div>
      } @else {
        @if (shouldShowPlaceholder()) {
          <div class="rds-form-field__select-value">
            <div
              class="rds-form-field__select-trigger-value rds-form-field__select-trigger-value-placeholder"
            >
              {{ placeholder }}
            </div>
          </div>
        }
      }
      <div class="rds-form-field__select-arrow-wrapper">
        <div
          class="rds-form-field__select-arrow"
          [class.rds-form-field__select-arrow--rotate]="panelOpen"
        ></div>
      </div>
    </ng-container>

    <ng-template
      cdk-connected-overlay
      cdkConnectedOverlayLockPosition
      cdkConnectedOverlayHasBackdrop
      cdkConnectedOverlayPanelClass="test"
      cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
      [cdkConnectedOverlayScrollStrategy]="scrollStrategy"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="panelOpen"
      [cdkConnectedOverlayPositions]="positions"
      [cdkConnectedOverlayMinWidth]="minWidth"
      (backdropClick)="close(); onBlur()"
      (attach)="onAttached()"
      (detach)="close()"
    >
      <div class="rds-select__panel-wrapper" [@transformPanelWrap]="null">
        <div
          #panel
          class="rds-select__panel"
          aria-multiselectable="true"
          [attr.id]="id + '-panel'"
          [@transformPanel]="'showing'"
          (@transformPanel.done)="panelDoneAnimatingStream.next($event.toState)"
          [style.transformOrigin]="transformOrigin"
          (keydown)="handleKeydown($event)"
        >
          <ng-content select="rds-select-search-input" />
          <ng-content select="rds-select-all-option" />
          <ng-content select="rds-multi-select-option" />
        </div>
      </div>
    </ng-template>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.CdkConnectedOverlay, selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]", inputs: ["cdkConnectedOverlayOrigin", "cdkConnectedOverlayPositions", "cdkConnectedOverlayPositionStrategy", "cdkConnectedOverlayOffsetX", "cdkConnectedOverlayOffsetY", "cdkConnectedOverlayWidth", "cdkConnectedOverlayHeight", "cdkConnectedOverlayMinWidth", "cdkConnectedOverlayMinHeight", "cdkConnectedOverlayBackdropClass", "cdkConnectedOverlayPanelClass", "cdkConnectedOverlayViewportMargin", "cdkConnectedOverlayScrollStrategy", "cdkConnectedOverlayOpen", "cdkConnectedOverlayDisableClose", "cdkConnectedOverlayTransformOriginOn", "cdkConnectedOverlayHasBackdrop", "cdkConnectedOverlayLockPosition", "cdkConnectedOverlayFlexibleDimensions", "cdkConnectedOverlayGrowAfterOpen", "cdkConnectedOverlayPush", "cdkConnectedOverlayDisposeOnNavigation"], outputs: ["backdropClick", "positionChange", "attach", "detach", "overlayKeydown", "overlayOutsideClick"], exportAs: ["cdkConnectedOverlay"] }, { kind: "component", type: i2.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: i3.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: i4.RdsChipListComponent, selector: "rds-chip-list", inputs: ["tabIndex", "multiple", "selectable", "size", "compareFn", "value", "disabled"], outputs: ["valueChange"] }, { kind: "component", type: i5.RdsChipComponent, selector: "rds-chip, button[rds-chip], button[rdsChip]", inputs: ["ariaLabelCloseButton", "size", "type", "role", "disabled", "closable", "value"], outputs: ["closeChip", "destroyed"] }, { kind: "component", type: i6.RdsBadgeComponent, selector: "rds-badge", inputs: ["size", "label", "color", "type", "ariaDescribedBy"] }, { kind: "component", type: i7.RdsTriggerValuesComponent, selector: "[rds-trigger-values]", inputs: ["triggerValues", "wrapperElement", "multiple"], outputs: ["hiddenValues"], exportAs: ["rdsTriggerValues"] }, { kind: "pipe", type: i8.AsyncPipe, name: "async" }], animations: SelectAnimations, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-multi-select',
                    template: `
    <ng-container aria-hidden="true" (click)="toggle()">
      @if (shouldShowValue()) {
        <div class="rds-form-field__select-value" #wrapperElement>
          @if (withChips) {
            @if (triggerValues.length && triggerValues[0]) {
              <rds-chip-list size="s">
                @for (value of triggerValues; track value; let i = $index) {
                  <rds-chip
                    closable
                    (closeChip)="removeValue(i)"
                    #valueContainer
                    [disabled]="disabled"
                    [tabindex]="
                      !focusedChip || focusedChip === valueContainer ? 0 : -1
                    "
                  >
                    {{ value }}
                  </rds-chip>
                }
              </rds-chip-list>
            }
          } @else {
            <span
              class="rds-form-field__select-trigger-value"
              rds-trigger-values
              multiple
              #rdsTriggerValues="rdsTriggerValues"
              [triggerValues]="triggerValues"
              [wrapperElement]="wrapperElement"
            ></span>
            @if (((rdsTriggerValues.hiddenValues | async) || 0) > 0) {
              <span
                class="rds-form-field__select-hidden-trigger-values-placeholder"
              >
                <rds-badge
                  type="minimal"
                  size="s"
                  [color]="disabled ? 'black' : 'blue'"
                  [label]="'+' + (rdsTriggerValues.hiddenValues | async)"
                />
              </span>
            }
          }
          @if (withChips && triggerValues.length && triggerValues[0]) {
            <div class="rds-form-field__select-x-wrapper">
              <button
                rds-icon-button
                size="m"
                [disabled]="disabled"
                (click)="clearSelectedOptions($event)"
              >
                <rds-icon namespace="filled" icon="close" />
              </button>
            </div>
          }
        </div>
      } @else {
        @if (shouldShowPlaceholder()) {
          <div class="rds-form-field__select-value">
            <div
              class="rds-form-field__select-trigger-value rds-form-field__select-trigger-value-placeholder"
            >
              {{ placeholder }}
            </div>
          </div>
        }
      }
      <div class="rds-form-field__select-arrow-wrapper">
        <div
          class="rds-form-field__select-arrow"
          [class.rds-form-field__select-arrow--rotate]="panelOpen"
        ></div>
      </div>
    </ng-container>

    <ng-template
      cdk-connected-overlay
      cdkConnectedOverlayLockPosition
      cdkConnectedOverlayHasBackdrop
      cdkConnectedOverlayPanelClass="test"
      cdkConnectedOverlayBackdropClass="cdk-overlay-transparent-backdrop"
      [cdkConnectedOverlayScrollStrategy]="scrollStrategy"
      [cdkConnectedOverlayOrigin]="origin"
      [cdkConnectedOverlayOpen]="panelOpen"
      [cdkConnectedOverlayPositions]="positions"
      [cdkConnectedOverlayMinWidth]="minWidth"
      (backdropClick)="close(); onBlur()"
      (attach)="onAttached()"
      (detach)="close()"
    >
      <div class="rds-select__panel-wrapper" [@transformPanelWrap]="null">
        <div
          #panel
          class="rds-select__panel"
          aria-multiselectable="true"
          [attr.id]="id + '-panel'"
          [@transformPanel]="'showing'"
          (@transformPanel.done)="panelDoneAnimatingStream.next($event.toState)"
          [style.transformOrigin]="transformOrigin"
          (keydown)="handleKeydown($event)"
        >
          <ng-content select="rds-select-search-input" />
          <ng-content select="rds-select-all-option" />
          <ng-content select="rds-multi-select-option" />
        </div>
      </div>
    </ng-template>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: SelectAnimations,
                    providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: RdsMultiSelectComponent,
                        },
                    ],
                }]
        }], propDecorators: { withChips: [{
                type: Input
            }], selectAllElements: [{
                type: ContentChildren,
                args: [RdsSelectAllOptionComponent]
            }], chips: [{
                type: ViewChildren,
                args: [RdsChipComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvZm9ybS1maWVsZC9zZWxlY3QvbXVsdGktc2VsZWN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsQ0FBQyxFQUNELFVBQVUsRUFDVixLQUFLLEVBQ0wsY0FBYyxFQUNkLFVBQVUsRUFDVixXQUFXLEVBQ1gsS0FBSyxFQUNMLFFBQVEsR0FDVCxNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFFTCxnQkFBZ0IsRUFFaEIsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxlQUFlLEVBRWYsTUFBTSxFQUNOLEtBQUssRUFJTCxTQUFTLEVBQ1QsWUFBWSxFQUNaLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFDTCxZQUFZLEVBQ1osTUFBTSxFQUNOLEdBQUcsRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUNULFNBQVMsRUFDVCxHQUFHLEdBQ0osTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUU3RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFMUQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFaEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9D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QkFDNUIsU0FBUyxFQUFFO3dCQUNUOzRCQUNFLE9BQU8sRUFBRSwyQkFBMkI7NEJBQ3BDLFdBQVcseUJBQXlCO3lCQUNyQztxQkFDRjtpQkFDRjs4QkE2Q0ssU0FBUztzQkFEWixLQUFLO2dCQWVOLGlCQUFpQjtzQkFEaEIsZUFBZTt1QkFBQywyQkFBMkI7Z0JBRVosS0FBSztzQkFBcEMsWUFBWTt1QkFBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBLFxuICBET1dOX0FSUk9XLFxuICBFTlRFUixcbiAgaGFzTW9kaWZpZXJLZXksXG4gIExFRlRfQVJST1csXG4gIFJJR0hUX0FSUk9XLFxuICBTUEFDRSxcbiAgVVBfQVJST1csXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay9rZXljb2Rlcyc7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBib29sZWFuQXR0cmlidXRlLFxuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIERvQ2hlY2ssXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFF1ZXJ5TGlzdCxcbiAgVmlld0NoaWxkcmVuLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBkZWJvdW5jZVRpbWUsXG4gIGZpbHRlcixcbiAgbWFwLFxuICBzdGFydFdpdGgsXG4gIHN3aXRjaE1hcCxcbiAgdGFrZVVudGlsLFxuICB0YXAsXG59IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFJkc0Fic3RyYWN0Rm9ybUZpZWxkQ29udHJvbCB9IGZyb20gJy4uL2Fic3RyYWN0LWZvcm0tZmllbGQtY29udHJvbCc7XG5pbXBvcnQgeyBSZHNGb3JtRmllbGRTaXplIH0gZnJvbSAnLi4vZm9ybS1maWVsZC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0QW5pbWF0aW9ucyB9IGZyb20gJy4vc2VsZWN0LmFuaW1hdGlvbnMnO1xuaW1wb3J0IHsgUmRzQWJzdHJhY3RTZWxlY3RDb21wb25lbnQgfSBmcm9tICcuL2Fic3RyYWN0LXNlbGVjdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VsZWN0aW9uTW9kZWwgfSBmcm9tICdAYW5ndWxhci9jZGsvY29sbGVjdGlvbnMnO1xuaW1wb3J0IHsgUmRzTXVsdGlTZWxlY3RPcHRpb25Db21wb25lbnQgfSBmcm9tICcuL211bHRpLXNlbGVjdC1vcHRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IFJkc1NlbGVjdEFsbE9wdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vc2VsZWN0LWFsbC1vcHRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IHRha2VVbnRpbERlc3Ryb3llZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvcnhqcy1pbnRlcm9wJztcbmltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQgeyBSZHNDaGlwQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vY2hpcHMnO1xuaW1wb3J0IHsgRm9jdXNLZXlNYW5hZ2VyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHsgUmRzQ2hpcEFjdGlvbkRpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2NoaXBzL2NoaXAtYWN0aW9uJztcbmltcG9ydCB7IERpcmVjdGlvbmFsaXR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2JpZGknO1xuaW1wb3J0IHsgUmRzQ29udHJvbFR5cGUgfSBmcm9tICcuLi9jb250cm9sLnR5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyZHMtbXVsdGktc2VsZWN0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGFpbmVyIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIChjbGljayk9XCJ0b2dnbGUoKVwiPlxuICAgICAgQGlmIChzaG91bGRTaG93VmFsdWUoKSkge1xuICAgICAgICA8ZGl2IGNsYXNzPVwicmRzLWZvcm0tZmllbGRfX3NlbGVjdC12YWx1ZVwiICN3cmFwcGVyRWxlbWVudD5cbiAgICAgICAgICBAaWYgKHdpdGhDaGlwcykge1xuICAgICAgICAgICAgQGlmICh0cmlnZ2VyVmFsdWVzLmxlbmd0aCAmJiB0cmlnZ2VyVmFsdWVzWzBdKSB7XG4gICAgICAgICAgICAgIDxyZHMtY2hpcC1saXN0IHNpemU9XCJzXCI+XG4gICAgICAgICAgICAgICAgQGZvciAodmFsdWUgb2YgdHJpZ2dlclZhbHVlczsgdHJhY2sgdmFsdWU7IGxldCBpID0gJGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICA8cmRzLWNoaXBcbiAgICAgICAgICAgICAgICAgICAgY2xvc2FibGVcbiAgICAgICAgICAgICAgICAgICAgKGNsb3NlQ2hpcCk9XCJyZW1vdmVWYWx1ZShpKVwiXG4gICAgICAgICAgICAgICAgICAgICN2YWx1ZUNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgICAgICBbdGFiaW5kZXhdPVwiXG4gICAgICAgICAgICAgICAgICAgICAgIWZvY3VzZWRDaGlwIHx8IGZvY3VzZWRDaGlwID09PSB2YWx1ZUNvbnRhaW5lciA/IDAgOiAtMVxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICB7eyB2YWx1ZSB9fVxuICAgICAgICAgICAgICAgICAgPC9yZHMtY2hpcD5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvcmRzLWNoaXAtbGlzdD5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgIGNsYXNzPVwicmRzLWZvcm0tZmllbGRfX3NlbGVjdC10cmlnZ2VyLXZhbHVlXCJcbiAgICAgICAgICAgICAgcmRzLXRyaWdnZXItdmFsdWVzXG4gICAgICAgICAgICAgIG11bHRpcGxlXG4gICAgICAgICAgICAgICNyZHNUcmlnZ2VyVmFsdWVzPVwicmRzVHJpZ2dlclZhbHVlc1wiXG4gICAgICAgICAgICAgIFt0cmlnZ2VyVmFsdWVzXT1cInRyaWdnZXJWYWx1ZXNcIlxuICAgICAgICAgICAgICBbd3JhcHBlckVsZW1lbnRdPVwid3JhcHBlckVsZW1lbnRcIlxuICAgICAgICAgICAgPjwvc3Bhbj5cbiAgICAgICAgICAgIEBpZiAoKChyZHNUcmlnZ2VyVmFsdWVzLmhpZGRlblZhbHVlcyB8IGFzeW5jKSB8fCAwKSA+IDApIHtcbiAgICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICBjbGFzcz1cInJkcy1mb3JtLWZpZWxkX19zZWxlY3QtaGlkZGVuLXRyaWdnZXItdmFsdWVzLXBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxyZHMtYmFkZ2VcbiAgICAgICAgICAgICAgICAgIHR5cGU9XCJtaW5pbWFsXCJcbiAgICAgICAgICAgICAgICAgIHNpemU9XCJzXCJcbiAgICAgICAgICAgICAgICAgIFtjb2xvcl09XCJkaXNhYmxlZCA/ICdibGFjaycgOiAnYmx1ZSdcIlxuICAgICAgICAgICAgICAgICAgW2xhYmVsXT1cIicrJyArIChyZHNUcmlnZ2VyVmFsdWVzLmhpZGRlblZhbHVlcyB8IGFzeW5jKVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBAaWYgKHdpdGhDaGlwcyAmJiB0cmlnZ2VyVmFsdWVzLmxlbmd0aCAmJiB0cmlnZ2VyVmFsdWVzWzBdKSB7XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmRzLWZvcm0tZmllbGRfX3NlbGVjdC14LXdyYXBwZXJcIj5cbiAgICAgICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgICAgIHJkcy1pY29uLWJ1dHRvblxuICAgICAgICAgICAgICAgIHNpemU9XCJtXCJcbiAgICAgICAgICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIlxuICAgICAgICAgICAgICAgIChjbGljayk9XCJjbGVhclNlbGVjdGVkT3B0aW9ucygkZXZlbnQpXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxyZHMtaWNvbiBuYW1lc3BhY2U9XCJmaWxsZWRcIiBpY29uPVwiY2xvc2VcIiAvPlxuICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIH1cbiAgICAgICAgPC9kaXY+XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgQGlmIChzaG91bGRTaG93UGxhY2Vob2xkZXIoKSkge1xuICAgICAgICAgIDxkaXYgY2xhc3M9XCJyZHMtZm9ybS1maWVsZF9fc2VsZWN0LXZhbHVlXCI+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzPVwicmRzLWZvcm0tZmllbGRfX3NlbGVjdC10cmlnZ2VyLXZhbHVlIHJkcy1mb3JtLWZpZWxkX19zZWxlY3QtdHJpZ2dlci12YWx1ZS1wbGFjZWhvbGRlclwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt7IHBsYWNlaG9sZGVyIH19XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgPGRpdiBjbGFzcz1cInJkcy1mb3JtLWZpZWxkX19zZWxlY3QtYXJyb3ctd3JhcHBlclwiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgY2xhc3M9XCJyZHMtZm9ybS1maWVsZF9fc2VsZWN0LWFycm93XCJcbiAgICAgICAgICBbY2xhc3MucmRzLWZvcm0tZmllbGRfX3NlbGVjdC1hcnJvdy0tcm90YXRlXT1cInBhbmVsT3BlblwiXG4gICAgICAgID48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgPG5nLXRlbXBsYXRlXG4gICAgICBjZGstY29ubmVjdGVkLW92ZXJsYXlcbiAgICAgIGNka0Nvbm5lY3RlZE92ZXJsYXlMb2NrUG9zaXRpb25cbiAgICAgIGNka0Nvbm5lY3RlZE92ZXJsYXlIYXNCYWNrZHJvcFxuICAgICAgY2RrQ29ubmVjdGVkT3ZlcmxheVBhbmVsQ2xhc3M9XCJ0ZXN0XCJcbiAgICAgIGNka0Nvbm5lY3RlZE92ZXJsYXlCYWNrZHJvcENsYXNzPVwiY2RrLW92ZXJsYXktdHJhbnNwYXJlbnQtYmFja2Ryb3BcIlxuICAgICAgW2Nka0Nvbm5lY3RlZE92ZXJsYXlTY3JvbGxTdHJhdGVneV09XCJzY3JvbGxTdHJhdGVneVwiXG4gICAgICBbY2RrQ29ubmVjdGVkT3ZlcmxheU9yaWdpbl09XCJvcmlnaW5cIlxuICAgICAgW2Nka0Nvbm5lY3RlZE92ZXJsYXlPcGVuXT1cInBhbmVsT3BlblwiXG4gICAgICBbY2RrQ29ubmVjdGVkT3ZlcmxheVBvc2l0aW9uc109XCJwb3NpdGlvbnNcIlxuICAgICAgW2Nka0Nvbm5lY3RlZE92ZXJsYXlNaW5XaWR0aF09XCJtaW5XaWR0aFwiXG4gICAgICAoYmFja2Ryb3BDbGljayk9XCJjbG9zZSgpOyBvbkJsdXIoKVwiXG4gICAgICAoYXR0YWNoKT1cIm9uQXR0YWNoZWQoKVwiXG4gICAgICAoZGV0YWNoKT1cImNsb3NlKClcIlxuICAgID5cbiAgICAgIDxkaXYgY2xhc3M9XCJyZHMtc2VsZWN0X19wYW5lbC13cmFwcGVyXCIgW0B0cmFuc2Zvcm1QYW5lbFdyYXBdPVwibnVsbFwiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgI3BhbmVsXG4gICAgICAgICAgY2xhc3M9XCJyZHMtc2VsZWN0X19wYW5lbFwiXG4gICAgICAgICAgYXJpYS1tdWx0aXNlbGVjdGFibGU9XCJ0cnVlXCJcbiAgICAgICAgICBbYXR0ci5pZF09XCJpZCArICctcGFuZWwnXCJcbiAgICAgICAgICBbQHRyYW5zZm9ybVBhbmVsXT1cIidzaG93aW5nJ1wiXG4gICAgICAgICAgKEB0cmFuc2Zvcm1QYW5lbC5kb25lKT1cInBhbmVsRG9uZUFuaW1hdGluZ1N0cmVhbS5uZXh0KCRldmVudC50b1N0YXRlKVwiXG4gICAgICAgICAgW3N0eWxlLnRyYW5zZm9ybU9yaWdpbl09XCJ0cmFuc2Zvcm1PcmlnaW5cIlxuICAgICAgICAgIChrZXlkb3duKT1cImhhbmRsZUtleWRvd24oJGV2ZW50KVwiXG4gICAgICAgID5cbiAgICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJyZHMtc2VsZWN0LXNlYXJjaC1pbnB1dFwiIC8+XG4gICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwicmRzLXNlbGVjdC1hbGwtb3B0aW9uXCIgLz5cbiAgICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJyZHMtbXVsdGktc2VsZWN0LW9wdGlvblwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgYCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGFuaW1hdGlvbnM6IFNlbGVjdEFuaW1hdGlvbnMsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJkc0Fic3RyYWN0Rm9ybUZpZWxkQ29udHJvbCxcbiAgICAgIHVzZUV4aXN0aW5nOiBSZHNNdWx0aVNlbGVjdENvbXBvbmVudCxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNNdWx0aVNlbGVjdENvbXBvbmVudDxUPlxuICBleHRlbmRzIFJkc0Fic3RyYWN0U2VsZWN0Q29tcG9uZW50PFxuICAgIFQsXG4gICAgUmRzTXVsdGlTZWxlY3RPcHRpb25Db21wb25lbnQ8VD4sXG4gICAgVFtdLFxuICAgIFJkc011bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50PFQ+W11cbiAgPlxuICBpbXBsZW1lbnRzXG4gICAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgICBBZnRlclZpZXdJbml0LFxuICAgIE9uQ2hhbmdlcyxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT25Jbml0LFxuICAgIERvQ2hlY2ssXG4gICAgQ29udHJvbFZhbHVlQWNjZXNzb3JcbntcbiAgcHJpdmF0ZSByZWFkb25seSBkaXIgPSBpbmplY3QoRGlyZWN0aW9uYWxpdHksIHsgb3B0aW9uYWw6IHRydWUgfSk7XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHJlYWRvbmx5IF9uYW1lID0gJ3Jkcy1tdWx0aS1zZWxlY3QnO1xuXG4gIHByaXZhdGUgYWxsT3B0aW9uc1NlbGVjdGVkID0gZmFsc2U7XG4gIHByaXZhdGUgX3dpdGhDaGlwcyA9IGZhbHNlO1xuXG4gIG92ZXJyaWRlIGdldCBzZWxlY3RlZCgpOiBSZHNNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudDxUPltdIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25Nb2RlbC5zZWxlY3RlZDtcbiAgfVxuXG4gIG92ZXJyaWRlIGdldCB0cmlnZ2VyVmFsdWVzKCk6IHN0cmluZ1tdIHtcbiAgICBpZiAodGhpcy5lbXB0eSkge1xuICAgICAgcmV0dXJuIFsnJ107XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uTW9kZWwuc2VsZWN0ZWQubWFwKChvcHRpb24pID0+IG9wdGlvbi52aWV3VmFsdWUpO1xuICB9XG5cbiAgb3ZlcnJpZGUgZ2V0IGNvbnRyb2xUeXBlKCk6IFJkc0NvbnRyb2xUeXBlIHtcbiAgICBpZiAodGhpcy53aXRoQ2hpcHMpIHtcbiAgICAgIHJldHVybiAnc2VsZWN0LXdpdGgtY2hpcHMnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gJ3NlbGVjdCc7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KClcbiAgc2V0IHdpdGhDaGlwcyh2YWx1ZTogQm9vbGVhbklucHV0KSB7XG4gICAgY29uc3QgbmV3VmFsdWUgPSBib29sZWFuQXR0cmlidXRlKHZhbHVlKTtcblxuICAgIGlmICh0aGlzLl93aXRoQ2hpcHMgIT09IG5ld1ZhbHVlKSB7XG4gICAgICB0aGlzLl93aXRoQ2hpcHMgPSBuZXdWYWx1ZTtcbiAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgd2l0aENoaXBzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl93aXRoQ2hpcHM7XG4gIH1cblxuICBAQ29udGVudENoaWxkcmVuKFJkc1NlbGVjdEFsbE9wdGlvbkNvbXBvbmVudClcbiAgc2VsZWN0QWxsRWxlbWVudHM6IFF1ZXJ5TGlzdDxSZHNTZWxlY3RBbGxPcHRpb25Db21wb25lbnQ8VD4+O1xuICBAVmlld0NoaWxkcmVuKFJkc0NoaXBDb21wb25lbnQpIGNoaXBzOiBRdWVyeUxpc3Q8UmRzQ2hpcENvbXBvbmVudDxUPj47XG5cbiAgcHJvdGVjdGVkIGZvY3VzZWRDaGlwOiBSZHNDaGlwQ29tcG9uZW50PFQ+IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUga2V5TWFuYWdlckNoaXBzOiBGb2N1c0tleU1hbmFnZXI8UmRzQ2hpcEFjdGlvbkRpcmVjdGl2ZT47XG4gIHByaXZhdGUgcmVhZG9ubHkgY2hpcEFjdGlvbnMgPSBuZXcgUXVlcnlMaXN0PFJkc0NoaXBBY3Rpb25EaXJlY3RpdmU+KCk7XG5cbiAgb3ZlcnJpZGUgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkluaXQoKTtcbiAgICB0aGlzLnNlbGVjdGlvbk1vZGVsID0gbmV3IFNlbGVjdGlvbk1vZGVsPFJkc011bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50PFQ+PihcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgfVxuXG4gIG92ZXJyaWRlIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICBzdXBlci5uZ0FmdGVyQ29udGVudEluaXQoKTtcblxuICAgIHRoaXMuc2VsZWN0aW9uTW9kZWwuY2hhbmdlZFxuICAgICAgLnBpcGUodGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZikpXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgLy8gY2hlY2sgaXRcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVBbGxPcHRpb25zU2VsZWN0ZWQoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoU2VsZWN0QWxsQ2hlY2soKTtcbiAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuY2FsY3VsYXRlQWxsT3B0aW9uc1NlbGVjdGVkKCk7XG5cbiAgICB0aGlzLnNlbGVjdEFsbEVsZW1lbnRzLmNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICBzdGFydFdpdGgodGhpcy5zZWxlY3RBbGxFbGVtZW50cyksXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLnNlbGVjdEFsbERlc3Ryb3kkLm5leHQoKSksXG4gICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLnNlbGVjdEFsbEVsZW1lbnRzLmxlbmd0aCA+IDApLFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT5cbiAgICAgICAgICBtZXJnZShcbiAgICAgICAgICAgIC4uLnRoaXMuc2VsZWN0QWxsRWxlbWVudHMubWFwKChhbGwpID0+IGFsbC5zZWxlY3RBbGxDaGFuZ2VkKSxcbiAgICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5zZWxlY3RBbGxEZXN0cm95JCksXG4gICAgICAgICAgICB0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSxcbiAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICAgICB0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLnRvZ2dsZUFsbE9wdGlvbnMoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuc2V0VXBGb2N1c01hbmFnZW1lbnQoKTtcbiAgfVxuXG4gIG92ZXJyaWRlIGNsb3NlKCk6IHZvaWQge1xuICAgIHN1cGVyLmNsb3NlKCk7XG5cbiAgICBpZiAodGhpcy5fcGFuZWxPcGVuKSB7XG4gICAgICB0aGlzLnNlbGVjdEFsbEVsZW1lbnRzLmZvckVhY2goKGFsbCkgPT4gYWxsLnNldEluYWN0aXZlU3R5bGVzKCkpO1xuICAgIH1cbiAgfVxuXG4gIHRvZ2dsZUFsbE9wdGlvbnMoc2VsZWN0QWxsID0gIXRoaXMuYWxsT3B0aW9uc1NlbGVjdGVkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYWxsT3B0aW9uc1NlbGVjdGVkICE9PSBzZWxlY3RBbGwpIHtcbiAgICAgIHRoaXMuc2VsZWN0aW9uTW9kZWwuY2xlYXIoKTtcbiAgICAgIHRoaXMuYWxsT3B0aW9uc1NlbGVjdGVkID0gc2VsZWN0QWxsO1xuICAgICAgdGhpcy5zZWxlY3Rpb25Nb2RlbC5zZWxlY3QoXG4gICAgICAgIC4uLnRoaXMub3B0aW9ucy5maWx0ZXIoKGl0ZW0pID0+XG4gICAgICAgICAgdGhpcy5hbGxPcHRpb25zU2VsZWN0ZWRcbiAgICAgICAgICAgID8gaXRlbS5jaGVja2VkIHx8ICFpdGVtLmRpc2FibGVkXG4gICAgICAgICAgICA6IGl0ZW0uY2hlY2tlZCAmJiBpdGVtLmRpc2FibGVkLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIHRoaXMuc29ydFZhbHVlcygpO1xuICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgc2VsZWN0QWxsT3B0aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLnRvZ2dsZUFsbE9wdGlvbnModHJ1ZSk7XG4gIH1cblxuICBkZXNlbGVjdEFsbE9wdGlvbnMoKTogdm9pZCB7XG4gICAgdGhpcy50b2dnbGVBbGxPcHRpb25zKGZhbHNlKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjbGVhclNlbGVjdGVkT3B0aW9ucyhldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMuc2VsZWN0aW9uTW9kZWwuY2xlYXIoKTtcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZXMoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBoYW5kbGVDbG9zZWRLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMud2l0aENoaXBzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qga2V5Q29kZSA9IGV2ZW50LmtleUNvZGU7XG4gICAgY29uc3QgaXNBcnJvd0tleSA9XG4gICAgICBrZXlDb2RlID09PSBET1dOX0FSUk9XIHx8XG4gICAgICBrZXlDb2RlID09PSBVUF9BUlJPVyB8fFxuICAgICAga2V5Q29kZSA9PT0gTEVGVF9BUlJPVyB8fFxuICAgICAga2V5Q29kZSA9PT0gUklHSFRfQVJST1c7XG4gICAgY29uc3QgaXNPcGVuS2V5ID0ga2V5Q29kZSA9PT0gRU5URVIgfHwga2V5Q29kZSA9PT0gU1BBQ0U7XG4gICAgY29uc3QgbWFuYWdlciA9IHRoaXMua2V5TWFuYWdlcjtcblxuICAgIC8vIE9wZW4gdGhlIHNlbGVjdCBvbiBBTFQgKyBhcnJvdyBrZXkgdG8gbWF0Y2ggdGhlIG5hdGl2ZSA8c2VsZWN0PlxuICAgIGlmIChcbiAgICAgICghbWFuYWdlci5pc1R5cGluZygpICYmIGlzT3BlbktleSAmJiAhaGFzTW9kaWZpZXJLZXkoZXZlbnQpKSB8fFxuICAgICAgaXNBcnJvd0tleVxuICAgICkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudHMgdGhlIHBhZ2UgZnJvbSBzY3JvbGxpbmcgZG93biB3aGVuIHByZXNzaW5nIHNwYWNlXG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgaGFuZGxlT3BlbktleWRvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBtYW5hZ2VyID0gdGhpcy5rZXlNYW5hZ2VyO1xuICAgIGNvbnN0IGtleUNvZGUgPSBldmVudC5rZXlDb2RlO1xuICAgIGNvbnN0IGlzQXJyb3dLZXkgPSBrZXlDb2RlID09PSBET1dOX0FSUk9XIHx8IGtleUNvZGUgPT09IFVQX0FSUk9XO1xuICAgIGNvbnN0IGlzVHlwaW5nID0gbWFuYWdlci5pc1R5cGluZygpO1xuXG4gICAgaWYgKGlzQXJyb3dLZXkgJiYgZXZlbnQuYWx0S2V5KSB7XG4gICAgICAvLyBDbG9zZSB0aGUgc2VsZWN0IG9uIEFMVCArIGFycm93IGtleSB0byBtYXRjaCB0aGUgbmF0aXZlIDxzZWxlY3Q+XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaW4gdGhpcyBjYXNlIGlmIHRoZSB1c2VyIGlzIHR5cGluZyxcbiAgICAgIC8vIGJlY2F1c2UgdGhlIHR5cGluZyBzZXF1ZW5jZSBjYW4gaW5jbHVkZSB0aGUgc3BhY2Uga2V5LlxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAhaXNUeXBpbmcgJiZcbiAgICAgIChrZXlDb2RlID09PSBFTlRFUiB8fCBrZXlDb2RlID09PSBTUEFDRSkgJiZcbiAgICAgIG1hbmFnZXIuYWN0aXZlSXRlbSAmJlxuICAgICAgIWhhc01vZGlmaWVyS2V5KGV2ZW50KVxuICAgICkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG1hbmFnZXIuYWN0aXZlSXRlbS5oYW5kbGVDbGljaygpO1xuICAgIH0gZWxzZSBpZiAoIWlzVHlwaW5nICYmIGtleUNvZGUgPT09IEEgJiYgZXZlbnQuY3RybEtleSkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMudG9nZ2xlQWxsT3B0aW9ucygpO1xuICAgICAgdGhpcy5zZWxlY3RBbGxFbGVtZW50cy5mb3JFYWNoKChvcHRpb24pID0+IG9wdGlvbi5tYXJrRm9yQ2hlY2soKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzbHlGb2N1c2VkSW5kZXggPSBtYW5hZ2VyLmFjdGl2ZUl0ZW1JbmRleDtcblxuICAgICAgbWFuYWdlci5vbktleWRvd24oZXZlbnQpO1xuXG4gICAgICBpZiAoXG4gICAgICAgIGlzQXJyb3dLZXkgJiZcbiAgICAgICAgZXZlbnQuc2hpZnRLZXkgJiZcbiAgICAgICAgbWFuYWdlci5hY3RpdmVJdGVtICYmXG4gICAgICAgIG1hbmFnZXIuYWN0aXZlSXRlbUluZGV4ICE9PSBwcmV2aW91c2x5Rm9jdXNlZEluZGV4XG4gICAgICApIHtcbiAgICAgICAgbWFuYWdlci5hY3RpdmVJdGVtLmhhbmRsZUNsaWNrKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIHNldFNlbGVjdGlvbkJ5VmFsdWUodmFsdWU6IFRbXSk6IHZvaWQge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgdGhpcy5zZWxlY3Rpb25Nb2RlbC5jbGVhcigpO1xuICAgICAgdmFsdWUuZm9yRWFjaCgoY3VycmVudFZhbHVlKSA9PiB0aGlzLnNlbGVjdFZhbHVlKGN1cnJlbnRWYWx1ZSkpO1xuICAgICAgdGhpcy5zb3J0VmFsdWVzKCk7XG4gICAgfVxuXG4gICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgcmVzZXRPcHRpb25zKCk6IHZvaWQge1xuICAgIHN1cGVyLnJlc2V0T3B0aW9ucygpO1xuXG4gICAgdGhpcy5vcHRpb25TZWxlY3Rpb25DaGFuZ2VzXG4gICAgICAucGlwZShcbiAgICAgICAgdGFrZVVudGlsKHRoaXMub3B0aW9ucy5jaGFuZ2VzKSxcbiAgICAgICAgdGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZiksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKChldmVudCkgPT4gdGhpcy5vblNlbGVjdChldmVudC5zb3VyY2UpKTtcbiAgICAvLyBMaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgdGhlIG9wdGlvbnMgYW5kIHJlYWN0IGFjY29yZGluZ2x5LlxuICAgIC8vIEhhbmRsZXMgY2FzZXMgbGlrZSB0aGUgbGFiZWxzIG9mIHRoZSBzZWxlY3RlZCBvcHRpb25zIGNoYW5naW5nLlxuICAgIG1lcmdlKC4uLnRoaXMub3B0aW9ucy5tYXAoKG9wdGlvbikgPT4gb3B0aW9uLmNoZWNrZWRDaGFuZ2VkKSlcbiAgICAgIC5waXBlKFxuICAgICAgICAvLyBzaG91bGQgZW1pdCBvbmUgdGltZSBpZiBzdGF0ZXMgY2hhbmdlcyBmb3IgbWFueSBvcHRpb25zXG4gICAgICAgIGRlYm91bmNlVGltZSgxKSxcbiAgICAgICAgdGFrZVVudGlsKHRoaXMub3B0aW9ucy5jaGFuZ2VzKSxcbiAgICAgICAgdGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZiksXG4gICAgICApXG4gICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVBbGxPcHRpb25zU2VsZWN0ZWQoKTtcbiAgICAgICAgdGhpcy5yZWZyZXNoU2VsZWN0QWxsQ2hlY2soKTtcbiAgICAgICAgdGhpcy5zZWxlY3RBbGxFbGVtZW50cy5mb3JFYWNoKChvcHRpb24pID0+IG9wdGlvbi5tYXJrRm9yQ2hlY2soKSk7XG4gICAgICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5jYWxjdWxhdGVBbGxPcHRpb25zU2VsZWN0ZWQoKTtcbiAgICB0aGlzLnJlZnJlc2hTZWxlY3RBbGxDaGVjaygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG92ZXJyaWRlIG9uU2VsZWN0KG9wdGlvbjogUmRzTXVsdGlTZWxlY3RPcHRpb25Db21wb25lbnQ8VD4pOiB2b2lkIHtcbiAgICBzdXBlci5vblNlbGVjdChvcHRpb24pO1xuICAgIHRoaXMuc29ydFZhbHVlcygpO1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgc29ydFZhbHVlcygpOiB2b2lkIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLnRvQXJyYXkoKTtcblxuICAgIHRoaXMuc2VsZWN0aW9uTW9kZWwuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMuc29ydENvbXBhcmF0b3JcbiAgICAgICAgPyB0aGlzLnNvcnRDb21wYXJhdG9yKGEsIGIsIG9wdGlvbnMpXG4gICAgICAgIDogb3B0aW9ucy5pbmRleE9mKGEpIC0gb3B0aW9ucy5pbmRleE9mKGIpO1xuICAgIH0pO1xuICAgIHRoaXMuc3RhdGVDaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBnZXRWYWx1ZVRvRW1pdCgpOiBUW10ge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkLm1hcCgocykgPT4gcy52YWx1ZSk7XG4gIH1cblxuICBwcml2YXRlIHNldFVwRm9jdXNNYW5hZ2VtZW50KCk6IHZvaWQge1xuICAgIHRoaXMuY2hpcHMuY2hhbmdlc1xuICAgICAgLnBpcGUoc3RhcnRXaXRoKHRoaXMuY2hpcHMpLCB0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSlcbiAgICAgIC5zdWJzY3JpYmUoKGNoaXBzOiBRdWVyeUxpc3Q8UmRzQ2hpcENvbXBvbmVudDxUPj4pID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uczogUmRzQ2hpcEFjdGlvbkRpcmVjdGl2ZVtdID0gW107XG4gICAgICAgIGNoaXBzLmZvckVhY2goKGNoaXApID0+XG4gICAgICAgICAgY2hpcC5nZXRBY3Rpb25zKCkuZm9yRWFjaCgoYWN0aW9uKSA9PiBhY3Rpb25zLnB1c2goYWN0aW9uKSksXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY2hpcEFjdGlvbnMucmVzZXQoYWN0aW9ucyk7XG4gICAgICAgIHRoaXMuY2hpcEFjdGlvbnMubm90aWZ5T25DaGFuZ2VzKCk7XG4gICAgICB9KTtcblxuICAgIHRoaXMua2V5TWFuYWdlckNoaXBzID0gbmV3IEZvY3VzS2V5TWFuYWdlcih0aGlzLmNoaXBBY3Rpb25zKVxuICAgICAgLndpdGhWZXJ0aWNhbE9yaWVudGF0aW9uKClcbiAgICAgIC53aXRoSG9yaXpvbnRhbE9yaWVudGF0aW9uKHRoaXMuZGlyID8gdGhpcy5kaXIudmFsdWUgOiAnbHRyJylcbiAgICAgIC53aXRoSG9tZUFuZEVuZCgpXG4gICAgICAuc2tpcFByZWRpY2F0ZSgoYWN0aW9uKSA9PiBhY3Rpb24uZGlzYWJsZWQpO1xuXG4gICAgdGhpcy5jaGlwcy5jaGFuZ2VzXG4gICAgICAucGlwZShcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gbWVyZ2UoLi4udGhpcy5jaGlwcy5tYXAoKGMpID0+IGMuZm9jdXMkKSkpLFxuICAgICAgICB0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSxcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUoKHsgc291cmNlOiBjaGlwIH0pID0+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gY2hpcC5nZXRTb3VyY2VBY3Rpb24oZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBhcyBFbGVtZW50KTtcblxuICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgdGhpcy5rZXlNYW5hZ2VyQ2hpcHMudXBkYXRlQWN0aXZlSXRlbShhY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB0aGlzLmNoaXBzLmNoYW5nZXNcbiAgICAgIC5waXBlKFxuICAgICAgICBzdGFydFdpdGgobnVsbCksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgIG1lcmdlKFxuICAgICAgICAgICAgLi4udGhpcy5jaGlwcy5tYXAoKGMpID0+XG4gICAgICAgICAgICAgIGMuZm9jdXMkLnBpcGUobWFwKChlKSA9PiAoeyBmb2N1c2VkOiB0cnVlLCBzb3VyY2U6IGUuc291cmNlIH0pKSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgLi4udGhpcy5jaGlwcy5tYXAoKGMpID0+XG4gICAgICAgICAgICAgIGMuYmx1ciQucGlwZShtYXAoKGUpID0+ICh7IGZvY3VzZWQ6IGZhbHNlLCBzb3VyY2U6IGUuc291cmNlIH0pKSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICAgIHRha2VVbnRpbERlc3Ryb3llZCh0aGlzLmRlc3Ryb3lSZWYpLFxuICAgICAgKVxuICAgICAgLnN1YnNjcmliZSgoY2hpcCkgPT4ge1xuICAgICAgICBpZiAoY2hpcC5mb2N1c2VkKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkQ2hpcCA9IGNoaXAuc291cmNlO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZm9jdXNlZENoaXAgPT09IGNoaXAuc291cmNlKSB7XG4gICAgICAgICAgdGhpcy5mb2N1c2VkQ2hpcCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5kaXI/LmNoYW5nZVxuICAgICAgLnBpcGUodGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZikpXG4gICAgICAuc3Vic2NyaWJlKChkaXJlY3Rpb24pID0+XG4gICAgICAgIHRoaXMua2V5TWFuYWdlckNoaXBzLndpdGhIb3Jpem9udGFsT3JpZW50YXRpb24oZGlyZWN0aW9uKSxcbiAgICAgICk7XG4gIH1cblxuICBwcml2YXRlIHJlZnJlc2hTZWxlY3RBbGxDaGVjaygpOiB2b2lkIHtcbiAgICB0aGlzLnNlbGVjdEFsbEVsZW1lbnRzLmZvckVhY2goXG4gICAgICAoYWxsKSA9PiAoYWxsLmNoZWNrZWQgPSB0aGlzLmFsbE9wdGlvbnNTZWxlY3RlZCksXG4gICAgKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlQWxsT3B0aW9uc1NlbGVjdGVkKCk6IHZvaWQge1xuICAgIHRoaXMuYWxsT3B0aW9uc1NlbGVjdGVkID0gdGhpcy5vcHRpb25zXG4gICAgICAudG9BcnJheSgpXG4gICAgICAuZmlsdGVyKChpdGVtKSA9PiAhaXRlbS5kaXNhYmxlZClcbiAgICAgIC5ldmVyeSgoaXRlbSkgPT4gaXRlbS5jaGVja2VkKTtcbiAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBfc2V0U2l6ZShzaXplOiBSZHNGb3JtRmllbGRTaXplKTogdm9pZCB7XG4gICAgc3VwZXIuX3NldFNpemUoc2l6ZSk7XG4gICAgdGhpcy5zZWxlY3RBbGxFbGVtZW50cz8uZm9yRWFjaCgoZWxlbWVudCkgPT4gKGVsZW1lbnQuc2l6ZSA9IHNpemUpKTtcbiAgfVxufVxuIl19