import { Component, HostBinding, Input } from '@angular/core';
import { Subject } from 'rxjs';
import { RdsListItemComponent, RdsMultiSelectListItemComponent, } from '../../list-item';
import { RDS_MULTI_SELECT_LIST_ITEM_TEMPLATE } from '../../list-item';
import { AbstractFocusableOption } from './abstract-focusable-option';
import { RdsMultiSelectOptionSelectionChangedEvent } from './select-option-selection-changed.event';
import * as i0 from "@angular/core";
import * as i1 from "../../checkbox/pseudo-checkbox.component";
let nextId = 0;
export class RdsMultiSelectOptionComponent extends RdsMultiSelectListItemComponent {
    constructor() {
        super(...arguments);
        this._currentViewValue = '';
        this.hostClass = 'rds-select__option';
        this.id = `rds-option-${nextId++}`;
        this.selectionChange$ = new Subject();
    }
    get viewValue() {
        return (this.elementRef.nativeElement.textContent || '').trim();
    }
    ngAfterViewChecked() {
        if (this.checked) {
            const viewValue = this.viewValue;
            if (viewValue !== this._currentViewValue) {
                this._currentViewValue = viewValue;
            }
        }
    }
    rect() {
        return this.elementRef.nativeElement.getBoundingClientRect();
    }
    isVisible() {
        return !this.elementRef.nativeElement.classList.contains('hide');
    }
    toggleVisibility(value) {
        if (value === true) {
            this.show();
        }
        else if (value === false) {
            this.hide();
        }
        else {
            if (this.isVisible()) {
                this.hide();
            }
            else if (!this.isVisible()) {
                this.show();
            }
        }
    }
    hide() {
        this.renderer.addClass(this.elementRef.nativeElement, 'hide');
    }
    show() {
        this.renderer.removeClass(this.elementRef.nativeElement, 'hide');
    }
    toggle() {
        super.toggle();
        this.selectionChange$.next(new RdsMultiSelectOptionSelectionChangedEvent(this, true));
    }
    handleClick() {
        this.toggle();
    }
    setActiveStyles() {
        this.focus('keyboard');
    }
    setInactiveStyles() {
        if (this._focused) {
            this.blur();
            this.cdr.markForCheck();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectOptionComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiSelectOptionComponent, selector: "rds-multi-select-option", inputs: { id: "id", value: "value" }, host: { properties: { "class": "this.hostClass", "attr.id": "this.id" } }, providers: [
            {
                provide: RdsListItemComponent,
                useExisting: RdsMultiSelectOptionComponent,
            },
            {
                provide: AbstractFocusableOption,
                useExisting: RdsMultiSelectOptionComponent,
            },
        ], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-avatar\"/>\n<ng-content select=\"rds-icon\"/>\n@if (!avatar && !icon) {\n    <rds-pseudo-checkbox\n      noSpacing\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n    />\n}\n<span class=\"rds-list-item-text\">\n  <ng-content/>\n</span>\n@if (avatar || icon) {\n    <rds-pseudo-checkbox\n      noSpacing\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      class=\"rds-list-item__checkbox-right\"\n    />\n}\n", isInline: true, dependencies: [{ kind: "component", type: i1.RdsPseudoCheckboxComponent, selector: "rds-pseudo-checkbox", inputs: ["checked", "disabled", "indeterminate", "noSpacing"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    template: RDS_MULTI_SELECT_LIST_ITEM_TEMPLATE,
                    selector: 'rds-multi-select-option',
                    providers: [
                        {
                            provide: RdsListItemComponent,
                            useExisting: RdsMultiSelectOptionComponent,
                        },
                        {
                            provide: AbstractFocusableOption,
                            useExisting: RdsMultiSelectOptionComponent,
                        },
                    ],
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LW9wdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL2Zvcm0tZmllbGQvc2VsZWN0L211bHRpLXNlbGVjdC1vcHRpb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0IsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQ0wsb0JBQW9CLEVBQ3BCLCtCQUErQixHQUNoQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx5Q0FBeUMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7QUFFcEcsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBZ0JmLE1BQU0sT0FBTyw2QkFDWCxTQUFRLCtCQUErQjtJQWZ6Qzs7UUFrQlUsc0JBQWlCLEdBQUcsRUFBRSxDQUFDO1FBRVQsY0FBUyxHQUFHLG9CQUFvQixDQUFDO1FBSXZELE9BQUUsR0FBRyxjQUFjLE1BQU0sRUFBRSxFQUFFLENBQUM7UUFJckIscUJBQWdCLEdBQUcsSUFBSSxPQUFPLEVBRXBDLENBQUM7S0FtRUw7SUFqRUMsSUFBSSxTQUFTO1FBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNsRSxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2pCLE1BQU0sU0FBUyxH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d0NoZWNrZWQsIENvbXBvbmVudCwgSG9zdEJpbmRpbmcsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBSZHNMaXN0SXRlbUNvbXBvbmVudCxcbiAgUmRzTXVsdGlTZWxlY3RMaXN0SXRlbUNvbXBvbmVudCxcbn0gZnJvbSAnLi4vLi4vbGlzdC1pdGVtJztcbmltcG9ydCB7IFJEU19NVUxUSV9TRUxFQ1RfTElTVF9JVEVNX1RFTVBMQVRFIH0gZnJvbSAnLi4vLi4vbGlzdC1pdGVtJztcbmltcG9ydCB7IEFic3RyYWN0Rm9jdXNhYmxlT3B0aW9uIH0gZnJvbSAnLi9hYnN0cmFjdC1mb2N1c2FibGUtb3B0aW9uJztcbmltcG9ydCB7IFJkc011bHRpU2VsZWN0T3B0aW9uU2VsZWN0aW9uQ2hhbmdlZEV2ZW50IH0gZnJvbSAnLi9zZWxlY3Qtb3B0aW9uLXNlbGVjdGlvbi1jaGFuZ2VkLmV2ZW50JztcblxubGV0IG5leHRJZCA9IDA7XG5cbkBDb21wb25lbnQoe1xuICB0ZW1wbGF0ZTogUkRTX01VTFRJX1NFTEVDVF9MSVNUX0lURU1fVEVNUExBVEUsXG4gIHNlbGVjdG9yOiAncmRzLW11bHRpLXNlbGVjdC1vcHRpb24nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBSZHNMaXN0SXRlbUNvbXBvbmVudCxcbiAgICAgIHVzZUV4aXN0aW5nOiBSZHNNdWx0aVNlbGVjdE9wdGlvbkNvbXBvbmVudCxcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IEFic3RyYWN0Rm9jdXNhYmxlT3B0aW9uLFxuICAgICAgdXNlRXhpc3Rpbmc6IFJkc011bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50LFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFJkc011bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50PFQ+XG4gIGV4dGVuZHMgUmRzTXVsdGlTZWxlY3RMaXN0SXRlbUNvbXBvbmVudFxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFic3RyYWN0Rm9jdXNhYmxlT3B0aW9uXG57XG4gIHByaXZhdGUgX2N1cnJlbnRWaWV3VmFsdWUgPSAnJztcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgaG9zdENsYXNzID0gJ3Jkcy1zZWxlY3RfX29wdGlvbic7XG5cbiAgQElucHV0KClcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmlkJylcbiAgaWQgPSBgcmRzLW9wdGlvbi0ke25leHRJZCsrfWA7XG5cbiAgQElucHV0KCkgdmFsdWU6IFQ7XG5cbiAgcmVhZG9ubHkgc2VsZWN0aW9uQ2hhbmdlJCA9IG5ldyBTdWJqZWN0PFxuICAgIFJkc011bHRpU2VsZWN0T3B0aW9uU2VsZWN0aW9uQ2hhbmdlZEV2ZW50PFQ+XG4gID4oKTtcblxuICBnZXQgdmlld1ZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCB8fCAnJykudHJpbSgpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoZWNrZWQpIHtcbiAgICAgIGNvbnN0IHZpZXdWYWx1ZSA9IHRoaXMudmlld1ZhbHVlO1xuXG4gICAgICBpZiAodmlld1ZhbHVlICE9PSB0aGlzLl9jdXJyZW50Vmlld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRWaWV3VmFsdWUgPSB2aWV3VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVjdCgpOiBET01SZWN0IHtcbiAgICByZXR1cm4gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBpc1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2hpZGUnKTtcbiAgfVxuXG4gIHRvZ2dsZVZpc2liaWxpdHkodmFsdWU6IGJvb2xlYW4gfCBudWxsKTogdm9pZCB7XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnNob3coKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0aGlzLmlzVmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5pc1Zpc2libGUoKSkge1xuICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoaWRlKCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoaWRlJyk7XG4gIH1cblxuICBzaG93KCk6IHZvaWQge1xuICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3ModGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdoaWRlJyk7XG4gIH1cblxuICBvdmVycmlkZSB0b2dnbGUoKTogdm9pZCB7XG4gICAgc3VwZXIudG9nZ2xlKCk7XG4gICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2UkLm5leHQoXG4gICAgICBuZXcgUmRzTXVsdGlTZWxlY3RPcHRpb25TZWxlY3Rpb25DaGFuZ2VkRXZlbnQodGhpcywgdHJ1ZSksXG4gICAgKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrKCk6IHZvaWQge1xuICAgIHRoaXMudG9nZ2xlKCk7XG4gIH1cblxuICBzZXRBY3RpdmVTdHlsZXMoKTogdm9pZCB7XG4gICAgdGhpcy5mb2N1cygna2V5Ym9hcmQnKTtcbiAgfVxuXG4gIHNldEluYWN0aXZlU3R5bGVzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLl9mb2N1c2VkKSB7XG4gICAgICB0aGlzLmJsdXIoKTtcbiAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgIH1cbiAgfVxufVxuIl19