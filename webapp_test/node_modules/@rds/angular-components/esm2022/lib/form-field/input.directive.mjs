import { booleanAttribute, Directive, ElementRef, HostBinding, HostListener, inject, Input, numberAttribute, } from '@angular/core';
import { Validators } from '@angular/forms';
import { getSupportedInputTypes } from '@angular/cdk/platform';
import { RdsAbstractFormFieldControl } from './abstract-form-field-control';
import { updateErrorState } from '../utils';
import { RDS_INPUT_VALUE_ACCESSOR } from './input-value-accessor';
import * as i0 from "@angular/core";
const INPUT_INVALID_TYPES = [
    'button',
    'checkbox',
    'file',
    'hidden',
    'image',
    'radio',
    'range',
    'reset',
    'submit',
];
let nextUniqueId = 0;
export class RdsInputDirective extends RdsAbstractFormFieldControl {
    constructor() {
        super(...arguments);
        this.elementRef = inject(ElementRef);
        this.inputValueAccessor = inject(RDS_INPUT_VALUE_ACCESSOR, {
            optional: true,
            self: true,
        });
        this.prefixed = false;
        this.suffixed = false;
        this._uid = `rds-input-${nextUniqueId++}`;
        this._inputValueAccessor = this.inputValueAccessor || this.elementRef.nativeElement;
        this._previousNativeValue = this.value;
        this._type = 'text';
        this._placeholder = '';
        this._readonly = false;
        this._neverEmptyInputTypes = [
            'date',
            'datetime',
            'datetime-local',
            'month',
            'time',
            'week',
        ].filter((t) => getSupportedInputTypes().has(t));
        this._isTextarea = this.elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';
        this.hostClass = 'rds-form-field__control';
        this.hostAutocomplete = 'off';
        this._id = this._uid;
    }
    get hostAriaDescribedBy() {
        return this._ariaDescribedby;
    }
    set hostAriaDescribedBy(newValue) {
        this._ariaDescribedby = newValue;
    }
    get errorState() {
        return this._errorState;
    }
    get hostClassSuffixed() {
        return this.suffixed;
    }
    get hostClassPrefixed() {
        return this.prefixed;
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
    }
    get attrDisabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled ? this.ngControl.disabled : null;
        }
        return this._disabled ? this._disabled : null;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this._focused) {
            this._focused = false;
            this.stateChanges.next();
        }
    }
    get disabled() {
        return this.attrDisabled || false;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    get required() {
        return this.attrRequired ?? false;
    }
    set required(value) {
        this._required = booleanAttribute(value);
    }
    get readonly() {
        return this._readonly ? true : null;
    }
    set readonly(value) {
        this._readonly = booleanAttribute(value);
    }
    get type() {
        return this._type;
    }
    set type(newValue) {
        this._type = newValue || 'text';
        this.validateType();
        // When using Angular inputs, developers are no longer able to set the properties on the native
        // input element. To ensure that bindings for `type` work, we need to sync the setter
        // with the native property. Textarea elements don't support the type property or attribute.
        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {
            this.elementRef.nativeElement.type = this._type;
        }
    }
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value || '';
    }
    get value() {
        return this._inputValueAccessor.value;
    }
    set value(newValue) {
        this._inputValueAccessor.value = newValue;
        if (newValue !== this._inputValueAccessor.value) {
            this.stateChanges.next();
        }
    }
    get empty() {
        return (!this.isNeverEmpty() &&
            !this.elementRef.nativeElement.value &&
            !this.isNativelyBadInput());
    }
    get shouldLabelFloat() {
        return this._focused || !this.empty;
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    ngDoCheck() {
        this.showHidePlaceholder();
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            const oldState = this._errorState;
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (oldState !== this._errorState) {
                this.stateChanges.next();
            }
        }
        // We need to dirty-check the native element's value, because there are some cases where
        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
        // updating the value using `emitEvent: false`).
        this.dirtyCheckNativeValue();
        this.dirtyDisabledValue();
    }
    focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this._focused = isFocused;
            this.stateChanges.next();
        }
    }
    onInput() {
        // This is a noop function and is used to let Angular know whenever the value changes.
        // Angular will run a new change detection each time the `input` event has been dispatched.
        // It's necessary that Angular recognizes the value change, because when floatingLabel
        // is set to false and Angular forms aren't used, the placeholder won't recognize the
        // value changes and will not disappear.
        // Listening to the input event wouldn't be necessary when the input is using the
        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
    }
    setDescribedByIds(ids) {
        this.hostAriaDescribedBy = ids.join(' ');
    }
    onContainerClick() {
        if (!this._focused) {
            this.focus();
        }
    }
    get controlType() {
        if (this.elementRef?.nativeElement?.tagName.toUpperCase() === 'TEXTAREA') {
            return 'textarea-field';
        }
        return this.elementRef?.nativeElement?.classList.contains('rds-datepicker-input')
            ? 'date-picker'
            : 'text-field';
    }
    getMaxlengthAttr() {
        return numberAttribute(this.elementRef.nativeElement.getAttribute('maxlength'), 0);
    }
    dirtyCheckNativeValue() {
        const newValue = this.elementRef.nativeElement.value;
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this.stateChanges.next();
        }
    }
    dirtyDisabledValue() {
        if (this._disabled !== this.disabled) {
            this._disabled = this.disabled;
            this.stateChanges.next();
        }
    }
    validateType() {
        if (INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
            throw new Error(`Unsupported type of rds input <${this._type}>`);
        }
    }
    isNeverEmpty() {
        return this._neverEmptyInputTypes.indexOf(this._type) > -1;
    }
    isNativelyBadInput() {
        const validity = this.elementRef.nativeElement
            .validity;
        return validity && validity.badInput;
    }
    focus(options) {
        this.elementRef.nativeElement.focus(options);
    }
    showHidePlaceholder() {
        const element = this.elementRef.nativeElement;
        const datePlaceholder = element.getAttribute('date-placeholder') ?? '';
        const placeholder = this.placeholder ? this.placeholder : datePlaceholder;
        const isSearch = element.type === 'search';
        const contentInfix = this.getContentInfixParentElement(element);
        const isFloatingLabel = contentInfix?.classList.contains('rds-form-field__content-infix--floating-label');
        const isInputWithChips = element.classList.contains('rds-chip-input');
        const inputWithChipsHasPlaceholder = !element.classList.contains('rds-chip-input-no-placeholder');
        if (element.value) {
            return;
        }
        if (isSearch || (isInputWithChips && inputWithChipsHasPlaceholder)) {
            element.placeholder = placeholder;
            return;
        }
        element.placeholder = !isFloatingLabel || this._focused ? placeholder : '';
    }
    getContentInfixParentElement(target) {
        let parent = target.parentElement;
        while (parent &&
            !parent.classList.contains('rds-form-field__content-infix')) {
            parent = parent.parentElement;
        }
        return parent;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsInputDirective, selector: " input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]", inputs: { id: "id", disabled: "disabled", required: "required", readonly: "readonly", type: "type", placeholder: "placeholder", value: "value" }, host: { listeners: { "focus": "focusChanged(true)", "blur": "focusChanged(false)", "input": "onInput()" }, properties: { "class": "this.hostClass", "attr.autocomplete": "this.hostAutocomplete", "attr.aria-describedby": "this.hostAriaDescribedBy", "attr.aria-invalid": "this.errorState", "class.rds-form-field__control--suffixed": "this.hostClassSuffixed", "class.rds-form-field__control--prefixed": "this.hostClassPrefixed", "id": "this.id", "attr.disabled": "this.attrDisabled", "attr.required": "this.attrRequired", "attr.readonly": "this.readonly" } }, providers: [
            { provide: RdsAbstractFormFieldControl, useExisting: RdsInputDirective },
        ], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: ` input[rds-input], input[rdsInput], textarea[rds-input], textarea[rdsInput]`,
                    providers: [
                        { provide: RdsAbstractFormFieldControl, useExisting: RdsInputDirective },
                    ],
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostAutocomplete: [{
                type: HostBinding,
                args: ['attr.autocomplete']
            }], hostAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], errorState: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], hostClassSuffixed: [{
                type: HostBinding,
                args: ['class.rds-form-field__control--suffixed']
            }], hostClassPrefixed: [{
                type: HostBinding,
                args: ['class.rds-form-field__control--prefixed']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['id']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], disabled: [{
                type: Input
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.readonly']
            }], type: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], value: [{
                type: Input
            }], focusChanged: [{
                type: HostListener,
                args: ['focus', ['true']]
            }, {
                type: HostListener,
                args: ['blur', ['false']]
            }], onInput: [{
                type: HostListener,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,