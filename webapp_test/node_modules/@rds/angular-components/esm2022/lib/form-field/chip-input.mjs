import { coerceStringArray } from '@angular/cdk/coercion';
import { BACKSPACE, hasModifierKey } from '@angular/cdk/keycodes';
import { booleanAttribute, Directive, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, isDevMode, Output, } from '@angular/core';
import { RDS_FORM_FIELD, } from '../form-field';
import { RdsChipGridComponent } from './chip-grid/chip-grid.component';
import { RDS_CHIPS_DEFAULT_OPTIONS } from '../chips/chip.tokens';
import { NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
let nextUniqueId = 0;
export class RdsChipInputDirective {
    get classes() {
        return {
            'rds-chip-input': true,
            'rds-chip-input-no-placeholder': this.hidePlaceholder,
        };
    }
    get ariaRequired() {
        return this.required || null;
    }
    get ariaInvalid() {
        return this.ngControl ? this.ngControl.invalid : null;
    }
    /* eslint-disable-next-line @angular-eslint/no-input-rename */
    set chipGrid(value) {
        if (value) {
            this._chipGrid = value;
            this._chipGrid.registerInput(this);
        }
        else if (isDevMode()) {
            throw new Error('RdsChipInputDirective: rdsChipInputChipGrid received falsy value');
        }
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
    }
    get disabled() {
        return this._disabled || !!(this._chipGrid && this._chipGrid.disabled);
    }
    get empty() {
        return !this.inputElement.value;
    }
    constructor() {
        this.inputElement = inject(ElementRef).nativeElement;
        this.formField = inject(RDS_FORM_FIELD, { optional: true });
        this.ngControl = inject(NgControl, { optional: true });
        this.focusLastChipOnBackspace = false;
        this._disabled = false;
        this.focused = false;
        this.hidePlaceholder = false;
        this.required = false;
        /* eslint-disable-next-line @angular-eslint/no-input-rename */
        this.addOnBlur = false;
        /* eslint-disable-next-line @angular-eslint/no-input-rename */
        this.separatorKeys = inject(RDS_CHIPS_DEFAULT_OPTIONS).separatorKeys;
        this.placeholder = '';
        this.id = `rds-chip-list-input-${nextUniqueId++}`;
        /* eslint-disable-next-line @angular-eslint/no-output-rename */
        this.chipEnd = new EventEmitter();
        if (this.formField) {
            this.inputElement.classList.add('rds-form-field-input-control');
        }
    }
    ngOnChanges() {
        this._chipGrid?.stateChanges?.next();
    }
    ngAfterContentInit() {
        this.focusLastChipOnBackspace = this.empty;
    }
    ngOnDestroy() {
        this.chipEnd.complete();
    }
    onKeydown(event) {
        if (event) {
            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,
            // We focus the last chip on backspace only after the user has released the backspace button,
            // And the input is empty (see behaviour in _keyup)
            if (event.keyCode === BACKSPACE && this.focusLastChipOnBackspace) {
                this._chipGrid?.focusLastChip();
                event.preventDefault();
                return;
            }
            else {
                this.focusLastChipOnBackspace = false;
            }
        }
        this.emitChipEnd(event);
    }
    onKeyup(event) {
        // Allow user to move focus to chips next time he presses backspace
        if (!this.focusLastChipOnBackspace &&
            event.keyCode === BACKSPACE &&
            this.empty) {
            this.focusLastChipOnBackspace = true;
            event.preventDefault();
        }
    }
    onBlur() {
        if (this.addOnBlur) {
            this.emitChipEnd();
        }
        this.focused = false;
        // Blur the chip list if it is not focused
        if (!this._chipGrid?.focused) {
            this._chipGrid?.blur();
        }
        this._chipGrid?.stateChanges.next();
    }
    onFocus() {
        this.focused = true;
        this.focusLastChipOnBackspace = this.empty;
        this._chipGrid?.stateChanges.next();
    }
    onInput() {
        // Let chip list know whenever the value changes.
        this._chipGrid?.stateChanges.next();
    }
    emitChipEnd(event) {
        if (!event || this.isSeparatorKey(event)) {
            this.chipEnd.emit({
                input: this.inputElement,
                value: this.inputElement.value,
                chipInput: this,
            });
            event?.preventDefault();
        }
    }
    focus() {
        this.inputElement.focus();
    }
    clear() {
        this.inputElement.value = '';
        this.focusLastChipOnBackspace = true;
    }
    setDescribedByIds(ids) {
        // Set the value directly in the DOM since this binding
        // is prone to "changed after checked" errors.
        if (ids.length) {
            this.inputElement.setAttribute('aria-describedby', ids.join(' '));
        }
        else {
            this.inputElement.removeAttribute('aria-describedby');
        }
    }
    isSeparatorKey(event) {
        return !hasModifierKey(event) && this.separatorKeys.includes(event.key);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipInputDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsChipInputDirective, selector: "input[rdsChipInput], input[rds-chip-input]", inputs: { required: ["required", "required", booleanAttribute], chipGrid: ["rdsChipInputChipGrid", "chipGrid"], addOnBlur: ["rdsChipInputAddOnBlur", "addOnBlur", booleanAttribute], separatorKeys: ["rdsChipInputSeparatorKeys", "separatorKeys", coerceStringArray], placeholder: "placeholder", id: "id", disabled: "disabled" }, outputs: { chipEnd: "rdsChipInputTokenEnd" }, host: { listeners: { "keydown": "onKeydown($event)", "keyup": "onKeyup($event)", "blur": "onBlur($event)", "focus": "onFocus($event)", "input": "onInput()" }, properties: { "class": "this.classes", "attr.required": "this.ariaRequired", "attr.aria-required": "this.ariaRequired", "attr.aria-invalid": "this.ariaInvalid", "attr.placeholder": "this.placeholder", "id": "this.id", "disabled": "this.disabled" } }, exportAs: ["rdsChipInput"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsChipInput], input[rds-chip-input]',
                    exportAs: 'rdsChipInput',
                }]
        }], ctorParameters: () => [], propDecorators: { required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }], ariaRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }, {
                type: HostBinding,
                args: ['attr.aria-required']
            }], ariaInvalid: [{
                type: HostBinding,
                args: ['attr.aria-invalid']
            }], chipGrid: [{
                type: Input,
                args: ['rdsChipInputChipGrid']
            }], addOnBlur: [{
                type: Input,
                args: [{ alias: 'rdsChipInputAddOnBlur', transform: booleanAttribute }]
            }], separatorKeys: [{
                type: Input,
                args: [{ alias: 'rdsChipInputSeparatorKeys', transform: coerceStringArray }]
            }], placeholder: [{
                type: HostBinding,
                args: ['attr.placeholder']
            }, {
                type: Input
            }], id: [{
                type: HostBinding,
                args: ['id']
            }, {
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['disabled']
            }, {
                type: Input
            }], chipEnd: [{
                type: Output,
                args: ['rdsChipInputTokenEnd']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onKeyup: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event']]
            }], onFocus: [{
                type: HostListener,
                args: ['focus', ['$event']]
            }], onInput: [{
                type: HostListener,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,