import { FocusMonitor } from '@angular/cdk/a11y';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, EventEmitter, forwardRef, HostBinding, inject, Input, NgZone, numberAttribute, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { ControlContainer, FormGroupDirective, NG_VALUE_ACCESSOR, NgForm, Validators, } from '@angular/forms';
import { noop } from 'rxjs';
import { RdsCheckboxChangeEvent } from './checkbox-change.event';
import { animate, state, style, transition, trigger, } from '@angular/animations';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE, updateErrorState, } from '../utils';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/observers";
let nextUniqueId = 0;
export const rdsCheckboxAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
export class RdsCheckboxComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.focusMonitor = inject(FocusMonitor);
        this.ngZone = inject(NgZone);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.controlContainer = inject(ControlContainer, {
            optional: true,
            host: true,
            skipSelf: true,
        });
        this._uniqueId = `rds-checkbox-${++nextUniqueId}`;
        this._currentAnimationClass = '';
        this._errorState = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this._indeterminate = false;
        this._currentCheckState = 0 /* TransitionCheckState.Init */;
        this.subscriptAnimationState = '';
        this.hostClass = 'rds-checkbox';
        this.id = this._uniqueId;
        this.size = 'l';
        this.ariaLabel = '';
        this.checked = false;
        this.disabled = false;
        this.changed = new EventEmitter();
        this._onChange = noop;
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this._onTouched = noop;
    }
    get getHostId() {
        return this._uniqueId;
    }
    get hostIndeterminate() {
        return this.indeterminate;
    }
    get hostChecked() {
        return this.checked;
    }
    get hostDisabled() {
        return this.disabled;
    }
    get errorState() {
        return this._errorState;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set indeterminate(value) {
        this._indeterminate = booleanAttribute(value);
        if (this.indeterminate) {
            this.transitionCheckState(3 /* TransitionCheckState.Indeterminate */);
        }
        else {
            this.transitionCheckState(this.checked
                ? 1 /* TransitionCheckState.Checked */
                : 2 /* TransitionCheckState.Unchecked */);
        }
        this.syncIndeterminate(this.indeterminate);
    }
    get indeterminate() {
        return this._indeterminate;
    }
    get attrRequired() {
        if (this._control && this._control?.hasValidator(Validators.required)) {
            return this._control?.hasValidator(Validators.required) ?? null;
        }
        return this._required ?? null;
    }
    set required(value) {
        this._required = booleanAttribute(value);
    }
    get required() {
        return this.attrRequired ?? false;
    }
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    get ariaChecked() {
        if (this.checked) {
            return 'true';
        }
        return this.indeterminate ? 'mixed' : 'false';
    }
    ngOnInit() {
        if (this.controlContainer) {
            if (this.formControlName) {
                this._control = this.controlContainer.control?.get(this.formControlName);
            }
            else {
                // Missing FormControlName directive from host element of the component
            }
        }
        else {
            // Can't find parent FormGroup directive
        }
    }
    ngDoCheck() {
        if (this._control) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this._control);
        }
    }
    ngAfterContentInit() {
        const control = this._control;
        if (control && control.valueChanges) {
            control.valueChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                control?.markAsDirty();
                control?.markAsTouched();
                this.cdr.markForCheck();
            });
        }
        const parent = this.parentFormGroup || this.parentForm;
        if (parent) {
            parent.ngSubmit
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this.cdr.markForCheck();
            });
        }
    }
    ngAfterViewInit() {
        if (this.checkboxLabel.nativeElement.innerText) {
            this.elementRef.nativeElement.classList.add('rds-checkbox-with-label');
        }
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((focusOrigin) => {
            if (!focusOrigin) {
                // When a focused element becomes disabled, the browser *immediately* fires a blur event.
                // Angular does not expect events to be raised during change detection, so any state change
                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.
                // See https://github.com/angular/angular/issues/17793. To work around this, we defer
                // telling the form control it has been touched until the next tick.
                Promise.resolve().then(() => {
                    this._onTouched();
                    this.cdr.markForCheck();
                });
            }
        });
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
        this.syncIndeterminate(this.indeterminate);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    get isErrorMessageVisible() {
        return this.errorState;
    }
    onLabelTextChange() {
        if (this.checkboxLabel.nativeElement.innerText) {
            this.elementRef.nativeElement.classList.add('rds-checkbox-with-label');
        }
        else {
            this.elementRef.nativeElement.classList.remove('rds-checkbox-with-label');
        }
        this.cdr.detectChanges();
    }
    // start ControlValueAccessor - part
    writeValue(value) {
        this.checked = value;
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    // end ControlValueAccessor - part
    onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `checkbox` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        Promise.resolve().then(() => (this.indeterminate = false));
        this.toggle();
        this.transitionCheckState(this.checked
            ? 1 /* TransitionCheckState.Checked */
            : 2 /* TransitionCheckState.Unchecked */);
        this.emitChangedEvent();
    }
    focus(origin = 'keyboard', options) {
        this.focusMonitor.focusVia(this._inputElement, origin, options);
    }
    getAnimationClassForCheckStateTransition(oldState, newState) {
        let animSuffix = '';
        switch (oldState) {
            case 0 /* TransitionCheckState.Init */:
                if (newState === 1 /* TransitionCheckState.Checked */) {
                    animSuffix = 'unchecked-checked';
                }
                else if (newState === 3 /* TransitionCheckState.Indeterminate */) {
                    animSuffix = 'unchecked-indeterminate';
                }
                else {
                    return '';
                }
                break;
            case 2 /* TransitionCheckState.Unchecked */:
                animSuffix =
                    newState === 1 /* TransitionCheckState.Checked */
                        ? 'unchecked-checked'
                        : 'unchecked-indeterminate';
                break;
            case 1 /* TransitionCheckState.Checked */:
                animSuffix =
                    newState === 2 /* TransitionCheckState.Unchecked */
                        ? 'checked-unchecked'
                        : 'checked-indeterminate';
                break;
            case 3 /* TransitionCheckState.Indeterminate */:
                animSuffix =
                    newState === 1 /* TransitionCheckState.Checked */
                        ? 'indeterminate-checked'
                        : 'indeterminate-unchecked';
                break;
        }
        return `rds-checkbox-animation--${animSuffix}`;
    }
    transitionCheckState(newState) {
        const oldState = this._currentCheckState;
        const element = this.elementRef.nativeElement;
        if (oldState === newState) {
            return;
        }
        if (this._currentAnimationClass.length > 0) {
            element.classList.remove(this._currentAnimationClass);
        }
        this._currentAnimationClass = this.getAnimationClassForCheckStateTransition(oldState, newState);
        this._currentCheckState = newState;
        if (this._currentAnimationClass.length > 0) {
            element.classList.add(this._currentAnimationClass);
            // Remove the animation class to avoid animation when the checkbox is moved between containers
            const animationClass = this._currentAnimationClass;
            this.ngZone.runOutsideAngular(() => {
                setTimeout(() => {
                    element.classList.remove(animationClass);
                }, 1000);
            });
        }
    }
    toggle() {
        this.checked = !this.checked;
    }
    emitChangedEvent() {
        const event = new RdsCheckboxChangeEvent();
        event.source = this;
        event.checked = this.checked;
        this._onChange(this.checked);
        this.changed.emit(event);
    }
    syncIndeterminate(value) {
        const nativeCheckbox = this._inputElement;
        if (nativeCheckbox) {
            nativeCheckbox.nativeElement.indeterminate = value;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCheckboxComponent, selector: "rds-checkbox", inputs: { id: "id", value: "value", name: "name", size: "size", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], formControlName: "formControlName", tabIndex: "tabIndex", checked: ["checked", "checked", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], indeterminate: "indeterminate", required: "required" }, outputs: { changed: "changed" }, host: { properties: { "class": "this.hostClass", "tabIndex": "this.hostTabindex", "attr.id": "this.getHostId", "class.rds-checkbox--indeterminate": "this.hostIndeterminate", "class.rds-checkbox--checked": "this.hostChecked", "class.rds-checkbox--disabled": "this.hostDisabled", "class.rds-checkbox--invalid": "this.errorState", "attr.required": "this.attrRequired" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RdsCheckboxComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "checkboxLabel", first: true, predicate: ["checkboxLabel"], descendants: true }, { propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: `
    <div class="rds-checkbox__wrapper">
      <label [attr.for]="inputId" class="rds-checkbox__container" #label>
        <div class="rds-checkbox__checkbox-container">
          <input
            #input
            class="rds-checkbox__native-checkbox cdk-visually-hidden"
            type="checkbox"
            [id]="inputId"
            [required]="required"
            [checked]="checked"
            [attr.value]="value"
            [disabled]="disabled"
            [attr.name]="name"
            [tabIndex]="tabIndex"
            [attr.aria-label]="ariaLabel || null"
            [attr.aria-labelledby]="ariaLabelledby"
            [attr.aria-checked]="ariaChecked"
            [attr.aria-describedby]="ariaDescribedby"
            (click)="onInputClick($event)"
          />
          <div class="rds-checkbox__overlay"></div>
          <div class="rds-checkbox__frame"></div>
          <div class="rds-checkbox__background">
            <svg
              focusable="false"
              class="rds-checkbox__checkmark"
              viewBox="0 0 24 24"
              xml:space="preserve"
            >
              <path
                class="rds-checkbox__checkmark-path"
                fill="none"
                d="M4.1,12.7 9,17.6 20.3,6.3"
              />
            </svg>
            <div class="rds-checkbox__indeterminate-mark"></div>
          </div>
        </div>
        <span
          class="rds-checkbox__label"
          [ngClass]="'rds-checkbox__label--' + size"
          #checkboxLabel
          (cdkObserveContent)="onLabelTextChange()"
        >
          @if (required && !disabled) {
            <span class="rds-asterisk">&#32;* </span>
          }
          <!-- Add an invisible span so JAWS can read the label -->
          <span style="display:none">&nbsp;</span>
          <ng-content />
        </span>
      </label>
    </div>
    <div class="rds-checkbox__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, isInline: true, styles: ["@keyframes rds-checkbox__fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes rds-checkbox__fade-out-background{0%,50%{opacity:1}to{opacity:0}}@keyframes rds-checkbox__from-checked-to-indeterminate-checkmark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes rds-checkbox__from-indeterminate-to-checked-checkmark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes rds-checkbox__from-unchecked-to-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}to{stroke-dashoffset:0}}@keyframes rds-checkbox__from-checked-to-unchecked-checkmark-path{0%{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}to{transform:scaleX(1)}}@keyframes rds-checkbox__from-checked-to-indeterminate-indeterminate-mark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes rds-checkbox__from-indeterminate-to-checked-indeterminate-mark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,to{opacity:0;transform:scaleX(0)}}.rds-checkbox{display:flex;flex-direction:column}.rds-checkbox.rds-checkbox-with-label .rds-checkbox__checkbox-container{margin:auto 10px auto auto}.rds-checkbox__wrapper{align-items:center;display:inline-flex;transition:background .4s cubic-bezier(.25,.8,.25,1);margin:4px 0;height:24px;cursor:pointer}.rds-checkbox__wrapper .rds-checkbox__container{align-items:center;display:inline-flex;-webkit-user-select:none;user-select:none;cursor:inherit;white-space:nowrap}.rds-checkbox__wrapper .rds-checkbox__checkbox-container{position:relative;display:inline-block;margin:auto;height:18px;width:18px}.rds-checkbox__wrapper .rds-checkbox__native-checkbox{bottom:0;left:50%}.rds-checkbox__wrapper .rds-checkbox__overlay{position:absolute;inset:0;transform:translate(-9px,-9px);transition:border-color 90ms cubic-bezier(0,0,.2,.1),background 90ms cubic-bezier(0,0,.2,.1);border:2px solid transparent;border-radius:2px;width:36px;height:36px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__frame{position:absolute;inset:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border:2px solid var(--rds-color-grey-3);border-radius:2px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__background{position:absolute;inset:0;justify-content:center;align-items:center;display:inline-flex;opacity:0;transition:opacity 90ms cubic-bezier(0,0,.2,.1);border-radius:2px;background:var(--rds-color-informative)}.rds-checkbox__wrapper .rds-checkbox__checkmark{position:absolute;inset:0;opacity:0;width:100%;fill:var(--rds-color-bg-base-1);stroke:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__checkmark-path{stroke-dashoffset:0;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.rds-checkbox__wrapper .rds-checkbox__indeterminate-mark{opacity:0;transform:scaleX(0) rotate(0) translateY(0);width:calc(100% - 6px);height:2px;background:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__label{color:var(--rds-color-high-contrast)}.rds-checkbox__wrapper .rds-checkbox__label--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--checked .rds-checkbox__background{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__indeterminate-mark{transform:scaleX(1) rotate(-45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark{opacity:0;transform:rotate(45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__indeterminate-mark{opacity:1;transform:scaleX(1) rotate(0) translateY(0)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__background{opacity:1}.rds-checkbox.cdk-focused.cdk-keyboard-focused .rds-checkbox__overlay{background:transparent;border-color:var(--rds-color-stroke-active-focus)}.rds-checkbox:hover:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-hover-select)}.rds-checkbox:active:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-pressed)}.rds-checkbox.rds-checkbox--disabled,.rds-checkbox.rds-checkbox--disabled .rds-checkbox__wrapper{cursor:default}.rds-checkbox.rds-checkbox--disabled.rds-checkbox--checked .rds-checkbox__background,.rds-checkbox.rds-checkbox--disabled.rds-checkbox--indeterminate .rds-checkbox__background{background:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__frame{border-color:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__label{color:var(--rds-color-disabled)}.rds-checkbox--invalid .rds-checkbox__background{background:var(--rds-color-error)}.rds-checkbox--invalid .rds-checkbox__frame{border-color:var(--rds-color-error)}.rds-checkbox-animation--unchecked-checked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-checked .rds-checkbox__checkmark-path{animation:.18s linear 0ms rds-checkbox__from-unchecked-to-checked-checkmark-path}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--checked-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--checked-unchecked .rds-checkbox__checkmark-path{animation:90ms linear 0ms rds-checkbox__from-checked-to-unchecked-checkmark-path}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__checkmark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-checkmark}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__checkmark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-checkmark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__indeterminate-mark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-indeterminate-mark}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__indeterminate-mark{animation:.3s linear 0ms rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark}.rds-asterisk{color:var(--rds-color-error)}.rds-checkbox__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-checkbox--disabled .rds-checkbox__subscript{color:var(--rds-color-disabled)}.rds-checkbox__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-checkbox__subscript--hint{color:var(--rds-color-low-contrast)}.rds-checkbox__subscript--error{color:var(--rds-color-error)}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], animations: [rdsCheckboxAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCheckboxComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-checkbox', template: `
    <div class="rds-checkbox__wrapper">
      <label [attr.for]="inputId" class="rds-checkbox__container" #label>
        <div class="rds-checkbox__checkbox-container">
          <input
            #input
            class="rds-checkbox__native-checkbox cdk-visually-hidden"
            type="checkbox"
            [id]="inputId"
            [required]="required"
            [checked]="checked"
            [attr.value]="value"
            [disabled]="disabled"
            [attr.name]="name"
            [tabIndex]="tabIndex"
            [attr.aria-label]="ariaLabel || null"
            [attr.aria-labelledby]="ariaLabelledby"
            [attr.aria-checked]="ariaChecked"
            [attr.aria-describedby]="ariaDescribedby"
            (click)="onInputClick($event)"
          />
          <div class="rds-checkbox__overlay"></div>
          <div class="rds-checkbox__frame"></div>
          <div class="rds-checkbox__background">
            <svg
              focusable="false"
              class="rds-checkbox__checkmark"
              viewBox="0 0 24 24"
              xml:space="preserve"
            >
              <path
                class="rds-checkbox__checkmark-path"
                fill="none"
                d="M4.1,12.7 9,17.6 20.3,6.3"
              />
            </svg>
            <div class="rds-checkbox__indeterminate-mark"></div>
          </div>
        </div>
        <span
          class="rds-checkbox__label"
          [ngClass]="'rds-checkbox__label--' + size"
          #checkboxLabel
          (cdkObserveContent)="onLabelTextChange()"
        >
          @if (required && !disabled) {
            <span class="rds-asterisk">&#32;* </span>
          }
          <!-- Add an invisible span so JAWS can read the label -->
          <span style="display:none">&nbsp;</span>
          <ng-content />
        </span>
      </label>
    </div>
    <div class="rds-checkbox__subscript-wrapper">
      @switch (isErrorMessageVisible) {
        @case (true) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--error"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-error" />
          </div>
        }
        @case (false) {
          <div
            class="rds-checkbox__subscript rds-checkbox__subscript--hint"
            [@transitionMessages]="subscriptAnimationState"
          >
            <ng-content select="rds-control-hint" />
          </div>
        }
      }
    </div>
  `, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RdsCheckboxComponent),
                            multi: true,
                        },
                    ], encapsulation: ViewEncapsulation.None, animations: [rdsCheckboxAnimations.transitionMessages], changeDetection: ChangeDetectionStrategy.OnPush, styles: ["@keyframes rds-checkbox__fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes rds-checkbox__fade-out-background{0%,50%{opacity:1}to{opacity:0}}@keyframes rds-checkbox__from-checked-to-indeterminate-checkmark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(45deg)}}@keyframes rds-checkbox__from-indeterminate-to-checked-checkmark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes rds-checkbox__from-unchecked-to-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0,0,.2,.1)}to{stroke-dashoffset:0}}@keyframes rds-checkbox__from-checked-to-unchecked-checkmark-path{0%{animation-timing-function:cubic-bezier(.4,0,1,1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0,0,0,1)}to{transform:scaleX(1)}}@keyframes rds-checkbox__from-checked-to-indeterminate-indeterminate-mark{0%{animation-timing-function:cubic-bezier(0,0,.2,.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0)}}@keyframes rds-checkbox__from-indeterminate-to-checked-indeterminate-mark{0%{animation-timing-function:cubic-bezier(.14,0,0,1);opacity:1;transform:rotate(0)}to{opacity:0;transform:rotate(315deg)}}@keyframes rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,to{opacity:0;transform:scaleX(0)}}.rds-checkbox{display:flex;flex-direction:column}.rds-checkbox.rds-checkbox-with-label .rds-checkbox__checkbox-container{margin:auto 10px auto auto}.rds-checkbox__wrapper{align-items:center;display:inline-flex;transition:background .4s cubic-bezier(.25,.8,.25,1);margin:4px 0;height:24px;cursor:pointer}.rds-checkbox__wrapper .rds-checkbox__container{align-items:center;display:inline-flex;-webkit-user-select:none;user-select:none;cursor:inherit;white-space:nowrap}.rds-checkbox__wrapper .rds-checkbox__checkbox-container{position:relative;display:inline-block;margin:auto;height:18px;width:18px}.rds-checkbox__wrapper .rds-checkbox__native-checkbox{bottom:0;left:50%}.rds-checkbox__wrapper .rds-checkbox__overlay{position:absolute;inset:0;transform:translate(-9px,-9px);transition:border-color 90ms cubic-bezier(0,0,.2,.1),background 90ms cubic-bezier(0,0,.2,.1);border:2px solid transparent;border-radius:2px;width:36px;height:36px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__frame{position:absolute;inset:0;transition:border-color 90ms cubic-bezier(0,0,.2,.1);border:2px solid var(--rds-color-grey-3);border-radius:2px;background:transparent}.rds-checkbox__wrapper .rds-checkbox__background{position:absolute;inset:0;justify-content:center;align-items:center;display:inline-flex;opacity:0;transition:opacity 90ms cubic-bezier(0,0,.2,.1);border-radius:2px;background:var(--rds-color-informative)}.rds-checkbox__wrapper .rds-checkbox__checkmark{position:absolute;inset:0;opacity:0;width:100%;fill:var(--rds-color-bg-base-1);stroke:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__checkmark-path{stroke-dashoffset:0;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.rds-checkbox__wrapper .rds-checkbox__indeterminate-mark{opacity:0;transform:scaleX(0) rotate(0) translateY(0);width:calc(100% - 6px);height:2px;background:var(--rds-color-bg-base-1)}.rds-checkbox__wrapper .rds-checkbox__label{color:var(--rds-color-high-contrast)}.rds-checkbox__wrapper .rds-checkbox__label--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox__wrapper .rds-checkbox__label--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--checked .rds-checkbox__background{opacity:1}.rds-checkbox.rds-checkbox--checked .rds-checkbox__indeterminate-mark{transform:scaleX(1) rotate(-45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark{opacity:0;transform:rotate(45deg)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__checkmark-path{stroke-dashoffset:0}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__indeterminate-mark{opacity:1;transform:scaleX(1) rotate(0) translateY(0)}.rds-checkbox.rds-checkbox--indeterminate .rds-checkbox__background{opacity:1}.rds-checkbox.cdk-focused.cdk-keyboard-focused .rds-checkbox__overlay{background:transparent;border-color:var(--rds-color-stroke-active-focus)}.rds-checkbox:hover:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-hover-select)}.rds-checkbox:active:not(.rds-checkbox--disabled) .rds-checkbox__overlay{background:var(--rds-color-bg-transparent-pressed)}.rds-checkbox.rds-checkbox--disabled,.rds-checkbox.rds-checkbox--disabled .rds-checkbox__wrapper{cursor:default}.rds-checkbox.rds-checkbox--disabled.rds-checkbox--checked .rds-checkbox__background,.rds-checkbox.rds-checkbox--disabled.rds-checkbox--indeterminate .rds-checkbox__background{background:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__frame{border-color:var(--rds-color-grey-2)}.rds-checkbox.rds-checkbox--disabled .rds-checkbox__label{color:var(--rds-color-disabled)}.rds-checkbox--invalid .rds-checkbox__background{background:var(--rds-color-error)}.rds-checkbox--invalid .rds-checkbox__frame{border-color:var(--rds-color-error)}.rds-checkbox-animation--unchecked-checked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-checked .rds-checkbox__checkmark-path{animation:.18s linear 0ms rds-checkbox__from-unchecked-to-checked-checkmark-path}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-in-background}.rds-checkbox-animation--unchecked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-unchecked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--checked-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--checked-unchecked .rds-checkbox__checkmark-path{animation:90ms linear 0ms rds-checkbox__from-checked-to-unchecked-checkmark-path}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__checkmark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-checkmark}.rds-checkbox-animation--checked-indeterminate .rds-checkbox__indeterminate-mark{animation:90ms linear 0ms rds-checkbox__from-checked-to-indeterminate-indeterminate-mark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__checkmark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-checkmark}.rds-checkbox-animation--indeterminate-checked .rds-checkbox__indeterminate-mark{animation:.5s linear 0ms rds-checkbox__from-indeterminate-to-checked-indeterminate-mark}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__background{animation:.18s linear 0ms rds-checkbox__fade-out-background}.rds-checkbox-animation--indeterminate-unchecked .rds-checkbox__indeterminate-mark{animation:.3s linear 0ms rds-checkbox__from-indeterminate-to-unchecked-indeterminate-mark}.rds-asterisk{color:var(--rds-color-error)}.rds-checkbox__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-checkbox--disabled .rds-checkbox__subscript{color:var(--rds-color-disabled)}.rds-checkbox__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-checkbox__subscript--hint{color:var(--rds-color-low-contrast)}.rds-checkbox__subscript--error{color:var(--rds-color-error)}\n"] }]
        }], propDecorators: { checkboxLabel: [{
                type: ViewChild,
                args: ['checkboxLabel']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostTabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], getHostId: [{
                type: HostBinding,
                args: ['attr.id']
            }], hostIndeterminate: [{
                type: HostBinding,
                args: ['class.rds-checkbox--indeterminate']
            }], hostChecked: [{
                type: HostBinding,
                args: ['class.rds-checkbox--checked']
            }], hostDisabled: [{
                type: HostBinding,
                args: ['class.rds-checkbox--disabled']
            }], errorState: [{
                type: HostBinding,
                args: ['class.rds-checkbox--invalid']
            }], id: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], formControlName: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], checked: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], indeterminate: [{
                type: Input
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], changed: [{
                type: Output
            }], _inputElement: [{
                type: ViewChild,
                args: ['input']
            }] } });
//# sourceMappingURL=data:application/json;base64,