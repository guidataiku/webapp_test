import { CdkTreeNode } from '@angular/cdk/tree';
import { Attribute, booleanAttribute, Directive, ElementRef, HostBinding, HostListener, inject, Input, numberAttribute, Renderer2, } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { RdsTreeComponent } from './tree.component';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
export class RdsTreeNodeDirective extends CdkTreeNode {
    get cssClasses() {
        const cssClasses = ['rds-tree-node'];
        if (this.disabled) {
            cssClasses.push('rds-tree-node--disabled');
        }
        if (!this.disabled && this.active) {
            cssClasses.push('rds-tree-node--active');
        }
        if (this.tree) {
            cssClasses.push(`rds-tree-node--size-${this.tree.size}`);
        }
        return cssClasses.join(' ');
    }
    get attrAriaExpanded() {
        // don't set aria-expanded for leafs as it violates accessibility
        if (!this._tree.treeControl.isExpandable(this._data)) {
            return undefined;
        }
        return this.isExpanded;
    }
    get attrAriaLevel() {
        return this.level + 1;
    }
    get styleLevel() {
        return this.level + 1;
    }
    get attrTabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this.tabIndex;
    }
    onArrowDown() {
        const nextNode = this._elementRef.nativeElement
            .nextElementSibling;
        if (!nextNode) {
            return;
        }
        this.focusMonitor.focusVia(nextNode, 'keyboard');
    }
    onArrowUp() {
        const previousNode = this._elementRef.nativeElement
            .previousElementSibling;
        if (!previousNode) {
            return;
        }
        this.focusMonitor.focusVia(previousNode, 'keyboard');
    }
    onExpand(event) {
        if (this.disabled) {
            return;
        }
        if (this._tree.treeControl.isExpandable(this._data) &&
            !this._tree.treeControl.isExpanded(this._data)) {
            this._tree.treeControl.expand(this.data);
            event.stopPropagation();
        }
    }
    onCollapse(event) {
        if (this.disabled) {
            return;
        }
        if (this._tree.treeControl.isExpandable(this._data) &&
            this._tree.treeControl.isExpanded(this._data)) {
            this._tree.treeControl.collapse(this._data);
            event.stopPropagation();
        }
    }
    constructor(tabIndex) {
        super(inject(ElementRef), inject(RdsTreeComponent));
        this.renderer = inject(Renderer2);
        this.focusMonitor = inject(FocusMonitor);
        this.tree = inject(RdsTreeComponent);
        this.tabIndex = TAB_INDEX_DEFAULT;
        this.disabled = false;
        this.active = false;
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngAfterContentInit() {
        if (!this.disabled) {
            this.focusMonitor.monitor(this._elementRef, true);
        }
        else {
            this.focusMonitor.stopMonitoring(this._elementRef);
        }
    }
    ngOnChanges(changes) {
        if (changes['disabled'] &&
            changes['disabled'].previousValue !== changes['disabled'].currentValue) {
            if (this.disabled) {
                this.focusMonitor.stopMonitoring(this._elementRef);
                this.renderer.setAttribute(this._elementRef.nativeElement, 'disabled', 'disabled');
            }
            else {
                this.renderer.removeAttribute(this._elementRef.nativeElement, 'disabled');
                this.focusMonitor.monitor(this._elementRef, true);
            }
            this._checkButtons();
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.focusMonitor.stopMonitoring(this._elementRef);
    }
    focus() {
        super.focus();
    }
    _checkButtons() {
        const buttonElements = this._elementRef.nativeElement.querySelectorAll('button');
        buttonElements.forEach((b) => this.renderer.setProperty(b, 'disabled', this.disabled));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeDirective, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTreeNodeDirective, selector: "rds-tree-node", inputs: { tabIndex: ["tabIndex", "tabIndex", numberAttribute], disabled: ["disabled", "disabled", booleanAttribute], active: ["active", "active", booleanAttribute] }, host: { listeners: { "keydown.arrowDown": "onArrowDown()", "keydown.arrowUp": "onArrowUp()", "keydown.arrowRight": "onExpand($event)", "keydown.arrowLeft": "onCollapse($event)" }, properties: { "class": "this.cssClasses", "attr.aria-expanded": "this.attrAriaExpanded", "attr.aria-level": "this.attrAriaLevel", "style.--rds-tree-node-level": "this.styleLevel", "tabIndex": "this.attrTabIndex" } }, providers: [{ provide: CdkTreeNode, useExisting: RdsTreeNodeDirective }], exportAs: ["rdsTreeNode"], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-tree-node',
                    exportAs: 'rdsTreeNode',
                    providers: [{ provide: CdkTreeNode, useExisting: RdsTreeNodeDirective }],
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { cssClasses: [{
                type: HostBinding,
                args: ['class']
            }], attrAriaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], attrAriaLevel: [{
                type: HostBinding,
                args: ['attr.aria-level']
            }], styleLevel: [{
                type: HostBinding,
                args: ['style.--rds-tree-node-level']
            }], attrTabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], tabIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], active: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onArrowDown: [{
                type: HostListener,
                args: ['keydown.arrowDown']
            }], onArrowUp: [{
                type: HostListener,
                args: ['keydown.arrowUp']
            }], onExpand: [{
                type: HostListener,
                args: ['keydown.arrowRight', ['$event']]
            }], onCollapse: [{
                type: HostListener,
                args: ['keydown.arrowLeft', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,