import { SelectionModel } from '@angular/cdk/collections';
export class RdsTreeSelectionModel extends SelectionModel {
    constructor(treeControl, getLevel, selectionModelOptions) {
        super(true, selectionModelOptions?.initiallySelectedValues, selectionModelOptions?._emitChanges, selectionModelOptions?.compareWith);
        this.treeControl = treeControl;
        this.getLevel = (node) => node.level;
        if (getLevel) {
            this.getLevel = getLevel;
        }
    }
    descendantsAllSelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        return (descendants.length > 0 &&
            descendants.every((child) => {
                return this.isSelected(child);
            }));
    }
    /**
     * @returns false when all or none selected, otherwise true
     */
    descendantsPartiallySelected(node) {
        return (this.descendantsAnySelected(node) && !this.descendantsAllSelected(node));
    }
    /**
     * @returns true when at least one descendant is selected, otherwise false
     */
    descendantsAnySelected(node) {
        const descendants = this.treeControl.getDescendants(node);
        return descendants.some((child) => this.isSelected(child));
    }
    itemSelectionToggle(node) {
        this.toggle(node);
        const descendants = this.treeControl.getDescendants(node);
        this.isSelected(node)
            ? this.select(...descendants)
            : this.deselect(...descendants);
        // Force update for the parent
        descendants.forEach((child) => this.isSelected(child));
        this.checkAllParentsSelection(node);
    }
    leafItemSelectionToggle(node) {
        this.toggle(node);
        this.checkAllParentsSelection(node);
    }
    checkAllParentsSelection(node) {
        let parent = this.getParentNode(node);
        while (parent) {
            this.checkRootNodeSelection(parent);
            parent = this.getParentNode(parent);
        }
    }
    checkRootNodeSelection(node) {
        const nodeSelected = this.isSelected(node);
        const descendants = this.treeControl.getDescendants(node);
        const descAllSelected = descendants.length > 0 &&
            descendants.every((child) => {
                return this.isSelected(child);
            });
        if (nodeSelected && !descAllSelected) {
            this.deselect(node);
        }
        else if (!nodeSelected && descAllSelected) {
            this.select(node);
        }
    }
    getParentNode(node) {
        const currentLevel = this.getLevel(node);
        if (currentLevel < 1) {
            return null;
        }
        const startIndex = this.treeControl.dataNodes.indexOf(node) - 1;
        for (let i = startIndex; i >= 0; i--) {
            const currentNode = this.treeControl.dataNodes[i];
            if (this.getLevel(currentNode) < currentLevel) {
                return currentNode;
            }
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,