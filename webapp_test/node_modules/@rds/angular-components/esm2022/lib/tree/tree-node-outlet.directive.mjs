import { CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodeOutlet, } from '@angular/cdk/tree';
import { Directive, inject, ViewContainerRef } from '@angular/core';
import * as i0 from "@angular/core";
export class RdsTreeNodeOutletDirective {
    constructor() {
        this.viewContainer = inject(ViewContainerRef);
        this._node = inject(CDK_TREE_NODE_OUTLET_NODE, { optional: true });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeOutletDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeOutletDirective, selector: "[rdsTreeNodeOutlet], [rds-tree-node-outlet]", providers: [
            {
                provide: CdkTreeNodeOutlet,
                useExisting: RdsTreeNodeOutletDirective,
            },
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeOutletDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeOutlet], [rds-tree-node-outlet]',
                    providers: [
                        {
                            provide: CdkTreeNodeOutlet,
                            useExisting: RdsTreeNodeOutletDirective,
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLW91dGxldC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3RyZWUvdHJlZS1ub2RlLW91dGxldC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHlCQUF5QixFQUN6QixpQkFBaUIsR0FDbEIsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFXcEUsTUFBTSxPQUFPLDBCQUEwQjtJQVR2QztRQVVrQixrQkFBYSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pDLFVBQUssR0FBRyxNQUFNLENBQUMseUJBQXlCLEVBQUUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUMvRTs4R0FIWSwwQkFBMEI7a0dBQTFCLDBCQUEwQixzRUFQMUI7WUFDVDtnQkFDRSxPQUFPLEVBQUUsaUJBQWlCO2dCQUMxQixXQUFXLEVBQUUsMEJBQTBCO2FBQ3hDO1NBQ0Y7OzJGQUVVLDBCQUEwQjtrQkFUdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNkNBQTZDO29CQUN2RCxTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyw0QkFBNEI7eUJBQ3hDO3FCQUNGO2lCQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ0RLX1RSRUVfTk9ERV9PVVRMRVRfTk9ERSxcbiAgQ2RrVHJlZU5vZGVPdXRsZXQsXG59IGZyb20gJ0Bhbmd1bGFyL2Nkay90cmVlJztcbmltcG9ydCB7IERpcmVjdGl2ZSwgaW5qZWN0LCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyZHNUcmVlTm9kZU91dGxldF0sIFtyZHMtdHJlZS1ub2RlLW91dGxldF0nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7XG4gICAgICBwcm92aWRlOiBDZGtUcmVlTm9kZU91dGxldCxcbiAgICAgIHVzZUV4aXN0aW5nOiBSZHNUcmVlTm9kZU91dGxldERpcmVjdGl2ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNUcmVlTm9kZU91dGxldERpcmVjdGl2ZSBpbXBsZW1lbnRzIENka1RyZWVOb2RlT3V0bGV0IHtcbiAgcHVibGljIHJlYWRvbmx5IHZpZXdDb250YWluZXIgPSBpbmplY3QoVmlld0NvbnRhaW5lclJlZik7XG4gIHB1YmxpYyByZWFkb25seSBfbm9kZSA9IGluamVjdChDREtfVFJFRV9OT0RFX09VVExFVF9OT0RFLCB7IG9wdGlvbmFsOiB0cnVlIH0pO1xufVxuIl19