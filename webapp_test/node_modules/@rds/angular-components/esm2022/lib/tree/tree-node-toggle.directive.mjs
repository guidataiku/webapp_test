import { CdkTreeNodeToggle } from '@angular/cdk/tree';
import { booleanAttribute, Directive, ElementRef, HostListener, inject, Input, } from '@angular/core';
import * as i0 from "@angular/core";
export class RdsTreeNodeToggleDirective extends CdkTreeNodeToggle {
    constructor() {
        super(...arguments);
        this.hostTag = inject(ElementRef).nativeElement.tagName;
        this.recursive = false;
        this.disabled = false;
    }
    onInteraction(event) {
        // CdkTreeNodeToggle listens to (click) and button's enter clicks are handled
        // using that event, that's why we omit it here - interaction would be doubled
        if (this.hostTag !== 'BUTTON') {
            this._toggle(event);
        }
    }
    _toggle(event) {
        if (!this.disabled) {
            super._toggle(event);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeToggleDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTreeNodeToggleDirective, selector: "[rdsTreeNodeToggle], [rds-tree-node-toggle]", inputs: { recursive: ["rdsTreeNodeToggleRecursive", "recursive", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, host: { listeners: { "keydown.enter": "onInteraction($event)" } }, providers: [
            { provide: CdkTreeNodeToggle, useExisting: RdsTreeNodeToggleDirective },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeToggleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTreeNodeToggle], [rds-tree-node-toggle]',
                    providers: [
                        { provide: CdkTreeNodeToggle, useExisting: RdsTreeNodeToggleDirective },
                    ],
                }]
        }], propDecorators: { recursive: [{
                type: Input,
                args: [{ alias: 'rdsTreeNodeToggleRecursive', transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onInteraction: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLXRvZ2dsZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3RyZWUvdHJlZS1ub2RlLXRvZ2dsZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUNMLGdCQUFnQixFQUNoQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDOztBQVF2QixNQUFNLE9BQU8sMEJBQThCLFNBQVEsaUJBQW9CO0lBTnZFOztRQU9tQixZQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFHM0QsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUVhLGFBQVEsR0FBRyxLQUFLLENBQUM7S0FnQjFEO0lBYkMsYUFBYSxDQUFDLEtBQW9CO1FBQ2hDLDZFQUE2RTtRQUM3RSw4RUFBOEU7UUFDOUUsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRSxDQUFDO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7SUFFUSxPQUFPLENBQUMsS0FBWTtRQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ25CLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkIsQ0FBQztJQUNILENBQUM7OEdBckJVLDBCQUEwQjtrR0FBMUIsMEJBQTBCLDRIQUdvQixnQkFBZ0Isc0NBR3JELGdCQUFnQixtRkFWekI7WUFDVCxFQUFFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsMEJBQTBCLEVBQUU7U0FDeEU7OzJGQUVVLDBCQUEwQjtrQkFOdEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsNkNBQTZDO29CQUN2RCxTQUFTLEVBQUU7d0JBQ1QsRUFBRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsV0FBVyw0QkFBNEIsRUFBRTtxQkFDeEU7aUJBQ0Y7OEJBS1UsU0FBUztzQkFEakIsS0FBSzt1QkFBQyxFQUFFLEtBQUssRUFBRSw0QkFBNEIsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBR25DLFFBQVE7c0JBQS9DLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBR3RDLGFBQWE7c0JBRFosWUFBWTt1QkFBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb29sZWFuSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgQ2RrVHJlZU5vZGVUb2dnbGUgfSBmcm9tICdAYW5ndWxhci9jZGsvdHJlZSc7XG5pbXBvcnQge1xuICBib29sZWFuQXR0cmlidXRlLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyZHNUcmVlTm9kZVRvZ2dsZV0sIFtyZHMtdHJlZS1ub2RlLXRvZ2dsZV0nLFxuICBwcm92aWRlcnM6IFtcbiAgICB7IHByb3ZpZGU6IENka1RyZWVOb2RlVG9nZ2xlLCB1c2VFeGlzdGluZzogUmRzVHJlZU5vZGVUb2dnbGVEaXJlY3RpdmUgfSxcbiAgXSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzVHJlZU5vZGVUb2dnbGVEaXJlY3RpdmU8VD4gZXh0ZW5kcyBDZGtUcmVlTm9kZVRvZ2dsZTxUPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaG9zdFRhZyA9IGluamVjdChFbGVtZW50UmVmKS5uYXRpdmVFbGVtZW50LnRhZ05hbWU7XG5cbiAgQElucHV0KHsgYWxpYXM6ICdyZHNUcmVlTm9kZVRvZ2dsZVJlY3Vyc2l2ZScsIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSB9KVxuICBvdmVycmlkZSByZWN1cnNpdmUgPSBmYWxzZTtcblxuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVudGVyJywgWyckZXZlbnQnXSlcbiAgb25JbnRlcmFjdGlvbihldmVudDogS2V5Ym9hcmRFdmVudCk6IHZvaWQge1xuICAgIC8vIENka1RyZWVOb2RlVG9nZ2xlIGxpc3RlbnMgdG8gKGNsaWNrKSBhbmQgYnV0dG9uJ3MgZW50ZXIgY2xpY2tzIGFyZSBoYW5kbGVkXG4gICAgLy8gdXNpbmcgdGhhdCBldmVudCwgdGhhdCdzIHdoeSB3ZSBvbWl0IGl0IGhlcmUgLSBpbnRlcmFjdGlvbiB3b3VsZCBiZSBkb3VibGVkXG4gICAgaWYgKHRoaXMuaG9zdFRhZyAhPT0gJ0JVVFRPTicpIHtcbiAgICAgIHRoaXMuX3RvZ2dsZShldmVudCk7XG4gICAgfVxuICB9XG5cbiAgb3ZlcnJpZGUgX3RvZ2dsZShldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlzYWJsZWQpIHtcbiAgICAgIHN1cGVyLl90b2dnbGUoZXZlbnQpO1xuICAgIH1cbiAgfVxufVxuIl19