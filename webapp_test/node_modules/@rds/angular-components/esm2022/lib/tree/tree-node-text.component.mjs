import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Input, ViewChild, ViewEncapsulation, } from '@angular/core';
import * as i0 from "@angular/core";
export class RdsTreeNodeTextComponent {
    constructor() {
        this.truncateClass = true;
        this.containerClass = true;
        this.contentLeftClass = true;
        this.alignRightClass = false;
        this.alignCenterClass = false;
        this.textAlignment = 'left';
    }
    ngOnChanges(changes) {
        if (changes['textAlignment'] &&
            changes['textAlignment'].previousValue !==
                changes['textAlignment'].currentValue) {
            if (this.textAlignment === 'right') {
                this.alignRightClass = true;
                this.alignCenterClass = false;
            }
            else if (this.textAlignment === 'center') {
                this.alignRightClass = false;
                this.alignCenterClass = true;
            }
            else {
                this.alignRightClass = false;
                this.alignCenterClass = false;
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTreeNodeTextComponent, selector: "rds-tree-node-text", inputs: { textAlignment: "textAlignment" }, host: { properties: { "class.rds-tree-text-node": "this.truncateClass", "class.rds-tree-text-node__container": "this.containerClass", "class.rds-tree-node--content-left": "this.contentLeftClass", "class.rds-tree-text-node__container-align-right": "this.alignRightClass", "class.rds-tree-text-node__container-align-center": "this.alignCenterClass" } }, viewQueries: [{ propertyName: "rdsTreeNodeElement", first: true, predicate: ["rdsTreeNodeElement"], descendants: true, static: true }], exportAs: ["rdsTreeText"], usesOnChanges: true, ngImport: i0, template: `
    <span class="rds-tree-text-node" #rdsTreeNodeElement>
      <ng-content />
    </span>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTreeNodeTextComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-tree-node-text',
                    exportAs: 'rdsTreeText',
                    template: `
    <span class="rds-tree-text-node" #rdsTreeNodeElement>
      <ng-content />
    </span>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { truncateClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node']
            }], containerClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node__container']
            }], contentLeftClass: [{
                type: HostBinding,
                args: ['class.rds-tree-node--content-left']
            }], alignRightClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node__container-align-right']
            }], alignCenterClass: [{
                type: HostBinding,
                args: ['class.rds-tree-text-node__container-align-center']
            }], rdsTreeNodeElement: [{
                type: ViewChild,
                args: ['rdsTreeNodeElement', { static: true }]
            }], textAlignment: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLXRleHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi90cmVlL3RyZWUtbm9kZS10ZXh0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLEtBQUssRUFHTCxTQUFTLEVBQ1QsaUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDOztBQWV2QixNQUFNLE9BQU8sd0JBQXdCO0lBWHJDO1FBWTJDLGtCQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ1YsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDeEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBRTFFLG9CQUFlLEdBQUcsS0FBSyxDQUFDO1FBRXhCLHFCQUFnQixHQUFHLEtBQUssQ0FBQztRQU16QixrQkFBYSxHQUE2QixNQUFNLENBQUM7S0FvQmxEO0lBbEJDLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxJQUNFLE9BQU8sQ0FBQyxlQUFlLENBQUM7WUFDeEIsT0FBTyxDQUFDLGVBQWUsQ0FBQyxDQUFDLGFBQWE7Z0JBQ3BDLE9BQU8sQ0FBQyxlQUFlLENBQUMsQ0FBQyxZQUFZLEVBQ3ZDLENBQUM7WUFDRCxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssT0FBTyxFQUFFLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsS0FBSyxDQUFDO1lBQ2hDLENBQUM7aUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxLQUFLLFFBQVEsRUFBRSxDQUFDO2dCQUMzQyxJQUFJLENBQUMsZUFBZSxHQUFHLEtBQUssQ0FBQztnQkFDN0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztZQUMvQixDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLENBQUM7WUFDaEMsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDOzhHQWhDVSx3QkFBd0I7a0dBQXhCLHdCQUF3Qiw4bkJBUnpCOzs7O0dBSVQ7OzJGQUlVLHdCQUF3QjtrQkFYcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFOzs7O0dBSVQ7b0JBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs4QkFFMEMsYUFBYTtzQkFBckQsV0FBVzt1QkFBQywwQkFBMEI7Z0JBQ2EsY0FBYztzQkFBakUsV0FBVzt1QkFBQyxxQ0FBcUM7Z0JBQ0EsZ0JBQWdCO3NCQUFqRSxXQUFXO3VCQUFDLG1DQUFtQztnQkFFaEQsZUFBZTtzQkFEZCxXQUFXO3VCQUFDLGlEQUFpRDtnQkFHOUQsZ0JBQWdCO3NCQURmLFdBQVc7dUJBQUMsa0RBQWtEO2dCQUkvRCxrQkFBa0I7c0JBRGpCLFNBQVM7dUJBQUMsb0JBQW9CLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQUlqRCxhQUFhO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uQ2hhbmdlcyxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0NoaWxkLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmV4cG9ydCB0eXBlIFJkc1RyZWVOb2RlVGV4dEFsaWdubWVudCA9ICdsZWZ0JyB8ICdjZW50ZXInIHwgJ3JpZ2h0JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncmRzLXRyZWUtbm9kZS10ZXh0JyxcbiAgZXhwb3J0QXM6ICdyZHNUcmVlVGV4dCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHNwYW4gY2xhc3M9XCJyZHMtdHJlZS10ZXh0LW5vZGVcIiAjcmRzVHJlZU5vZGVFbGVtZW50PlxuICAgICAgPG5nLWNvbnRlbnQgLz5cbiAgICA8L3NwYW4+XG4gIGAsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNUcmVlTm9kZVRleHRDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy10cmVlLXRleHQtbm9kZScpIHRydW5jYXRlQ2xhc3MgPSB0cnVlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy10cmVlLXRleHQtbm9kZV9fY29udGFpbmVyJykgY29udGFpbmVyQ2xhc3MgPSB0cnVlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy10cmVlLW5vZGUtLWNvbnRlbnQtbGVmdCcpIGNvbnRlbnRMZWZ0Q2xhc3MgPSB0cnVlO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy10cmVlLXRleHQtbm9kZV9fY29udGFpbmVyLWFsaWduLXJpZ2h0JylcbiAgYWxpZ25SaWdodENsYXNzID0gZmFsc2U7XG4gIEBIb3N0QmluZGluZygnY2xhc3MucmRzLXRyZWUtdGV4dC1ub2RlX19jb250YWluZXItYWxpZ24tY2VudGVyJylcbiAgYWxpZ25DZW50ZXJDbGFzcyA9IGZhbHNlO1xuXG4gIEBWaWV3Q2hpbGQoJ3Jkc1RyZWVOb2RlRWxlbWVudCcsIHsgc3RhdGljOiB0cnVlIH0pXG4gIHJkc1RyZWVOb2RlRWxlbWVudDogRWxlbWVudFJlZjtcblxuICBASW5wdXQoKVxuICB0ZXh0QWxpZ25tZW50OiBSZHNUcmVlTm9kZVRleHRBbGlnbm1lbnQgPSAnbGVmdCc7XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIGNoYW5nZXNbJ3RleHRBbGlnbm1lbnQnXSAmJlxuICAgICAgY2hhbmdlc1sndGV4dEFsaWdubWVudCddLnByZXZpb3VzVmFsdWUgIT09XG4gICAgICAgIGNoYW5nZXNbJ3RleHRBbGlnbm1lbnQnXS5jdXJyZW50VmFsdWVcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLnRleHRBbGlnbm1lbnQgPT09ICdyaWdodCcpIHtcbiAgICAgICAgdGhpcy5hbGlnblJpZ2h0Q2xhc3MgPSB0cnVlO1xuICAgICAgICB0aGlzLmFsaWduQ2VudGVyQ2xhc3MgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy50ZXh0QWxpZ25tZW50ID09PSAnY2VudGVyJykge1xuICAgICAgICB0aGlzLmFsaWduUmlnaHRDbGFzcyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmFsaWduQ2VudGVyQ2xhc3MgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5hbGlnblJpZ2h0Q2xhc3MgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hbGlnbkNlbnRlckNsYXNzID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=