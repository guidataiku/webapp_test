import { FocusMonitor } from '@angular/cdk/a11y';
import { Attribute, booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, inject, Input, numberAttribute, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { ControlContainer, FormGroupDirective, NG_VALUE_ACCESSOR, NgForm, } from '@angular/forms';
import { noop } from 'rxjs';
import { animate, state, style, transition, trigger, } from '@angular/animations';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE, updateErrorState, } from '../utils';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/observers";
import * as i2 from "@angular/common";
let nextUniqueId = 0;
export class RdsSwitchChange {
    constructor(source, checked) {
        this.source = source;
        this.checked = checked;
    }
}
export const rdsSwitchAnimations = {
    /** Animation that transitions the form field's error and hint messages. */
    transitionMessages: trigger('transitionMessages', [
        state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),
        transition('void => enter', [
            style({ opacity: 0, transform: 'translateY(-100%)' }),
            animate('200ms cubic-bezier(0.55, 0, 0.55, 0.2)'),
        ]),
    ]),
};
export class RdsSwitchComponent {
    get errorState() {
        return this._errorState;
    }
    get inputId() {
        return `${this.id || this._uniqueId}-input`;
    }
    onFocus() {
        this._inputElement.nativeElement.focus();
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    constructor(tabIndex) {
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.controlContainer = inject(ControlContainer, {
            optional: true,
            host: true,
            skipSelf: true,
        });
        this._uniqueId = `rds-switch-${++nextUniqueId}`;
        this._errorState = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.subscriptAnimationState = '';
        this.hostClass = 'rds-switch';
        this.size = 'l';
        this.id = this._uniqueId;
        this.labelPosition = 'after';
        this.ariaLabel = null;
        this.ariaLabelledby = null;
        this.required = false;
        this.checked = false;
        this.disabled = false;
        this.buttonChanged = new EventEmitter();
        this.toggleChange = new EventEmitter();
        this._onChange = noop;
        this._onTouched = noop;
        this._tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngOnInit() {
        if (this.controlContainer) {
            if (this.formControlName) {
                this._control = this.controlContainer.control?.get(this.formControlName);
            }
            else {
                // Missing FormControlName directive from host element of the component
            }
        }
        else {
            // Can't find parent FormGroup directive
        }
    }
    ngDoCheck() {
        if (this._control) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this._errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this._control);
        }
    }
    ngAfterContentInit() {
        const control = this._control;
        if (control && control.valueChanges) {
            control.valueChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                control?.markAsDirty();
                control?.markAsTouched();
                this.cdr.markForCheck();
            });
        }
        const parent = this.parentFormGroup || this.parentForm;
        if (parent) {
            parent.ngSubmit
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this.cdr.markForCheck();
            });
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef, true)
            .subscribe((focusOrigin) => {
            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {
                this._inputElement.nativeElement.focus();
            }
            else if (!focusOrigin) {
                Promise.resolve().then(() => this._onTouched());
            }
        });
        this.subscriptAnimationState = 'enter'; // Avoid animations on load.
        this.cdr.detectChanges();
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    get isErrorMessageVisible() {
        return this.errorState;
    }
    _onChangeEvent(event) {
        event.stopPropagation();
        this.toggleChange.emit();
        if (this.disabled) {
            this._inputElement.nativeElement.checked = this.checked;
            return;
        }
        if (this.checked !== this._inputElement.nativeElement.checked) {
            this.checked = this._inputElement.nativeElement.checked;
            this.cdr.markForCheck();
        }
        this._emitChangeEvent();
    }
    _onInputClick(event) {
        event.stopPropagation();
    }
    writeValue(value) {
        if (this.checked !== value) {
            this.checked = value;
            this.cdr.markForCheck();
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    focus(options) {
        this._inputElement.nativeElement.focus(options);
    }
    toggle() {
        this.checked = !this.checked;
        this._onChange(this.checked);
    }
    _onLabelTextChange() {
        this.cdr.detectChanges();
    }
    _emitChangeEvent() {
        this._onChange(this.checked);
        this.buttonChanged.emit(new RdsSwitchChange(this, this.checked));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSwitchComponent, selector: "rds-switch", inputs: { formControlName: "formControlName", name: "name", size: "size", id: "id", labelPosition: "labelPosition", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], required: ["required", "required", booleanAttribute], checked: ["checked", "checked", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], tabIndex: "tabIndex" }, outputs: { buttonChanged: "buttonChanged", toggleChange: "toggleChange" }, host: { listeners: { "focus": "onFocus()" }, properties: { "class": "this.hostClass", "attr.id": "this.id", "attr.aria-labelledby": "this.ariaLabel", "attr.aria-label": "this.ariaLabelledby", "class.rds-checked": "this.checked", "class.rds-switch--invalid": "this.errorState", "class.rds-disabled": "this.disabled", "tabIndex": "this.tabIndex" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => RdsSwitchComponent),
                multi: true,
            },
        ], viewQueries: [{ propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: "<label\n  [attr.for]=\"inputId\"\n  class=\"rds-switch-label\"\n  [class.rds-switch-label-before]=\"labelPosition === 'before'\"\n>\n  <div\n    class=\"rds-switch-bar\"\n    [class.rds-switch-bar-no-side-margin]=\"\n      !labelContent.textContent || !labelContent.textContent.trim()\n    \"\n  >\n    <input\n      #input\n      class=\"rds-switch-input cdk-visually-hidden\"\n      type=\"checkbox\"\n      role=\"switch\"\n      [id]=\"inputId\"\n      [required]=\"required\"\n      [tabIndex]=\"tabIndex\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      [attr.name]=\"name\"\n      [attr.aria-checked]=\"checked ? 'true' : 'false'\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      (change)=\"_onChangeEvent($event)\"\n      (click)=\"_onInputClick($event)\"\n    />\n    <div class=\"rds-switch-thumb-container\">\n      <div class=\"rds-switch-thumb\"></div>\n      <div class=\"rds-switch-ripple rds-focus-indicator\">\n        <div class=\"rds-ripple-element rds-switch-persistent-ripple\"></div>\n      </div>\n    </div>\n  </div>\n  <span\n    class=\"rds-switch-content\"\n    [ngClass]=\"'rds-switch-label-content--' + size\"\n    #labelContent\n    (cdkObserveContent)=\"_onLabelTextChange()\"\n  >\n    <ng-content />\n  </span>\n</label>\n<div class=\"rds-switch__subscript-wrapper\">\n  @switch (isErrorMessageVisible) {\n    @case (true) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--error\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-error\" />\n      </div>\n    }\n    @case (false) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--hint\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-hint\" />\n      </div>\n    }\n  }\n</div>\n", styles: [".rds-switch{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.rds-switch .rds-switch-thumb{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}.rds-switch:not(.rds-checked) .rds-switch-thumb{background-color:var(--rds-color-switch-toggle)}.rds-switch:not(.rds-checked) .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-switch-thumb{background-color:var(--rds-color-informative)}.rds-switch.rds-checked .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-ripple-element:hover{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(14px,0,0)}[dir=rtl] .rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(-14px,0,0)}.rds-switch.rds-checked:not(.rds-disabled).rds-switch--invalid .rds-switch-thumb{background-color:var(--rds-color-error)}.rds-switch.rds-switch--invalid .rds-switch-bar{background-color:var(--rds-color-switch-track-error)}.rds-switch.rds-disabled .rds-switch-thumb{box-shadow:none;background-color:var(--rds-color-grey-2)}.rds-switch.rds-disabled .rds-switch-bar{background-color:var(--rds-color-grey-1)}.rds-switch.rds-disabled .rds-switch-label,.rds-switch.rds-disabled .rds-switch-thumb-container{cursor:default}.rds-switch-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.rds-switch-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:var(--rds-color-high-contrast)}.rds-switch-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-disabled .rds-switch-content{color:var(--rds-color-disabled)}.rds-switch-label-before .rds-switch-label{order:1}.rds-switch-label-before .rds-switch-bar{order:2}[dir=rtl] .rds-switch-label-before .rds-switch-bar,.rds-switch-bar{margin-right:8px;margin-left:0}[dir=rtl] .rds-switch-bar,.rds-switch-label-before .rds-switch-bar{margin-left:8px;margin-right:0}.rds-switch-bar-no-side-margin{margin-left:0;margin-right:0}.rds-switch-thumb-container{position:absolute;z-index:1;top:-3px;left:0;transform:translateZ(0);transition:all 80ms linear;transition-property:transform;width:20px;height:20px}[dir=rtl] .rds-switch-thumb-container{left:auto;right:0}.rds-switch-thumb{border-radius:50%;width:20px;height:20px}.rds-switch-bar{position:relative;flex-shrink:0;border-radius:8px;width:34px;height:14px}.rds-switch-input{bottom:0;left:10px}[dir=rtl] .rds-switch-input{left:auto;right:10px}.rds-switch-bar,.rds-switch-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.rds-switch .rds-switch-ripple{position:absolute;z-index:1;top:calc(50% - 18px);left:calc(50% - 18px);height:36px;width:36px;pointer-events:none}.rds-switch .rds-switch-ripple .rds-ripple-element{border-radius:50%}.rds-switch .rds-switch-ripple .rds-ripple-element:not(.rds-switch-persistent-ripple){opacity:.12}.rds-switch-persistent-ripple{width:100%;height:100%;transform:none}.rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-bar:active .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-pressed)}.rds-switch:not(.rds-disabled).cdk-keyboard-focused .rds-switch-persistent-ripple{opacity:1;border:2px solid var(--rds-color-stroke-active-focus);background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-persistent-ripple,.rds-switch.rds-disabled .rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:0}@media (hover: none){.rds-switch-bar:hover .rds-switch-persistent-ripple{display:none}}.rds-switch__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-disabled .rds-switch__subscript--hint{color:var(--rds-color-disabled)}.rds-switch__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-switch__subscript--hint{color:var(--rds-color-low-contrast)}.rds-switch__subscript--error{color:var(--rds-color-error)}\n"], dependencies: [{ kind: "directive", type: i1.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }, { kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [rdsSwitchAnimations.transitionMessages], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-switch', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, animations: [rdsSwitchAnimations.transitionMessages], providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => RdsSwitchComponent),
                            multi: true,
                        },
                    ], template: "<label\n  [attr.for]=\"inputId\"\n  class=\"rds-switch-label\"\n  [class.rds-switch-label-before]=\"labelPosition === 'before'\"\n>\n  <div\n    class=\"rds-switch-bar\"\n    [class.rds-switch-bar-no-side-margin]=\"\n      !labelContent.textContent || !labelContent.textContent.trim()\n    \"\n  >\n    <input\n      #input\n      class=\"rds-switch-input cdk-visually-hidden\"\n      type=\"checkbox\"\n      role=\"switch\"\n      [id]=\"inputId\"\n      [required]=\"required\"\n      [tabIndex]=\"tabIndex\"\n      [checked]=\"checked\"\n      [disabled]=\"disabled\"\n      [attr.name]=\"name\"\n      [attr.aria-checked]=\"checked ? 'true' : 'false'\"\n      [attr.aria-label]=\"ariaLabel\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      [attr.aria-describedby]=\"ariaDescribedby\"\n      (change)=\"_onChangeEvent($event)\"\n      (click)=\"_onInputClick($event)\"\n    />\n    <div class=\"rds-switch-thumb-container\">\n      <div class=\"rds-switch-thumb\"></div>\n      <div class=\"rds-switch-ripple rds-focus-indicator\">\n        <div class=\"rds-ripple-element rds-switch-persistent-ripple\"></div>\n      </div>\n    </div>\n  </div>\n  <span\n    class=\"rds-switch-content\"\n    [ngClass]=\"'rds-switch-label-content--' + size\"\n    #labelContent\n    (cdkObserveContent)=\"_onLabelTextChange()\"\n  >\n    <ng-content />\n  </span>\n</label>\n<div class=\"rds-switch__subscript-wrapper\">\n  @switch (isErrorMessageVisible) {\n    @case (true) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--error\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-error\" />\n      </div>\n    }\n    @case (false) {\n      <div\n        class=\"rds-switch__subscript rds-switch__subscript--hint\"\n        [@transitionMessages]=\"subscriptAnimationState\"\n      >\n        <ng-content select=\"rds-control-hint\" />\n      </div>\n    }\n  }\n</div>\n", styles: [".rds-switch{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.rds-switch .rds-switch-thumb{box-shadow:0 0 1px #00000052,0 2px 4px #0000001c}.rds-switch:not(.rds-checked) .rds-switch-thumb{background-color:var(--rds-color-switch-toggle)}.rds-switch:not(.rds-checked) .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-switch-thumb{background-color:var(--rds-color-informative)}.rds-switch.rds-checked .rds-switch-bar{background-color:var(--rds-color-switch-track)}.rds-switch.rds-checked .rds-ripple-element:hover{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(14px,0,0)}[dir=rtl] .rds-switch.rds-checked .rds-switch-thumb-container{transform:translate3d(-14px,0,0)}.rds-switch.rds-checked:not(.rds-disabled).rds-switch--invalid .rds-switch-thumb{background-color:var(--rds-color-error)}.rds-switch.rds-switch--invalid .rds-switch-bar{background-color:var(--rds-color-switch-track-error)}.rds-switch.rds-disabled .rds-switch-thumb{box-shadow:none;background-color:var(--rds-color-grey-2)}.rds-switch.rds-disabled .rds-switch-bar{background-color:var(--rds-color-grey-1)}.rds-switch.rds-disabled .rds-switch-label,.rds-switch.rds-disabled .rds-switch-thumb-container{cursor:default}.rds-switch-label{-webkit-user-select:none;user-select:none;display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.rds-switch-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:var(--rds-color-high-contrast)}.rds-switch-label-content--s{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--m{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-switch-label-content--l{font-size:18px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-disabled .rds-switch-content{color:var(--rds-color-disabled)}.rds-switch-label-before .rds-switch-label{order:1}.rds-switch-label-before .rds-switch-bar{order:2}[dir=rtl] .rds-switch-label-before .rds-switch-bar,.rds-switch-bar{margin-right:8px;margin-left:0}[dir=rtl] .rds-switch-bar,.rds-switch-label-before .rds-switch-bar{margin-left:8px;margin-right:0}.rds-switch-bar-no-side-margin{margin-left:0;margin-right:0}.rds-switch-thumb-container{position:absolute;z-index:1;top:-3px;left:0;transform:translateZ(0);transition:all 80ms linear;transition-property:transform;width:20px;height:20px}[dir=rtl] .rds-switch-thumb-container{left:auto;right:0}.rds-switch-thumb{border-radius:50%;width:20px;height:20px}.rds-switch-bar{position:relative;flex-shrink:0;border-radius:8px;width:34px;height:14px}.rds-switch-input{bottom:0;left:10px}[dir=rtl] .rds-switch-input{left:auto;right:10px}.rds-switch-bar,.rds-switch-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}.rds-switch .rds-switch-ripple{position:absolute;z-index:1;top:calc(50% - 18px);left:calc(50% - 18px);height:36px;width:36px;pointer-events:none}.rds-switch .rds-switch-ripple .rds-ripple-element{border-radius:50%}.rds-switch .rds-switch-ripple .rds-ripple-element:not(.rds-switch-persistent-ripple){opacity:.12}.rds-switch-persistent-ripple{width:100%;height:100%;transform:none}.rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-bar:active .rds-switch-persistent-ripple{opacity:1;background-color:var(--rds-color-bg-transparent-pressed)}.rds-switch:not(.rds-disabled).cdk-keyboard-focused .rds-switch-persistent-ripple{opacity:1;border:2px solid var(--rds-color-stroke-active-focus);background-color:var(--rds-color-bg-transparent-hover-select)}.rds-switch-persistent-ripple,.rds-switch.rds-disabled .rds-switch-bar:hover .rds-switch-persistent-ripple{opacity:0}@media (hover: none){.rds-switch-bar:hover .rds-switch-persistent-ripple{display:none}}.rds-switch__subscript-wrapper>div:not(:empty){margin-top:4px}.rds-disabled .rds-switch__subscript--hint{color:var(--rds-color-disabled)}.rds-switch__subscript{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-align:left}.rds-switch__subscript--hint{color:var(--rds-color-low-contrast)}.rds-switch__subscript--error{color:var(--rds-color-error)}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], formControlName: [{
                type: Input
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.id']
            }], labelPosition: [{
                type: Input
            }], ariaLabel: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }, {
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }, {
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], required: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], checked: [{
                type: HostBinding,
                args: ['class.rds-checked']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], errorState: [{
                type: HostBinding,
                args: ['class.rds-switch--invalid']
            }], disabled: [{
                type: HostBinding,
                args: ['class.rds-disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonChanged: [{
                type: Output
            }], toggleChange: [{
                type: Output
            }], _inputElement: [{
                type: ViewChild,
                args: ['input']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,