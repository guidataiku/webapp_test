import { booleanAttribute, ChangeDetectionStrategy, Component, HostBinding, Input, numberAttribute, ViewEncapsulation, } from '@angular/core';
import { Subject } from 'rxjs';
import { debounceTime, delay } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "ngx-lottie";
import * as i2 from "@angular/common";
const ANIMATION_SPEED_FACTOR = 10;
const ANIMATION_DIRECTION = {
    FORWARD: 1,
    BACKWARD: -1,
};
const DEFAULT_MAX_VALUE = 100;
const DEFAULT_MIN_VALUE = 0;
export class RdsProgressSpinnerComponent {
    constructor() {
        this.animationConfig$ = new Subject();
        this.animationConfigDebounced$ = this.animationConfig$.pipe(delay(1), debounceTime(1));
        this.hostRole = 'progressbar';
        this._value = DEFAULT_MIN_VALUE;
        this._minValue = DEFAULT_MIN_VALUE;
        this._maxValue = DEFAULT_MAX_VALUE;
        this.mode = 'indeterminate';
        this.size = 'xl';
        this.white = false;
    }
    get hostClasses() {
        return ['rds-progress-spinner', `rds-progress-spinner-${this.size}`];
    }
    get attrValueMin() {
        return this.mode === 'determinate' ? this.minValue : null;
    }
    get attrValueMax() {
        return this.mode === 'determinate' ? this.maxValue : null;
    }
    get attrValueNow() {
        return this.mode === 'determinate' ? this.value : null;
    }
    set value(newValue) {
        const value = numberAttribute(newValue, DEFAULT_MIN_VALUE);
        if (this._value !== value) {
            this._value = value;
            if (this.animationItem) {
                this.animationItem.setDirection(this.getAnimationDirection());
                this.playAnimation();
            }
        }
    }
    get value() {
        return this._value;
    }
    set minValue(value) {
        const min = numberAttribute(value, DEFAULT_MIN_VALUE);
        if (min > this.maxValue) {
            throw new Error(`The minimal value should be less than maximum value`);
        }
        if (this._minValue !== min) {
            this._minValue = min;
            this.animationItem.setDirection(this.getAnimationDirection());
            this.playAnimation();
        }
    }
    get minValue() {
        return this._minValue;
    }
    set maxValue(value) {
        const max = numberAttribute(value, DEFAULT_MAX_VALUE);
        if (max < this.minValue) {
            throw new Error(`The maximal value should be greater than minimal value`);
        }
        if (this._maxValue !== max) {
            this._maxValue = max;
            this.animationItem.setDirection(this.getAnimationDirection());
            this.playAnimation();
        }
    }
    get maxValue() {
        return this._maxValue;
    }
    ngAfterViewInit() {
        this._setAnimationConfig();
    }
    ngOnChanges(changes) {
        if (changes['mode'] || changes['size'] || changes['white']) {
            this._setAnimationConfig();
        }
    }
    ngOnDestroy() {
        this.animationItem?.destroy();
    }
    animationCreated($event) {
        if (this.mode === 'determinate') {
            this.animationItem = $event;
            this.playAnimation();
        }
    }
    playAnimation() {
        if (this.mode === 'determinate' && this.animationItem) {
            this.animationItem.pause();
            this.removeAnimationItemListener();
            if ((this.animationItem.playDirection === ANIMATION_DIRECTION.FORWARD &&
                this.animationItem.currentFrame < this.getPercentageValue()) ||
                (this.animationItem.playDirection === ANIMATION_DIRECTION.BACKWARD &&
                    this.animationItem.currentFrame > this.getPercentageValue())) {
                this.animationItem.setSpeed(Math.abs(this.animationItem.currentFrame - this.getPercentageValue()) / ANIMATION_SPEED_FACTOR);
                this.animationItem.play();
                this.animationItem.addEventListener('enterFrame', (event) => {
                    if ((this.animationItem.playDirection === ANIMATION_DIRECTION.FORWARD &&
                        event.currentTime >= this.getPercentageValue()) ||
                        (this.animationItem.playDirection ===
                            ANIMATION_DIRECTION.BACKWARD &&
                            event.currentTime < this.getPercentageValue())) {
                        this.animationItem.pause();
                        this.removeAnimationItemListener();
                        this.animationItem.goToAndStop(this.getPercentageValue(), true);
                    }
                });
            }
        }
    }
    _getPath() {
        return `assets/spinner/spinner-${this.mode === 'determinate' ? 'determinate-' : ''}${this.white ? 'white-' : ''}${this.size}.json`;
    }
    _setAnimationConfig() {
        if (this.animationItem) {
            this.animationItem.destroy();
        }
        if (this.mode === 'indeterminate') {
            this.animationConfig$.next({
                path: this._getPath(),
                autoplay: true,
                loop: true,
            });
        }
        else {
            this.animationConfig$.next({
                path: this._getPath(),
                loop: false,
            });
        }
    }
    removeAnimationItemListener() {
        if (this.animationItem) {
            this.animationItem.removeEventListener('enterFrame');
        }
    }
    getPercentageValue() {
        const value = ((this.value - this.minValue) / (this.maxValue - this.minValue)) * 100;
        const percentage = Math.round(value + Number.EPSILON);
        if (percentage <= DEFAULT_MIN_VALUE) {
            return DEFAULT_MIN_VALUE;
        }
        else if (percentage >= this.animationItem.totalFrames) {
            return this.animationItem.totalFrames || DEFAULT_MAX_VALUE;
        }
        else {
            return percentage;
        }
    }
    getAnimationDirection() {
        return this.getPercentageValue() < this.animationItem.currentFrame
            ? ANIMATION_DIRECTION.BACKWARD
            : ANIMATION_DIRECTION.FORWARD;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsProgressSpinnerComponent, selector: "rds-progress-spinner", inputs: { value: "value", minValue: "minValue", maxValue: "maxValue", mode: "mode", size: "size", label: "label", white: ["white", "white", booleanAttribute] }, host: { properties: { "class": "this.hostClasses", "attr.role": "this.hostRole", "attr.aria-valuemin": "this.attrValueMin", "attr.aria-valuemax": "this.attrValueMax", "attr.aria-valuenow": "this.attrValueNow", "class.rds-progress-spinner--white": "this.white" } }, usesOnChanges: true, ngImport: i0, template: `
    <div class="rds-progress-spinner-container">
      <ng-lottie
        [options]="animationConfigDebounced$ | async"
        (animationCreated)="animationCreated($event)"
      />
    </div>
    @if (label) {
      <span class="rds-progress-spinner-label">{{ label }}</span>
    }
  `, isInline: true, styles: [".rds-progress-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center}.rds-progress-spinner.rds-progress-spinner-xs .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:18px;width:18px}.rds-progress-spinner.rds-progress-spinner-s .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:24px;width:24px}.rds-progress-spinner.rds-progress-spinner-m .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:32px;width:32px}.rds-progress-spinner.rds-progress-spinner-l .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:44px;width:44px}.rds-progress-spinner.rds-progress-spinner-xl .rds-progress-spinner-container{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:72px;width:72px}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-track)}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-informative)}.rds-progress-spinner .rds-progress-spinner-label{display:flex;margin-top:4px;color:var(--rds-color-informative)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-label{color:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-on-dark-surface)}\n"], dependencies: [{ kind: "component", type: i1.LottieComponent, selector: "ng-lottie", inputs: ["width", "height"] }, { kind: "pipe", type: i2.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsProgressSpinnerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-progress-spinner', template: `
    <div class="rds-progress-spinner-container">
      <ng-lottie
        [options]="animationConfigDebounced$ | async"
        (animationCreated)="animationCreated($event)"
      />
    </div>
    @if (label) {
      <span class="rds-progress-spinner-label">{{ label }}</span>
    }
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".rds-progress-spinner{display:flex;flex-direction:column;justify-content:center;align-items:center}.rds-progress-spinner.rds-progress-spinner-xs .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:18px;width:18px}.rds-progress-spinner.rds-progress-spinner-s .rds-progress-spinner-container{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:24px;width:24px}.rds-progress-spinner.rds-progress-spinner-m .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:32px;width:32px}.rds-progress-spinner.rds-progress-spinner-l .rds-progress-spinner-container{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:44px;width:44px}.rds-progress-spinner.rds-progress-spinner-xl .rds-progress-spinner-container{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;height:72px;width:72px}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-track)}.rds-progress-spinner .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-informative)}.rds-progress-spinner .rds-progress-spinner-label{display:flex;margin-top:4px;color:var(--rds-color-informative)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-label{color:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=butt]{stroke:var(--rds-color-on-dark-surface)}.rds-progress-spinner.rds-progress-spinner--white .rds-progress-spinner-container path[stroke-linecap=round]{stroke:var(--rds-color-on-dark-surface)}\n"] }]
        }], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], hostRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], attrValueMin: [{
                type: HostBinding,
                args: ['attr.aria-valuemin']
            }], attrValueMax: [{
                type: HostBinding,
                args: ['attr.aria-valuemax']
            }], attrValueNow: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }], value: [{
                type: Input
            }], minValue: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], mode: [{
                type: Input
            }], size: [{
                type: Input
            }], label: [{
                type: Input
            }], white: [{
                type: HostBinding,
                args: ['class.rds-progress-spinner--white']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,