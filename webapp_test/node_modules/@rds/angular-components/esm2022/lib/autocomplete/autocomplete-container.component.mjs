import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, inject, Input, ViewChild, ViewEncapsulation, } from '@angular/core';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { AsyncPipe, NgTemplateOutlet } from '@angular/common';
import { RdsListItemModule } from '../list-item';
import { RdsIconComponent } from '../icons';
import { RdsAutocompleteIntl } from './autocomplete-intl.service';
import { RdsAutocompleteHighlightDirective } from './autocomplete-highlight.directive';
import { ContentObserver } from '@angular/cdk/observers';
import { RDS_AUTOCOMPLETE_CONFIG, RDS_AUTOCOMPLETE_DEFAULT_CONFIG, } from './autocomplete.config';
import { RdsAutocompleteOptionDirective } from './autocomplete-option.directive';
import * as i0 from "@angular/core";
import * as i1 from "../list-item/list-item.component";
import * as i2 from "../list-item/multi-select-list-item.component";
import * as i3 from "../list-item/single-select-list-item.component";
export class RdsAutocompleteContainerComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.intl = inject(RdsAutocompleteIntl);
        this.observer = inject(ContentObserver);
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.config = {
            ...RDS_AUTOCOMPLETE_DEFAULT_CONFIG,
            ...inject(RDS_AUTOCOMPLETE_CONFIG, { optional: true }),
        };
        this.size = 's';
        this._options = [];
        this.selectedOptions = [];
        this.availableOptions = [];
        this.lastSelectedValue = null;
        this.loadingText = RdsAutocompleteIntl.translations.loadingText;
        this.noDataText = RdsAutocompleteIntl.translations.noDataText;
        this.newItemText = RdsAutocompleteIntl.translations.newItemText;
        this.autocompleteOptions = new Map();
        this.optionElements = [];
        this.trackBy = (_i, a) => this.autocomplete.getUniqProperty(a);
    }
    set options(options) {
        this._options = options;
        this.selectedOptions = options.filter((o) => this.autocomplete.isSelected(o));
        this.availableOptions = options.filter((o) => !this.autocomplete.isSelected(o));
        this.lastSelectedValue =
            this.autocomplete.values.length > 0
                ? this.autocomplete.values[this.autocomplete.values.length - 1]
                : null;
    }
    get options() {
        return this._options;
    }
    ngOnInit() {
        this.intl.change$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((t) => {
            this.loadingText = this.autocomplete.loadingText || t.loadingText;
            this.noDataText = this.autocomplete.noDataText || t.noDataText;
            this.newItemText = this.autocomplete.newItemText || t.newItemText;
            this.cdr.markForCheck();
        });
        this.observer
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.autocomplete.updatePosition());
    }
    _addOption(option, component) {
        this.autocompleteOptions.set(option, component);
    }
    _deleteOption(option) {
        this.autocompleteOptions.delete(option);
    }
    ngAfterContentChecked() {
        this.optionElements = [];
        for (let i = 0; i < this.autocompleteContainer?.nativeElement.children.length; i++) {
            const record = this.autocompleteOptions.get(this.autocompleteContainer.nativeElement.children.item(i));
            if (record) {
                this.optionElements.push(record);
            }
        }
    }
    onKeydown(event) {
        if (['Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {
            event.preventDefault();
            event.stopPropagation();
            if (event.key === 'Enter') {
                this.onEnter();
            }
            else if (event.key === 'ArrowUp') {
                this.onUpArrow();
            }
            else if (event.key === 'ArrowDown') {
                this.onDownArrow();
            }
        }
    }
    shouldShowCreateNewOption() {
        if (this.autocomplete.isInputFilled() &&
            typeof this.autocomplete.newItem === 'function') {
            const newItem = this.autocomplete.getNewItem();
            return !this.getSelectedFirstOptions().some((o) => this.autocomplete.compareItem(o, newItem));
        }
        else {
            return false;
        }
    }
    getSelectedFirstOptions() {
        return [...this.selectedOptions, ...this.availableOptions];
    }
    onDownArrow() {
        if (!this.keyboardFocusedItem) {
            this.selectFirstItem();
        }
        else {
            const index = this.optionElements.findIndex((e) => e === this.keyboardFocusedItem);
            const nextIndex = (index + 1) % this.optionElements.length;
            this.keyboardFocusedItem = this.optionElements[nextIndex];
        }
        this.scrollToSelectedItem();
        this.cdr.markForCheck();
    }
    onUpArrow() {
        if (!this.keyboardFocusedItem) {
            this.selectFirstItem();
        }
        else {
            const index = this.optionElements.findIndex((e) => e === this.keyboardFocusedItem);
            const nextIndex = index - 1 < 0 ? this.optionElements.length - 1 : index - 1;
            this.keyboardFocusedItem = this.optionElements[nextIndex];
        }
        this.scrollToSelectedItem();
        this.cdr.markForCheck();
    }
    onEnter() {
        if (this.optionElements) {
            const index = this.optionElements.findIndex((v) => v === this.keyboardFocusedItem);
            if (index >= 0) {
                for (const [element, option] of this.autocompleteOptions) {
                    if (this.optionElements[index] === option) {
                        element.dispatchEvent(new MouseEvent('click'));
                        break;
                    }
                }
            }
        }
    }
    scrollToSelectedItem() {
        let optionElement;
        for (const [element, option] of this.autocompleteOptions) {
            if (this.keyboardFocusedItem === option) {
                optionElement = element;
                break;
            }
        }
        if (this.keyboardFocusedItem) {
            const itemHeight = optionElement?.offsetHeight || 0;
            const scrollContainerHeight = this.autocompleteContainer.nativeElement.scrollHeight;
            const panelHeight = Math.min(scrollContainerHeight, this.config.optionsContainerMaxHeight);
            const divider = 2;
            const maxScroll = scrollContainerHeight - panelHeight;
            const scrollBuffer = panelHeight / divider;
            const optionOffsetFormScrollTop = this.optionElements.findIndex((el) => el === this.keyboardFocusedItem) *
                itemHeight;
            const halfOptionHeight = itemHeight / divider;
            const optimalScrollPosition = optionOffsetFormScrollTop - scrollBuffer + halfOptionHeight;
            this.autocompleteContainer.nativeElement.scrollTop = Math.min(Math.max(0, optimalScrollPosition), maxScroll);
        }
    }
    selectFirstItem() {
        if (this.optionElements[0]) {
            this.keyboardFocusedItem = this.optionElements[0];
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAutocompleteContainerComponent, isStandalone: true, selector: "rds-autocomplete-container", inputs: { size: "size", type: "type", options: "options" }, viewQueries: [{ propertyName: "autocompleteContainer", first: true, predicate: ["autocompleteContainer"], descendants: true }], ngImport: i0, template: `
    <div class="rds-autocomplete-container" #autocompleteContainer>
      @if (autocomplete.loading | async) {
        @if (autocomplete.loadingTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.loadingTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-loading"
            rds-list-item
            [size]="size"
            disabled
          >
            {{ autocomplete.loadingText || loadingText }}
          </button>
        }
      } @else {
        @for (option of selectedOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        @if (
          selectedOptions.length > 0 &&
          (availableOptions.length > 0 ||
            shouldShowCreateNewOption() ||
            (options.length === 0 && !shouldShowCreateNewOption()))
        ) {
          <div class="rds-autocomplete-separator"></div>
        }
        @if (shouldShowCreateNewOption()) {
          @if (autocomplete.newItemTemplate) {
            <ng-container
              [ngTemplateOutlet]="autocomplete.newItemTemplate"
              [ngTemplateOutletContext]="{
                $implicit: autocomplete,
                autocomplete,
                keyboardFocusedItem
              }"
            />
          } @else {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              class="rds-autocomplete-option-new-item"
              rds-list-item
              [size]="size"
              (click)="autocomplete.selectNewItem()"
            >
              <span class="rds-autocomplete-text">{{ newItemText }}</span>
              {{ autocomplete.getSearchQuery() }}
            </button>
          }
        }
        @for (option of availableOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        <ng-template #defaultOptionTemplate let-o="option">
          @if (type === 'single') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-single-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
          @if (type === 'multi') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-multi-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
        </ng-template>
      }
      @if (
        (autocomplete.loading | async) === false &&
        options.length === 0 &&
        !shouldShowCreateNewOption()
      ) {
        @if (autocomplete.noDataTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.noDataTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-option-no-data"
            rds-list-item
            [size]="size"
            disabled
          >
            <rds-icon namespace="outlined" icon="warning_circle" />
            {{ autocomplete.noDataText || noDataText }}
          </button>
        }
      }
    </div>
  `, isInline: true, styles: ["rds-autocomplete-container{width:100%;background:var(--rds-color-bg-base-1)}rds-autocomplete-container .rds-autocomplete-container{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;border-radius:2px;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1);display:flex;flex-direction:column;background-clip:padding-box;overflow-y:auto}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplete-highlight{font-weight:400;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse{font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse .rds-autocomplete-highlight{font-weight:200;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option.rds-autocomplete-option-new-item .rds-autocomplete-text{color:var(--rds-color-informative);font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-separator{border-bottom:1px solid var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: RdsListItemModule }, { kind: "component", type: i1.RdsListItemComponent, selector: "button[rds-list-item], button[rdsListItem]", inputs: ["size", "role", "disabled"] }, { kind: "component", type: i2.RdsMultiSelectListItemComponent, selector: "button[rds-multi-select-list-item], button[rdsMultiSelectListItem]" }, { kind: "component", type: i3.RdsSingleSelectListItemComponent, selector: "button[rds-single-select-list-item], button[rdsSingleSelectListItem]" }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "directive", type: RdsAutocompleteHighlightDirective, selector: "[rdsAutocomplateHighlight], [rds-autocomplate-highlight]", inputs: ["rdsAutocomplateHighlight", "rdsAutocomplateHighlightCaseSensitive", "rdsAutocomplateHighlightCustomClasses", "rdsAutocomplateHighlightInverse", "rdsAutocomplateHighlightDisabled"] }, { kind: "directive", type: RdsAutocompleteOptionDirective, selector: "rds-autocomplete-option, [rds-autocomplete-option], [rdsAutocompleteOption]", inputs: ["rdsAutocompleteOption", "keyboardFocusedItem"], exportAs: ["rdsAutocompleteOption"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-autocomplete-container', template: `
    <div class="rds-autocomplete-container" #autocompleteContainer>
      @if (autocomplete.loading | async) {
        @if (autocomplete.loadingTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.loadingTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-loading"
            rds-list-item
            [size]="size"
            disabled
          >
            {{ autocomplete.loadingText || loadingText }}
          </button>
        }
      } @else {
        @for (option of selectedOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        @if (
          selectedOptions.length > 0 &&
          (availableOptions.length > 0 ||
            shouldShowCreateNewOption() ||
            (options.length === 0 && !shouldShowCreateNewOption()))
        ) {
          <div class="rds-autocomplete-separator"></div>
        }
        @if (shouldShowCreateNewOption()) {
          @if (autocomplete.newItemTemplate) {
            <ng-container
              [ngTemplateOutlet]="autocomplete.newItemTemplate"
              [ngTemplateOutletContext]="{
                $implicit: autocomplete,
                autocomplete,
                keyboardFocusedItem
              }"
            />
          } @else {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              class="rds-autocomplete-option-new-item"
              rds-list-item
              [size]="size"
              (click)="autocomplete.selectNewItem()"
            >
              <span class="rds-autocomplete-text">{{ newItemText }}</span>
              {{ autocomplete.getSearchQuery() }}
            </button>
          }
        }
        @for (option of availableOptions; track trackBy($index, option)) {
          <ng-container
            [ngTemplateOutlet]="
              autocomplete.optionTemplate || defaultOptionTemplate
            "
            [ngTemplateOutletContext]="{
              option,
              keyboardFocusedItem,
              $implicit: autocomplete,
              autocomplete
            }"
          />
        }
        <ng-template #defaultOptionTemplate let-o="option">
          @if (type === 'single') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-single-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
          @if (type === 'multi') {
            <button
              [rdsAutocompleteOption]="autocomplete"
              [keyboardFocusedItem]="keyboardFocusedItem"
              #option="rdsAutocompleteOption"
              rds-multi-select-list-item
              [size]="size"
              [checked]="autocomplete.isSelected(o)"
              (click)="autocomplete.toggle(o)"
            >
              <span
                [innerHTML]="autocomplete.getDisplayProperty(o)"
                [rdsAutocomplateHighlight]="autocomplete.getSearchQuery()"
                [rdsAutocomplateHighlightDisabled]="
                  autocomplete.highlightQuery === false
                "
                [rdsAutocomplateHighlightInverse]="
                  autocomplete.highlightQuery === 'inverse'
                "
              ></span>
            </button>
          }
        </ng-template>
      }
      @if (
        (autocomplete.loading | async) === false &&
        options.length === 0 &&
        !shouldShowCreateNewOption()
      ) {
        @if (autocomplete.noDataTemplate) {
          <ng-container
            [ngTemplateOutlet]="autocomplete.noDataTemplate"
            [ngTemplateOutletContext]="{
              $implicit: autocomplete,
              autocomplete
            }"
          />
        } @else {
          <button
            class="rds-autocomplete-option-no-data"
            rds-list-item
            [size]="size"
            disabled
          >
            <rds-icon namespace="outlined" icon="warning_circle" />
            {{ autocomplete.noDataText || noDataText }}
          </button>
        }
      }
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [
                        AsyncPipe,
                        RdsListItemModule,
                        NgTemplateOutlet,
                        RdsIconComponent,
                        RdsAutocompleteHighlightDirective,
                        RdsAutocompleteOptionDirective,
                    ], styles: ["rds-autocomplete-container{width:100%;background:var(--rds-color-bg-base-1)}rds-autocomplete-container .rds-autocomplete-container{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;border-radius:2px;max-height:256px;padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-1);display:flex;flex-direction:column;background-clip:padding-box;overflow-y:auto}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplete-highlight{font-weight:400;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse{font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option .rds-autocomplate-highlight-inverse .rds-autocomplete-highlight{font-weight:200;color:inherit;background:inherit}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-option.rds-autocomplete-option-new-item .rds-autocomplete-text{color:var(--rds-color-informative);font-weight:400}rds-autocomplete-container .rds-autocomplete-container .rds-autocomplete-separator{border-bottom:1px solid var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}\n"] }]
        }], propDecorators: { size: [{
                type: Input
            }], type: [{
                type: Input,
                args: [{ required: true }]
            }], options: [{
                type: Input
            }], autocompleteContainer: [{
                type: ViewChild,
                args: ['autocompleteContainer']
            }] } });
//# sourceMappingURL=data:application/json;base64,