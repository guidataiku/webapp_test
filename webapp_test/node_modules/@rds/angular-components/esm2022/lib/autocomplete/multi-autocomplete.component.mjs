import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, HostListener, inject, Input, numberAttribute, QueryList, Renderer2, ViewChild, ViewChildren, } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { RdsAbstractFormFieldControl } from '../form-field';
import { RdsProgressSpinnerModule } from '../progress-spinner';
import { RdsIconComponent } from '../icons';
import { RdsButtonModule } from '../button';
import { RdsAbstractAutocompleteComponent } from './abstract-autocomplete.component';
import { map, startWith, switchMap } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { RdsChipComponent, RdsChipsModule } from '../chips';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { merge } from 'rxjs';
import { hasModifierKey } from '@angular/cdk/keycodes';
import * as i0 from "@angular/core";
import * as i1 from "../progress-spinner/progress-spinner.component";
import * as i2 from "../button/icon-button.component";
import * as i3 from "../chips/chip/chip.component";
export class RdsMultiAutocompleteComponent extends RdsAbstractAutocompleteComponent {
    constructor() {
        super(...arguments);
        this.renderer = inject(Renderer2);
        this.elementRef = inject(ElementRef);
        this.dir = inject(Directionality, { optional: true });
        this._value = [];
        this.controlType = 'autocomplete-multi';
        this._multiMinimumInputWidth = this.config.multiMinimumInputWidth;
        this._multiMinimumInputWidthOffset = this.config.multiMinimumInputWidthOffset;
        this.focusedChip = null;
        this.disallowFocusEscape = true;
        this.chipActions = new QueryList();
        this._lastDestroyedFocusedChipIndex = null;
    }
    set multiMinimumInputWidth(width) {
        this._multiMinimumInputWidth = numberAttribute(width, this.config.multiMinimumInputWidth);
    }
    get multiMinimumInputWidth() {
        return this._multiMinimumInputWidth;
    }
    set multiMinimumInputWidthOffset(width) {
        this._multiMinimumInputWidthOffset = numberAttribute(width, this.config.multiMinimumInputWidthOffset);
    }
    get multiMinimumInputWidthOffset() {
        return this._multiMinimumInputWidthOffset;
    }
    set disabled(disabled) {
        super.disabled = disabled;
        this.syncChipsState();
    }
    get disabled() {
        return super.disabled;
    }
    trackByFn(o) {
        if (!this.trackBy) {
            return o;
        }
        if (typeof this.trackBy === 'function') {
            return this.trackBy(o);
        }
        return o[this.trackBy];
    }
    ngAfterViewInit() {
        this.valueContainer.changes
            .pipe(startWith(this.valueContainer), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.recalculateInputWidth());
        this.setUpFocusManagement();
        this.trackChipSetChanges();
        this.trackDestroyedFocusedChip();
    }
    handleKeydown(event) {
        if (this.originatesFromChip(event)) {
            this.keyManager.onKeydown(event);
        }
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.keyManager?.destroy();
        this.chipActions.destroy();
    }
    set value(value) {
        const oldValue = this.value;
        this._value = value || [];
        if (this.hasAtLeastOneDifferentItem(oldValue, this._value)) {
            this.recalculateInputWidth();
            this.cdr.markForCheck();
        }
    }
    get value() {
        return this._value;
    }
    get values() {
        return this.value || [];
    }
    setValueForClear() {
        this._options = [];
        this.value = [];
        this.updateDropdownOptions();
    }
    onInputKeydown(event) {
        if (this.values.length > 0 &&
            this.getInputFilledValue().length === 0 &&
            event.key === 'Backspace' &&
            !hasModifierKey(event, 'altKey', 'shiftKey', 'ctrlKey', 'metaKey')) {
            this.deselect(this.values[this.value.length - 1]);
        }
        super.onInputKeydown(event);
    }
    select(option) {
        if (!this.disabled && !this.isSelected(option)) {
            const newValue = this._options.filter((o) => this.isSelected(o) || this.compareItem(o, option));
            this.value = [
                ...this.value.filter((o) => !newValue.some((n) => this.compareItem(n, o))),
                ...newValue,
            ];
            this.updateDropdownOptions();
            this.inputEl.nativeElement.value = '';
            this.stateChanges.emit();
        }
    }
    deselect(option) {
        if (!this.disabled && (!option || this.isSelected(option))) {
            if (option) {
                this.value = this.value.filter((o) => !this.compareItem(o, option));
                if (option) {
                    this._options = this._options.filter((o) => !this._newValues.some((newOpt) => this.compareItem(o, newOpt)));
                    this._newValues = this._newValues.filter((v) => !this.compareItem(v, option));
                    this._options = [...this._options, ...this._newValues];
                }
                this.updateDropdownOptions();
            }
            else {
                this.clear();
            }
            this.focusedChip = null;
            this.onValueChange();
        }
    }
    isInputFilled() {
        return this.inputEl?.nativeElement.value.length > 0 || false;
    }
    hide() {
        super.hide();
        if (this.inputEl.nativeElement.value.length === 0) {
            this._search$.next('');
            this._options = [];
        }
    }
    chipFocus(chip) {
        const index = this.chips
            .map((c) => c.getActions())
            .reduce((p, c) => [...p, ...c], [])
            .findIndex((a) => a === chip.getActions()[0]);
        this.keyManager.setActiveItem(index);
    }
    assignInputsToDropdown() {
        this._dropdownInstance.instance.type = 'multi';
        super.assignInputsToDropdown();
    }
    showCaret() {
        return (this.getPlaceholder().trim() === '' &&
            this.inputEl.nativeElement.value.trim() === '' &&
            this.values.length > 0);
    }
    recalculateInputWidth() {
        if (this.autocompleteMulti &&
            this.inputEl &&
            this.valueContainer &&
            this.valueContainer.last &&
            this.inputContainer) {
            const availableWidth = this.autocompleteMulti.nativeElement.getBoundingClientRect().x +
                this.autocompleteMulti.nativeElement.getBoundingClientRect().width -
                this.valueContainer.last.nativeElement.getBoundingClientRect().x -
                this.valueContainer.last.nativeElement.getBoundingClientRect().width -
                this.multiMinimumInputWidthOffset;
            if (availableWidth > this.multiMinimumInputWidth) {
                this.renderer.setStyle(this.inputContainer.nativeElement, 'width', `${availableWidth}px`);
            }
            else {
                this.renderer.setStyle(this.inputContainer.nativeElement, 'width', '100%');
            }
        }
        else if (this.inputContainer) {
            this.renderer.setStyle(this.inputContainer.nativeElement, 'width', '100%');
        }
    }
    originatesFromChip(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this.elementRef.nativeElement) {
            if (currentElement.classList.contains('rds-chips__chip')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    setUpFocusManagement() {
        // Create a flat `QueryList` containing the actions of all the chips.
        // This allows us to navigate both within the chip and move to the next/previous
        // one using the existing `ListKeyManager`.
        this.chips.changes
            .pipe(startWith(this.chips))
            .subscribe((chips) => {
            const actions = chips
                .map((c) => c.getActions())
                .reduce((p, c) => [...p, ...c], []);
            this.chipActions.reset(actions);
            this.chipActions.notifyOnChanges();
        });
        this.keyManager = new FocusKeyManager(this.chipActions)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr')
            .withHomeAndEnd()
            .skipPredicate((action) => action.disabled);
        this.keyManager.tabOut.subscribe(() => {
            this.disallowFocusEscape = false;
            this.cdr.markForCheck();
            setTimeout(() => {
                this.disallowFocusEscape = true;
                this.cdr.markForCheck();
            });
        });
        // Keep the manager active index in sync so that navigation picks
        // up from the current chip if the user clicks into the list directly.
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$))), takeUntilDestroyed(this.destroyRef))
            .subscribe(({ source: chip }) => {
            const action = chip.getSourceAction(document.activeElement);
            if (action) {
                this.keyManager.updateActiveItem(action);
            }
        });
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.focus$.pipe(map((e) => ({ focused: true, source: e.source })))), ...this.chips.map((c) => c.blur$.pipe(map((e) => ({ focused: false, source: e.source })))))))
            .subscribe((chip) => {
            if (chip.focused) {
                this.focusedChip = chip.source;
            }
            else if (this.focusedChip === chip.source) {
                this.focusedChip = null;
            }
            this.cdr.markForCheck();
        });
        this.dir?.change
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((direction) => this.keyManager.withHorizontalOrientation(direction));
    }
    trackDestroyedFocusedChip() {
        this.chips.changes
            .pipe(startWith(null), switchMap(() => merge(...this.chips.map((c) => c.destroyed))), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            const chipArray = this.chips.toArray();
            const chipIndex = chipArray.indexOf(event.source);
            // If the focused chip is destroyed, save its index so that we can move focus to the next
            // chip. We only save the index here, rather than move the focus immediately, because we want
            // to wait until the chip is removed from the chip list before focusing the next one. This
            // allows us to keep focus on the same index if the chip gets swapped out.
            if (this.isValidIndex(chipIndex) && event.source.hasFocus()) {
                this._lastDestroyedFocusedChipIndex = chipIndex;
            }
        });
    }
    isValidIndex(index) {
        return index >= 0 && index < this.chips.length;
    }
    trackChipSetChanges() {
        this.chips.changes
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => this.syncChipsState());
            }
            this._redirectDestroyedChipFocus();
        });
    }
    syncChipsState() {
        if (this.chips) {
            this.chips.forEach((chip) => {
                chip.disabled = this.disabled;
                chip.cdr.markForCheck();
            });
        }
    }
    _redirectDestroyedChipFocus() {
        if (this._lastDestroyedFocusedChipIndex == null) {
            return;
        }
        if (this.chips.length) {
            const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this.chips.length - 1);
            const chipToFocus = this.chips.toArray()[newIndex];
            if (chipToFocus.disabled) {
                // If we're down to one disabled chip, move focus back to the set.
                if (this.chips.length === 1) {
                    this.focus();
                }
                else {
                    this.keyManager.setPreviousItemActive();
                }
            }
            else {
                chipToFocus.focus();
            }
        }
        else {
            Promise.resolve().then(() => this.focus());
        }
        this._lastDestroyedFocusedChipIndex = null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiAutocompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMultiAutocompleteComponent, isStandalone: true, selector: "rds-multi-autocomplete", inputs: { multiMinimumInputWidth: "multiMinimumInputWidth", multiMinimumInputWidthOffset: "multiMinimumInputWidthOffset", disabled: "disabled", trackBy: "trackBy" }, host: { listeners: { "keydown": "handleKeydown($event)" } }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: forwardRef(() => RdsMultiAutocompleteComponent),
            },
        ], viewQueries: [{ propertyName: "autocompleteMulti", first: true, predicate: ["autocompleteMulti"], descendants: true, read: ElementRef }, { propertyName: "valueContainer", predicate: ["valueContainer"], descendants: true, read: ElementRef }, { propertyName: "chips", predicate: RdsChipComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-multi"
      #autocomplate
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-floating-label]="
        formField.labelPosition === 'floating'
      "
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div #autocompleteMulti class="rds-autocomplete-multi-container">
        @for (o of values; track trackByFn(o)) {
          <rds-chip
            #valueContainer
            size="s"
            closable
            [tabindex]="
              (!focusedChip || focusedChip === valueContainer) &&
              disallowFocusEscape
                ? 0
                : -1
            "
            (focus)="chipFocus(valueContainer)"
            (closeChip)="deselect(o)"
            >{{ getDisplayProperty(o) }}
          </rds-chip>
        }
        <div
          class="rds-autocomplete-input-container"
          #inputContainer
          [class.rds-form-field__control-show-caret]="showCaret()"
          [class.rds-form-field__control-disabled]="ngControl?.disabled"
          [class.rds-form-field__control-focused]="_focused"
        >
          <input
            [placeholder]="getPlaceholder()"
            [disabled]="attrDisabled"
            [attr.aria-invalid]="errorState"
            [attr.aria-describedby]="inputAriaDescribedBy"
            autocomplete="off"
            class="rds-form-field__control"
            #inputEl
            (keydown.shift.tab)="addNewItemOnBlurAndHide()"
            (keydown.tab)="addNewItemOnBlurAndHide()"
            (blur)="focusChanged(false)"
            (focus)="focusChanged(true)"
            (input)="search()"
            (keydown)="onInputKeydown($event)"
          />
        </div>
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            [disabled]="ngControl?.disabled"
            (click)="clearValue($event)"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, isInline: true, styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: RdsProgressSpinnerModule }, { kind: "component", type: i1.RdsProgressSpinnerComponent, selector: "rds-progress-spinner", inputs: ["value", "minValue", "maxValue", "mode", "size", "label", "white"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: i2.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "ngmodule", type: RdsChipsModule }, { kind: "component", type: i3.RdsChipComponent, selector: "rds-chip, button[rds-chip], button[rdsChip]", inputs: ["ariaLabelCloseButton", "size", "type", "role", "disabled", "closable", "value"], outputs: ["closeChip", "destroyed"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-multi-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-multi"
      #autocomplate
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-floating-label]="
        formField.labelPosition === 'floating'
      "
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div #autocompleteMulti class="rds-autocomplete-multi-container">
        @for (o of values; track trackByFn(o)) {
          <rds-chip
            #valueContainer
            size="s"
            closable
            [tabindex]="
              (!focusedChip || focusedChip === valueContainer) &&
              disallowFocusEscape
                ? 0
                : -1
            "
            (focus)="chipFocus(valueContainer)"
            (closeChip)="deselect(o)"
            >{{ getDisplayProperty(o) }}
          </rds-chip>
        }
        <div
          class="rds-autocomplete-input-container"
          #inputContainer
          [class.rds-form-field__control-show-caret]="showCaret()"
          [class.rds-form-field__control-disabled]="ngControl?.disabled"
          [class.rds-form-field__control-focused]="_focused"
        >
          <input
            [placeholder]="getPlaceholder()"
            [disabled]="attrDisabled"
            [attr.aria-invalid]="errorState"
            [attr.aria-describedby]="inputAriaDescribedBy"
            autocomplete="off"
            class="rds-form-field__control"
            #inputEl
            (keydown.shift.tab)="addNewItemOnBlurAndHide()"
            (keydown.tab)="addNewItemOnBlurAndHide()"
            (blur)="focusChanged(false)"
            (focus)="focusChanged(true)"
            (input)="search()"
            (keydown)="onInputKeydown($event)"
          />
        </div>
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            [disabled]="ngControl?.disabled"
            (click)="clearValue($event)"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: forwardRef(() => RdsMultiAutocompleteComponent),
                        },
                    ], standalone: true, imports: [
                        AsyncPipe,
                        RdsProgressSpinnerModule,
                        RdsIconComponent,
                        RdsButtonModule,
                        RdsChipsModule,
                    ], styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"] }]
        }], propDecorators: { multiMinimumInputWidth: [{
                type: Input
            }], multiMinimumInputWidthOffset: [{
                type: Input
            }], disabled: [{
                type: Input
            }], trackBy: [{
                type: Input
            }], valueContainer: [{
                type: ViewChildren,
                args: ['valueContainer', { read: ElementRef }]
            }], autocompleteMulti: [{
                type: ViewChild,
                args: ['autocompleteMulti', { read: ElementRef }]
            }], chips: [{
                type: ViewChildren,
                args: [RdsChipComponent]
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,