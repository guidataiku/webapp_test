import { booleanAttribute, ChangeDetectorRef, DestroyRef, Directive, ElementRef, EventEmitter, HostBinding, inject, Input, isDevMode, numberAttribute, Output, TemplateRef, ViewChild, } from '@angular/core';
import { Overlay, ScrollStrategyOptions, } from '@angular/cdk/overlay';
import { ComponentPortal } from '@angular/cdk/portal';
import { RdsAutocompleteContainerComponent } from './autocomplete-container.component';
import { BehaviorSubject, distinctUntilChanged, merge, noop, skip, Subject, } from 'rxjs';
import { debounceTime, filter, tap } from 'rxjs/operators';
import { hasModifierKey } from '@angular/cdk/keycodes';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { RDS_AUTOCOMPLETE_CONFIG, RDS_AUTOCOMPLETE_DEFAULT_CONFIG, } from './autocomplete.config';
import { RdsAutocompleteIntl } from './autocomplete-intl.service';
import { RDS_FORM_FIELD, RdsAbstractFormFieldControl } from '../form-field';
import { updateErrorState } from '../utils';
import * as i0 from "@angular/core";
export class RdsAbstractAutocompleteComponent extends RdsAbstractFormFieldControl {
    get attrDisabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled ? this.ngControl.disabled : null;
        }
        return this._disabled ? this._disabled : null;
    }
    set disabled(disabled) {
        this._disabled = booleanAttribute(disabled);
        if (this._focused) {
            this._focused = false;
            this.stateChanges.next();
        }
    }
    get disabled() {
        return this.attrDisabled || false;
    }
    set debounce(debounce) {
        this._debounce = numberAttribute(debounce, this.config.debounce);
    }
    get debounce() {
        return this._debounce;
    }
    set minSearchChars(minSearchChars) {
        this._minSearchChars = numberAttribute(minSearchChars, this.config.minSearchChars);
    }
    get minSearchChars() {
        return this._minSearchChars;
    }
    get empty() {
        return (this.values.length === 0 &&
            !this.inputEl.nativeElement.value &&
            !this.isNativelyBadInput());
    }
    get shouldLabelFloat() {
        return this._focused || !this.empty;
    }
    get errorState() {
        return this._errorState;
    }
    get inputAriaDescribedBy() {
        return this._inputAriaDescribedby;
    }
    set inputAriaDescribedBy(newValue) {
        this._inputAriaDescribedby = newValue;
    }
    constructor() {
        super();
        this.cdr = inject(ChangeDetectorRef);
        this.overlay = inject(Overlay);
        this.destroyRef = inject(DestroyRef);
        this.config = {
            ...RDS_AUTOCOMPLETE_DEFAULT_CONFIG,
            ...inject(RDS_AUTOCOMPLETE_CONFIG, { optional: true }),
        };
        this.intl = inject(RdsAutocompleteIntl);
        this.formField = inject(RDS_FORM_FIELD);
        this.scrollStrategyOptions = inject(ScrollStrategyOptions);
        this.compareItem = (i1, i2) => this.getUniqProperty(i1) === this.getUniqProperty(i2);
        this.highlightQuery = false;
        this.selectNewItemOnBlur = false;
        this.selectLastRemainingOnBlur = false;
        this._debounce = this.config.debounce;
        this._minSearchChars = this.config.minSearchChars;
        this.hostClass = 'w-100';
        this.controlType = 'autocomplete';
        this.typing$ = new BehaviorSubject(false);
        this.openChanged = new EventEmitter();
        this.shown = new EventEmitter();
        this.hidden = new EventEmitter();
        this.typing = this.typing$.pipe(distinctUntilChanged());
        this.loading = new BehaviorSubject(false);
        this.onChange = noop;
        this.onTouched = noop;
        this._newValues = [];
        this._open = false;
        this._overlayRef = null;
        this._options = [];
        this._onFocusInputValue = '';
        this._search$ = new BehaviorSubject('');
        this._lastValues = [];
        this._closed$ = new Subject();
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        merge(this.intl.change$, this.stateChanges)
            .pipe(takeUntilDestroyed())
            .subscribe(() => this.cdr.markForCheck());
        this.typing$
            .pipe(takeUntilDestroyed())
            .subscribe(() => this.onValueChange());
    }
    ngOnInit() {
        this.updateSearch();
    }
    ngOnChanges(changes) {
        if (this.disabled) {
            this.hide();
        }
        if (this._dropdownInstance &&
            (changes['displayProperty'] ||
                changes['loadingText'] ||
                changes['noDataText'])) {
            this.assignInputsToDropdown();
        }
        if (changes['debounce']) {
            this.updateSearch();
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            const oldState = this._errorState;
            this._errorState =
                !this.typing$.getValue() &&
                    !this._open &&
                    updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl.control);
            if (oldState !== this._errorState) {
                this.stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.detach();
        }
        this._search$.complete();
        this._closed$.next();
        this._closed$.complete();
    }
    focusChanged(isFocused) {
        this.typing$.next(isFocused);
        if (isFocused !== this.focused &&
            (!this.inputEl.nativeElement.readOnly || !isFocused)) {
            this._focused = isFocused;
            this.stateChanges.next();
            this.inputEl.nativeElement.selectionStart =
                this.inputEl.nativeElement.value.length;
        }
        if (!isFocused) {
            this.onTouched();
            if ((!Array.isArray(this.value) && !this.value) ||
                Array.isArray(this.value)) {
                this.onValueChange(this._onFocusInputValue !== this.inputEl.nativeElement.value);
            }
        }
        else {
            this._onFocusInputValue = this.inputEl.nativeElement.value;
            this.show();
        }
    }
    show() {
        if (!this.disabled &&
            !this._open &&
            this.inputEl.nativeElement.value.length >= this.minSearchChars) {
            this._open = true;
            if (this._options.length === 0 && this.minSearchChars === 0) {
                this.searchFn(this._search$.getValue());
            }
            if (!this._overlayRef) {
                this._overlayRef = this.overlay.create({
                    hasBackdrop: true,
                    backdropClass: 'transparent',
                    positionStrategy: this.getPositionStrategy(),
                    scrollStrategy: this.scrollStrategyOptions.block(),
                    minWidth: Math.max(this.config.optionsContainerMinWidth, this._trigger.nativeElement.getBoundingClientRect().width),
                });
                this._overlayRef
                    .backdropClick()
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe(() => this.addNewItemOnBlurAndHide());
                this._portal = new ComponentPortal(RdsAutocompleteContainerComponent, null);
            }
            this._dropdownInstance = this._overlayRef.attach(this._portal);
            this.assignInputsToDropdown();
            this.openChanged.emit(true);
            this.shown.emit();
            this.inputEl.nativeElement.focus();
        }
    }
    hide() {
        if (this._open) {
            this._open = false;
            if (this._overlayRef) {
                this._overlayRef.detach();
            }
            this.onTouched();
            this._closed$.next();
            this.openChanged.emit(false);
            this.hidden.emit();
            this.cdr.markForCheck();
        }
    }
    hasValue() {
        return this.values.length > 0;
    }
    isSelected(option) {
        return this.values.some((o) => this.compareItem(option, o));
    }
    clear() {
        if (!this.disabled) {
            const beforeValue = this.inputEl.nativeElement.value;
            this.setValueForClear();
            this.inputEl.nativeElement.value = '';
            this.onValueChange(beforeValue !== '');
            this._newValues = [];
            this._options = [];
            this.inputEl.nativeElement.focus();
            this.updateDropdownOptions();
        }
    }
    selectNewItem() {
        if (typeof this.newItem === 'function') {
            const newItem = this.getNewItem();
            if (newItem) {
                this._options = this._options.filter((o) => !this._newValues.some((newOpt) => this.compareItem(o, newOpt)));
                this._newValues = [
                    ...this._newValues.filter((v) => !this.compareItem(v, newItem)),
                    newItem,
                ];
                this._options = [...this._options, ...this._newValues];
                this.select(newItem);
            }
        }
        else if (isDevMode()) {
            throw new Error(`Adding new item requires defined newItem as function for autocomplete.`);
        }
    }
    getNewItem() {
        return typeof this.newItem === 'function'
            ? this.newItem(this.inputEl.nativeElement.value, this._options)
            : null;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.cdr.markForCheck();
    }
    writeValue(v) {
        this.value = v;
    }
    getInputFilledValue() {
        return this.inputEl.nativeElement.value;
    }
    getDisplayProperty(v) {
        if (!v) {
            return '';
        }
        else if (this.displayProperty) {
            if (typeof this.displayProperty === 'function') {
                return this.displayProperty(v);
            }
            else {
                return String(v[this.displayProperty]);
            }
        }
        else {
            return String(v);
        }
    }
    getUniqProperty(v) {
        if (!v) {
            return '';
        }
        else if (this.uniqProperty) {
            if (typeof this.uniqProperty === 'function') {
                return this.uniqProperty(v);
            }
            else {
                return String(v[this.uniqProperty]);
            }
        }
        else {
            return this.getDisplayProperty(v);
        }
    }
    onContainerClick() {
        if (!this._focused) {
            this.focus();
            if (Array.isArray(this.options) &&
                this.debounce === 0 &&
                this.minSearchChars === 0) {
                this.show();
            }
        }
    }
    setDescribedByIds(ids) {
        this.inputAriaDescribedBy = ids.join(' ');
    }
    getSearchQuery() {
        return this._search$.getValue();
    }
    updatePosition() {
        this._overlayRef?.updatePosition();
    }
    clearValue(event) {
        if (event) {
            event.stopPropagation();
        }
        this.clear();
    }
    toggle(option) {
        if (this.isSelected(option)) {
            this.deselect(option);
        }
        else {
            this.select(option);
        }
    }
    get required() {
        if (this.ngControl &&
            this.ngControl.control &&
            this.ngControl.control.validator) {
            const validators = this.ngControl.control.validator({});
            if (validators && validators['required']) {
                return true;
            }
        }
        return super.required;
    }
    _addOption(option, component) {
        this._dropdownInstance?.instance._addOption(option, component);
    }
    _deleteOption(option) {
        this._dropdownInstance?.instance._deleteOption(option);
    }
    onValueChange(force = false) {
        if (force ||
            this.hasAtLeastOneDifferentItem(this.values, this._lastValues)) {
            this._lastValues = [...this.values];
            this.onChange(this.value);
        }
    }
    addNewItemOnBlurAndHide() {
        this.addNewItemOnBlur();
        this.hide();
    }
    addNewItemOnBlur(query = this.inputEl.nativeElement.value) {
        if (this.selectLastRemainingOnBlur && this._options.length === 1) {
            this.select(this._options[0]);
        }
        else if (this.selectNewItemOnBlur && typeof this.newItem === 'function') {
            const newVal = this.newItem(query, this._options);
            if (newVal && this._options.every((o) => !this.compareItem(o, newVal))) {
                this._options = this._options.filter((o) => !this._newValues.some((newOpt) => this.compareItem(o, newOpt)));
                this._newValues = [
                    ...this._newValues.filter((v) => !this.compareItem(v, newVal)),
                    newVal,
                ];
                this._options = [...this._options, ...this._newValues];
                this.updateDropdownOptions();
                this.select(newVal);
            }
        }
        this.onTouched();
        this.typing$.next(false);
    }
    getPlaceholder() {
        if (!this._focused &&
            this.formField.labelPosition === 'floating' &&
            this.values.length === 0) {
            return '';
        }
        else if (typeof this.placeholder === 'string') {
            return this.placeholder;
        }
        else {
            return RdsAutocompleteIntl.translations.placeholder;
        }
    }
    search(query = this.inputEl.nativeElement.value) {
        if (typeof this.skipSearchValue === 'function' &&
            this.skipSearchValue(query)) {
            return;
        }
        this._search$.next(query);
    }
    onInputKeydown(event) {
        if (!hasModifierKey(event, 'altKey', 'shiftKey', 'ctrlKey', 'metaKey')) {
            if (!this._open && event.key === 'Enter') {
                this.show();
            }
            else if (this._open && event.key === 'Escape') {
                this.hide();
            }
            this._dropdownInstance?.instance.onKeydown(event);
        }
    }
    _filterBy(item, query) {
        return typeof this.filterBy === 'function'
            ? this.filterBy(item, query)
            : this.getDisplayProperty(item).includes(query);
    }
    searchFn(query) {
        if (this.inputEl.nativeElement.value.length >= this.minSearchChars) {
            if (this._focused) {
                this.show();
            }
            this.loading.next(true);
            if (typeof this.options === 'function') {
                this.options(query)
                    .pipe(takeUntilDestroyed(this.destroyRef))
                    .subscribe((options) => {
                    this._options = [
                        ...options,
                        ...this.getNewNotQueriedSelectedValues(options),
                    ];
                    this.updateDropdownOptions();
                });
            }
            else {
                this._options = [
                    ...this.options,
                    ...this.getNewNotQueriedSelectedValues(this.options),
                ].filter((v) => this._filterBy(v, query));
                this.updateDropdownOptions();
                this.loading.next(false);
            }
        }
        else {
            this.loading.next(false);
            this.hide();
        }
    }
    getNewNotQueriedSelectedValues(options) {
        return this.values
            .filter((o) => this._newValues.some((newOpt) => this.compareItem(o, newOpt)))
            .filter((o) => !options.some((q) => this.compareItem(q, o)));
    }
    updateDropdownOptions() {
        if (this._dropdownInstance) {
            this._dropdownInstance.instance.options = this._options;
            this._dropdownInstance.changeDetectorRef.markForCheck();
            this.loading.next(false);
        }
    }
    getPositionStrategy() {
        return this.overlay
            .position()
            .flexibleConnectedTo(this._origin.elementRef)
            .withPositions([this.getPositions()]);
    }
    getPositions() {
        return {
            originX: 'start',
            originY: 'bottom',
            overlayX: 'start',
            overlayY: 'top',
            offsetX: 0,
            offsetY: 0,
        };
    }
    assignInputsToDropdown() {
        this._dropdownInstance.instance.autocomplete = this;
        this._dropdownInstance.instance.size = this.formField.size;
        this._dropdownInstance.instance.options = this._options;
        this._dropdownInstance.changeDetectorRef.markForCheck();
    }
    updateSearch() {
        if (this._search$) {
            this._search$.complete();
        }
        const searchQuery = Array.isArray(this.value)
            ? ''
            : this.getDisplayProperty(this.values[0]);
        this._search$ = new BehaviorSubject(searchQuery);
        this._search$
            .pipe(skip(1), distinctUntilChanged(), filter((query) => this.inputEl.nativeElement.value === query), tap(() => {
            if (this._focused) {
                this.show();
            }
            if (this._dropdownInstance &&
                this.debounce !== 0 &&
                this.inputEl.nativeElement.value.length >= this.minSearchChars) {
                this.loading.next(true);
            }
            if (this.debounce !== 0 &&
                this.inputEl.nativeElement.value.length < this.minSearchChars &&
                this.loading.getValue()) {
                this.loading.next(false);
            }
        }), debounceTime(this.debounce), takeUntilDestroyed(this.destroyRef))
            .subscribe((q) => this.searchFn(q));
    }
    isNativelyBadInput() {
        return (this.inputEl.nativeElement.validity &&
            this.inputEl.nativeElement.validity.badInput);
    }
    hasAtLeastOneDifferentItem(arrayA, arrayB) {
        if (arrayA.length === 0 && arrayB.length === 0) {
            return false;
        }
        else if (arrayA.length !== arrayB.length) {
            return true;
        }
        return (arrayA.some((o) => !arrayB.some((op) => this.compareItem(o, op))) ||
            arrayB.some((o) => !arrayA.some((op) => this.compareItem(o, op))));
    }
    focus(options) {
        this.inputEl.nativeElement.focus(options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractAutocompleteComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAbstractAutocompleteComponent, inputs: { options: "options", displayProperty: "displayProperty", uniqProperty: "uniqProperty", compareItem: "compareItem", filterBy: "filterBy", highlightQuery: "highlightQuery", newItem: "newItem", selectNewItemOnBlur: ["selectNewItemOnBlur", "selectNewItemOnBlur", booleanAttribute], selectLastRemainingOnBlur: ["selectLastRemainingOnBlur", "selectLastRemainingOnBlur", booleanAttribute], skipSearchValue: "skipSearchValue", placeholder: "placeholder", loadingText: "loadingText", noDataText: "noDataText", newItemText: "newItemText", optionTemplate: "optionTemplate", noDataTemplate: "noDataTemplate", loadingTemplate: "loadingTemplate", newItemTemplate: "newItemTemplate", disabled: "disabled", debounce: "debounce", minSearchChars: "minSearchChars" }, outputs: { openChanged: "openChanged", shown: "shown", hidden: "hidden", typing: "typing", loading: "loading" }, host: { properties: { "attr.disabled": "this.attrDisabled", "class": "this.hostClass" } }, viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["inputEl"], descendants: true, static: true }, { propertyName: "inputContainer", first: true, predicate: ["inputContainer"], descendants: true, static: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractAutocompleteComponent, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { options: [{
                type: Input,
                args: [{ required: true }]
            }], displayProperty: [{
                type: Input
            }], uniqProperty: [{
                type: Input
            }], compareItem: [{
                type: Input
            }], filterBy: [{
                type: Input
            }], highlightQuery: [{
                type: Input
            }], newItem: [{
                type: Input
            }], selectNewItemOnBlur: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selectLastRemainingOnBlur: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], skipSearchValue: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], loadingText: [{
                type: Input
            }], noDataText: [{
                type: Input
            }], newItemText: [{
                type: Input
            }], optionTemplate: [{
                type: Input
            }], noDataTemplate: [{
                type: Input
            }], loadingTemplate: [{
                type: Input
            }], newItemTemplate: [{
                type: Input
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], disabled: [{
                type: Input
            }], debounce: [{
                type: Input
            }], minSearchChars: [{
                type: Input
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], openChanged: [{
                type: Output
            }], shown: [{
                type: Output
            }], hidden: [{
                type: Output
            }], typing: [{
                type: Output
            }], loading: [{
                type: Output
            }], inputEl: [{
                type: ViewChild,
                args: ['inputEl', { static: true }]
            }], inputContainer: [{
                type: ViewChild,
                args: ['inputContainer', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,