import { ChangeDetectionStrategy, Component, forwardRef } from '@angular/core';
import { AsyncPipe } from '@angular/common';
import { RdsAbstractFormFieldControl } from '../form-field';
import { RdsProgressSpinnerModule } from '../progress-spinner';
import { RdsIconComponent } from '../icons';
import { RdsButtonModule } from '../button';
import { RdsAbstractAutocompleteComponent } from './abstract-autocomplete.component';
import * as i0 from "@angular/core";
import * as i1 from "../progress-spinner/progress-spinner.component";
import * as i2 from "../button/icon-button.component";
export class RdsAutocompleteComponent extends RdsAbstractAutocompleteComponent {
    set value(value) {
        const oldValue = this.value;
        this._value = value;
        if (!this.compareItem(oldValue, this.value)) {
            this.inputEl.nativeElement.value = this.getDisplayProperty(this.value);
            this.cdr.markForCheck();
        }
    }
    get value() {
        return this._value;
    }
    isInputFilled() {
        return this.value &&
            this.getDisplayProperty(this.value) === this.inputEl?.nativeElement.value
            ? false
            : this.inputEl?.nativeElement.value.length > 0 || false;
    }
    setValueForClear() {
        this.value = null;
    }
    focusChanged(isFocused) {
        if (!isFocused && this.values.length === 1) {
            super.focusChanged(isFocused);
            if (this._search$.getValue() !== '') {
                this._search$.next('');
            }
        }
        else {
            super.focusChanged(isFocused);
        }
    }
    select(option) {
        if (!this.disabled && !this.isSelected(option)) {
            this._search$.next('');
            this.inputEl.nativeElement.value = this.getDisplayProperty(option);
            this._onFocusInputValue = this.inputEl.nativeElement.value;
            if (this.minSearchChars === 0) {
                this._options = [];
            }
            this.updateDropdownOptions();
            const previousValue = this.value;
            if (this._newValues.some((o) => this.compareItem(o, previousValue))) {
                this._options = this._options.filter((o) => !this.compareItem(o, previousValue));
                this._newValues = [];
            }
            this.value = option;
            this.inputEl.nativeElement.focus();
            this.stateChanges.emit();
            this.hide();
        }
    }
    hide() {
        if (this.values.length === 1) {
            this.inputEl.nativeElement.value = this.getDisplayProperty(this.values[0]);
        }
        super.hide();
    }
    deselect(option) {
        if (!this.disabled && (!option || this.isSelected(option))) {
            if (option && this._newValues.some((v) => this.compareItem(v, option))) {
                this._options = this._options.filter((o) => !this.compareItem(o, option));
                this._newValues = this._newValues.filter((v) => !this.compareItem(v, option));
            }
            this.hide();
            this.value = null;
            this.inputEl.nativeElement.value = '';
            this.inputEl.nativeElement.focus();
            this.updateDropdownOptions();
        }
    }
    get values() {
        return this.value ? [this.value] : [];
    }
    assignInputsToDropdown() {
        this._dropdownInstance.instance.type = 'single';
        super.assignInputsToDropdown();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsAutocompleteComponent, isStandalone: true, selector: "rds-autocomplete", providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: forwardRef(() => RdsAutocompleteComponent),
            },
        ], usesInheritance: true, ngImport: i0, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-single"
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-disabled]="disabled"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div class="rds-autocomplete-input-container" #inputContainer>
        <input
          [placeholder]="getPlaceholder()"
          [disabled]="attrDisabled"
          [attr.aria-invalid]="errorState"
          [attr.aria-describedby]="inputAriaDescribedBy"
          autocomplete="off"
          class="rds-form-field__control"
          #inputEl
          (keydown.shift.tab)="addNewItemOnBlurAndHide()"
          (keydown.tab)="addNewItemOnBlurAndHide()"
          (blur)="focusChanged(false)"
          (focus)="focusChanged(true)"
          (input)="search()"
          (keydown)="onInputKeydown($event)"
        />
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            (click)="clearValue($event)"
            [disabled]="ngControl?.disabled"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, isInline: true, styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"], dependencies: [{ kind: "pipe", type: AsyncPipe, name: "async" }, { kind: "ngmodule", type: RdsProgressSpinnerModule }, { kind: "component", type: i1.RdsProgressSpinnerComponent, selector: "rds-progress-spinner", inputs: ["value", "minValue", "maxValue", "mode", "size", "label", "white"] }, { kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: i2.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-autocomplete', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <div
      class="rds-autocomplete rds-autocomplete-{{
        formField.size
      }} rds-autocomplete-single"
      (click)="inputEl.focus(); show()"
      [class.rds-autocomplete-disabled]="disabled"
      [class.rds-autocomplete-typing]="typing | async"
      [class.rds-autocomplete-has-value]="hasValue()"
    >
      <div class="rds-autocomplete-input-container" #inputContainer>
        <input
          [placeholder]="getPlaceholder()"
          [disabled]="attrDisabled"
          [attr.aria-invalid]="errorState"
          [attr.aria-describedby]="inputAriaDescribedBy"
          autocomplete="off"
          class="rds-form-field__control"
          #inputEl
          (keydown.shift.tab)="addNewItemOnBlurAndHide()"
          (keydown.tab)="addNewItemOnBlurAndHide()"
          (blur)="focusChanged(false)"
          (focus)="focusChanged(true)"
          (input)="search()"
          (keydown)="onInputKeydown($event)"
        />
      </div>
      <div class="rds-autocomplete-icon-container">
        @if (values.length > 0 || inputEl.value) {
          <button
            rds-icon-button
            (click)="clearValue($event)"
            [disabled]="ngControl?.disabled"
          >
            <rds-icon namespace="outlined" icon="close" />
          </button>
        }
        @if (loading | async) {
          <rds-progress-spinner size="s" />
        } @else {
          <rds-icon
            namespace="outlined"
            [icon]="_open ? 'caret_up' : 'caret_down'"
          />
        }
      </div>
    </div>
  `, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: forwardRef(() => RdsAutocompleteComponent),
                        },
                    ], standalone: true, imports: [
                        AsyncPipe,
                        RdsProgressSpinnerModule,
                        RdsIconComponent,
                        RdsButtonModule,
                    ], styles: [".rds-autocomplete{display:flex;justify-content:space-between;align-items:center;height:100%}.rds-autocomplete .rds-autocomplete-input-container{align-items:center;display:flex;width:100%}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled){position:relative}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{position:absolute;left:0;top:calc((100% - 24px)/2);content:\"\";height:24px;width:1px;border-left:1px solid var(--rds-color-high-contrast)}.rds-autocomplete .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled).rds-form-field__control-focused:before{display:none}.rds-autocomplete .rds-autocomplete-icon-container{display:flex;align-items:center;height:24px}.rds-autocomplete.rds-autocomplete-disabled .rds-autocomplete-icon-container{color:var(--rds-color-disabled)}.rds-autocomplete.rds-autocomplete-multi .rds-autocomplete-multi-container{display:flex;flex-wrap:wrap;width:100%}.rds-autocomplete.rds-autocomplete-floating-label.rds-autocomplete-multi.rds-autocomplete-floating-label .rds-autocomplete-multi-container{margin-top:16px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-l.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-l .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 24px)/2);height:24px}.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-m.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-m .rds-autocomplete-icon-container{gap:8px;margin-left:8px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-input-container.rds-form-field__control-show-caret:not(.rds-form-field__control-disabled):before{top:calc((100% - 20px)/2);height:20px}.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi,.rds-autocomplete.rds-autocomplete-s.rds-autocomplete-multi .rds-autocomplete-multi-container{gap:4px}.rds-autocomplete.rds-autocomplete-s .rds-autocomplete-icon-container{gap:8px;margin-left:8px}\n"] }]
        }] });
//# sourceMappingURL=data:application/json;base64,