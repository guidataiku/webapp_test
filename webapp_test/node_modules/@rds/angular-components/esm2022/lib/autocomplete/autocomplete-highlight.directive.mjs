import { booleanAttribute, Directive, ElementRef, inject, Input, Renderer2, SecurityContext, } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
const INVERSE_CLASSNAME = 'rds-autocomplate-highlight-inverse';
export class RdsAutocompleteHighlightDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.sanitizer = inject(DomSanitizer);
        this.renderer = inject(Renderer2);
        this.caseSensitive = false;
        this.customClasses = '';
        this.inverse = false;
        this.disabled = false;
    }
    ngOnChanges(changes) {
        if (this.nativeElement && changes['inverse']) {
            this.applyInversion();
        }
        if (this.nativeElement &&
            (changes['searchTerm'] || changes['caseSensitive'] || changes['disabled'])) {
            const text = this.nativeElement.textContent || '';
            if (this.searchTerm === '' || this.disabled) {
                this.nativeElement.innerHTML = text;
            }
            else {
                const regex = new RegExp(this.searchTerm, this.caseSensitive ? 'g' : 'gi');
                const newText = text.replace(regex, (match) => `<mark class="rds-autocomplete-highlight${' ' + this.customClasses}">${match}</mark>`);
                this.nativeElement.innerHTML =
                    this.sanitizer.sanitize(SecurityContext.HTML, newText) || '';
            }
        }
    }
    applyInversion() {
        if (this.inverse &&
            !this.nativeElement.classList.contains(INVERSE_CLASSNAME)) {
            this.renderer.addClass(this.nativeElement, INVERSE_CLASSNAME);
        }
        else if (!this.inverse &&
            this.nativeElement.classList.contains(INVERSE_CLASSNAME)) {
            this.renderer.removeClass(this.nativeElement, INVERSE_CLASSNAME);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteHighlightDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAutocompleteHighlightDirective, isStandalone: true, selector: "[rdsAutocomplateHighlight], [rds-autocomplate-highlight]", inputs: { searchTerm: ["rdsAutocomplateHighlight", "searchTerm"], caseSensitive: ["rdsAutocomplateHighlightCaseSensitive", "caseSensitive", booleanAttribute], customClasses: ["rdsAutocomplateHighlightCustomClasses", "customClasses"], inverse: ["rdsAutocomplateHighlightInverse", "inverse", booleanAttribute], disabled: ["rdsAutocomplateHighlightDisabled", "disabled", booleanAttribute] }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteHighlightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsAutocomplateHighlight], [rds-autocomplate-highlight]',
                    standalone: true,
                }]
        }], propDecorators: { searchTerm: [{
                type: Input,
                args: ['rdsAutocomplateHighlight']
            }], caseSensitive: [{
                type: Input,
                args: [{
                        alias: 'rdsAutocomplateHighlightCaseSensitive',
                        transform: booleanAttribute,
                    }]
            }], customClasses: [{
                type: Input,
                args: ['rdsAutocomplateHighlightCustomClasses']
            }], inverse: [{
                type: Input,
                args: [{
                        alias: 'rdsAutocomplateHighlightInverse',
                        transform: booleanAttribute,
                    }]
            }], disabled: [{
                type: Input,
                args: [{
                        alias: 'rdsAutocomplateHighlightDisabled',
                        transform: booleanAttribute,
                    }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLWhpZ2hsaWdodC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL2F1dG9jb21wbGV0ZS9hdXRvY29tcGxldGUtaGlnaGxpZ2h0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLEtBQUssRUFFTCxTQUFTLEVBQ1QsZUFBZSxHQUVoQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7O0FBRXpELE1BQU0saUJBQWlCLEdBQUcsb0NBQW9DLENBQUM7QUFNL0QsTUFBTSxPQUFPLGlDQUFpQztJQUo5QztRQUttQixrQkFBYSxHQUM1QixNQUFNLENBQTBCLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUMzQyxjQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2pDLGFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFPOUMsa0JBQWEsR0FBRyxLQUFLLENBQUM7UUFDMEIsa0JBQWEsR0FBRyxFQUFFLENBQUM7UUFLbkUsWUFBTyxHQUFHLEtBQUssQ0FBQztRQUtoQixhQUFRLEdBQUcsS0FBSyxDQUFDO0tBK0NsQjtJQTdDQyxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQzdDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN4QixDQUFDO1FBRUQsSUFDRSxJQUFJLENBQUMsYUFBYTtZQUNsQixDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQzFFLENBQUM7WUFDRCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxFQUFFLENBQUM7WUFFbEQsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztZQUN0QyxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQ3RCLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2hDLENBQUM7Z0JBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FDMUIsS0FBSyxFQUNMLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDUiwwQ0FDRSxHQUFHLEdBQUcsSUFBSSxDQUFDLGFBQ2IsS0FBSyxLQUFLLFNBQVMsQ0FDdEIsQ0FBQztnQkFFRixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVM7b0JBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pFLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztJQUVPLGNBQWM7UUFDcEIsSUFDRSxJQUFJLENBQUMsT0FBTztZQUNaLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQ3pELENBQUM7WUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGlCQUFpQixDQUFDLENBQUM7UUFDaEUsQ0FBQzthQUFNLElBQ0wsQ0FBQyxJQUFJLENBQUMsT0FBTztZQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxFQUN4RCxDQUFDO1lBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBQ25FLENBQUM7SUFDSCxDQUFDOzhHQXBFVSxpQ0FBaUM7a0dBQWpDLGlDQUFpQyx3T0FTL0IsZ0JBQWdCLHNJQU1oQixnQkFBZ0IsOERBS2hCLGdCQUFnQjs7MkZBcEJsQixpQ0FBaUM7a0JBSjdDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDBEQUEwRDtvQkFDcEUsVUFBVSxFQUFFLElBQUk7aUJBQ2pCOzhCQU9vQyxVQUFVO3NCQUE1QyxLQUFLO3VCQUFDLDBCQUEwQjtnQkFLakMsYUFBYTtzQkFKWixLQUFLO3VCQUFDO3dCQUNMLEtBQUssRUFBRSx1Q0FBdUM7d0JBQzlDLFNBQVMsRUFBRSxnQkFBZ0I7cUJBQzVCO2dCQUUrQyxhQUFhO3NCQUE1RCxLQUFLO3VCQUFDLHVDQUF1QztnQkFLOUMsT0FBTztzQkFKTixLQUFLO3VCQUFDO3dCQUNMLEtBQUssRUFBRSxpQ0FBaUM7d0JBQ3hDLFNBQVMsRUFBRSxnQkFBZ0I7cUJBQzVCO2dCQU1ELFFBQVE7c0JBSlAsS0FBSzt1QkFBQzt3QkFDTCxLQUFLLEVBQUUsa0NBQWtDO3dCQUN6QyxTQUFTLEVBQUUsZ0JBQWdCO3FCQUM1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgaW5qZWN0LFxuICBJbnB1dCxcbiAgT25DaGFuZ2VzLFxuICBSZW5kZXJlcjIsXG4gIFNlY3VyaXR5Q29udGV4dCxcbiAgU2ltcGxlQ2hhbmdlcyxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEb21TYW5pdGl6ZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuY29uc3QgSU5WRVJTRV9DTEFTU05BTUUgPSAncmRzLWF1dG9jb21wbGF0ZS1oaWdobGlnaHQtaW52ZXJzZSc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyZHNBdXRvY29tcGxhdGVIaWdobGlnaHRdLCBbcmRzLWF1dG9jb21wbGF0ZS1oaWdobGlnaHRdJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzQXV0b2NvbXBsZXRlSGlnaGxpZ2h0RGlyZWN0aXZlIGltcGxlbWVudHMgT25DaGFuZ2VzIHtcbiAgcHJpdmF0ZSByZWFkb25seSBuYXRpdmVFbGVtZW50ID1cbiAgICBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpLm5hdGl2ZUVsZW1lbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2FuaXRpemVyID0gaW5qZWN0KERvbVNhbml0aXplcik7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXIgPSBpbmplY3QoUmVuZGVyZXIyKTtcblxuICBASW5wdXQoJ3Jkc0F1dG9jb21wbGF0ZUhpZ2hsaWdodCcpIHNlYXJjaFRlcm06IHN0cmluZztcbiAgQElucHV0KHtcbiAgICBhbGlhczogJ3Jkc0F1dG9jb21wbGF0ZUhpZ2hsaWdodENhc2VTZW5zaXRpdmUnLFxuICAgIHRyYW5zZm9ybTogYm9vbGVhbkF0dHJpYnV0ZSxcbiAgfSlcbiAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlO1xuICBASW5wdXQoJ3Jkc0F1dG9jb21wbGF0ZUhpZ2hsaWdodEN1c3RvbUNsYXNzZXMnKSBjdXN0b21DbGFzc2VzID0gJyc7XG4gIEBJbnB1dCh7XG4gICAgYWxpYXM6ICdyZHNBdXRvY29tcGxhdGVIaWdobGlnaHRJbnZlcnNlJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pXG4gIGludmVyc2UgPSBmYWxzZTtcbiAgQElucHV0KHtcbiAgICBhbGlhczogJ3Jkc0F1dG9jb21wbGF0ZUhpZ2hsaWdodERpc2FibGVkJyxcbiAgICB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUsXG4gIH0pXG4gIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xuICAgIGlmICh0aGlzLm5hdGl2ZUVsZW1lbnQgJiYgY2hhbmdlc1snaW52ZXJzZSddKSB7XG4gICAgICB0aGlzLmFwcGx5SW52ZXJzaW9uKCk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdGhpcy5uYXRpdmVFbGVtZW50ICYmXG4gICAgICAoY2hhbmdlc1snc2VhcmNoVGVybSddIHx8IGNoYW5nZXNbJ2Nhc2VTZW5zaXRpdmUnXSB8fCBjaGFuZ2VzWydkaXNhYmxlZCddKVxuICAgICkge1xuICAgICAgY29uc3QgdGV4dCA9IHRoaXMubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCB8fCAnJztcblxuICAgICAgaWYgKHRoaXMuc2VhcmNoVGVybSA9PT0gJycgfHwgdGhpcy5kaXNhYmxlZCkge1xuICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuaW5uZXJIVE1MID0gdGV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICB0aGlzLnNlYXJjaFRlcm0sXG4gICAgICAgICAgdGhpcy5jYXNlU2Vuc2l0aXZlID8gJ2cnIDogJ2dpJyxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbmV3VGV4dCA9IHRleHQucmVwbGFjZShcbiAgICAgICAgICByZWdleCxcbiAgICAgICAgICAobWF0Y2gpID0+XG4gICAgICAgICAgICBgPG1hcmsgY2xhc3M9XCJyZHMtYXV0b2NvbXBsZXRlLWhpZ2hsaWdodCR7XG4gICAgICAgICAgICAgICcgJyArIHRoaXMuY3VzdG9tQ2xhc3Nlc1xuICAgICAgICAgICAgfVwiPiR7bWF0Y2h9PC9tYXJrPmAsXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5uYXRpdmVFbGVtZW50LmlubmVySFRNTCA9XG4gICAgICAgICAgdGhpcy5zYW5pdGl6ZXIuc2FuaXRpemUoU2VjdXJpdHlDb250ZXh0LkhUTUwsIG5ld1RleHQpIHx8ICcnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlJbnZlcnNpb24oKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5pbnZlcnNlICYmXG4gICAgICAhdGhpcy5uYXRpdmVFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhJTlZFUlNFX0NMQVNTTkFNRSlcbiAgICApIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5uYXRpdmVFbGVtZW50LCBJTlZFUlNFX0NMQVNTTkFNRSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICF0aGlzLmludmVyc2UgJiZcbiAgICAgIHRoaXMubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoSU5WRVJTRV9DTEFTU05BTUUpXG4gICAgKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMubmF0aXZlRWxlbWVudCwgSU5WRVJTRV9DTEFTU05BTUUpO1xuICAgIH1cbiAgfVxufVxuIl19