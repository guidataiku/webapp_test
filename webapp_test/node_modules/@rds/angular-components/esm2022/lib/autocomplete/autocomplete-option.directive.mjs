import { Directive, ElementRef, HostBinding, inject, Input, Renderer2, } from '@angular/core';
import { RdsAbstractAutocompleteComponent } from './abstract-autocomplete.component';
import * as i0 from "@angular/core";
export class RdsAutocompleteOptionDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.renderer = inject(Renderer2);
        this.class = 'rds-autocomplete-option';
    }
    set keyboardFocusedItem(keyboardFocusedItem) {
        this._keyboardFocusedItem = keyboardFocusedItem;
        if (this === keyboardFocusedItem) {
            this.renderer.addClass(this.nativeElement, 'cdk-focused');
            this.renderer.addClass(this.nativeElement, 'cdk-keyboard-focused');
        }
        else {
            this.renderer.removeClass(this.nativeElement, 'cdk-focused');
            this.renderer.removeClass(this.nativeElement, 'cdk-keyboard-focused');
        }
    }
    get keyboardFocusedItem() {
        return this._keyboardFocusedItem;
    }
    ngOnInit() {
        this.autocomplete._addOption(this.nativeElement, this);
    }
    ngOnDestroy() {
        this.autocomplete._deleteOption(this.nativeElement);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteOptionDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsAutocompleteOptionDirective, isStandalone: true, selector: "rds-autocomplete-option, [rds-autocomplete-option], [rdsAutocompleteOption]", inputs: { autocomplete: ["rdsAutocompleteOption", "autocomplete"], keyboardFocusedItem: "keyboardFocusedItem" }, host: { properties: { "class": "this.class" } }, exportAs: ["rdsAutocompleteOption"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAutocompleteOptionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-autocomplete-option, [rds-autocomplete-option], [rdsAutocompleteOption]',
                    exportAs: 'rdsAutocompleteOption',
                    standalone: true,
                }]
        }], propDecorators: { autocomplete: [{
                type: Input,
                args: [{ required: true, alias: 'rdsAutocompleteOption' }]
            }], keyboardFocusedItem: [{
                type: Input,
                args: [{ required: true }]
            }], class: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLW9wdGlvbi5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL2F1dG9jb21wbGV0ZS9hdXRvY29tcGxldGUtb3B0aW9uLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFHTCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0FBUXJGLE1BQU0sT0FBTyw4QkFBOEI7SUFOM0M7UUFTbUIsa0JBQWEsR0FDNUIsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDM0MsYUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQW1DTCxVQUFLLEdBQUcseUJBQXlCLENBQUM7S0FTNUU7SUF2Q0MsSUFDSSxtQkFBbUIsQ0FDckIsbUJBR1E7UUFFUixJQUFJLENBQUMsb0JBQW9CLEdBQUcsbUJBQW1CLENBQUM7UUFFaEQsSUFBSSxJQUFJLEtBQUssbUJBQW1CLEVBQUUsQ0FBQztZQUNqQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzFELElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztRQUNyRSxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO1FBQ3hFLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxtQkFBbUI7UUFJckIsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUM7SUFDbkMsQ0FBQztJQVNELFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3RELENBQUM7OEdBaERVLDhCQUE4QjtrR0FBOUIsOEJBQThCOzsyRkFBOUIsOEJBQThCO2tCQU4xQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFDTiw2RUFBNkU7b0JBQy9FLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjs4QkFTQyxZQUFZO3NCQURYLEtBQUs7dUJBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSx1QkFBdUIsRUFBRTtnQkFJckQsbUJBQW1CO3NCQUR0QixLQUFLO3VCQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRTtnQkE4QmdCLEtBQUs7c0JBQTdDLFdBQVc7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmRzQWJzdHJhY3RBdXRvY29tcGxldGVDb21wb25lbnQgfSBmcm9tICcuL2Fic3RyYWN0LWF1dG9jb21wbGV0ZS5jb21wb25lbnQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6XG4gICAgJ3Jkcy1hdXRvY29tcGxldGUtb3B0aW9uLCBbcmRzLWF1dG9jb21wbGV0ZS1vcHRpb25dLCBbcmRzQXV0b2NvbXBsZXRlT3B0aW9uXScsXG4gIGV4cG9ydEFzOiAncmRzQXV0b2NvbXBsZXRlT3B0aW9uJyxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzQXV0b2NvbXBsZXRlT3B0aW9uRGlyZWN0aXZlPFQsIEFycmF5T2ZGbGF0VHlwZSBleHRlbmRzIFQgfCBUW10+XG4gIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3lcbntcbiAgcHJpdmF0ZSByZWFkb25seSBuYXRpdmVFbGVtZW50ID1cbiAgICBpbmplY3Q8RWxlbWVudFJlZjxIVE1MRWxlbWVudD4+KEVsZW1lbnRSZWYpLm5hdGl2ZUVsZW1lbnQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVuZGVyZXIgPSBpbmplY3QoUmVuZGVyZXIyKTtcblxuICBASW5wdXQoeyByZXF1aXJlZDogdHJ1ZSwgYWxpYXM6ICdyZHNBdXRvY29tcGxldGVPcHRpb24nIH0pXG4gIGF1dG9jb21wbGV0ZTogUmRzQWJzdHJhY3RBdXRvY29tcGxldGVDb21wb25lbnQ8VCwgQXJyYXlPZkZsYXRUeXBlPjtcblxuICBASW5wdXQoeyByZXF1aXJlZDogdHJ1ZSB9KVxuICBzZXQga2V5Ym9hcmRGb2N1c2VkSXRlbShcbiAgICBrZXlib2FyZEZvY3VzZWRJdGVtOiBSZHNBdXRvY29tcGxldGVPcHRpb25EaXJlY3RpdmU8XG4gICAgICBULFxuICAgICAgQXJyYXlPZkZsYXRUeXBlXG4gICAgPiB8IG51bGwsXG4gICkge1xuICAgIHRoaXMuX2tleWJvYXJkRm9jdXNlZEl0ZW0gPSBrZXlib2FyZEZvY3VzZWRJdGVtO1xuXG4gICAgaWYgKHRoaXMgPT09IGtleWJvYXJkRm9jdXNlZEl0ZW0pIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5uYXRpdmVFbGVtZW50LCAnY2RrLWZvY3VzZWQnKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5uYXRpdmVFbGVtZW50LCAnY2RrLWtleWJvYXJkLWZvY3VzZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLm5hdGl2ZUVsZW1lbnQsICdjZGstZm9jdXNlZCcpO1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLm5hdGl2ZUVsZW1lbnQsICdjZGsta2V5Ym9hcmQtZm9jdXNlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBrZXlib2FyZEZvY3VzZWRJdGVtKCk6IFJkc0F1dG9jb21wbGV0ZU9wdGlvbkRpcmVjdGl2ZTxcbiAgICBULFxuICAgIEFycmF5T2ZGbGF0VHlwZVxuICA+IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX2tleWJvYXJkRm9jdXNlZEl0ZW07XG4gIH1cblxuICBwcml2YXRlIF9rZXlib2FyZEZvY3VzZWRJdGVtOiBSZHNBdXRvY29tcGxldGVPcHRpb25EaXJlY3RpdmU8XG4gICAgVCxcbiAgICBBcnJheU9mRmxhdFR5cGVcbiAgPiB8IG51bGw7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIHByb3RlY3RlZCByZWFkb25seSBjbGFzcyA9ICdyZHMtYXV0b2NvbXBsZXRlLW9wdGlvbic7XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5hdXRvY29tcGxldGUuX2FkZE9wdGlvbih0aGlzLm5hdGl2ZUVsZW1lbnQsIHRoaXMpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgdGhpcy5hdXRvY29tcGxldGUuX2RlbGV0ZU9wdGlvbih0aGlzLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG59XG4iXX0=