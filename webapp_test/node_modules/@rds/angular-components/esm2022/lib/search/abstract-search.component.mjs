import { booleanAttribute, ChangeDetectorRef, DestroyRef, Directive, ElementRef, EventEmitter, HostBinding, inject, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject, EMPTY, noop, of, skip } from 'rxjs';
import { RdsSearchIntl } from './search.intl';
import { FocusMonitor, } from '@angular/cdk/a11y';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsAbstractSearchComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.intl = inject(RdsSearchIntl);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.disabled = false;
        this.includeButton = false;
        this.autoSearch = false;
        this.size = 'l';
        this._lastEmitted = new BehaviorSubject({
            query: '',
            trigger: 'input',
        });
        this.search = this._lastEmitted.pipe(skip(1));
        this.clear = new EventEmitter();
        this.role = 'search';
        this._onChange = noop;
        this._onTouched = noop;
    }
    get value() {
        return this._value;
    }
    ngOnInit() {
        this.setIntlValues();
        this.setNewValue(this.intl.emptyValue).subscribe();
        this.intl.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.setIntlValues();
            this.cdr.markForCheck();
        });
    }
    ngOnChanges(changes) {
        if (changes['placeholder'] ||
            changes['buttonText'] ||
            changes['emptyValue'] ||
            changes['ariaClearLabel'] ||
            changes['ariaInputLabel']) {
            this.setIntlValues();
        }
    }
    ngAfterViewInit() {
        this.focusMonitor
            .monitor(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._onTouched());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef.nativeElement);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        if (this.disabled !== isDisabled) {
            this.disabled = isDisabled;
            this.cdr.markForCheck();
        }
    }
    writeValue(value) {
        this.setNewValue(value).subscribe(() => this.emitValue('form'));
    }
    onInput(event) {
        this.setNewValue(event.target.value).subscribe(() => this.emitValue('input', event));
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    isDirtyValue() {
        return this._value !== this.intl.emptyValue;
    }
    resetInput(event) {
        if (!this.disabled && this.isDirtyValue()) {
            this.setNewValue(this.intl.emptyValue).subscribe();
            this.emitValue('reset', event);
            this.clear.emit();
            this.searchInput.nativeElement.focus();
        }
    }
    emitValue(trigger, event) {
        if (this._lastEmitted.getValue().query !== this._value) {
            this._lastEmitted.next({ query: this._value, trigger, event });
            this._onChange(this._value);
        }
    }
    setIntlValues() {
        this.placeholder =
            this.placeholder && this.placeholder !== ''
                ? this.placeholder
                : this.intl.searchInputPlaceholder;
        this.buttonText =
            this.buttonText && this.buttonText !== ''
                ? this.buttonText
                : this.intl.searchButtonText;
        this.emptyValue = this.emptyValue || this.intl.emptyValue;
        this.ariaInputLabel =
            this.ariaInputLabel && this.ariaInputLabel !== ''
                ? this.ariaInputLabel
                : this.intl.ariaInputLabel;
        this.ariaClearLabel =
            this.ariaClearLabel && this.ariaClearLabel !== ''
                ? this.ariaClearLabel
                : this.intl.ariaClearLabel;
    }
    setNewValue(value) {
        if (value !== null &&
            value !== undefined &&
            this._value !== String(value)) {
            this._value = String(value);
            this.cdr.markForCheck();
            if (this.autoSearch) {
                return of(void 0);
            }
        }
        return EMPTY;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSearchComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAbstractSearchComponent, inputs: { placeholder: "placeholder", buttonText: "buttonText", emptyValue: "emptyValue", ariaClearLabel: "ariaClearLabel", disabled: ["disabled", "disabled", booleanAttribute], includeButton: ["includeButton", "includeButton", booleanAttribute], autoSearch: ["autoSearch", "autoSearch", booleanAttribute], size: "size", ariaInputLabel: "ariaInputLabel" }, outputs: { search: "search", clear: "clear" }, host: { properties: { "attr.role": "this.role", "attr.aria-label": "this.ariaInputLabel" } }, viewQueries: [{ propertyName: "searchInput", first: true, predicate: ["searchInput"], descendants: true }], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAbstractSearchComponent, decorators: [{
            type: Directive
        }], propDecorators: { placeholder: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], emptyValue: [{
                type: Input
            }], ariaClearLabel: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], includeButton: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoSearch: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], size: [{
                type: Input
            }], search: [{
                type: Output
            }], clear: [{
                type: Output
            }], searchInput: [{
                type: ViewChild,
                args: ['searchInput']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], ariaInputLabel: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-label']
            }] } });
//# sourceMappingURL=data:application/json;base64,