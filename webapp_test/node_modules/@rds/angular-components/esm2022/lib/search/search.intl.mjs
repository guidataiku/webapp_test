import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class RdsSearchIntl {
    constructor() {
        this._changes = new Subject();
        this._searchInputPlaceholder = 'Search...';
        this._searchButtonText = 'Search';
        this._emptyValue = '';
        this._ariaInputLabel = 'Global';
        this._ariaClearLabel = 'Clear search';
    }
    get changes() {
        return this._changes.asObservable();
    }
    get searchInputPlaceholder() {
        return this._searchInputPlaceholder;
    }
    set searchInputPlaceholder(placeholderText) {
        this._searchInputPlaceholder = placeholderText;
        this._changes.next();
    }
    get searchButtonText() {
        return this._searchButtonText;
    }
    set searchButtonText(buttonText) {
        this._searchButtonText = buttonText;
        this._changes.next();
    }
    get emptyValue() {
        return this._emptyValue;
    }
    set emptyValue(emptyValue) {
        this._emptyValue = emptyValue;
        this._changes.next();
    }
    get ariaInputLabel() {
        return this._ariaInputLabel;
    }
    set ariaInputLabel(ariaInputLabel) {
        this._ariaInputLabel = ariaInputLabel;
        this._changes.next();
    }
    get ariaClearLabel() {
        return this._ariaClearLabel;
    }
    set ariaClearLabel(ariaClearLabel) {
        this._ariaClearLabel = ariaClearLabel;
        this._changes.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchIntl, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSearchIntl, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmludGwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3NlYXJjaC9zZWFyY2guaW50bC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBRzNDLE1BQU0sT0FBTyxhQUFhO0lBRDFCO1FBRW1CLGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBQ3hDLDRCQUF1QixHQUFHLFdBQVcsQ0FBQztRQUN0QyxzQkFBaUIsR0FBRyxRQUFRLENBQUM7UUFDN0IsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFDakIsb0JBQWUsR0FBRyxRQUFRLENBQUM7UUFDM0Isb0JBQWUsR0FBRyxjQUFjLENBQUM7S0FrRDFDO0lBaERDLElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBSSxzQkFBc0I7UUFDeEIsT0FBTyxJQUFJLENBQUMsdUJBQXVCLENBQUM7SUFDdEMsQ0FBQztJQUVELElBQUksc0JBQXNCLENBQUMsZUFBdUI7UUFDaEQsSUFBSSxDQUFDLHVCQUF1QixHQUFHLGVBQWUsQ0FBQztRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztJQUNoQyxDQUFDO0lBRUQsSUFBSSxnQkFBZ0IsQ0FBQyxVQUFrQjtRQUNyQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsVUFBa0I7UUFDL0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDOUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxjQUFjLENBQUMsY0FBc0I7UUFDdkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxjQUFjLENBQUMsY0FBc0I7UUFDdkMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDOzhHQXZEVSxhQUFhO2tIQUFiLGFBQWEsY0FEQSxNQUFNOzsyRkFDbkIsYUFBYTtrQkFEekIsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUmRzU2VhcmNoSW50bCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgX2NoYW5nZXMgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuICBwcml2YXRlIF9zZWFyY2hJbnB1dFBsYWNlaG9sZGVyID0gJ1NlYXJjaC4uLic7XG4gIHByaXZhdGUgX3NlYXJjaEJ1dHRvblRleHQgPSAnU2VhcmNoJztcbiAgcHJpdmF0ZSBfZW1wdHlWYWx1ZSA9ICcnO1xuICBwcml2YXRlIF9hcmlhSW5wdXRMYWJlbCA9ICdHbG9iYWwnO1xuICBwcml2YXRlIF9hcmlhQ2xlYXJMYWJlbCA9ICdDbGVhciBzZWFyY2gnO1xuXG4gIGdldCBjaGFuZ2VzKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLl9jaGFuZ2VzLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgZ2V0IHNlYXJjaElucHV0UGxhY2Vob2xkZXIoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fc2VhcmNoSW5wdXRQbGFjZWhvbGRlcjtcbiAgfVxuXG4gIHNldCBzZWFyY2hJbnB1dFBsYWNlaG9sZGVyKHBsYWNlaG9sZGVyVGV4dDogc3RyaW5nKSB7XG4gICAgdGhpcy5fc2VhcmNoSW5wdXRQbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyVGV4dDtcbiAgICB0aGlzLl9jaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBzZWFyY2hCdXR0b25UZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX3NlYXJjaEJ1dHRvblRleHQ7XG4gIH1cblxuICBzZXQgc2VhcmNoQnV0dG9uVGV4dChidXR0b25UZXh0OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zZWFyY2hCdXR0b25UZXh0ID0gYnV0dG9uVGV4dDtcbiAgICB0aGlzLl9jaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBlbXB0eVZhbHVlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2VtcHR5VmFsdWU7XG4gIH1cblxuICBzZXQgZW1wdHlWYWx1ZShlbXB0eVZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9lbXB0eVZhbHVlID0gZW1wdHlWYWx1ZTtcbiAgICB0aGlzLl9jaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBhcmlhSW5wdXRMYWJlbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9hcmlhSW5wdXRMYWJlbDtcbiAgfVxuXG4gIHNldCBhcmlhSW5wdXRMYWJlbChhcmlhSW5wdXRMYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5fYXJpYUlucHV0TGFiZWwgPSBhcmlhSW5wdXRMYWJlbDtcbiAgICB0aGlzLl9jaGFuZ2VzLm5leHQoKTtcbiAgfVxuXG4gIGdldCBhcmlhQ2xlYXJMYWJlbCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9hcmlhQ2xlYXJMYWJlbDtcbiAgfVxuXG4gIHNldCBhcmlhQ2xlYXJMYWJlbChhcmlhQ2xlYXJMYWJlbDogc3RyaW5nKSB7XG4gICAgdGhpcy5fYXJpYUNsZWFyTGFiZWwgPSBhcmlhQ2xlYXJMYWJlbDtcbiAgICB0aGlzLl9jaGFuZ2VzLm5leHQoKTtcbiAgfVxufVxuIl19