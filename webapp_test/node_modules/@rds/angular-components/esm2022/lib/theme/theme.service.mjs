import { inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, Subject } from 'rxjs';
import { distinctUntilChanged, filter, map, takeUntil } from 'rxjs/operators';
import { RdsThemeDark, RdsThemeLight } from '@rds/core';
import { RDS_THEME_CONFIG } from './theme.config';
import * as i0 from "@angular/core";
export class RdsThemeService {
    static { this.ATTRIBUTE_NAME = 'rds-theme'; }
    constructor() {
        this.documentElement = inject(DOCUMENT).documentElement;
        this.config = inject(RDS_THEME_CONFIG, { optional: true });
        this._killAutoTheme$ = new Subject();
        this._globalThemeChange$ = new Subject();
        this.globalThemeChange$ = this._globalThemeChange$.pipe(distinctUntilChanged());
        if (!this.config || this.config.setAutoTheme) {
            this.setAuto();
        }
        new MutationObserver(() => this.emitValue()).observe(this.documentElement, {
            attributes: true,
            attributeFilter: [RdsThemeService.ATTRIBUTE_NAME],
        });
    }
    setAuto() {
        this._killAutoTheme$.next();
        const savedThemeChoice = localStorage.getItem(RdsThemeService.ATTRIBUTE_NAME);
        if (savedThemeChoice) {
            this.set(savedThemeChoice);
            return;
        }
        if (window.matchMedia) {
            if (window.matchMedia('(prefers-color-scheme: dark)').matches &&
                !this.isDark()) {
                this.setDark();
            }
            fromEvent(window.matchMedia('(prefers-color-scheme: dark)'), 'change')
                .pipe(map((e) => (e.matches ? RdsThemeDark : RdsThemeLight)), filter((t) => t !== this.get()), takeUntil(this._killAutoTheme$))
                .subscribe((t) => this.set(t));
        }
    }
    setLight(element = this.documentElement) {
        this.set(RdsThemeLight, element);
    }
    setDark(element = this.documentElement) {
        this.set(RdsThemeDark, element);
    }
    isDark(element = this.documentElement) {
        return this.get(element) === RdsThemeDark;
    }
    isLight(element = this.documentElement) {
        return [RdsThemeLight, null].includes(this.get(element));
    }
    set(theme, element = this.documentElement) {
        element.setAttribute(RdsThemeService.ATTRIBUTE_NAME, theme);
        localStorage.setItem(RdsThemeService.ATTRIBUTE_NAME, theme);
        if (element === this.documentElement) {
            this.emitValue();
        }
    }
    clear(element = this.documentElement) {
        element.removeAttribute(RdsThemeService.ATTRIBUTE_NAME);
        localStorage.setItem(RdsThemeService.ATTRIBUTE_NAME, RdsThemeLight);
        this.emitValue();
    }
    get(element = this.documentElement) {
        return element.getAttribute(RdsThemeService.ATTRIBUTE_NAME);
    }
    has(element = this.documentElement) {
        return element.hasAttribute(RdsThemeService.ATTRIBUTE_NAME);
    }
    emitValue() {
        this._globalThemeChange$.next(this.documentElement.getAttribute(RdsThemeService.ATTRIBUTE_NAME));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,