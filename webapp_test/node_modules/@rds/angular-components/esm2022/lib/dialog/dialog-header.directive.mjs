import { ChangeDetectorRef, DestroyRef, Directive, ElementRef, HostBinding, inject, Input, NgZone, } from '@angular/core';
import { RdsDialogRef } from './model';
import { RdsDialogService } from './dialog.service';
import { getClosestDialog } from './get-closet-dialog';
import { debounceTime } from 'rxjs';
import { ContentObserver } from '@angular/cdk/observers';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
let nextId = 0;
export class RdsDialogHeaderDirective {
    constructor() {
        this.dialogService = inject(RdsDialogService);
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.contentObserver = inject(ContentObserver);
        this.dialogRef = inject(RdsDialogRef, {
            optional: true,
        });
        this._id = `rds-dialog-header-${nextId++}`;
        this._width = '100%';
        this.hostClass = 'rds-dialog__header';
    }
    get id() {
        return this._id;
    }
    set id(newValue) {
        this._id = newValue;
    }
    ngOnInit() {
        if (!this.dialogRef) {
            const dialogRef = getClosestDialog(this.elementRef, this.dialogService.openDialogs);
            if (dialogRef) {
                this.dialogRef = dialogRef;
            }
        }
        if (this.dialogRef) {
            Promise.resolve().then(() => {
                if (this.dialogRef && !this.dialogRef.dialogContainer.ariaLabelledBy) {
                    this.dialogRef.dialogContainer.ariaLabelledBy = this.id;
                }
            });
        }
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => this._refreshWidth());
        this.contentObserver
            .observe(this.elementRef)
            .pipe(debounceTime(50), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this._refreshWidth());
    }
    _refreshWidth() {
        const contentElement = this.elementRef.nativeElement;
        const parentElement = contentElement.parentElement;
        const iconPlaceholder = parentElement.querySelector('.rds-dialog__icon-placeholder');
        const iconsWidth = iconPlaceholder?.clientWidth || 0;
        Promise.resolve().then(() => {
            const newWidth = `calc(100% - ${iconsWidth}px)`;
            if (newWidth !== this._width) {
                this.ngZone.run(() => {
                    this._width = newWidth;
                    this.cdr.markForCheck();
                });
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogHeaderDirective, selector: "[rds-dialog-header], [rdsDialogHeader]", inputs: { id: "id" }, host: { properties: { "style.width": "this._width", "class": "this.hostClass", "id": "this.id" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogHeaderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-dialog-header], [rdsDialogHeader]',
                }]
        }], propDecorators: { _width: [{
                type: HostBinding,
                args: ['style.width']
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['id']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWhlYWRlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL2RpYWxvZy9kaWFsb2ctaGVhZGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLFVBQVUsRUFDVixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sR0FFUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQUVoRSxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFLZixNQUFNLE9BQU8sd0JBQXdCO0lBSHJDO1FBSW1CLGtCQUFhLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekMsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoQyxlQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hDLFFBQUcsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNoQyxXQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLG9CQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ25ELGNBQVMsR0FBRyxNQUFNLENBQXFCLFlB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QUFLOztzQkFDTCxXQUFXO3VCQUFDLElBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgRGVzdHJveVJlZixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgaW5qZWN0LFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmRzRGlhbG9nUmVmIH0gZnJvbSAnLi9tb2RlbCc7XG5pbXBvcnQgeyBSZHNEaWFsb2dTZXJ2aWNlIH0gZnJvbSAnLi9kaWFsb2cuc2VydmljZSc7XG5pbXBvcnQgeyBnZXRDbG9zZXN0RGlhbG9nIH0gZnJvbSAnLi9nZXQtY2xvc2V0LWRpYWxvZyc7XG5pbXBvcnQgeyBkZWJvdW5jZVRpbWUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbnRlbnRPYnNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuXG5sZXQgbmV4dElkID0gMDtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3Jkcy1kaWFsb2ctaGVhZGVyXSwgW3Jkc0RpYWxvZ0hlYWRlcl0nLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNEaWFsb2dIZWFkZXJEaXJlY3RpdmU8VCwgUj4gaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkluaXQge1xuICBwcml2YXRlIHJlYWRvbmx5IGRpYWxvZ1NlcnZpY2UgPSBpbmplY3QoUmRzRGlhbG9nU2VydmljZSk7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveVJlZiA9IGluamVjdChEZXN0cm95UmVmKTtcbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0KEVsZW1lbnRSZWYpO1xuICBwcml2YXRlIHJlYWRvbmx5IGNkciA9IGluamVjdChDaGFuZ2VEZXRlY3RvclJlZik7XG4gIHByaXZhdGUgcmVhZG9ubHkgbmdab25lID0gaW5qZWN0KE5nWm9uZSk7XG4gIHByaXZhdGUgcmVhZG9ubHkgY29udGVudE9ic2VydmVyID0gaW5qZWN0KENvbnRlbnRPYnNlcnZlcik7XG4gIHByaXZhdGUgZGlhbG9nUmVmID0gaW5qZWN0PFJkc0RpYWxvZ1JlZjxULCBSPj4oUmRzRGlhbG9nUmVmLCB7XG4gICAgb3B0aW9uYWw6IHRydWUsXG4gIH0pO1xuXG4gIHByaXZhdGUgX2lkID0gYHJkcy1kaWFsb2ctaGVhZGVyLSR7bmV4dElkKyt9YDtcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLndpZHRoJylcbiAgcHJpdmF0ZSBfd2lkdGggPSAnMTAwJSc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIHJlYWRvbmx5IGhvc3RDbGFzcyA9ICdyZHMtZGlhbG9nX19oZWFkZXInO1xuXG4gIEBJbnB1dCgpXG4gIEBIb3N0QmluZGluZygnaWQnKVxuICBnZXQgaWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5faWQ7XG4gIH1cblxuICBzZXQgaWQobmV3VmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2lkID0gbmV3VmFsdWU7XG4gIH1cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuZGlhbG9nUmVmKSB7XG4gICAgICBjb25zdCBkaWFsb2dSZWYgPSBnZXRDbG9zZXN0RGlhbG9nKFxuICAgICAgICB0aGlzLmVsZW1lbnRSZWYsXG4gICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5vcGVuRGlhbG9ncyxcbiAgICAgICk7XG5cbiAgICAgIGlmIChkaWFsb2dSZWYpIHtcbiAgICAgICAgdGhpcy5kaWFsb2dSZWYgPSBkaWFsb2dSZWY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGlhbG9nUmVmKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZGlhbG9nUmVmICYmICF0aGlzLmRpYWxvZ1JlZi5kaWFsb2dDb250YWluZXIuYXJpYUxhYmVsbGVkQnkpIHtcbiAgICAgICAgICB0aGlzLmRpYWxvZ1JlZi5kaWFsb2dDb250YWluZXIuYXJpYUxhYmVsbGVkQnkgPSB0aGlzLmlkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5fcmVmcmVzaFdpZHRoKCkpO1xuICAgIHRoaXMuY29udGVudE9ic2VydmVyXG4gICAgICAub2JzZXJ2ZSh0aGlzLmVsZW1lbnRSZWYpXG4gICAgICAucGlwZShkZWJvdW5jZVRpbWUoNTApLCB0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4gdGhpcy5fcmVmcmVzaFdpZHRoKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaFdpZHRoKCk6IHZvaWQge1xuICAgIGNvbnN0IGNvbnRlbnRFbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgcGFyZW50RWxlbWVudCA9IGNvbnRlbnRFbGVtZW50LnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICBjb25zdCBpY29uUGxhY2Vob2xkZXIgPSBwYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAnLnJkcy1kaWFsb2dfX2ljb24tcGxhY2Vob2xkZXInLFxuICAgICk7XG5cbiAgICBjb25zdCBpY29uc1dpZHRoID0gaWNvblBsYWNlaG9sZGVyPy5jbGllbnRXaWR0aCB8fCAwO1xuXG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBuZXdXaWR0aCA9IGBjYWxjKDEwMCUgLSAke2ljb25zV2lkdGh9cHgpYDtcblxuICAgICAgaWYgKG5ld1dpZHRoICE9PSB0aGlzLl93aWR0aCkge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX3dpZHRoID0gbmV3V2lkdGg7XG4gICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iXX0=