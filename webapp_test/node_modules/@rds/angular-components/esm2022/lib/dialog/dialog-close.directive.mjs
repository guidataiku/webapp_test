import { getClosestDialog } from './get-closet-dialog';
import { Directive, ElementRef, HostBinding, HostListener, inject, Input, } from '@angular/core';
import { RdsDialogRef } from './model';
import { RdsDialogService } from './dialog.service';
import * as i0 from "@angular/core";
export class RdsDialogCloseDirective {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.dialogService = inject(RdsDialogService);
        this.dialogRef = inject(RdsDialogRef, {
            optional: true,
        });
        this._type = 'button';
    }
    get hostType() {
        return this._type;
    }
    set hostType(newValue) {
        this._type = newValue;
    }
    onHostClick() {
        this.dialogRef?.close(this.dialogResult);
    }
    ngOnInit() {
        if (!this.dialogRef) {
            this.dialogRef = getClosestDialog(this.elementRef, this.dialogService.openDialogs);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogCloseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogCloseDirective, selector: "[rds-dialog-close], [rdsDialogClose]", inputs: { dialogResult: ["rds-dialog-close", "dialogResult"], hostType: ["type", "hostType"] }, host: { listeners: { "click": "onHostClick()" }, properties: { "attr.type": "this.hostType" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogCloseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-dialog-close], [rdsDialogClose]',
                }]
        }], propDecorators: { dialogResult: [{
                type: Input,
                args: ['rds-dialog-close']
            }], hostType: [{
                type: Input,
                args: ['type']
            }, {
                type: HostBinding,
                args: ['attr.type']
            }], onHostClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNsb3NlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvZGlhbG9nL2RpYWxvZy1jbG9zZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxHQUVOLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7O0FBT3BELE1BQU0sT0FBTyx1QkFBdUI7SUFIcEM7UUFJbUIsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoQyxrQkFBYSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ2xELGNBQVMsR0FBRyxNQUFNLENBQXdCLFlBQVksRUFBRTtZQUM5RCxRQUFRLEVBQUUsSUFBSTtTQUNmLENBQUMsQ0FBQztRQUVLLFVBQUssR0FBc0IsUUFBUSxDQUFDO0tBMEI3QztJQXRCQyxJQUVJLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQUksUUFBUSxDQUFDLFFBQTJCO1FBQ3RDLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO0lBQ3hCLENBQUM7SUFFc0IsV0FBVztRQUNoQyxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3BCLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQy9CLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQ04sQ0FBQztRQUM3QixDQUFDO0lBQ0gsQ0FBQzs4R0FoQ1UsdUJBQXVCO2tHQUF2Qix1QkFBdUI7OzJGQUF2Qix1QkFBdUI7a0JBSG5DLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHNDQUFzQztpQkFDakQ7OEJBVTRCLFlBQVk7c0JBQXRDLEtBQUs7dUJBQUMsa0JBQWtCO2dCQUlyQixRQUFRO3NCQUZYLEtBQUs7dUJBQUMsTUFBTTs7c0JBQ1osV0FBVzt1QkFBQyxXQUFXO2dCQVNELFdBQVc7c0JBQWpDLFlBQVk7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENsb3Nlc3REaWFsb2cgfSBmcm9tICcuL2dldC1jbG9zZXQtZGlhbG9nJztcbmltcG9ydCB7XG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBJbnB1dCxcbiAgT25Jbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJkc0RpYWxvZ1JlZiB9IGZyb20gJy4vbW9kZWwnO1xuaW1wb3J0IHsgUmRzRGlhbG9nU2VydmljZSB9IGZyb20gJy4vZGlhbG9nLnNlcnZpY2UnO1xuXG5leHBvcnQgdHlwZSBSZHNEaWFsb2dIb3N0VHlwZSA9ICdzdWJtaXQnIHwgJ2J1dHRvbicgfCAncmVzZXQnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcmRzLWRpYWxvZy1jbG9zZV0sIFtyZHNEaWFsb2dDbG9zZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNEaWFsb2dDbG9zZURpcmVjdGl2ZTxULCBELCBSPiBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdChFbGVtZW50UmVmKTtcbiAgcHJpdmF0ZSByZWFkb25seSBkaWFsb2dTZXJ2aWNlID0gaW5qZWN0KFJkc0RpYWxvZ1NlcnZpY2UpO1xuICBwcml2YXRlIGRpYWxvZ1JlZiA9IGluamVjdDxSZHNEaWFsb2dSZWY8VCwgRCwgUj4+KFJkc0RpYWxvZ1JlZiwge1xuICAgIG9wdGlvbmFsOiB0cnVlLFxuICB9KTtcblxuICBwcml2YXRlIF90eXBlOiBSZHNEaWFsb2dIb3N0VHlwZSA9ICdidXR0b24nO1xuXG4gIEBJbnB1dCgncmRzLWRpYWxvZy1jbG9zZScpIGRpYWxvZ1Jlc3VsdDogUjtcblxuICBASW5wdXQoJ3R5cGUnKVxuICBASG9zdEJpbmRpbmcoJ2F0dHIudHlwZScpXG4gIGdldCBob3N0VHlwZSgpOiBSZHNEaWFsb2dIb3N0VHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGU7XG4gIH1cblxuICBzZXQgaG9zdFR5cGUobmV3VmFsdWU6IFJkc0RpYWxvZ0hvc3RUeXBlKSB7XG4gICAgdGhpcy5fdHlwZSA9IG5ld1ZhbHVlO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKSBvbkhvc3RDbGljaygpOiB2b2lkIHtcbiAgICB0aGlzLmRpYWxvZ1JlZj8uY2xvc2UodGhpcy5kaWFsb2dSZXN1bHQpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmRpYWxvZ1JlZikge1xuICAgICAgdGhpcy5kaWFsb2dSZWYgPSBnZXRDbG9zZXN0RGlhbG9nPFQsIEQsIFI+KFxuICAgICAgICB0aGlzLmVsZW1lbnRSZWYsXG4gICAgICAgIHRoaXMuZGlhbG9nU2VydmljZS5vcGVuRGlhbG9ncyxcbiAgICAgICkgYXMgUmRzRGlhbG9nUmVmPFQsIEQsIFI+O1xuICAgIH1cbiAgfVxufVxuIl19