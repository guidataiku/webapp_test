import { ChangeDetectorRef, DestroyRef, Directive, ElementRef, HostBinding, inject, NgZone, Renderer2, } from '@angular/core';
import { concat, merge } from 'rxjs';
import { ContentObserver } from '@angular/cdk/observers';
import { DimensionsObserver } from '../utils';
import { debounceTime, take } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const HEADER_SELECTOR = '.rds-dialog__header';
const SCROLLABLE_CLASS = 'rds-dialog--scrollable';
const ACTIONS_SELECTOR = '.rds-dialog__actions-container';
export class RdsDialogContentDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.destroyRef = inject(DestroyRef);
        this.renderer = inject(Renderer2);
        this.cdr = inject(ChangeDetectorRef);
        this.ngZone = inject(NgZone);
        this.contentObserver = inject(ContentObserver);
        this.dimensionsObserver = inject(DimensionsObserver);
        this._height = '100%';
        this.hostClass = 'rds-dialog__content';
    }
    get hostHeight() {
        return this._height;
    }
    ngAfterContentInit() {
        const refreshTriggers$ = merge(this.dimensionsObserver.observe(this.nativeElement), this.contentObserver.observe(this.nativeElement));
        // thanks to this concat we debounce all but first emission
        concat(refreshTriggers$.pipe(take(1)), refreshTriggers$.pipe(debounceTime(200)))
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.ngZone.runOutsideAngular(() => {
                this._refreshHeight();
            });
        });
    }
    _refreshHeight() {
        const parentElement = this.nativeElement.parentElement;
        this.toggleScrollableClass();
        const header = parentElement.querySelector(HEADER_SELECTOR);
        const actionsContainer = parentElement.querySelector(ACTIONS_SELECTOR);
        const actionsContainerHeight = actionsContainer?.scrollHeight || 0;
        Promise.resolve().then(() => {
            const headerHeight = header?.scrollHeight || 0;
            const newHeight = `calc(100% - ${headerHeight}px - ${actionsContainerHeight}px)`;
            if (this._height !== newHeight) {
                this.ngZone.run(() => {
                    this._height = newHeight;
                    this.cdr.markForCheck();
                });
            }
        });
    }
    toggleScrollableClass() {
        const rdsDialog = this.nativeElement.parentElement?.parentElement;
        if (!rdsDialog) {
            return;
        }
        if (this.nativeElement.scrollHeight > this.nativeElement.offsetHeight) {
            this.renderer.addClass(rdsDialog, SCROLLABLE_CLASS);
        }
        else {
            this.renderer.removeChild(rdsDialog, SCROLLABLE_CLASS);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDialogContentDirective, selector: "[rds-dialog-content], [rdsDialogContent]", host: { properties: { "class": "this.hostClass", "style.height": "this.hostHeight" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[rds-dialog-content], [rdsDialogContent]`,
                }]
        }], propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostHeight: [{
                type: HostBinding,
                args: ['style.height']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNvbnRlbnQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9kaWFsb2cvZGlhbG9nLWNvbnRlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxpQkFBaUIsRUFDakIsVUFBVSxFQUNWLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLE1BQU0sRUFDTixNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7QUFFaEUsTUFBTSxlQUFlLEdBQUcscUJBQXFCLENBQUM7QUFDOUMsTUFBTSxnQkFBZ0IsR0FBRyx3QkFBd0IsQ0FBQztBQUNsRCxNQUFNLGdCQUFnQixHQUFHLGdDQUFnQyxDQUFDO0FBSzFELE1BQU0sT0FBTyx5QkFBeUI7SUFIdEM7UUFJbUIsa0JBQWEsR0FDNUIsTUFBTSxDQUEwQixVQUFVLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFDM0MsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoQyxhQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdCLFFBQUcsR0FBRyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNoQyxXQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLG9CQUFlLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzFDLHVCQUFrQixHQUFHLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBRXpELFlBQU8sR0FBRyxNQUFNLENBQUM7UUFFTSxjQUFTLEdBQUcscUJBQXFCLENBQUM7S0E2RGxFO0lBM0RDLElBQWlDLFVBQVU7UUFDekMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsTUFBTSxnQkFBZ0IsR0FBRyxLQUFLLENBQzVCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUNuRCxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQ2pELENBQUM7UUFFRiwyREFBMkQ7UUFDM0QsTUFBTSxDQUNKLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUN6QzthQUNFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDekMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDeEIsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxjQUFjO1FBQ3BCLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBNEIsQ0FBQztRQUV0RSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUU3QixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzVELE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXZFLE1BQU0sc0JBQXNCLEdBQUcsZ0JBQWdCLEVBQUUsWUFBWSxJQUFJLENBQUMsQ0FBQztRQUVuRSxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUMxQixNQUFNLFlBQVksR0FBRyxNQUFNLEVBQUUsWUFBWSxJQUFJLENBQUMsQ0FBQztZQUMvQyxNQUFNLFNBQVMsR0FBRyxlQUFlLFlBQVksUUFBUSxzQkFBc0IsS0FBSyxDQUFDO1lBRWpGLElBQUksSUFBSSxDQUFDLE9BQU8sS0FBSyxTQUFTLEVBQUUsQ0FBQztnQkFDL0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFO29CQUNuQixJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztvQkFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDMUIsQ0FBQyxDQUFDLENBQUM7WUFDTCxDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8scUJBQXFCO1FBQzNCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsYUFBYSxFQUFFLGFBQWEsQ0FBQztRQUVsRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDZixPQUFPO1FBQ1QsQ0FBQztRQUVELElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN0RSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUN0RCxDQUFDO2FBQU0sQ0FBQztZQUNOLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELENBQUM7SUFDSCxDQUFDOzhHQXhFVSx5QkFBeUI7a0dBQXpCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFIckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMENBQTBDO2lCQUNyRDs4QkFhZ0MsU0FBUztzQkFBdkMsV0FBVzt1QkFBQyxPQUFPO2dCQUVhLFVBQVU7c0JBQTFDLFdBQVc7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBEZXN0cm95UmVmLFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBpbmplY3QsXG4gIE5nWm9uZSxcbiAgUmVuZGVyZXIyLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGNvbmNhdCwgbWVyZ2UgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbnRlbnRPYnNlcnZlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vYnNlcnZlcnMnO1xuaW1wb3J0IHsgRGltZW5zaW9uc09ic2VydmVyIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuXG5jb25zdCBIRUFERVJfU0VMRUNUT1IgPSAnLnJkcy1kaWFsb2dfX2hlYWRlcic7XG5jb25zdCBTQ1JPTExBQkxFX0NMQVNTID0gJ3Jkcy1kaWFsb2ctLXNjcm9sbGFibGUnO1xuY29uc3QgQUNUSU9OU19TRUxFQ1RPUiA9ICcucmRzLWRpYWxvZ19fYWN0aW9ucy1jb250YWluZXInO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6IGBbcmRzLWRpYWxvZy1jb250ZW50XSwgW3Jkc0RpYWxvZ0NvbnRlbnRdYCxcbn0pXG5leHBvcnQgY2xhc3MgUmRzRGlhbG9nQ29udGVudERpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICBwcml2YXRlIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQgPVxuICAgIGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZikubmF0aXZlRWxlbWVudDtcbiAgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95UmVmID0gaW5qZWN0KERlc3Ryb3lSZWYpO1xuICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyID0gaW5qZWN0KFJlbmRlcmVyMik7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2RyID0gaW5qZWN0KENoYW5nZURldGVjdG9yUmVmKTtcbiAgcHJpdmF0ZSByZWFkb25seSBuZ1pvbmUgPSBpbmplY3QoTmdab25lKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb250ZW50T2JzZXJ2ZXIgPSBpbmplY3QoQ29udGVudE9ic2VydmVyKTtcbiAgcHJpdmF0ZSByZWFkb25seSBkaW1lbnNpb25zT2JzZXJ2ZXIgPSBpbmplY3QoRGltZW5zaW9uc09ic2VydmVyKTtcblxuICBwcml2YXRlIF9oZWlnaHQgPSAnMTAwJSc7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIHJlYWRvbmx5IGhvc3RDbGFzcyA9ICdyZHMtZGlhbG9nX19jb250ZW50JztcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmhlaWdodCcpIGdldCBob3N0SGVpZ2h0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2hlaWdodDtcbiAgfVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkIHtcbiAgICBjb25zdCByZWZyZXNoVHJpZ2dlcnMkID0gbWVyZ2UoXG4gICAgICB0aGlzLmRpbWVuc2lvbnNPYnNlcnZlci5vYnNlcnZlKHRoaXMubmF0aXZlRWxlbWVudCksXG4gICAgICB0aGlzLmNvbnRlbnRPYnNlcnZlci5vYnNlcnZlKHRoaXMubmF0aXZlRWxlbWVudCksXG4gICAgKTtcblxuICAgIC8vIHRoYW5rcyB0byB0aGlzIGNvbmNhdCB3ZSBkZWJvdW5jZSBhbGwgYnV0IGZpcnN0IGVtaXNzaW9uXG4gICAgY29uY2F0KFxuICAgICAgcmVmcmVzaFRyaWdnZXJzJC5waXBlKHRha2UoMSkpLFxuICAgICAgcmVmcmVzaFRyaWdnZXJzJC5waXBlKGRlYm91bmNlVGltZSgyMDApKSxcbiAgICApXG4gICAgICAucGlwZSh0YWtlVW50aWxEZXN0cm95ZWQodGhpcy5kZXN0cm95UmVmKSlcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fcmVmcmVzaEhlaWdodCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBfcmVmcmVzaEhlaWdodCgpOiB2b2lkIHtcbiAgICBjb25zdCBwYXJlbnRFbGVtZW50ID0gdGhpcy5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICB0aGlzLnRvZ2dsZVNjcm9sbGFibGVDbGFzcygpO1xuXG4gICAgY29uc3QgaGVhZGVyID0gcGFyZW50RWxlbWVudC5xdWVyeVNlbGVjdG9yKEhFQURFUl9TRUxFQ1RPUik7XG4gICAgY29uc3QgYWN0aW9uc0NvbnRhaW5lciA9IHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihBQ1RJT05TX1NFTEVDVE9SKTtcblxuICAgIGNvbnN0IGFjdGlvbnNDb250YWluZXJIZWlnaHQgPSBhY3Rpb25zQ29udGFpbmVyPy5zY3JvbGxIZWlnaHQgfHwgMDtcblxuICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgaGVhZGVySGVpZ2h0ID0gaGVhZGVyPy5zY3JvbGxIZWlnaHQgfHwgMDtcbiAgICAgIGNvbnN0IG5ld0hlaWdodCA9IGBjYWxjKDEwMCUgLSAke2hlYWRlckhlaWdodH1weCAtICR7YWN0aW9uc0NvbnRhaW5lckhlaWdodH1weClgO1xuXG4gICAgICBpZiAodGhpcy5faGVpZ2h0ICE9PSBuZXdIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLl9oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSB0b2dnbGVTY3JvbGxhYmxlQ2xhc3MoKTogdm9pZCB7XG4gICAgY29uc3QgcmRzRGlhbG9nID0gdGhpcy5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQ/LnBhcmVudEVsZW1lbnQ7XG5cbiAgICBpZiAoIXJkc0RpYWxvZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0ID4gdGhpcy5uYXRpdmVFbGVtZW50Lm9mZnNldEhlaWdodCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhyZHNEaWFsb2csIFNDUk9MTEFCTEVfQ0xBU1MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNoaWxkKHJkc0RpYWxvZywgU0NST0xMQUJMRV9DTEFTUyk7XG4gICAgfVxuICB9XG59XG4iXX0=