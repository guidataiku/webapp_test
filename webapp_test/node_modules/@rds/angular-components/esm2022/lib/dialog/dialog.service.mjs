import { inject, Injectable, Injector, TemplateRef, } from '@angular/core';
import { DialogSizeWidth, RdsDialogConfig, RdsDialogRef } from './model';
import { defer, Subject } from 'rxjs';
import { Overlay, OverlayConfig, ScrollStrategyOptions, } from '@angular/cdk/overlay';
import { startWith } from 'rxjs/operators';
import { RdsDialogContainerComponent } from './dialog-container.component';
import { ComponentPortal, TemplatePortal } from '@angular/cdk/portal';
import { RDS_DIALOG_DATA } from './tokens';
import * as i0 from "@angular/core";
export class RdsDialogService {
    constructor() {
        this.overlay = inject(Overlay);
        this.injector = inject(Injector);
        this.scrollStrategyOptions = inject(ScrollStrategyOptions);
        this.parentDialogService = inject(RdsDialogService, {
            optional: true,
            skipSelf: true,
        });
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.dialogsOpenAtCurrentLevel = [];
        this.afterAllClosedAtCurrentLevel = new Subject();
        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
        this.afterOpenedAtCurrentLevel = new Subject();
        this.scrollStrategy = () => this.scrollStrategyOptions.block();
        this.afterAllClosed = defer(() => this.openDialogs.length
            ? this._afterAllClosed
            : this._afterAllClosed.pipe(startWith([undefined])));
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get openDialogs() {
        return this.parentDialogService
            ? this.parentDialogService.openDialogs
            : this.dialogsOpenAtCurrentLevel;
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    get afterOpened() {
        return this.parentDialogService
            ? this.parentDialogService.afterOpened
            : this.afterOpenedAtCurrentLevel;
    }
    get _afterAllClosed() {
        const parent = this.parentDialogService;
        return parent ? parent._afterAllClosed : this.afterAllClosedAtCurrentLevel;
    }
    ngOnDestroy() {
        this.closeDialogs(this.dialogsOpenAtCurrentLevel);
        this.afterAllClosedAtCurrentLevel.complete();
        this.afterOpenedAtCurrentLevel.complete();
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    open(componentOrTemplateRef, dialogConfig) {
        const mergedDialogConfig = this.mergeDialogConfigWithDefaultDialogConfigValues(dialogConfig);
        if (mergedDialogConfig.id && this.getDialogById(mergedDialogConfig.id)) {
            throw Error(`Dialog with id "${mergedDialogConfig.id}" exists already. The dialog id must be unique.`);
        }
        const overlayRef = this.createOverlayRef(mergedDialogConfig);
        const dialogContainer = this.attachDialogContainer(overlayRef, mergedDialogConfig);
        const dialogRef = this.attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, mergedDialogConfig);
        this.openDialogs.push(dialogRef);
        dialogRef.afterClosed().subscribe(() => this.removeDialogRef(dialogRef));
        this.afterOpened.next(dialogRef);
        return dialogRef;
    }
    closeAll() {
        this.closeDialogs(this.openDialogs);
    }
    createOverlayRef(dialogConfig) {
        const overlayConfig = this.buildOverlayConfig({
            panelClass: dialogConfig.panelClass,
            hasBackdrop: dialogConfig.hasBackdrop,
            size: dialogConfig.size,
            minHeight: dialogConfig.minHeight,
            maxHeight: dialogConfig.maxHeight,
            closeOnNavigation: dialogConfig.closeOnNavigation,
            role: dialogConfig.role,
        });
        return this.overlay.create(overlayConfig);
    }
    getDialogById(id) {
        return this.openDialogs.find((dialog) => dialog.id === id);
    }
    buildOverlayConfig({ panelClass, hasBackdrop, size, minHeight, maxHeight, closeOnNavigation, }) {
        return new OverlayConfig({
            positionStrategy: this.overlay.position().global(),
            scrollStrategy: this.scrollStrategy(),
            panelClass,
            hasBackdrop,
            minWidth: '0px',
            maxWidth: `${DialogSizeWidth[size]}px`,
            minHeight,
            maxHeight,
            disposeOnNavigation: closeOnNavigation,
        });
    }
    attachDialogContainer(overlayRef, dialogConfig) {
        const userInjector = dialogConfig.viewContainerRef && dialogConfig.viewContainerRef.injector;
        const injector = Injector.create({
            parent: userInjector || this.injector,
            providers: [{ provide: RdsDialogConfig, useValue: dialogConfig }],
        });
        const containerPortal = new ComponentPortal(RdsDialogContainerComponent, dialogConfig.viewContainerRef, injector, dialogConfig.componentFactoryResolver);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, dialogConfig) {
        const dialogRef = new RdsDialogRef(overlayRef, dialogContainer, dialogConfig.id);
        if (componentOrTemplateRef instanceof TemplateRef) {
            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, 
            /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
            { $implicit: dialogConfig.data, dialogRef }));
        }
        else {
            const injector = this.createInjector(dialogConfig, dialogRef, dialogContainer);
            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, dialogConfig.viewContainerRef, injector));
            dialogRef.componentInstance = contentRef.instance;
        }
        dialogRef.changeSize(`${DialogSizeWidth[dialogConfig.size]}px`, dialogConfig.height);
        dialogRef.centerDialog();
        dialogRef.updateOverlayPosition();
        return dialogRef;
    }
    createInjector(dialogConfig, dialogRef, dialogContainer) {
        const userInjector = dialogConfig.viewContainerRef && dialogConfig.viewContainerRef.injector;
        const providers = [
            { provide: RdsDialogContainerComponent, useValue: dialogContainer },
            { provide: RDS_DIALOG_DATA, useValue: dialogConfig.data },
            { provide: RdsDialogRef, useValue: dialogRef },
        ];
        return Injector.create({
            parent: userInjector || this.injector,
            providers,
        });
    }
    removeDialogRef(dialogRef) {
        const index = this.openDialogs.indexOf(dialogRef);
        if (index > -1) {
            this.openDialogs.splice(index, 1);
        }
    }
    closeDialogs(dialogs) {
        let i = dialogs.length;
        while (i--) {
            dialogs[i].close();
        }
    }
    mergeDialogConfigWithDefaultDialogConfigValues(dialogConfig) {
        const config = { ...new RdsDialogConfig(), ...dialogConfig };
        if (!config.panelClass) {
            config.panelClass = 'rds-dialog-overlay';
        }
        else if (typeof config.panelClass === 'string') {
            config.panelClass = ['rds-dialog-overlay', config.panelClass];
        }
        else {
            config.panelClass = ['rds-dialog-overlay', ...config.panelClass];
        }
        return config;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDialogService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,