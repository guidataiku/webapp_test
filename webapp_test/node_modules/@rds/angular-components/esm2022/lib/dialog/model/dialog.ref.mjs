import { Subject } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';
let uniqueId = 0;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export class RdsDialogRef {
    constructor(overlayRef, dialogContainer, id = `rds-dialog-${uniqueId++}`) {
        this.overlayRef = overlayRef;
        this.dialogContainer = dialogContainer;
        this.id = id;
        this.afterOpened$ = new Subject();
        this.afterClosed$ = new Subject();
        this.beforeClosed$ = new Subject();
        this.dialogState = 0 /* RdsDialogState.OPEN */;
        this.disableClose = this.dialogContainer.config.disableClose;
        this.dialogContainer.id = id;
        // Emit when opening animation completes
        this.dialogContainer.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'enter'), take(1))
            .subscribe(() => {
            this.afterOpened$.next();
            this.afterOpened$.complete();
        });
        dialogContainer.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'exit'), take(1))
            .subscribe(() => {
            if (this.closeFallbackTimeout) {
                clearTimeout(this.closeFallbackTimeout);
            }
            this.finishDialogClose();
        });
        overlayRef.detachments().subscribe(() => {
            this.beforeClosed$.next(this.result);
            this.beforeClosed$.complete();
            this.afterClosed$.next(this.result);
            this.afterClosed$.complete();
            this.componentInstance = null;
            this.overlayRef.dispose();
        });
        overlayRef
            .keydownEvents()
            .pipe(filter((event) => event.keyCode === ESCAPE &&
            !this.disableClose &&
            !hasModifierKey(event)))
            .subscribe((event) => {
            event.preventDefault();
            this.close();
        });
        overlayRef.backdropClick().subscribe(() => {
            if (this.disableClose) {
                this.dialogContainer.recaptureFocus();
            }
            else {
                this.close();
            }
        });
    }
    close(dialogResult) {
        this.result = dialogResult;
        this.dialogContainer.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'start'), take(1))
            .subscribe((event) => {
            this.beforeClosed$.next(dialogResult);
            this.beforeClosed$.complete();
            this.overlayRef.detachBackdrop();
            this.closeFallbackTimeout = setTimeout(() => this.finishDialogClose(), event.totalTime + 100);
        });
        this.dialogContainer.startExitAnimation();
        this.dialogState = 1 /* RdsDialogState.CLOSING */;
    }
    afterOpened() {
        return this.afterOpened$.asObservable();
    }
    afterClosed() {
        return this.afterClosed$.asObservable();
    }
    beforeClosed() {
        return this.beforeClosed$.asObservable();
    }
    backdropClick() {
        return this.overlayRef.backdropClick();
    }
    centerDialog() {
        const positionStrategy = this.getPositionStrategy();
        positionStrategy.centerHorizontally();
        positionStrategy.centerVertically();
    }
    changeSize(width = '', height = '') {
        this.getPositionStrategy().width(width).height(height);
    }
    updateOverlayPosition() {
        this.overlayRef.updatePosition();
    }
    finishDialogClose() {
        this.dialogState = 2 /* RdsDialogState.CLOSED */;
        this.overlayRef.dispose();
    }
    getPositionStrategy() {
        return this.overlayRef.getConfig()
            .positionStrategy;
    }
}
//# sourceMappingURL=data:application/json;base64,