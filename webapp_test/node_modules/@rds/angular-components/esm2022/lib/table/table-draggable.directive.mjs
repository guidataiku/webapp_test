import { ContentChildren, DestroyRef, Directive, ElementRef, EventEmitter, inject, Input, NgZone, numberAttribute, Output, QueryList, Renderer2, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { RdsTableDragHandleDirective } from './table-drag-handle.directive';
import { filter, map, take, takeUntil } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
import { cellsToRowsHTML, isElement, isInsideRect, } from './table-draggable.helpers';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const HEADER_ROW_SELECTOR = '.rds-header-row';
const HEADER_CELL_SELECTOR = '.rds-header-cell';
export class RdsTableDraggableDirective {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.document = inject(DOCUMENT);
        this.renderer = inject(Renderer2);
        this.originalTable = inject(ElementRef).nativeElement;
        this.zone = inject(NgZone);
        this.header = null;
        this.columnPreview = null;
        this.columnRects = [];
        this.maxPreviewRows = 10;
        this.rdsTableDragEnd = new EventEmitter();
    }
    ngAfterViewInit() {
        this.zone.runOutsideAngular(() => {
            this.createDragStartObservable().subscribe((e) => this.onDragStart(e));
        });
    }
    onDragStart({ draggedHeaderCell, nativeEvent, }) {
        this.columnRects = [];
        this.createAndInsertContainerElement();
        this.saveCoords(nativeEvent);
        this.getHeaderCells().forEach((headerCell, index) => this.createColumnAndHandleDrag(draggedHeaderCell, headerCell, index));
        this.createDragMoveObservable().subscribe((e) => this.onDragMove(e));
        this.createDragEndObservable().subscribe(() => this.onDragEnd());
    }
    createColumnAndHandleDrag(draggedHeaderCell, headerCell, index) {
        headerCell === draggedHeaderCell
            ? this.addDraggedColumn(headerCell, index)
            : this.addColumn(headerCell, index);
    }
    addColumn(headerCell, index) {
        const { width } = headerCell.getBoundingClientRect();
        const rowsHTML = cellsToRowsHTML(this.getColumnCells(index));
        this.container.innerHTML += this.createColumnHTML(rowsHTML, width, headerCell);
        this.saveLastColumnRect(index);
    }
    addDraggedColumn(headerCell, index) {
        this.currentIndex = index;
        this.originalIndex = index;
        const { width, x, y } = headerCell.getBoundingClientRect();
        const rowsHTML = cellsToRowsHTML(this.getColumnCells(index), this.maxPreviewRows);
        this.container.innerHTML += this.createColumnPlaceholderHTML(width, this.boundingRect.height);
        this.saveLastColumnRect(index);
        this.columnPreview = this.createColumnPreview(headerCell, width, rowsHTML);
        this.renderer.insertBefore(this.document.body, this.columnPreview, null);
        this.moveColumnAnimationFrame = requestAnimationFrame(this.followPointerFactory(x, y));
    }
    saveLastColumnRect(index) {
        this.columnRects[index] =
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            this.container.lastElementChild.getBoundingClientRect();
    }
    createDragStartObservable() {
        return fromEvent(this.originalTable, 'pointerdown').pipe(map((event) => this.addHeaderCellData(event)), filter(Boolean), takeUntilDestroyed(this.destroyRef));
    }
    createDragMoveObservable() {
        return fromEvent(this.document.body, 'pointermove').pipe(takeUntil(this.rdsTableDragEnd), takeUntilDestroyed(this.destroyRef));
    }
    addHeaderCellData(event) {
        if (!isElement(event.target)) {
            return null;
        }
        if (this.dragHandlesQuery.length &&
            !this.dragHandlesQuery.some((handle) => handle.nativeElement === event.target)) {
            return null;
        }
        // header is rebuilt after each drag end, so we need to query it on each drag start
        this.header = event.target.closest(HEADER_ROW_SELECTOR);
        if (!this.header) {
            return null;
        }
        const draggedHeaderCell = event.target.closest(HEADER_CELL_SELECTOR);
        if (!draggedHeaderCell) {
            return null;
        }
        return { draggedHeaderCell, nativeEvent: event };
    }
    createAndInsertContainerElement() {
        this.boundingRect = this.originalTable.getBoundingClientRect();
        this.container = this.renderer.createElement('div');
        this.renderer.addClass(this.container, 'rds-table-draggable-preview');
        this.renderer.setStyle(this.container, 'width', this.boundingRect.width + 'px');
        this.renderer.setStyle(this.container, 'height', this.boundingRect.height + 'px');
        this.renderer.insertBefore(this.originalTable.parentElement, this.container, this.originalTable);
    }
    getColumnCells(columnIndex) {
        return Array.from(this.originalTable.querySelectorAll(`.rds-cell:nth-child(${columnIndex + 1})`));
    }
    createColumnPreview(headerCell, width, rowsHTML) {
        const columnPreview = this.renderer.createElement('div');
        this.renderer.setStyle(columnPreview, 'position', 'fixed');
        this.renderer.setStyle(columnPreview, 'top', '0');
        this.renderer.setStyle(columnPreview, 'left', '0');
        this.renderer.setStyle(columnPreview, 'z-index', '99999999');
        const height = headerCell.parentElement?.offsetHeight;
        columnPreview.innerHTML = `
      <table class="${this.originalTable.classList.value}" style="width: ${width}px; ">
          <thead>
            <tr class="rds-row">
              <th class="rds-header-cell" style="height: ${height ? height + 'px' : 'unset'}">${headerCell.innerHTML}</th>
            </tr>
          </thead>
          <tbody>
            ${rowsHTML}
          </tbody>
      </table>
        `;
        return columnPreview;
    }
    createColumnHTML(rowsHTML, width, headerCell) {
        const height = headerCell.parentElement?.offsetHeight;
        return `
          <div style="flex-shrink: 0;">
            <table class="${this.originalTable.classList.value}" style="width: ${width}px;">
                <thead>
                  <tr class="rds-row">
                    <th class="rds-header-cell" style="height: ${height ? height + 'px' : 'unset'}">${headerCell.innerHTML}</th>
                  </tr>
                </thead>
                <tbody>
                  ${rowsHTML}
                </tbody>
            </table>
          </div>
        `;
    }
    createColumnPlaceholderHTML(width, height) {
        return `
      <div class="rds-table-draggable-column-placeholder" style="width: ${width}px; height: ${height}px"></div>
    `;
    }
    getHeaderCells() {
        return Array.from(this.header?.querySelectorAll(HEADER_CELL_SELECTOR) ?? []);
    }
    swapColumns(aIndex, bIndex) {
        const aColumn = this.container.children.item(aIndex);
        const bColumn = this.container.children.item(bIndex);
        if (!aColumn || !bColumn) {
            return;
        }
        if (bIndex > aIndex) {
            this.renderer.insertBefore(this.container, bColumn, aColumn);
        }
        else {
            this.renderer.insertBefore(this.container, aColumn, bColumn);
        }
    }
    createDragEndObservable() {
        return fromEvent(window, 'pointerup', { once: true }).pipe(take(1), takeUntilDestroyed(this.destroyRef));
    }
    onDragMove(event) {
        this.saveCoords(event);
        for (let i = 0; i < this.columnRects.length; i++) {
            if (i === this.currentIndex) {
                continue;
            }
            const rect = this.columnRects[i];
            if (isInsideRect(event, rect)) {
                this.swapColumns(this.currentIndex, i);
                this.currentIndex = i;
                break;
            }
        }
    }
    saveCoords({ clientX, clientY }) {
        this.clientX = clientX;
        this.clientY = clientY;
    }
    onDragEnd() {
        cancelAnimationFrame(this.moveColumnAnimationFrame);
        this.removeContainerAndPreview();
        this.emitChange();
    }
    emitChange() {
        this.zone.run(() => {
            this.rdsTableDragEnd.emit({
                oldIndex: this.originalIndex,
                newIndex: this.currentIndex,
            });
        });
    }
    removeContainerAndPreview() {
        this.renderer.removeChild(this.container.parentElement, this.container);
        if (this.columnPreview) {
            this.renderer.removeChild(this.document.body, this.columnPreview);
        }
    }
    followPointerFactory(columnOriginX, columnOriginY) {
        const offsetX = this.clientX - columnOriginX;
        const offsetY = this.clientY - columnOriginY;
        const followPointer = () => {
            this.renderer.setStyle(this.columnPreview, 'transform', `translate(${this.clientX - offsetX}px, ${this.clientY - offsetY}px)`);
            this.moveColumnAnimationFrame = requestAnimationFrame(followPointer);
        };
        return followPointer;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableDraggableDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTableDraggableDirective, selector: "[rdsTableDraggable], [rds-table-draggable]", inputs: { maxPreviewRows: ["maxPreviewRows", "maxPreviewRows", numberAttribute] }, outputs: { rdsTableDragEnd: "rdsTableDragEnd" }, queries: [{ propertyName: "dragHandlesQuery", predicate: RdsTableDragHandleDirective, descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableDraggableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTableDraggable], [rds-table-draggable]',
                }]
        }], propDecorators: { dragHandlesQuery: [{
                type: ContentChildren,
                args: [RdsTableDragHandleDirective, { descendants: true }]
            }], maxPreviewRows: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], rdsTableDragEnd: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,