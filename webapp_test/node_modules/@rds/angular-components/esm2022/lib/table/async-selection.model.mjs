import { Subject } from 'rxjs';
export class AsyncSelectionModel {
    get changed() {
        return this._changed.asObservable();
    }
    get length() {
        return this._length;
    }
    constructor(length, _multiple = false, compareFunc = (a, b) => a === b, initiallySelectedValues, initiallyDeselectedValues, _emitChanges = true) {
        this._multiple = _multiple;
        this._emitChanges = _emitChanges;
        this._length = -1;
        this._isAllSelected = false;
        this._removedToEmit = [];
        this._addedToEmit = [];
        this._selected = [];
        this._deselected = [];
        this._changed = new Subject();
        this._compareFunc = (a, b) => a === b;
        this._length = length;
        if (initiallySelectedValues && initiallySelectedValues.length) {
            if (_multiple) {
                initiallySelectedValues.forEach((value) => this._markSelected(value));
            }
            else {
                this._markSelected(initiallySelectedValues[0]);
            }
            this._addedToEmit.length = 0;
        }
        if (initiallyDeselectedValues && initiallyDeselectedValues.length) {
            initiallyDeselectedValues.forEach((value) => this._markDeselected(value));
            this._removedToEmit.length = 0;
        }
        if (typeof compareFunc === 'function') {
            this._compareFunc = compareFunc;
        }
    }
    updateLength(length) {
        this._length = length;
        this._checkIfAllSelected();
    }
    isAllSelected() {
        return this._isAllSelected || this._length === 0;
    }
    getAllSelectedType() {
        if (this.isAllSelected() && this._deselected.length === 0) {
            return 'all';
        }
        else if (!this.isAllSelected() && this._selected.length === 0) {
            return 'none';
        }
        else {
            return 'partial';
        }
    }
    selectAll() {
        if (this._length > 1 && !this._multiple) {
            throw getMultipleValuesInSingleSelectionError();
        }
        this._isAllSelected = true;
        this._deselected = [];
        this._removedToEmit = [];
        this._selected = [];
        this._addedToEmit = [];
        this._emitChangeEvent();
    }
    deselectAll() {
        this._isAllSelected = false;
        this._deselected = [];
        this._removedToEmit = [];
        this._selected = [];
        this._addedToEmit = [];
        this._emitChangeEvent();
    }
    toggleAll() {
        this.isAllSelected() ? this.deselectAll() : this.selectAll();
    }
    clear() {
        this._isAllSelected = false;
        this._deselected = [];
        this._removedToEmit = [];
        this._selected = [];
        this._addedToEmit = [];
        this._emitChangeEvent();
    }
    select(...values) {
        this._verifyValueAssignment(values);
        values.forEach((value) => this._markSelected(value));
        this._checkIfAllSelected();
        this._emitChangeEvent();
    }
    deselect(...values) {
        this._verifyValueAssignment(values);
        values.forEach((value) => this._markDeselected(value));
        this._checkIfAllSelected();
        this._emitChangeEvent();
    }
    toggle(value) {
        this.isSelected(value) ? this.deselect(value) : this.select(value);
    }
    isSelected(value) {
        return this.isAllSelected()
            ? !this._deselected.some((v) => this._compareFunc(v, value))
            : this._selected.some((v) => this._compareFunc(v, value));
    }
    isDeselected(value) {
        return !this.isSelected(value);
    }
    isEmpty() {
        if (this._length === 0) {
            return true;
        }
        return ((!this.isAllSelected() && this._selected.length === 0) ||
            (this.isAllSelected() && this._deselected.length === this._length));
    }
    hasValue() {
        return !this.isEmpty();
    }
    sort(predicate) {
        if (this._multiple) {
            if (this._selected) {
                this._selected.sort(predicate);
            }
        }
        if (this._deselected) {
            this._deselected.sort(predicate);
        }
    }
    isMultipleSelection() {
        return this._multiple;
    }
    _emitChangeEvent() {
        this._changed.next({
            source: this,
            isAllSelected: this.isAllSelected(),
            allSelectedType: this.getAllSelectedType(),
            added: this._addedToEmit,
            removed: this._removedToEmit,
        });
        this._removedToEmit = [];
        this._addedToEmit = [];
    }
    _markSelected(value) {
        if (this.isDeselected(value)) {
            this._unmarkDeselected(value);
            if (!this._multiple) {
                this._unmarkAll();
            }
            this._selected.push(value);
            if (this._emitChanges) {
                this.pushIfNotExists(this._addedToEmit, value);
            }
        }
    }
    _unmarkSelected(value) {
        if (this.isSelected(value)) {
            const index = this._selected.findIndex((v) => this._compareFunc(v, value));
            if (index > -1) {
                this._selected.splice(index, 1);
                if (this._emitChanges) {
                    this.pushIfNotExists(this._removedToEmit, value);
                }
            }
        }
    }
    _markDeselected(value) {
        if (this.isSelected(value)) {
            this._unmarkSelected(value);
            const index = this._deselected.findIndex((v) => this._compareFunc(v, value));
            if (index === -1) {
                this._deselected.push(value);
                if (this._emitChanges) {
                    this.pushIfNotExists(this._removedToEmit, value);
                }
            }
        }
    }
    _unmarkDeselected(value) {
        if (this.isDeselected(value)) {
            const index = this._deselected.findIndex((v) => this._compareFunc(v, value));
            if (index > -1) {
                this._deselected.splice(index, 1);
                if (this._emitChanges) {
                    this.pushIfNotExists(this._addedToEmit, value);
                }
            }
        }
    }
    _unmarkAll() {
        if (!this.isEmpty()) {
            this._selected.forEach((value) => this._unmarkSelected(value));
        }
    }
    _verifyValueAssignment(values) {
        if (values.length > 1 && !this._multiple) {
            throw getMultipleValuesInSingleSelectionError();
        }
    }
    _checkIfAllSelected() {
        if (this._length === this._selected.length) {
            this._isAllSelected = true;
            this._removedToEmit = this._deselected;
            this._deselected = [];
        }
        else if (this._length === this._deselected.length) {
            this._isAllSelected = false;
            this._addedToEmit = [];
            this._selected = [];
        }
    }
    pushIfNotExists(array, value) {
        if (array.every((v) => !this._compareFunc(v, value))) {
            array.push(value);
        }
    }
}
export function getMultipleValuesInSingleSelectionError() {
    return Error('Cannot pass multiple values into AsyncSelectionModel with single-value mode.');
}
export function isEqual(...property) {
    if (!property || (Array.isArray(property) && property.length === 0)) {
        throw new Error('Property needs to be defined to compare function');
    }
    return (a, b) => {
        for (let i = 0; i < property.length; i++) {
            if (a[property[i]] === b[property[i]]) {
                continue;
            }
            return false;
        }
        return true;
    };
}
//# sourceMappingURL=data:application/json;base64,