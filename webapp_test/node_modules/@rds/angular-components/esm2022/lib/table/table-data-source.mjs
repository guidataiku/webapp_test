import { _isNumberValue } from '@angular/cdk/coercion';
import { DataSource } from '@angular/cdk/table';
import { BehaviorSubject, catchError, combineLatest, merge, of, Subject, } from 'rxjs';
import { delay, map, switchMap, tap } from 'rxjs/operators';
import { isDevMode } from '@angular/core';
export class _RdsTableDataSource extends DataSource {
    get data() {
        return this._data.value;
    }
    set data(data) {
        if (!Array.isArray(data)) {
            if (ngDevMode) {
                throw new Error("Data passed to the table's data source is not an array.");
            }
            else {
                data = [];
            }
        }
        this._data.next(data);
    }
    get sort() {
        return this._sort;
    }
    set sort(sort) {
        this._sort = sort;
        this._updateChangeSubscription();
    }
    get paginator() {
        return this._paginator;
    }
    set paginator(paginator) {
        this._paginator = paginator;
        this._updateChangeSubscription();
    }
    constructor(initialData = []) {
        super();
        this._renderData = new BehaviorSubject([]);
        this._internalPageChanges = new Subject();
        this._isInitialized = false;
        this._renderChangesSubscription = null;
        this._sort = null;
        this._paginator = null;
        this.sortingDataAccessor = (data, sortHeaderId) => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const value = data[sortHeaderId];
            if (_isNumberValue(value)) {
                const numberValue = Number(value);
                return numberValue < Number.MAX_SAFE_INTEGER ? numberValue : value;
            }
            return value;
        };
        this.sortData = (data, sort) => {
            const active = sort.active;
            const direction = sort.direction;
            if (!active || direction == '') {
                return data;
            }
            return data.sort((a, b) => {
                let valueA = this.sortingDataAccessor(a, active);
                let valueB = this.sortingDataAccessor(b, active);
                const valueAType = typeof valueA;
                const valueBType = typeof valueB;
                if (valueAType !== valueBType) {
                    if (valueAType === 'number') {
                        valueA += '';
                    }
                    if (valueBType === 'number') {
                        valueB += '';
                    }
                }
                let comparatorResult = 0;
                if (valueA != null && valueB != null) {
                    if (valueA > valueB) {
                        comparatorResult = 1;
                    }
                    else if (valueA < valueB) {
                        comparatorResult = -1;
                    }
                }
                else if (valueA != null) {
                    comparatorResult = 1;
                }
                else if (valueB != null) {
                    comparatorResult = -1;
                }
                return comparatorResult * (direction == 'asc' ? 1 : -1);
            });
        };
        this._data = new BehaviorSubject(initialData);
    }
    connect() {
        if (!this._renderChangesSubscription) {
            this._updateChangeSubscription();
        }
        return this._renderData.asObservable();
    }
    disconnect() {
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = null;
    }
    init() {
        this._isInitialized = true;
        this._updateChangeSubscription();
        return this;
    }
    createSortObservable() {
        return this._sort
            ? merge(this._sort.rdsSortChange, this._sort.initialized)
            : of(undefined);
    }
    createPageObservable() {
        return this._paginator
            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)
            : of(undefined);
    }
    _orderData(data) {
        if (!this.sort) {
            return data;
        }
        return this.sortData(data.slice(), this.sort);
    }
    _pageData(data) {
        if (!this.paginator) {
            return data;
        }
        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;
        return data.slice(startIndex, startIndex + this.paginator.pageSize);
    }
    _updatePaginator(filteredDataLength) {
        Promise.resolve().then(() => {
            if (!this.paginator) {
                return;
            }
            this.paginator.length = filteredDataLength;
            if (this.paginator.pageIndex > 0) {
                const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;
                const newPageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);
                if (newPageIndex !== this.paginator.pageIndex) {
                    this.paginator.pageIndex = newPageIndex;
                    this._internalPageChanges.next();
                }
            }
        });
    }
}
export class RdsTableDataSource extends _RdsTableDataSource {
    constructor() {
        super(...arguments);
        this._filter = new BehaviorSubject('');
        this._filteredData = [];
        this.filterPredicate = (data, filter) => {
            const dataStr = Object.keys(data)
                .reduce((currentTerm, key) => {
                // Use an obscure Unicode character to delimit the words in the concatenated string.
                // This avoids matches where the values of two columns combined will match the user's query
                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something
                // that has a very low chance of being typed in by somebody in a text field. This one in
                // particular is "White up-pointing triangle with dot" from
                // https://en.wikipedia.org/wiki/List_of_Unicode_characters
                return (currentTerm + data[key] + 'â—¬');
            }, '')
                .toLowerCase();
            const transformedFilter = filter.trim().toLowerCase();
            return dataStr.indexOf(transformedFilter) != -1;
        };
    }
    get filteredData() {
        return this._filteredData;
    }
    set filteredData(v) {
        this._filteredData = v;
    }
    set data(data) {
        super.data = data;
        if (!this._renderChangesSubscription) {
            this._filterData(data);
        }
    }
    get data() {
        return super.data;
    }
    get filter() {
        return this._filter.value;
    }
    set filter(filter) {
        this._filter.next(filter);
        if (!this._renderChangesSubscription) {
            this._filterData(this.data);
        }
    }
    _filterData(data, skipPaginatorUpdate = false) {
        this.filteredData =
            this.filter == null || this.filter === ''
                ? data
                : data.filter((obj) => this.filterPredicate(obj, this.filter));
        if (this.paginator && !skipPaginatorUpdate) {
            this._updatePaginator(this.filteredData.length);
        }
        return this.filteredData;
    }
    _updateChangeSubscription() {
        if (!this._isInitialized) {
            return;
        }
        const sortChange = this.createSortObservable();
        const pageChange = this.createPageObservable();
        const dataStream = this._data;
        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));
        const orderedData = combineLatest([filteredData, sortChange]).pipe(tap(([data]) => this._updatePaginator(data.length)), map(([data]) => this._orderData(data)));
        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = paginatedData.subscribe((data) => {
            this._renderData.next(data);
        });
    }
}
export class RdsTableAsyncDataSource extends _RdsTableDataSource {
    get isLoading() {
        return this._loadingData$.getValue();
    }
    get isError() {
        return !this._loadingData$.getValue() && this._error$.getValue() !== null;
    }
    constructor(fetchData) {
        super([]);
        this._loadingData$ = new BehaviorSubject(false);
        this._error$ = new BehaviorSubject(null);
        this._externalTrigger$ = new BehaviorSubject(void 0);
        this._fetchData = fetchData;
    }
    disconnect() {
        super.disconnect();
        this._loadingData$.complete();
        this._error$.complete();
    }
    fetchData() {
        if (this._isInitialized) {
            this._externalTrigger$.next();
        }
        else if (isDevMode()) {
            throw new Error(`RdsAsyncTableDataSource needs to be initialized before manual fetchData trigger.`);
        }
    }
    getLoadingData() {
        return this._loadingData$.asObservable();
    }
    getError() {
        return this._error$.asObservable();
    }
    _updateChangeSubscription() {
        if (!this._isInitialized) {
            return;
        }
        const sortChange = this.createSortObservable();
        const pageChange = this.createPageObservable();
        const dataStream = combineLatest([
            sortChange,
            pageChange,
            this._externalTrigger$,
        ]).pipe(delay(0), switchMap(([sort, page]) => {
            if (typeof this._fetchData === 'function') {
                this._loadingData$.next(true);
                return this._fetchData({
                    sort,
                    page: page || this._paginator?.get(),
                });
            }
            else {
                throw new Error('FetchData must be function');
            }
        }), tap(() => {
            this._loadingData$.next(false);
            if (this._error$.getValue() !== null) {
                this._error$.next(null);
            }
        }), catchError((err) => {
            this._loadingData$.next(false);
            this._error$.next(err);
            return of({
                data: [],
                length: 0,
                offset: 0,
                error: err,
            });
        }));
        this._renderChangesSubscription?.unsubscribe();
        this._renderChangesSubscription = dataStream.subscribe((result) => {
            this._renderData.next(result.data);
            this._updatePaginator(result.length);
        });
    }
}
//# sourceMappingURL=data:application/json;base64,