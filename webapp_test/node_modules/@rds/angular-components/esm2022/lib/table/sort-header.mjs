import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, HostBinding, HostListener, inject, Input, ViewEncapsulation, } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { ENTER, SPACE } from '@angular/cdk/keycodes';
import { merge } from 'rxjs';
import { RdsSortDirective } from './sort.directive';
import { animate, animateChild, keyframes, query, state, style, transition, trigger, } from '@angular/animations';
import { RDS_SORT_HEADER_COLUMN_DEF } from './cell';
import * as i0 from "@angular/core";
import * as i1 from "../icons/icon.component";
const SORT_ANIMATION_TRANSITION = '225ms cubic-bezier(0.4,0.0,0.2,1)';
const rdsSortAnimations = {
    arrowOpacity: trigger('arrowOpacity', [
        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),
        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),
        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),
        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),
        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),
    ]),
    arrowPosition: trigger('arrowPosition', [
        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(-25%)' }),
            style({ transform: 'translateY(0)' }),
        ]))),
        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(0)' }),
            style({ transform: 'translateY(25%)' }),
        ]))),
        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(25%)' }),
            style({ transform: 'translateY(0)' }),
        ]))),
        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([
            style({ transform: 'translateY(0)' }),
            style({ transform: 'translateY(-25%)' }),
        ]))),
        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),
        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),
        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),
    ]),
    allowChildren: trigger('allowChildren', [
        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),
    ]),
    arrow: trigger('arrow', [
        state('asc', style({ transform: '' })),
        state('desc', style({ transform: 'scaleY(-1)' })),
        transition('asc => desc', [animate(SORT_ANIMATION_TRANSITION)]),
        transition('desc => asc', [animate(SORT_ANIMATION_TRANSITION)]),
    ]),
};
export class RdsSortHeaderComponent {
    get _disabledClass() {
        return this._isDisabled();
    }
    get ariaSortAttribute() {
        if (!this._isSorted()) {
            return 'none';
        }
        return this.sort.direction == 'asc' ? 'ascending' : 'descending';
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.sort = inject(RdsSortDirective, {
            optional: true,
        });
        this.columnDef = inject(RDS_SORT_HEADER_COLUMN_DEF, {
            optional: true,
        });
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this._rerenderSubscription = null;
        this.class = 'rds-sort-header';
        this._showIndicatorHint = false;
        this._viewState = null;
        this._arrowDirection = '';
        this._disableViewStateAnimation = false;
        // eslint-disable-next-line @angular-eslint/no-input-rename
        this.id = '';
        this.arrowPosition = 'right';
        this.start = '';
        this.disableClear = false;
        this.disabled = false;
        if (!this.sort) {
            throw Error(`RdsSortHeader must be placed within a parent element with the RdsSort directive.`);
        }
        this._handleStateChanges();
    }
    ngOnInit() {
        if (!this.id && this.columnDef) {
            this.id = this.columnDef.name;
        }
        this._updateArrowDirection();
        this._setAnimationTransitionState({
            toState: this._isSorted() ? 'active' : this._arrowDirection,
        });
        this.sort.register(this);
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true).subscribe((origin) => {
            const newState = !!origin;
            if (newState !== this._showIndicatorHint) {
                this._setIndicatorHintVisible(newState);
                this.cdr.markForCheck();
            }
        });
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
        this.sort.deregister(this);
        this._rerenderSubscription?.unsubscribe();
    }
    onMouseenter() {
        this._setIndicatorHintVisible(true);
    }
    onMouseleave() {
        this._setIndicatorHintVisible(false);
    }
    _handleClick() {
        if (!this._isDisabled()) {
            this.sort.sort(this);
        }
    }
    _handleKeydown(event) {
        if (!this._isDisabled() &&
            (event.keyCode === SPACE || event.keyCode === ENTER)) {
            event.preventDefault();
            this._toggleOnInteraction();
        }
    }
    _isSorted() {
        return (this.sort.active == this.id &&
            (this.sort.direction === 'asc' || this.sort.direction === 'desc'));
    }
    _isDisabled() {
        return this.sort.disabled || this.disabled;
    }
    _renderArrow() {
        return !this._isDisabled() || this._isSorted();
    }
    _getArrowDirectionState() {
        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;
    }
    _getArrowViewState() {
        const fromState = this._viewState?.fromState;
        return (fromState ? `${fromState}-to-` : '') + this._viewState?.toState;
    }
    _updateArrowDirection() {
        this._arrowDirection = this._isSorted()
            ? this.sort.direction
            : this.start || this.sort.start;
    }
    _handleStateChanges() {
        this._rerenderSubscription = merge(this.sort.rdsSortChange, this.sort._stateChanges).subscribe(() => {
            if (this._isSorted()) {
                this._updateArrowDirection();
                if (this._viewState?.toState === 'hint' ||
                    this._viewState?.toState === 'active') {
                    this._disableViewStateAnimation = true;
                }
                this._setAnimationTransitionState({
                    fromState: this._arrowDirection,
                    toState: 'active',
                });
                this._showIndicatorHint = false;
            }
            if (!this._isSorted() &&
                this._viewState &&
                this._viewState.toState === 'active') {
                this._disableViewStateAnimation = false;
                this._setAnimationTransitionState({
                    fromState: 'active',
                    toState: this._arrowDirection,
                });
            }
            this.cdr.markForCheck();
        });
    }
    _setIndicatorHintVisible(visible) {
        if (this._isDisabled() && visible) {
            return;
        }
        this._showIndicatorHint = visible;
        if (!this._isSorted()) {
            this._updateArrowDirection();
            if (this._showIndicatorHint) {
                this._setAnimationTransitionState({
                    fromState: this._arrowDirection,
                    toState: 'hint',
                });
            }
            else {
                this._setAnimationTransitionState({
                    fromState: 'hint',
                    toState: this._arrowDirection,
                });
            }
        }
    }
    _setAnimationTransitionState(viewState) {
        this._viewState = viewState;
        if (this._disableViewStateAnimation) {
            this._viewState = { toState: viewState.toState };
        }
    }
    _toggleOnInteraction() {
        this.sort.sort(this);
        if (this._viewState?.toState === 'hint' ||
            this._viewState?.toState === 'active') {
            this._disableViewStateAnimation = true;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsSortHeaderComponent, selector: "[rds-sort-header], [rdsSortHeader]", inputs: { id: ["rds-sort-header", "id"], arrowPosition: "arrowPosition", start: "start", disableClear: ["disableClear", "disableClear", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute] }, host: { listeners: { "mouseenter": "onMouseenter()", "mouseleave": "onMouseleave()", "click": "_handleClick()", "keydown": "_handleKeydown($event)" }, properties: { "class": "this.class", "class.rds-sort-header-disabled": "this._disabledClass", "attr.aria-sort": "this.ariaSortAttribute" } }, exportAs: ["rdsSortHeader"], ngImport: i0, template: "<div\n  class=\"rds-sort-header-container rds-focus-indicator\"\n  [class.rds-sort-header-sorted]=\"_isSorted()\"\n  [class.rds-sort-header-position-left]=\"arrowPosition === 'left'\"\n  [attr.tabindex]=\"_isDisabled() ? null : 0\"\n  role=\"button\"\n>\n  <div class=\"rds-sort-header-content\">\n    <ng-content />\n  </div>\n  @if (_renderArrow()) {\n  <div\n    class=\"rds-sort-header-arrow\"\n    [@arrowOpacity]=\"_getArrowViewState()\"\n    [@arrowPosition]=\"_getArrowViewState()\"\n    [@allowChildren]=\"_getArrowDirectionState()\"\n    (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n    (@arrowPosition.done)=\"_disableViewStateAnimation = false\"\n  >\n    <rds-icon [@arrow]=\"_arrowDirection\" namespace=\"outlined\" icon=\"arrow_up\" />\n  </div>\n  }\n</div>\n", styles: ["[rds-sort-header]:hover,[rds-sort-header]:focus{outline:none}.rds-sort-header-container{display:flex;cursor:pointer;align-items:center;outline:0}.rds-sort-header-disabled .rds-sort-header-container{cursor:default}.rds-sort-header-content{text-align:center;display:flex;align-items:center;width:100%}.rds-sort-header-position-left{flex-direction:row-reverse}.rds-sort-header-arrow{position:relative;display:flex;opacity:0;margin:0 0 0 8px}.rds-sort-header-arrow rds-icon{height:18px;width:18px}.rds-sort-header-position-left .rds-sort-header-arrow{margin:0 8px 0 0}\n"], dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], animations: [
            rdsSortAnimations.arrowOpacity,
            rdsSortAnimations.arrowPosition,
            rdsSortAnimations.allowChildren,
            rdsSortAnimations.arrow,
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: '[rds-sort-header], [rdsSortHeader]', exportAs: 'rdsSortHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [
                        rdsSortAnimations.arrowOpacity,
                        rdsSortAnimations.arrowPosition,
                        rdsSortAnimations.allowChildren,
                        rdsSortAnimations.arrow,
                    ], template: "<div\n  class=\"rds-sort-header-container rds-focus-indicator\"\n  [class.rds-sort-header-sorted]=\"_isSorted()\"\n  [class.rds-sort-header-position-left]=\"arrowPosition === 'left'\"\n  [attr.tabindex]=\"_isDisabled() ? null : 0\"\n  role=\"button\"\n>\n  <div class=\"rds-sort-header-content\">\n    <ng-content />\n  </div>\n  @if (_renderArrow()) {\n  <div\n    class=\"rds-sort-header-arrow\"\n    [@arrowOpacity]=\"_getArrowViewState()\"\n    [@arrowPosition]=\"_getArrowViewState()\"\n    [@allowChildren]=\"_getArrowDirectionState()\"\n    (@arrowPosition.start)=\"_disableViewStateAnimation = true\"\n    (@arrowPosition.done)=\"_disableViewStateAnimation = false\"\n  >\n    <rds-icon [@arrow]=\"_arrowDirection\" namespace=\"outlined\" icon=\"arrow_up\" />\n  </div>\n  }\n</div>\n", styles: ["[rds-sort-header]:hover,[rds-sort-header]:focus{outline:none}.rds-sort-header-container{display:flex;cursor:pointer;align-items:center;outline:0}.rds-sort-header-disabled .rds-sort-header-container{cursor:default}.rds-sort-header-content{text-align:center;display:flex;align-items:center;width:100%}.rds-sort-header-position-left{flex-direction:row-reverse}.rds-sort-header-arrow{position:relative;display:flex;opacity:0;margin:0 0 0 8px}.rds-sort-header-arrow rds-icon{height:18px;width:18px}.rds-sort-header-position-left .rds-sort-header-arrow{margin:0 8px 0 0}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], _disabledClass: [{
                type: HostBinding,
                args: ['class.rds-sort-header-disabled']
            }], ariaSortAttribute: [{
                type: HostBinding,
                args: ['attr.aria-sort']
            }], id: [{
                type: Input,
                args: ['rds-sort-header']
            }], arrowPosition: [{
                type: Input
            }], start: [{
                type: Input
            }], disableClear: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onMouseenter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseleave: [{
                type: HostListener,
                args: ['mouseleave']
            }], _handleClick: [{
                type: HostListener,
                args: ['click']
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1oZWFkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3RhYmxlL3NvcnQtaGVhZGVyLnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi90YWJsZS9zb3J0LWhlYWRlci5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxnQkFBZ0IsRUFDaEIsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFHTCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLEtBQUssRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDM0MsT0FBTyxFQUFlLGdCQUFnQixFQUFpQixNQUFNLGtCQUFrQixDQUFDO0FBQ2hGLE9BQU8sRUFDTCxPQUFPLEVBQ1AsWUFBWSxFQUVaLFNBQVMsRUFDVCxLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssRUFDTCxVQUFVLEVBQ1YsT0FBTyxHQUNSLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sUUFBUSxDQUFDOzs7QUFTcEQsTUFBTSx5QkFBeUIsR0FBRyxtQ0FBbUMsQ0FBQztBQUV0RSxNQUFNLGlCQUFpQixHQUtuQjtJQUNGLFlBQVksRUFBRSxPQUFPLENBQUMsY0FBYyxFQUFFO1FBQ3BDLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyRSxLQUFLLENB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O2dCQUNrQyxZQUFZO3NCQUFuRCxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFO2dCQUNFLFFBQVE7c0JBQS9DLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBMkN0QyxZQUFZO3NCQURYLFlBQVk7dUJBQUMsWUFBWTtnQkFNMUIsWUFBWTtzQkFEWCxZQUFZO3VCQUFDLFlBQVk7Z0JBTTFCLFlBQVk7c0JBRFgsWUFBWTt1QkFBQyxPQUFPO2dCQVFyQixjQUFjO3NCQURiLFlBQVk7dUJBQUMsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb2N1c01vbml0b3IgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBFTlRFUiwgU1BBQ0UgfSBmcm9tICdAYW5ndWxhci9jZGsva2V5Y29kZXMnO1xuaW1wb3J0IHsgbWVyZ2UsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUmRzU29ydGFibGUsIFJkc1NvcnREaXJlY3RpdmUsIFNvcnREaXJlY3Rpb24gfSBmcm9tICcuL3NvcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIGFuaW1hdGUsXG4gIGFuaW1hdGVDaGlsZCxcbiAgQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhLFxuICBrZXlmcmFtZXMsXG4gIHF1ZXJ5LFxuICBzdGF0ZSxcbiAgc3R5bGUsXG4gIHRyYW5zaXRpb24sXG4gIHRyaWdnZXIsXG59IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgUkRTX1NPUlRfSEVBREVSX0NPTFVNTl9ERUYgfSBmcm9tICcuL2NlbGwnO1xuXG5leHBvcnQgdHlwZSBBcnJvd1ZpZXdTdGF0ZSA9IFNvcnREaXJlY3Rpb24gfCAnaGludCcgfCAnYWN0aXZlJztcblxuZXhwb3J0IGludGVyZmFjZSBBcnJvd1ZpZXdTdGF0ZVRyYW5zaXRpb24ge1xuICBmcm9tU3RhdGU/OiBBcnJvd1ZpZXdTdGF0ZTtcbiAgdG9TdGF0ZTogQXJyb3dWaWV3U3RhdGU7XG59XG5cbmNvbnN0IFNPUlRfQU5JTUFUSU9OX1RSQU5TSVRJT04gPSAnMjI1bXMgY3ViaWMtYmV6aWVyKDAuNCwwLjAsMC4yLDEpJztcblxuY29uc3QgcmRzU29ydEFuaW1hdGlvbnM6IHtcbiAgcmVhZG9ubHkgYXJyb3dPcGFjaXR5OiBBbmltYXRpb25UcmlnZ2VyTWV0YWRhdGE7XG4gIHJlYWRvbmx5IGFycm93UG9zaXRpb246IEFuaW1hdGlvblRyaWdnZXJNZXRhZGF0YTtcbiAgcmVhZG9ubHkgYWxsb3dDaGlsZHJlbjogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhO1xuICByZWFkb25seSBhcnJvdzogQW5pbWF0aW9uVHJpZ2dlck1ldGFkYXRhO1xufSA9IHtcbiAgYXJyb3dPcGFjaXR5OiB0cmlnZ2VyKCdhcnJvd09wYWNpdHknLCBbXG4gICAgc3RhdGUoJ2Rlc2MtdG8tYWN0aXZlLCBhc2MtdG8tYWN0aXZlLCBhY3RpdmUnLCBzdHlsZSh7IG9wYWNpdHk6IDEgfSkpLFxuICAgIHN0YXRlKCdkZXNjLXRvLWhpbnQsIGFzYy10by1oaW50LCBoaW50Jywgc3R5bGUoeyBvcGFjaXR5OiAwLjU0IH0pKSxcbiAgICBzdGF0ZShcbiAgICAgICdoaW50LXRvLWRlc2MsIGFjdGl2ZS10by1kZXNjLCBkZXNjLCBoaW50LXRvLWFzYywgYWN0aXZlLXRvLWFzYywgYXNjLCB2b2lkJyxcbiAgICAgIHN0eWxlKHsgb3BhY2l0eTogMCB9KSxcbiAgICApLFxuICAgIHRyYW5zaXRpb24oXG4gICAgICAnKiA9PiBhc2MsICogPT4gZGVzYywgKiA9PiBhY3RpdmUsICogPT4gaGludCwgKiA9PiB2b2lkJyxcbiAgICAgIGFuaW1hdGUoJzBtcycpLFxuICAgICksXG4gICAgdHJhbnNpdGlvbignKiA8PT4gKicsIGFuaW1hdGUoU09SVF9BTklNQVRJT05fVFJBTlNJVElPTikpLFxuICBdKSxcbiAgYXJyb3dQb3NpdGlvbjogdHJpZ2dlcignYXJyb3dQb3NpdGlvbicsIFtcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJyogPT4gZGVzYy10by1oaW50LCAqID0+IGRlc2MtdG8tYWN0aXZlJyxcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgIFNPUlRfQU5JTUFUSU9OX1RSQU5TSVRJT04sXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKC0yNSUpJyB9KSxcbiAgICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0pLFxuICAgICAgICBdKSxcbiAgICAgICksXG4gICAgKSxcbiAgICB0cmFuc2l0aW9uKFxuICAgICAgJyogPT4gaGludC10by1kZXNjLCAqID0+IGFjdGl2ZS10by1kZXNjJyxcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgIFNPUlRfQU5JTUFUSU9OX1RSQU5TSVRJT04sXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9KSxcbiAgICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMjUlKScgfSksXG4gICAgICAgIF0pLFxuICAgICAgKSxcbiAgICApLFxuICAgIHRyYW5zaXRpb24oXG4gICAgICAnKiA9PiBhc2MtdG8taGludCwgKiA9PiBhc2MtdG8tYWN0aXZlJyxcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgIFNPUlRfQU5JTUFUSU9OX1RSQU5TSVRJT04sXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDI1JSknIH0pLFxuICAgICAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKScgfSksXG4gICAgICAgIF0pLFxuICAgICAgKSxcbiAgICApLFxuICAgIHRyYW5zaXRpb24oXG4gICAgICAnKiA9PiBoaW50LXRvLWFzYywgKiA9PiBhY3RpdmUtdG8tYXNjJyxcbiAgICAgIGFuaW1hdGUoXG4gICAgICAgIFNPUlRfQU5JTUFUSU9OX1RSQU5TSVRJT04sXG4gICAgICAgIGtleWZyYW1lcyhbXG4gICAgICAgICAgc3R5bGUoeyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9KSxcbiAgICAgICAgICBzdHlsZSh7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoLTI1JSknIH0pLFxuICAgICAgICBdKSxcbiAgICAgICksXG4gICAgKSxcbiAgICBzdGF0ZShcbiAgICAgICdkZXNjLXRvLWhpbnQsIGFzYy10by1oaW50LCBoaW50LCBkZXNjLXRvLWFjdGl2ZSwgYXNjLXRvLWFjdGl2ZSwgYWN0aXZlJyxcbiAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgwKScgfSksXG4gICAgKSxcbiAgICBzdGF0ZShcbiAgICAgICdoaW50LXRvLWRlc2MsIGFjdGl2ZS10by1kZXNjLCBkZXNjJyxcbiAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgtMjUlKScgfSksXG4gICAgKSxcbiAgICBzdGF0ZShcbiAgICAgICdoaW50LXRvLWFzYywgYWN0aXZlLXRvLWFzYywgYXNjJyxcbiAgICAgIHN0eWxlKHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWSgyNSUpJyB9KSxcbiAgICApLFxuICBdKSxcbiAgYWxsb3dDaGlsZHJlbjogdHJpZ2dlcignYWxsb3dDaGlsZHJlbicsIFtcbiAgICB0cmFuc2l0aW9uKCcqIDw9PiAqJywgW3F1ZXJ5KCdAKicsIGFuaW1hdGVDaGlsZCgpLCB7IG9wdGlvbmFsOiB0cnVlIH0pXSksXG4gIF0pLFxuICBhcnJvdzogdHJpZ2dlcignYXJyb3cnLCBbXG4gICAgc3RhdGUoJ2FzYycsIHN0eWxlKHsgdHJhbnNmb3JtOiAnJyB9KSksXG4gICAgc3RhdGUoJ2Rlc2MnLCBzdHlsZSh7IHRyYW5zZm9ybTogJ3NjYWxlWSgtMSknIH0pKSxcbiAgICB0cmFuc2l0aW9uKCdhc2MgPT4gZGVzYycsIFthbmltYXRlKFNPUlRfQU5JTUFUSU9OX1RSQU5TSVRJT04pXSksXG4gICAgdHJhbnNpdGlvbignZGVzYyA9PiBhc2MnLCBbYW5pbWF0ZShTT1JUX0FOSU1BVElPTl9UUkFOU0lUSU9OKV0pLFxuICBdKSxcbn07XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tyZHMtc29ydC1oZWFkZXJdLCBbcmRzU29ydEhlYWRlcl0nLFxuICBleHBvcnRBczogJ3Jkc1NvcnRIZWFkZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vc29ydC1oZWFkZXIuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NvcnQtaGVhZGVyLnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGFuaW1hdGlvbnM6IFtcbiAgICByZHNTb3J0QW5pbWF0aW9ucy5hcnJvd09wYWNpdHksXG4gICAgcmRzU29ydEFuaW1hdGlvbnMuYXJyb3dQb3NpdGlvbixcbiAgICByZHNTb3J0QW5pbWF0aW9ucy5hbGxvd0NoaWxkcmVuLFxuICAgIHJkc1NvcnRBbmltYXRpb25zLmFycm93LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNTb3J0SGVhZGVyQ29tcG9uZW50XG4gIGltcGxlbWVudHMgUmRzU29ydGFibGUsIE9uRGVzdHJveSwgT25Jbml0LCBBZnRlclZpZXdJbml0XG57XG4gIHByaXZhdGUgcmVhZG9ubHkgY2RyID0gaW5qZWN0KENoYW5nZURldGVjdG9yUmVmKTtcbiAgcHJpdmF0ZSByZWFkb25seSBzb3J0ID0gaW5qZWN0KFJkc1NvcnREaXJlY3RpdmUsIHtcbiAgICBvcHRpb25hbDogdHJ1ZSxcbiAgfSkgYXMgUmRzU29ydERpcmVjdGl2ZTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb2x1bW5EZWYgPSBpbmplY3QoUkRTX1NPUlRfSEVBREVSX0NPTFVNTl9ERUYsIHtcbiAgICBvcHRpb25hbDogdHJ1ZSxcbiAgfSk7XG4gIHByaXZhdGUgcmVhZG9ubHkgZm9jdXNNb25pdG9yID0gaW5qZWN0KEZvY3VzTW9uaXRvcik7XG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj4oRWxlbWVudFJlZik7XG5cbiAgcHJpdmF0ZSBfcmVyZW5kZXJTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbiB8IG51bGwgPSBudWxsO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbGFzcyA9ICdyZHMtc29ydC1oZWFkZXInO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmRzLXNvcnQtaGVhZGVyLWRpc2FibGVkJylcbiAgZ2V0IF9kaXNhYmxlZENsYXNzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9pc0Rpc2FibGVkKCk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1zb3J0JylcbiAgZ2V0IGFyaWFTb3J0QXR0cmlidXRlKCk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLl9pc1NvcnRlZCgpKSB7XG4gICAgICByZXR1cm4gJ25vbmUnO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnNvcnQuZGlyZWN0aW9uID09ICdhc2MnID8gJ2FzY2VuZGluZycgOiAnZGVzY2VuZGluZyc7XG4gIH1cblxuICBfc2hvd0luZGljYXRvckhpbnQgPSBmYWxzZTtcbiAgX3ZpZXdTdGF0ZTogQXJyb3dWaWV3U3RhdGVUcmFuc2l0aW9uIHwgbnVsbCA9IG51bGw7XG4gIF9hcnJvd0RpcmVjdGlvbjogU29ydERpcmVjdGlvbiA9ICcnO1xuICBfZGlzYWJsZVZpZXdTdGF0ZUFuaW1hdGlvbiA9IGZhbHNlO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8taW5wdXQtcmVuYW1lXG4gIEBJbnB1dCgncmRzLXNvcnQtaGVhZGVyJykgaWQgPSAnJztcblxuICBASW5wdXQoKSBhcnJvd1Bvc2l0aW9uOiAnbGVmdCcgfCAncmlnaHQnID0gJ3JpZ2h0JztcbiAgQElucHV0KCkgc3RhcnQ6IFNvcnREaXJlY3Rpb24gPSAnJztcbiAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pIGRpc2FibGVDbGVhciA9IGZhbHNlO1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgZGlzYWJsZWQgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoIXRoaXMuc29ydCkge1xuICAgICAgdGhyb3cgRXJyb3IoXG4gICAgICAgIGBSZHNTb3J0SGVhZGVyIG11c3QgYmUgcGxhY2VkIHdpdGhpbiBhIHBhcmVudCBlbGVtZW50IHdpdGggdGhlIFJkc1NvcnQgZGlyZWN0aXZlLmAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuX2hhbmRsZVN0YXRlQ2hhbmdlcygpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmlkICYmIHRoaXMuY29sdW1uRGVmKSB7XG4gICAgICB0aGlzLmlkID0gdGhpcy5jb2x1bW5EZWYubmFtZTtcbiAgICB9XG5cbiAgICB0aGlzLl91cGRhdGVBcnJvd0RpcmVjdGlvbigpO1xuICAgIHRoaXMuX3NldEFuaW1hdGlvblRyYW5zaXRpb25TdGF0ZSh7XG4gICAgICB0b1N0YXRlOiB0aGlzLl9pc1NvcnRlZCgpID8gJ2FjdGl2ZScgOiB0aGlzLl9hcnJvd0RpcmVjdGlvbixcbiAgICB9KTtcblxuICAgIHRoaXMuc29ydC5yZWdpc3Rlcih0aGlzKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvci5tb25pdG9yKHRoaXMuZWxlbWVudFJlZiwgdHJ1ZSkuc3Vic2NyaWJlKChvcmlnaW4pID0+IHtcbiAgICAgIGNvbnN0IG5ld1N0YXRlID0gISFvcmlnaW47XG5cbiAgICAgIGlmIChuZXdTdGF0ZSAhPT0gdGhpcy5fc2hvd0luZGljYXRvckhpbnQpIHtcbiAgICAgICAgdGhpcy5fc2V0SW5kaWNhdG9ySGludFZpc2libGUobmV3U3RhdGUpO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZm9jdXNNb25pdG9yLnN0b3BNb25pdG9yaW5nKHRoaXMuZWxlbWVudFJlZik7XG4gICAgdGhpcy5zb3J0LmRlcmVnaXN0ZXIodGhpcyk7XG4gICAgdGhpcy5fcmVyZW5kZXJTdWJzY3JpcHRpb24/LnVuc3Vic2NyaWJlKCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdtb3VzZWVudGVyJylcbiAgb25Nb3VzZWVudGVyKCk6IHZvaWQge1xuICAgIHRoaXMuX3NldEluZGljYXRvckhpbnRWaXNpYmxlKHRydWUpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VsZWF2ZScpXG4gIG9uTW91c2VsZWF2ZSgpOiB2b2lkIHtcbiAgICB0aGlzLl9zZXRJbmRpY2F0b3JIaW50VmlzaWJsZShmYWxzZSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIF9oYW5kbGVDbGljaygpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuX2lzRGlzYWJsZWQoKSkge1xuICAgICAgdGhpcy5zb3J0LnNvcnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bicsIFsnJGV2ZW50J10pXG4gIF9oYW5kbGVLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuX2lzRGlzYWJsZWQoKSAmJlxuICAgICAgKGV2ZW50LmtleUNvZGUgPT09IFNQQUNFIHx8IGV2ZW50LmtleUNvZGUgPT09IEVOVEVSKVxuICAgICkge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX3RvZ2dsZU9uSW50ZXJhY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBfaXNTb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuc29ydC5hY3RpdmUgPT0gdGhpcy5pZCAmJlxuICAgICAgKHRoaXMuc29ydC5kaXJlY3Rpb24gPT09ICdhc2MnIHx8IHRoaXMuc29ydC5kaXJlY3Rpb24gPT09ICdkZXNjJylcbiAgICApO1xuICB9XG5cbiAgX2lzRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc29ydC5kaXNhYmxlZCB8fCB0aGlzLmRpc2FibGVkO1xuICB9XG5cbiAgX3JlbmRlckFycm93KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5faXNEaXNhYmxlZCgpIHx8IHRoaXMuX2lzU29ydGVkKCk7XG4gIH1cblxuICBfZ2V0QXJyb3dEaXJlY3Rpb25TdGF0ZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLl9pc1NvcnRlZCgpID8gJ2FjdGl2ZS0nIDogJyd9JHt0aGlzLl9hcnJvd0RpcmVjdGlvbn1gO1xuICB9XG5cbiAgX2dldEFycm93Vmlld1N0YXRlKCk6IHN0cmluZyB7XG4gICAgY29uc3QgZnJvbVN0YXRlID0gdGhpcy5fdmlld1N0YXRlPy5mcm9tU3RhdGU7XG5cbiAgICByZXR1cm4gKGZyb21TdGF0ZSA/IGAke2Zyb21TdGF0ZX0tdG8tYCA6ICcnKSArIHRoaXMuX3ZpZXdTdGF0ZT8udG9TdGF0ZTtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZUFycm93RGlyZWN0aW9uKCk6IHZvaWQge1xuICAgIHRoaXMuX2Fycm93RGlyZWN0aW9uID0gdGhpcy5faXNTb3J0ZWQoKVxuICAgICAgPyB0aGlzLnNvcnQuZGlyZWN0aW9uXG4gICAgICA6IHRoaXMuc3RhcnQgfHwgdGhpcy5zb3J0LnN0YXJ0O1xuICB9XG5cbiAgcHJpdmF0ZSBfaGFuZGxlU3RhdGVDaGFuZ2VzKCk6IHZvaWQge1xuICAgIHRoaXMuX3JlcmVuZGVyU3Vic2NyaXB0aW9uID0gbWVyZ2UoXG4gICAgICB0aGlzLnNvcnQucmRzU29ydENoYW5nZSxcbiAgICAgIHRoaXMuc29ydC5fc3RhdGVDaGFuZ2VzLFxuICAgICkuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLl9pc1NvcnRlZCgpKSB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUFycm93RGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuX3ZpZXdTdGF0ZT8udG9TdGF0ZSA9PT0gJ2hpbnQnIHx8XG4gICAgICAgICAgdGhpcy5fdmlld1N0YXRlPy50b1N0YXRlID09PSAnYWN0aXZlJ1xuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLl9kaXNhYmxlVmlld1N0YXRlQW5pbWF0aW9uID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NldEFuaW1hdGlvblRyYW5zaXRpb25TdGF0ZSh7XG4gICAgICAgICAgZnJvbVN0YXRlOiB0aGlzLl9hcnJvd0RpcmVjdGlvbixcbiAgICAgICAgICB0b1N0YXRlOiAnYWN0aXZlJyxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuX3Nob3dJbmRpY2F0b3JIaW50ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgIXRoaXMuX2lzU29ydGVkKCkgJiZcbiAgICAgICAgdGhpcy5fdmlld1N0YXRlICYmXG4gICAgICAgIHRoaXMuX3ZpZXdTdGF0ZS50b1N0YXRlID09PSAnYWN0aXZlJ1xuICAgICAgKSB7XG4gICAgICAgIHRoaXMuX2Rpc2FibGVWaWV3U3RhdGVBbmltYXRpb24gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc2V0QW5pbWF0aW9uVHJhbnNpdGlvblN0YXRlKHtcbiAgICAgICAgICBmcm9tU3RhdGU6ICdhY3RpdmUnLFxuICAgICAgICAgIHRvU3RhdGU6IHRoaXMuX2Fycm93RGlyZWN0aW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIF9zZXRJbmRpY2F0b3JIaW50VmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX2lzRGlzYWJsZWQoKSAmJiB2aXNpYmxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5fc2hvd0luZGljYXRvckhpbnQgPSB2aXNpYmxlO1xuXG4gICAgaWYgKCF0aGlzLl9pc1NvcnRlZCgpKSB7XG4gICAgICB0aGlzLl91cGRhdGVBcnJvd0RpcmVjdGlvbigpO1xuXG4gICAgICBpZiAodGhpcy5fc2hvd0luZGljYXRvckhpbnQpIHtcbiAgICAgICAgdGhpcy5fc2V0QW5pbWF0aW9uVHJhbnNpdGlvblN0YXRlKHtcbiAgICAgICAgICBmcm9tU3RhdGU6IHRoaXMuX2Fycm93RGlyZWN0aW9uLFxuICAgICAgICAgIHRvU3RhdGU6ICdoaW50JyxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZXRBbmltYXRpb25UcmFuc2l0aW9uU3RhdGUoe1xuICAgICAgICAgIGZyb21TdGF0ZTogJ2hpbnQnLFxuICAgICAgICAgIHRvU3RhdGU6IHRoaXMuX2Fycm93RGlyZWN0aW9uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9zZXRBbmltYXRpb25UcmFuc2l0aW9uU3RhdGUoXG4gICAgdmlld1N0YXRlOiBBcnJvd1ZpZXdTdGF0ZVRyYW5zaXRpb24sXG4gICk6IHZvaWQge1xuICAgIHRoaXMuX3ZpZXdTdGF0ZSA9IHZpZXdTdGF0ZTtcblxuICAgIGlmICh0aGlzLl9kaXNhYmxlVmlld1N0YXRlQW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLl92aWV3U3RhdGUgPSB7IHRvU3RhdGU6IHZpZXdTdGF0ZS50b1N0YXRlIH07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfdG9nZ2xlT25JbnRlcmFjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLnNvcnQuc29ydCh0aGlzKTtcblxuICAgIGlmIChcbiAgICAgIHRoaXMuX3ZpZXdTdGF0ZT8udG9TdGF0ZSA9PT0gJ2hpbnQnIHx8XG4gICAgICB0aGlzLl92aWV3U3RhdGU/LnRvU3RhdGUgPT09ICdhY3RpdmUnXG4gICAgKSB7XG4gICAgICB0aGlzLl9kaXNhYmxlVmlld1N0YXRlQW5pbWF0aW9uID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkaXZcbiAgY2xhc3M9XCJyZHMtc29ydC1oZWFkZXItY29udGFpbmVyIHJkcy1mb2N1cy1pbmRpY2F0b3JcIlxuICBbY2xhc3MucmRzLXNvcnQtaGVhZGVyLXNvcnRlZF09XCJfaXNTb3J0ZWQoKVwiXG4gIFtjbGFzcy5yZHMtc29ydC1oZWFkZXItcG9zaXRpb24tbGVmdF09XCJhcnJvd1Bvc2l0aW9uID09PSAnbGVmdCdcIlxuICBbYXR0ci50YWJpbmRleF09XCJfaXNEaXNhYmxlZCgpID8gbnVsbCA6IDBcIlxuICByb2xlPVwiYnV0dG9uXCJcbj5cbiAgPGRpdiBjbGFzcz1cInJkcy1zb3J0LWhlYWRlci1jb250ZW50XCI+XG4gICAgPG5nLWNvbnRlbnQgLz5cbiAgPC9kaXY+XG4gIEBpZiAoX3JlbmRlckFycm93KCkpIHtcbiAgPGRpdlxuICAgIGNsYXNzPVwicmRzLXNvcnQtaGVhZGVyLWFycm93XCJcbiAgICBbQGFycm93T3BhY2l0eV09XCJfZ2V0QXJyb3dWaWV3U3RhdGUoKVwiXG4gICAgW0BhcnJvd1Bvc2l0aW9uXT1cIl9nZXRBcnJvd1ZpZXdTdGF0ZSgpXCJcbiAgICBbQGFsbG93Q2hpbGRyZW5dPVwiX2dldEFycm93RGlyZWN0aW9uU3RhdGUoKVwiXG4gICAgKEBhcnJvd1Bvc2l0aW9uLnN0YXJ0KT1cIl9kaXNhYmxlVmlld1N0YXRlQW5pbWF0aW9uID0gdHJ1ZVwiXG4gICAgKEBhcnJvd1Bvc2l0aW9uLmRvbmUpPVwiX2Rpc2FibGVWaWV3U3RhdGVBbmltYXRpb24gPSBmYWxzZVwiXG4gID5cbiAgICA8cmRzLWljb24gW0BhcnJvd109XCJfYXJyb3dEaXJlY3Rpb25cIiBuYW1lc3BhY2U9XCJvdXRsaW5lZFwiIGljb249XCJhcnJvd191cFwiIC8+XG4gIDwvZGl2PlxuICB9XG48L2Rpdj5cbiJdfQ==