import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RdsTableComponent } from './table.component';
import { CdkTableModule } from '@angular/cdk/table';
import { RdsSortDirective } from './sort.directive';
import { RdsCellDefDirective, RdsCellDirective, RdsColumnDefDirective, RdsFooterCellDefDirective, RdsFooterCellDirective, RdsHeaderCellDefDirective, RdsHeaderCellDirective, } from './cell';
import { RdsFooterRowComponent, RdsFooterRowDefDirective, RdsHeaderRowComponent, RdsHeaderRowDefDirective, RdsNoDataRowDirective, RdsRowComponent, RdsRowDefDirective, } from './row';
import { RdsSortHeaderComponent } from './sort-header';
import { RdsTextColumnComponent } from './text-column.component';
import { RdsIconComponent } from '../icons';
import { RdsTableDraggableDirective } from './table-draggable.directive';
import { RdsTableDragHandleDirective } from './table-drag-handle.directive';
import * as i0 from "@angular/core";
const EXPORTS = [
    RdsTableComponent,
    RdsSortDirective,
    RdsSortHeaderComponent,
    RdsCellDefDirective,
    RdsHeaderCellDefDirective,
    RdsFooterCellDefDirective,
    RdsColumnDefDirective,
    RdsHeaderCellDirective,
    RdsFooterCellDirective,
    RdsCellDirective,
    RdsHeaderRowDefDirective,
    RdsFooterRowDefDirective,
    RdsRowDefDirective,
    RdsHeaderRowComponent,
    RdsFooterRowComponent,
    RdsRowComponent,
    RdsNoDataRowDirective,
    RdsTextColumnComponent,
    RdsTableDraggableDirective,
    RdsTableDragHandleDirective,
];
export class RdsTableModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, declarations: [RdsTableComponent,
            RdsSortDirective,
            RdsSortHeaderComponent,
            RdsCellDefDirective,
            RdsHeaderCellDefDirective,
            RdsFooterCellDefDirective,
            RdsColumnDefDirective,
            RdsHeaderCellDirective,
            RdsFooterCellDirective,
            RdsCellDirective,
            RdsHeaderRowDefDirective,
            RdsFooterRowDefDirective,
            RdsRowDefDirective,
            RdsHeaderRowComponent,
            RdsFooterRowComponent,
            RdsRowComponent,
            RdsNoDataRowDirective,
            RdsTextColumnComponent,
            RdsTableDraggableDirective,
            RdsTableDragHandleDirective], imports: [CommonModule, CdkTableModule, RdsIconComponent], exports: [RdsTableComponent,
            RdsSortDirective,
            RdsSortHeaderComponent,
            RdsCellDefDirective,
            RdsHeaderCellDefDirective,
            RdsFooterCellDefDirective,
            RdsColumnDefDirective,
            RdsHeaderCellDirective,
            RdsFooterCellDirective,
            RdsCellDirective,
            RdsHeaderRowDefDirective,
            RdsFooterRowDefDirective,
            RdsRowDefDirective,
            RdsHeaderRowComponent,
            RdsFooterRowComponent,
            RdsRowComponent,
            RdsNoDataRowDirective,
            RdsTextColumnComponent,
            RdsTableDraggableDirective,
            RdsTableDragHandleDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, imports: [CommonModule, CdkTableModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTableModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...EXPORTS],
                    exports: [...EXPORTS],
                    imports: [CommonModule, CdkTableModule, RdsIconComponent],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFibGUubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi90YWJsZS90YWJsZS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3BELE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsZ0JBQWdCLEVBQ2hCLHFCQUFxQixFQUNyQix5QkFBeUIsRUFDekIsc0JBQXNCLEVBQ3RCLHlCQUF5QixFQUN6QixzQkFBc0IsR0FDdkIsTUFBTSxRQUFRLENBQUM7QUFDaEIsT0FBTyxFQUNMLHFCQUFxQixFQUNyQix3QkFBd0IsRUFDeEIscUJBQXFCLEVBQ3JCLHdCQUF3QixFQUN4QixxQkFBcUIsRUFDckIsZUFBZSxFQUNmLGtCQUFrQixHQUNuQixNQUFNLE9BQU8sQ0FBQztBQUNmLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDNUMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDekUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBRTVFLE1BQU0sT0FBTyxHQUFHO0lBQ2QsaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixzQkFBc0I7SUFDdEIsbUJBQW1CO0lBQ25CLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIscUJBQXFCO0lBQ3JCLHNCQUFzQjtJQUN0QixzQkFBc0I7SUFDdEIsZ0JBQWdCO0lBQ2hCLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsa0JBQWtCO0lBQ2xCLHFCQUFxQjtJQUNyQixxQkFBcUI7SUFDckIsZUFBZTtJQUNmLHFCQUFxQjtJQUNyQixzQkFBc0I7SUFDdEIsMEJBQTBCO0lBQzFCLDJCQUEyQjtDQUM1QixDQUFDO0FBT0YsTUFBTSxPQUFPLGNBQWM7OEdBQWQsY0FBYzsrR0FBZCxjQUFjLGlCQTNCekIsaUJBQWlCO1lBQ2pCLGdCQUFnQjtZQUNoQixzQkFBc0I7WUFDdEIsbUJBQW1CO1lBQ25CLHlCQUF5QjtZQUN6Qix5QkFBeUI7WUFDekIscUJBQXFCO1lBQ3JCLHNCQUFzQjtZQUN0QixzQkFBc0I7WUFDdEIsZ0JBQWdCO1lBQ2hCLHdCQUF3QjtZQUN4Qix3QkFBd0I7WUFDeEIsa0JBQWtCO1lBQ2xCLHFCQUFxQjtZQUNyQixxQkFBcUI7WUFDckIsZUFBZTtZQUNmLHFCQUFxQjtZQUNyQixzQkFBc0I7WUFDdEIsMEJBQTBCO1lBQzFCLDJCQUEyQixhQU1qQixZQUFZLEVBQUUsY0FBYyxFQUFFLGdCQUFnQixhQXpCeEQsaUJBQWlCO1lBQ2pCLGdCQUFnQjtZQUNoQixzQkFBc0I7WUFDdEIsbUJBQW1CO1lBQ25CLHlCQUF5QjtZQUN6Qix5QkFBeUI7WUFDekIscUJBQXFCO1lBQ3JCLHNCQUFzQjtZQUN0QixzQkFBc0I7WUFDdEIsZ0JBQWdCO1lBQ2hCLHdCQUF3QjtZQUN4Qix3QkFBd0I7WUFDeEIsa0JBQWtCO1lBQ2xCLHFCQUFxQjtZQUNyQixxQkFBcUI7WUFDckIsZUFBZTtZQUNmLHFCQUFxQjtZQUNyQixzQkFBc0I7WUFDdEIsMEJBQTBCO1lBQzFCLDJCQUEyQjsrR0FRaEIsY0FBYyxZQUZmLFlBQVksRUFBRSxjQUFjOzsyRkFFM0IsY0FBYztrQkFMMUIsUUFBUTttQkFBQztvQkFDUixZQUFZLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQztvQkFDMUIsT0FBTyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUM7b0JBQ3JCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxjQUFjLEVBQUUsZ0JBQWdCLENBQUM7aUJBQzFEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSZHNUYWJsZUNvbXBvbmVudCB9IGZyb20gJy4vdGFibGUuY29tcG9uZW50JztcbmltcG9ydCB7IENka1RhYmxlTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3RhYmxlJztcbmltcG9ydCB7IFJkc1NvcnREaXJlY3RpdmUgfSBmcm9tICcuL3NvcnQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gIFJkc0NlbGxEZWZEaXJlY3RpdmUsXG4gIFJkc0NlbGxEaXJlY3RpdmUsXG4gIFJkc0NvbHVtbkRlZkRpcmVjdGl2ZSxcbiAgUmRzRm9vdGVyQ2VsbERlZkRpcmVjdGl2ZSxcbiAgUmRzRm9vdGVyQ2VsbERpcmVjdGl2ZSxcbiAgUmRzSGVhZGVyQ2VsbERlZkRpcmVjdGl2ZSxcbiAgUmRzSGVhZGVyQ2VsbERpcmVjdGl2ZSxcbn0gZnJvbSAnLi9jZWxsJztcbmltcG9ydCB7XG4gIFJkc0Zvb3RlclJvd0NvbXBvbmVudCxcbiAgUmRzRm9vdGVyUm93RGVmRGlyZWN0aXZlLFxuICBSZHNIZWFkZXJSb3dDb21wb25lbnQsXG4gIFJkc0hlYWRlclJvd0RlZkRpcmVjdGl2ZSxcbiAgUmRzTm9EYXRhUm93RGlyZWN0aXZlLFxuICBSZHNSb3dDb21wb25lbnQsXG4gIFJkc1Jvd0RlZkRpcmVjdGl2ZSxcbn0gZnJvbSAnLi9yb3cnO1xuaW1wb3J0IHsgUmRzU29ydEhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vc29ydC1oZWFkZXInO1xuaW1wb3J0IHsgUmRzVGV4dENvbHVtbkNvbXBvbmVudCB9IGZyb20gJy4vdGV4dC1jb2x1bW4uY29tcG9uZW50JztcbmltcG9ydCB7IFJkc0ljb25Db21wb25lbnQgfSBmcm9tICcuLi9pY29ucyc7XG5pbXBvcnQgeyBSZHNUYWJsZURyYWdnYWJsZURpcmVjdGl2ZSB9IGZyb20gJy4vdGFibGUtZHJhZ2dhYmxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBSZHNUYWJsZURyYWdIYW5kbGVEaXJlY3RpdmUgfSBmcm9tICcuL3RhYmxlLWRyYWctaGFuZGxlLmRpcmVjdGl2ZSc7XG5cbmNvbnN0IEVYUE9SVFMgPSBbXG4gIFJkc1RhYmxlQ29tcG9uZW50LFxuICBSZHNTb3J0RGlyZWN0aXZlLFxuICBSZHNTb3J0SGVhZGVyQ29tcG9uZW50LFxuICBSZHNDZWxsRGVmRGlyZWN0aXZlLFxuICBSZHNIZWFkZXJDZWxsRGVmRGlyZWN0aXZlLFxuICBSZHNGb290ZXJDZWxsRGVmRGlyZWN0aXZlLFxuICBSZHNDb2x1bW5EZWZEaXJlY3RpdmUsXG4gIFJkc0hlYWRlckNlbGxEaXJlY3RpdmUsXG4gIFJkc0Zvb3RlckNlbGxEaXJlY3RpdmUsXG4gIFJkc0NlbGxEaXJlY3RpdmUsXG4gIFJkc0hlYWRlclJvd0RlZkRpcmVjdGl2ZSxcbiAgUmRzRm9vdGVyUm93RGVmRGlyZWN0aXZlLFxuICBSZHNSb3dEZWZEaXJlY3RpdmUsXG4gIFJkc0hlYWRlclJvd0NvbXBvbmVudCxcbiAgUmRzRm9vdGVyUm93Q29tcG9uZW50LFxuICBSZHNSb3dDb21wb25lbnQsXG4gIFJkc05vRGF0YVJvd0RpcmVjdGl2ZSxcbiAgUmRzVGV4dENvbHVtbkNvbXBvbmVudCxcbiAgUmRzVGFibGVEcmFnZ2FibGVEaXJlY3RpdmUsXG4gIFJkc1RhYmxlRHJhZ0hhbmRsZURpcmVjdGl2ZSxcbl07XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogWy4uLkVYUE9SVFNdLFxuICBleHBvcnRzOiBbLi4uRVhQT1JUU10sXG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGUsIENka1RhYmxlTW9kdWxlLCBSZHNJY29uQ29tcG9uZW50XSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzVGFibGVNb2R1bGUge31cbiJdfQ==