import { booleanAttribute, Directive, EventEmitter, HostBinding, inject, InjectionToken, Input, Output, } from '@angular/core';
import { ReplaySubject, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export const RDS_SORT_DEFAULT_OPTIONS = new InjectionToken('RDS_SORT_DEFAULT_OPTIONS');
export class RdsSortDirective {
    constructor() {
        this.defaultOptions = inject(RDS_SORT_DEFAULT_OPTIONS, {
            optional: true,
        });
        this._stateChanges = new Subject();
        this.sortables = new Map();
        this.class = 'rds-sort';
        this.active = null;
        this.disabled = false;
        this.start = 'asc';
        this._direction = '';
        this.disableClear = false;
        this._initialized = new ReplaySubject(1);
        this.rdsSortChange = new EventEmitter();
    }
    get direction() {
        return this._direction;
    }
    set direction(direction) {
        this._direction = direction;
    }
    get initialized() {
        return this._initialized.asObservable();
    }
    register(sortable) {
        if (!sortable.id) {
            throw Error(`RdsSortHeader must be provided with a unique id.`);
        }
        if (this.sortables.has(sortable.id)) {
            throw Error(`Cannot have two RdsSortables with the same id (${sortable.id}).`);
        }
        this.sortables.set(sortable.id, sortable);
    }
    deregister(sortable) {
        this.sortables.delete(sortable.id);
    }
    sort(sortable) {
        if (this.active != sortable.id) {
            this.active = sortable.id;
            this.direction = sortable.start ? sortable.start : this.start;
        }
        else {
            this.direction = this.getNextSortDirection(sortable);
        }
        this.rdsSortChange.emit({ active: this.active, direction: this.direction });
    }
    getNextSortDirection(sortable) {
        if (!sortable) {
            return '';
        }
        const disableClear = sortable?.disableClear ??
            this.disableClear ??
            !!this.defaultOptions?.disableClear;
        const sortDirectionCycle = this._getSortDirectionCycle(sortable.start, disableClear);
        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;
        if (nextDirectionIndex >= sortDirectionCycle.length) {
            nextDirectionIndex = 0;
        }
        return sortDirectionCycle[nextDirectionIndex];
    }
    ngOnInit() {
        this._initialized.next();
    }
    ngOnChanges() {
        this._stateChanges.next();
    }
    ngOnDestroy() {
        this._stateChanges.complete();
        this._initialized.complete();
    }
    _getSortDirectionCycle(start = this.start, disableClear) {
        const sortOrder = ['asc', 'desc'];
        if (start === 'desc') {
            sortOrder.reverse();
        }
        if (!disableClear) {
            sortOrder.push('');
        }
        return sortOrder;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsSortDirective, selector: "[rdsSort], [rds-sort]", inputs: { active: ["rdsSortActive", "active"], disabled: ["rdsSortDisabled", "disabled", booleanAttribute], start: ["rdsSortStart", "start"], direction: ["rdsSortDirection", "direction"], disableClear: ["rdsSortDisableClear", "disableClear", booleanAttribute] }, outputs: { rdsSortChange: "rdsSortChange" }, host: { properties: { "class": "this.class" } }, exportAs: ["rdsSort"], usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSortDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsSort], [rds-sort]',
                    exportAs: 'rdsSort',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], active: [{
                type: Input,
                args: ['rdsSortActive']
            }], disabled: [{
                type: Input,
                args: [{ alias: 'rdsSortDisabled', transform: booleanAttribute }]
            }], start: [{
                type: Input,
                args: ['rdsSortStart']
            }], direction: [{
                type: Input,
                args: ['rdsSortDirection']
            }], disableClear: [{
                type: Input,
                args: [{ alias: 'rdsSortDisableClear', transform: booleanAttribute }]
            }], rdsSortChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,