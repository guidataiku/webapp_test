import { BehaviorSubject } from 'rxjs';
let id = 0;
export class RdsFileItem {
    get errorIntlToken() {
        return this._errorIntlToken;
    }
    get state() {
        return this._state$.value;
    }
    set state(v) {
        if (v !== this.state) {
            this._state$.next(v);
        }
    }
    get isUploading() {
        return this.state === 'uploading';
    }
    constructor(file, failedFilters) {
        this.file = file;
        this.failedFilters = failedFilters;
        this._errorIntlToken = 'EMPTY';
        this._progress$ = new BehaviorSubject(0);
        this._state$ = new BehaviorSubject('ready');
        this.progress$ = this._progress$.asObservable();
        this.state$ = this._state$.asObservable();
        this.id = id++;
        this.hasFailedFilters = !!this.failedFilters.length;
        if (this.hasFailedFilters) {
            this._errorIntlToken = this.failedFilters[0].descriptionIntlToken;
            this.state = 'error';
        }
    }
    onBeforeUpload() {
        this._errorIntlToken = 'EMPTY';
        this.state = 'uploading';
        this._progress$.next(0);
    }
    onProgress(progress) {
        this._progress$.next(progress);
    }
    onSuccess() {
        this.state = 'success';
        this._progress$.next(100);
    }
    onError() {
        this._errorIntlToken = 'uploadFailed';
        this.state = 'error';
    }
    onAbort() {
        this.state = 'aborted';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1pdGVtLmNsYXNzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi91cGxvYWQvZmlsZS1pdGVtLmNsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJdkMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRVgsTUFBTSxPQUFPLFdBQVc7SUFLdEIsSUFBSSxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBT0QsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBWSxLQUFLLENBQUMsQ0FBbUI7UUFDbkMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7SUFDSCxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFdBQVcsQ0FBQztJQUNwQyxDQUFDO0lBRUQsWUFDa0IsSUFBVSxFQUNWLGFBQWdDO1FBRGhDLFNBQUksR0FBSixJQUFJLENBQU07UUFDVixrQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUE3QjFDLG9CQUFlLEdBQXVCLE9BQU8sQ0FBQztRQUNyQyxlQUFVLEdBQUcsSUFBSSxlQUFlLENBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ25ELFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBbUIsT0FBTyxDQUFDLENBQUM7UUFNakUsY0FBUyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDM0MsV0FBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDckMsT0FBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ1YscUJBQWdCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1FBb0J0RCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQztZQUNsRSxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztRQUN2QixDQUFDO0lBQ0gsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQztRQUMvQixJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztRQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxQixDQUFDO0lBRUQsVUFBVSxDQUFDLFFBQXVCO1FBQ2hDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztRQUN0QyxJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQztJQUN2QixDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDO0lBQ3pCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUmRzRmlsZUl0ZW1TdGF0ZSwgUmRzVXBsb2FkRmlsdGVyIH0gZnJvbSAnLi91cGxvYWQudHlwZXMnO1xuaW1wb3J0IHsgUmRzVXBsb2FkSW50bFRva2VuIH0gZnJvbSAnLi9yZHMtdXBsb2FkLWludGwuc2VydmljZSc7XG5cbmxldCBpZCA9IDA7XG5cbmV4cG9ydCBjbGFzcyBSZHNGaWxlSXRlbSB7XG4gIHByaXZhdGUgX2Vycm9ySW50bFRva2VuOiBSZHNVcGxvYWRJbnRsVG9rZW4gPSAnRU1QVFknO1xuICBwcml2YXRlIHJlYWRvbmx5IF9wcm9ncmVzcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IG51bGw+KDApO1xuICBwcml2YXRlIHJlYWRvbmx5IF9zdGF0ZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJkc0ZpbGVJdGVtU3RhdGU+KCdyZWFkeScpO1xuXG4gIGdldCBlcnJvckludGxUb2tlbigpOiBSZHNVcGxvYWRJbnRsVG9rZW4ge1xuICAgIHJldHVybiB0aGlzLl9lcnJvckludGxUb2tlbjtcbiAgfVxuXG4gIHJlYWRvbmx5IHByb2dyZXNzJCA9IHRoaXMuX3Byb2dyZXNzJC5hc09ic2VydmFibGUoKTtcbiAgcmVhZG9ubHkgc3RhdGUkID0gdGhpcy5fc3RhdGUkLmFzT2JzZXJ2YWJsZSgpO1xuICByZWFkb25seSBpZCA9IGlkKys7XG4gIHJlYWRvbmx5IGhhc0ZhaWxlZEZpbHRlcnMgPSAhIXRoaXMuZmFpbGVkRmlsdGVycy5sZW5ndGg7XG5cbiAgZ2V0IHN0YXRlKCk6IFJkc0ZpbGVJdGVtU3RhdGUge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZSQudmFsdWU7XG4gIH1cblxuICBwcml2YXRlIHNldCBzdGF0ZSh2OiBSZHNGaWxlSXRlbVN0YXRlKSB7XG4gICAgaWYgKHYgIT09IHRoaXMuc3RhdGUpIHtcbiAgICAgIHRoaXMuX3N0YXRlJC5uZXh0KHYpO1xuICAgIH1cbiAgfVxuXG4gIGdldCBpc1VwbG9hZGluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gJ3VwbG9hZGluZyc7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZmlsZTogRmlsZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZmFpbGVkRmlsdGVyczogUmRzVXBsb2FkRmlsdGVyW10sXG4gICkge1xuICAgIGlmICh0aGlzLmhhc0ZhaWxlZEZpbHRlcnMpIHtcbiAgICAgIHRoaXMuX2Vycm9ySW50bFRva2VuID0gdGhpcy5mYWlsZWRGaWx0ZXJzWzBdLmRlc2NyaXB0aW9uSW50bFRva2VuO1xuICAgICAgdGhpcy5zdGF0ZSA9ICdlcnJvcic7XG4gICAgfVxuICB9XG5cbiAgb25CZWZvcmVVcGxvYWQoKTogdm9pZCB7XG4gICAgdGhpcy5fZXJyb3JJbnRsVG9rZW4gPSAnRU1QVFknO1xuICAgIHRoaXMuc3RhdGUgPSAndXBsb2FkaW5nJztcbiAgICB0aGlzLl9wcm9ncmVzcyQubmV4dCgwKTtcbiAgfVxuXG4gIG9uUHJvZ3Jlc3MocHJvZ3Jlc3M6IG51bWJlciB8IG51bGwpOiB2b2lkIHtcbiAgICB0aGlzLl9wcm9ncmVzcyQubmV4dChwcm9ncmVzcyk7XG4gIH1cblxuICBvblN1Y2Nlc3MoKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZSA9ICdzdWNjZXNzJztcbiAgICB0aGlzLl9wcm9ncmVzcyQubmV4dCgxMDApO1xuICB9XG5cbiAgb25FcnJvcigpOiB2b2lkIHtcbiAgICB0aGlzLl9lcnJvckludGxUb2tlbiA9ICd1cGxvYWRGYWlsZWQnO1xuICAgIHRoaXMuc3RhdGUgPSAnZXJyb3InO1xuICB9XG5cbiAgb25BYm9ydCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlID0gJ2Fib3J0ZWQnO1xuICB9XG59XG4iXX0=