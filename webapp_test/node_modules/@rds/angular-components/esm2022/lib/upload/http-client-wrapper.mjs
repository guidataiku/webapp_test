import { HttpEventType, HttpRequest, } from '@angular/common/http';
export class RdsHttpClientWrapper {
    constructor(item, config, client) {
        this.item = item;
        this.config = config;
        this.client = client;
        this.form = new FormData();
        this.form.append('file', item.file, item.file.name);
        const method = config.method ?? 'POST';
        this.request = new HttpRequest(method, config.url, this.form, {
            headers: config.headers,
            reportProgress: true,
            withCredentials: !!config.authToken,
            responseType: config.responseType,
        });
        if (config.authToken) {
            this.request = this.request.clone({
                headers: this.request.headers.set('Authorization', config.authToken),
            });
        }
        this.response$ = this.client.request(this.request);
    }
    abort() {
        this.responseSubscription?.unsubscribe();
        this.responseSubscription = undefined;
        this.onAbort();
    }
    send() {
        this.responseSubscription = this.response$.subscribe({
            error: (e) => this.onError(e),
            next: (e) => {
                if (e.type === HttpEventType.UploadProgress) {
                    this.onProgress(e);
                }
                else if (e.type === HttpEventType.Response) {
                    this.onSuccess(e);
                }
            },
        });
    }
    onSuccess(event) {
        const change = {
            item: this.item,
            event,
        };
        this.success && this.success(change);
        this.complete && this.complete(change);
    }
    onError(event) {
        const change = {
            item: this.item,
            event,
        };
        this.error && this.error(change);
        this.complete && this.complete(change);
    }
    onProgress(event) {
        const progress = event.total != undefined
            ? Math.round((event.loaded * 100) / event.total)
            : null;
        this.progress && this.progress({ item: this.item, progress });
    }
    onAbort() {
        const change = {
            item: this.item,
        };
        this.cancel && this.cancel(change);
        this.complete && this.complete(change);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jbGllbnQtd3JhcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvdXBsb2FkL2h0dHAtY2xpZW50LXdyYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUlMLGFBQWEsRUFFYixXQUFXLEdBRVosTUFBTSxzQkFBc0IsQ0FBQztBQUc5QixNQUFNLE9BQU8sb0JBQW9CO0lBYy9CLFlBQ21CLElBQWlCLEVBQ3pCLE1BQXVCLEVBQ2YsTUFBa0I7UUFGbEIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQUN6QixXQUFNLEdBQU4sTUFBTSxDQUFpQjtRQUNmLFdBQU0sR0FBTixNQUFNLENBQVk7UUFoQnBCLFNBQUksR0FBRyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBa0JyQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRTtZQUM1RCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU87WUFDdkIsY0FBYyxFQUFFLElBQUk7WUFDcEIsZUFBZSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUztZQUNuQyxZQUFZLEVBQUUsTUFBTSxDQUFDLFlBQVk7U0FDbEMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDaEMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDLFNBQVMsQ0FBQzthQUNyRSxDQUFDLENBQUM7UUFDTCxDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELEtBQUs7UUFDSCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsV0FBVyxFQUFFLENBQUM7UUFDekMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLFNBQVMsQ0FBQztRQUN0QyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELElBQUk7UUFDRixJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7WUFDbkQsS0FBSyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM3QixJQUFJLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDVixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLGNBQWMsRUFBRSxDQUFDO29CQUM1QyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNyQixDQUFDO3FCQUFNLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxhQUFhLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLENBQUM7WUFDSCxDQUFDO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVPLFNBQVMsQ0FBQyxLQUFzQjtRQUN0QyxNQUFNLE1BQU0sR0FBK0I7WUFDekMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsS0FBSztTQUNOLENBQUM7UUFFRixJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFTyxPQUFPLENBQUMsS0FBd0I7UUFDdEMsTUFBTSxNQUFNLEdBQWtEO1lBQzVELElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLEtBQUs7U0FDTixDQUFDO1FBRUYsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8sVUFBVSxDQUFDLEtBQXdCO1FBQ3pDLE1BQU0sUUFBUSxHQUNaLEtBQUssQ0FBQyxLQUFLLElBQUksU0FBUztZQUN0QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztZQUNoRCxDQUFDLENBQUMsSUFBSSxDQUFDO1FBRVgsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRU8sT0FBTztRQUNiLE1BQU0sTUFBTSxHQUErQjtZQUN6QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDaEIsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmRzRmlsZUl0ZW0gfSBmcm9tICcuL2ZpbGUtaXRlbS5jbGFzcyc7XG5pbXBvcnQge1xuICBSZHNGaWxlSXRlbVByb2dyZXNzQ2hhbmdlLFxuICBSZHNGaWxlSXRlbVN0YXR1c0NoYW5nZSxcbiAgUmRzVXBsb2FkQ29uZmlnLFxufSBmcm9tICcuL3VwbG9hZC50eXBlcyc7XG5pbXBvcnQge1xuICBIdHRwQ2xpZW50LFxuICBIdHRwRXJyb3JSZXNwb25zZSxcbiAgSHR0cEV2ZW50LFxuICBIdHRwRXZlbnRUeXBlLFxuICBIdHRwUHJvZ3Jlc3NFdmVudCxcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBSZXNwb25zZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjbGFzcyBSZHNIdHRwQ2xpZW50V3JhcHBlcjxUID0gdW5rbm93bj4ge1xuICBwcml2YXRlIHJlYWRvbmx5IGZvcm0gPSBuZXcgRm9ybURhdGEoKTtcbiAgcHJpdmF0ZSByZWFkb25seSByZXF1ZXN0OiBIdHRwUmVxdWVzdDxGb3JtRGF0YT47XG4gIHByaXZhdGUgcmVhZG9ubHkgcmVzcG9uc2UkOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxUPj47XG4gIHByaXZhdGUgcmVzcG9uc2VTdWJzY3JpcHRpb24/OiBTdWJzY3JpcHRpb247XG5cbiAgcHJvZ3Jlc3M/OiAoY2hhbmdlOiBSZHNGaWxlSXRlbVByb2dyZXNzQ2hhbmdlKSA9PiB2b2lkO1xuICBzdWNjZXNzPzogKGNoYW5nZTogUmRzRmlsZUl0ZW1TdGF0dXNDaGFuZ2U8VD4pID0+IHZvaWQ7XG4gIGVycm9yPzogKGNoYW5nZTogUmRzRmlsZUl0ZW1TdGF0dXNDaGFuZ2U8VCwgSHR0cEVycm9yUmVzcG9uc2U+KSA9PiB2b2lkO1xuICBjb21wbGV0ZT86IChcbiAgICBjaGFuZ2U6IFJkc0ZpbGVJdGVtU3RhdHVzQ2hhbmdlPFQsIEh0dHBSZXNwb25zZTxUPiB8IEh0dHBFcnJvclJlc3BvbnNlPixcbiAgKSA9PiB2b2lkO1xuICBjYW5jZWw/OiAoY2hhbmdlOiBSZHNGaWxlSXRlbVN0YXR1c0NoYW5nZTxUPikgPT4gdm9pZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGl0ZW06IFJkc0ZpbGVJdGVtLFxuICAgIHJlYWRvbmx5IGNvbmZpZzogUmRzVXBsb2FkQ29uZmlnLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50OiBIdHRwQ2xpZW50LFxuICApIHtcbiAgICB0aGlzLmZvcm0uYXBwZW5kKCdmaWxlJywgaXRlbS5maWxlLCBpdGVtLmZpbGUubmFtZSk7XG5cbiAgICBjb25zdCBtZXRob2QgPSBjb25maWcubWV0aG9kID8/ICdQT1NUJztcbiAgICB0aGlzLnJlcXVlc3QgPSBuZXcgSHR0cFJlcXVlc3QobWV0aG9kLCBjb25maWcudXJsLCB0aGlzLmZvcm0sIHtcbiAgICAgIGhlYWRlcnM6IGNvbmZpZy5oZWFkZXJzLFxuICAgICAgcmVwb3J0UHJvZ3Jlc3M6IHRydWUsXG4gICAgICB3aXRoQ3JlZGVudGlhbHM6ICEhY29uZmlnLmF1dGhUb2tlbixcbiAgICAgIHJlc3BvbnNlVHlwZTogY29uZmlnLnJlc3BvbnNlVHlwZSxcbiAgICB9KTtcblxuICAgIGlmIChjb25maWcuYXV0aFRva2VuKSB7XG4gICAgICB0aGlzLnJlcXVlc3QgPSB0aGlzLnJlcXVlc3QuY2xvbmUoe1xuICAgICAgICBoZWFkZXJzOiB0aGlzLnJlcXVlc3QuaGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCBjb25maWcuYXV0aFRva2VuKSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMucmVzcG9uc2UkID0gdGhpcy5jbGllbnQucmVxdWVzdCh0aGlzLnJlcXVlc3QpO1xuICB9XG5cbiAgYWJvcnQoKTogdm9pZCB7XG4gICAgdGhpcy5yZXNwb25zZVN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgICB0aGlzLnJlc3BvbnNlU3Vic2NyaXB0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMub25BYm9ydCgpO1xuICB9XG5cbiAgc2VuZCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlc3BvbnNlU3Vic2NyaXB0aW9uID0gdGhpcy5yZXNwb25zZSQuc3Vic2NyaWJlKHtcbiAgICAgIGVycm9yOiAoZSkgPT4gdGhpcy5vbkVycm9yKGUpLFxuICAgICAgbmV4dDogKGUpID0+IHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gSHR0cEV2ZW50VHlwZS5VcGxvYWRQcm9ncmVzcykge1xuICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyhlKTtcbiAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT09IEh0dHBFdmVudFR5cGUuUmVzcG9uc2UpIHtcbiAgICAgICAgICB0aGlzLm9uU3VjY2VzcyhlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgb25TdWNjZXNzKGV2ZW50OiBIdHRwUmVzcG9uc2U8VD4pOiB2b2lkIHtcbiAgICBjb25zdCBjaGFuZ2U6IFJkc0ZpbGVJdGVtU3RhdHVzQ2hhbmdlPFQ+ID0ge1xuICAgICAgaXRlbTogdGhpcy5pdGVtLFxuICAgICAgZXZlbnQsXG4gICAgfTtcblxuICAgIHRoaXMuc3VjY2VzcyAmJiB0aGlzLnN1Y2Nlc3MoY2hhbmdlKTtcbiAgICB0aGlzLmNvbXBsZXRlICYmIHRoaXMuY29tcGxldGUoY2hhbmdlKTtcbiAgfVxuXG4gIHByaXZhdGUgb25FcnJvcihldmVudDogSHR0cEVycm9yUmVzcG9uc2UpOiB2b2lkIHtcbiAgICBjb25zdCBjaGFuZ2U6IFJkc0ZpbGVJdGVtU3RhdHVzQ2hhbmdlPFQsIEh0dHBFcnJvclJlc3BvbnNlPiA9IHtcbiAgICAgIGl0ZW06IHRoaXMuaXRlbSxcbiAgICAgIGV2ZW50LFxuICAgIH07XG5cbiAgICB0aGlzLmVycm9yICYmIHRoaXMuZXJyb3IoY2hhbmdlKTtcbiAgICB0aGlzLmNvbXBsZXRlICYmIHRoaXMuY29tcGxldGUoY2hhbmdlKTtcbiAgfVxuXG4gIHByaXZhdGUgb25Qcm9ncmVzcyhldmVudDogSHR0cFByb2dyZXNzRXZlbnQpOiB2b2lkIHtcbiAgICBjb25zdCBwcm9ncmVzcyA9XG4gICAgICBldmVudC50b3RhbCAhPSB1bmRlZmluZWRcbiAgICAgICAgPyBNYXRoLnJvdW5kKChldmVudC5sb2FkZWQgKiAxMDApIC8gZXZlbnQudG90YWwpXG4gICAgICAgIDogbnVsbDtcblxuICAgIHRoaXMucHJvZ3Jlc3MgJiYgdGhpcy5wcm9ncmVzcyh7IGl0ZW06IHRoaXMuaXRlbSwgcHJvZ3Jlc3MgfSk7XG4gIH1cblxuICBwcml2YXRlIG9uQWJvcnQoKTogdm9pZCB7XG4gICAgY29uc3QgY2hhbmdlOiBSZHNGaWxlSXRlbVN0YXR1c0NoYW5nZTxUPiA9IHtcbiAgICAgIGl0ZW06IHRoaXMuaXRlbSxcbiAgICB9O1xuXG4gICAgdGhpcy5jYW5jZWwgJiYgdGhpcy5jYW5jZWwoY2hhbmdlKTtcbiAgICB0aGlzLmNvbXBsZXRlICYmIHRoaXMuY29tcGxldGUoY2hhbmdlKTtcbiAgfVxufVxuIl19