// those consts exist to avoid circular reference in type definition
export const FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN = 'queueLimitFilterDescription';
export const FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN = 'fileSizeFilterDescription';
export const FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN = 'fileTypeFilterDescription';
export class RdsUploadFilters {
    static { this.queueLimit = {
        name: 'queueLimit',
        descriptionIntlToken: FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN,
        preventsAddingToQueue: true,
        fn: (item, config, queue) => !config.queueLimit || queue.length < config.queueLimit,
    }; }
    static { this.fileSize = {
        name: 'fileSize',
        descriptionIntlToken: FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN,
        fn: (item, config) => !(config.maxFileSize && item.size > config.maxFileSize),
    }; }
    static { this.fileType = {
        name: 'fileType',
        descriptionIntlToken: FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN,
        fn: verifyAccept,
    }; }
    static compose(currentFilters, config) {
        const filters = new Set([...currentFilters, RdsUploadFilters.queueLimit]);
        config.maxFileSize && filters.add(RdsUploadFilters.fileSize);
        config.accept && filters.add(RdsUploadFilters.fileType);
        return Array.from(filters);
    }
}
function verifyAccept(file, config) {
    const accept = config.accept?.filter((v) => !!v);
    if (!accept || !accept.length) {
        return true;
    }
    const allowed = parseAccept(accept);
    const extension = extractExtension(file.name);
    return (allowed.extension.includes(extension) ||
        allowed.mime.some((regex) => regex.test(file.type)));
}
function parseAccept(accept) {
    return accept.reduce((acc, curr) => {
        curr = curr.trim().toLowerCase();
        if (curr.startsWith('.')) {
            acc.extension.push(...unifyJpgExtensionsIfNeeded(curr));
        }
        else {
            acc.mime.push(new RegExp(curr.replace('*', '.*')));
        }
        return acc;
    }, { extension: [], mime: [] });
}
function unifyJpgExtensionsIfNeeded(extension) {
    if (extension === '.jpg' || extension === '.jpeg') {
        return ['.jpeg', '.jpg'];
    }
    else {
        return [extension];
    }
}
function extractExtension(filename) {
    const splitName = filename.split('.');
    return '.' + splitName[splitName.length - 1].toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLmZpbHRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3VwbG9hZC91cGxvYWQuZmlsdGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxvRUFBb0U7QUFDcEUsTUFBTSxDQUFDLE1BQU0seUNBQXlDLEdBQ3BELDZCQUE2QixDQUFDO0FBQ2hDLE1BQU0sQ0FBQyxNQUFNLHVDQUF1QyxHQUNsRCwyQkFBMkIsQ0FBQztBQUM5QixNQUFNLENBQUMsTUFBTSx1Q0FBdUMsR0FDbEQsMkJBQTJCLENBQUM7QUFFOUIsTUFBTSxPQUFPLGdCQUFnQjthQUNYLGVBQVUsR0FBb0I7UUFDNUMsSUFBSSxFQUFFLFlBQVk7UUFDbEIsb0JBQW9CLEVBQUUseUNBQXlDO1FBQy9ELHFCQUFxQixFQUFFLElBQUk7UUFDM0IsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUMxQixDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsVUFBVTtLQUN6RCxDQUFDO2FBRWMsYUFBUSxHQUFvQjtRQUMxQyxJQUFJLEVBQUUsVUFBVTtRQUNoQixvQkFBb0IsRUFBRSx1Q0FBdUM7UUFDN0QsRUFBRSxFQUFFLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQ25CLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztLQUMxRCxDQUFDO2FBRWMsYUFBUSxHQUFvQjtRQUMxQyxJQUFJLEVBQUUsVUFBVTtRQUNoQixvQkFBb0IsRUFBRSx1Q0FBdUM7UUFDN0QsRUFBRSxFQUFFLFlBQVk7S0FDakIsQ0FBQztJQUVGLE1BQU0sQ0FBQyxPQUFPLENBQ1osY0FBaUMsRUFDakMsTUFBdUI7UUFFdkIsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxHQUFHLGNBQWMsRUFBRSxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBRTFFLE1BQU0sQ0FBQyxXQUFXLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFeEQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7O0FBR0gsU0FBUyxZQUFZLENBQUMsSUFBVSxFQUFFLE1BQXVCO0lBQ3ZELE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFakQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsTUFBTSxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTlDLE9BQU8sQ0FDTCxPQUFPLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7UUFDckMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ3BELENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsTUFBZ0I7SUFDbkMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUNsQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtRQUNaLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFakMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDekIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzFELENBQUM7YUFBTSxDQUFDO1lBQ04sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUM7UUFFRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUMsRUFDRCxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBa0IsQ0FDNUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLDBCQUEwQixDQUFDLFNBQWlCO0lBQ25ELElBQUksU0FBUyxLQUFLLE1BQU0sSUFBSSxTQUFTLEtBQUssT0FBTyxFQUFFLENBQUM7UUFDbEQsT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDO1NBQU0sQ0FBQztRQUNOLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQixDQUFDO0FBQ0gsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsUUFBZ0I7SUFDeEMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUV0QyxPQUFPLEdBQUcsR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM3RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmRzVXBsb2FkRmlsdGVyLCBSZHNVcGxvYWRDb25maWcgfSBmcm9tICcuL3VwbG9hZC50eXBlcyc7XG5cbi8vIHRob3NlIGNvbnN0cyBleGlzdCB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2UgaW4gdHlwZSBkZWZpbml0aW9uXG5leHBvcnQgY29uc3QgRklMVEVSX1FVRVVFX0xJTUlUX0RFU0NSSVBUSU9OX0lOVExfVE9LRU4gPVxuICAncXVldWVMaW1pdEZpbHRlckRlc2NyaXB0aW9uJztcbmV4cG9ydCBjb25zdCBGSUxURVJfRklMRV9TSVpFX0RFU0NSSVBUSU9OX0lOVExfVE9LRU4gPVxuICAnZmlsZVNpemVGaWx0ZXJEZXNjcmlwdGlvbic7XG5leHBvcnQgY29uc3QgRklMVEVSX0ZJTEVfVFlQRV9ERVNDUklQVElPTl9JTlRMX1RPS0VOID1cbiAgJ2ZpbGVUeXBlRmlsdGVyRGVzY3JpcHRpb24nO1xuXG5leHBvcnQgY2xhc3MgUmRzVXBsb2FkRmlsdGVycyB7XG4gIHN0YXRpYyByZWFkb25seSBxdWV1ZUxpbWl0OiBSZHNVcGxvYWRGaWx0ZXIgPSB7XG4gICAgbmFtZTogJ3F1ZXVlTGltaXQnLFxuICAgIGRlc2NyaXB0aW9uSW50bFRva2VuOiBGSUxURVJfUVVFVUVfTElNSVRfREVTQ1JJUFRJT05fSU5UTF9UT0tFTixcbiAgICBwcmV2ZW50c0FkZGluZ1RvUXVldWU6IHRydWUsXG4gICAgZm46IChpdGVtLCBjb25maWcsIHF1ZXVlKSA9PlxuICAgICAgIWNvbmZpZy5xdWV1ZUxpbWl0IHx8IHF1ZXVlLmxlbmd0aCA8IGNvbmZpZy5xdWV1ZUxpbWl0LFxuICB9O1xuXG4gIHN0YXRpYyByZWFkb25seSBmaWxlU2l6ZTogUmRzVXBsb2FkRmlsdGVyID0ge1xuICAgIG5hbWU6ICdmaWxlU2l6ZScsXG4gICAgZGVzY3JpcHRpb25JbnRsVG9rZW46IEZJTFRFUl9GSUxFX1NJWkVfREVTQ1JJUFRJT05fSU5UTF9UT0tFTixcbiAgICBmbjogKGl0ZW0sIGNvbmZpZykgPT5cbiAgICAgICEoY29uZmlnLm1heEZpbGVTaXplICYmIGl0ZW0uc2l6ZSA+IGNvbmZpZy5tYXhGaWxlU2l6ZSksXG4gIH07XG5cbiAgc3RhdGljIHJlYWRvbmx5IGZpbGVUeXBlOiBSZHNVcGxvYWRGaWx0ZXIgPSB7XG4gICAgbmFtZTogJ2ZpbGVUeXBlJyxcbiAgICBkZXNjcmlwdGlvbkludGxUb2tlbjogRklMVEVSX0ZJTEVfVFlQRV9ERVNDUklQVElPTl9JTlRMX1RPS0VOLFxuICAgIGZuOiB2ZXJpZnlBY2NlcHQsXG4gIH07XG5cbiAgc3RhdGljIGNvbXBvc2UoXG4gICAgY3VycmVudEZpbHRlcnM6IFJkc1VwbG9hZEZpbHRlcltdLFxuICAgIGNvbmZpZzogUmRzVXBsb2FkQ29uZmlnLFxuICApOiBSZHNVcGxvYWRGaWx0ZXJbXSB7XG4gICAgY29uc3QgZmlsdGVycyA9IG5ldyBTZXQoWy4uLmN1cnJlbnRGaWx0ZXJzLCBSZHNVcGxvYWRGaWx0ZXJzLnF1ZXVlTGltaXRdKTtcblxuICAgIGNvbmZpZy5tYXhGaWxlU2l6ZSAmJiBmaWx0ZXJzLmFkZChSZHNVcGxvYWRGaWx0ZXJzLmZpbGVTaXplKTtcbiAgICBjb25maWcuYWNjZXB0ICYmIGZpbHRlcnMuYWRkKFJkc1VwbG9hZEZpbHRlcnMuZmlsZVR5cGUpO1xuXG4gICAgcmV0dXJuIEFycmF5LmZyb20oZmlsdGVycyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmVyaWZ5QWNjZXB0KGZpbGU6IEZpbGUsIGNvbmZpZzogUmRzVXBsb2FkQ29uZmlnKTogYm9vbGVhbiB7XG4gIGNvbnN0IGFjY2VwdCA9IGNvbmZpZy5hY2NlcHQ/LmZpbHRlcigodikgPT4gISF2KTtcblxuICBpZiAoIWFjY2VwdCB8fCAhYWNjZXB0Lmxlbmd0aCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgY29uc3QgYWxsb3dlZCA9IHBhcnNlQWNjZXB0KGFjY2VwdCk7XG4gIGNvbnN0IGV4dGVuc2lvbiA9IGV4dHJhY3RFeHRlbnNpb24oZmlsZS5uYW1lKTtcblxuICByZXR1cm4gKFxuICAgIGFsbG93ZWQuZXh0ZW5zaW9uLmluY2x1ZGVzKGV4dGVuc2lvbikgfHxcbiAgICBhbGxvd2VkLm1pbWUuc29tZSgocmVnZXgpID0+IHJlZ2V4LnRlc3QoZmlsZS50eXBlKSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBY2NlcHQoYWNjZXB0OiBzdHJpbmdbXSk6IFBhcnNlZEFjY2VwdCB7XG4gIHJldHVybiBhY2NlcHQucmVkdWNlKFxuICAgIChhY2MsIGN1cnIpID0+IHtcbiAgICAgIGN1cnIgPSBjdXJyLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBpZiAoY3Vyci5zdGFydHNXaXRoKCcuJykpIHtcbiAgICAgICAgYWNjLmV4dGVuc2lvbi5wdXNoKC4uLnVuaWZ5SnBnRXh0ZW5zaW9uc0lmTmVlZGVkKGN1cnIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjYy5taW1lLnB1c2gobmV3IFJlZ0V4cChjdXJyLnJlcGxhY2UoJyonLCAnLionKSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sXG4gICAgeyBleHRlbnNpb246IFtdLCBtaW1lOiBbXSB9IGFzIFBhcnNlZEFjY2VwdCxcbiAgKTtcbn1cblxuZnVuY3Rpb24gdW5pZnlKcGdFeHRlbnNpb25zSWZOZWVkZWQoZXh0ZW5zaW9uOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gIGlmIChleHRlbnNpb24gPT09ICcuanBnJyB8fCBleHRlbnNpb24gPT09ICcuanBlZycpIHtcbiAgICByZXR1cm4gWycuanBlZycsICcuanBnJ107XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFtleHRlbnNpb25dO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RFeHRlbnNpb24oZmlsZW5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHNwbGl0TmFtZSA9IGZpbGVuYW1lLnNwbGl0KCcuJyk7XG5cbiAgcmV0dXJuICcuJyArIHNwbGl0TmFtZVtzcGxpdE5hbWUubGVuZ3RoIC0gMV0udG9Mb3dlckNhc2UoKTtcbn1cblxudHlwZSBQYXJzZWRBY2NlcHQgPSB7IGV4dGVuc2lvbjogc3RyaW5nW107IG1pbWU6IFJlZ0V4cFtdIH07XG4iXX0=