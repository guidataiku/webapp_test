import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN, FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN, FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN, } from './upload.filters';
import * as i0 from "@angular/core";
export class RdsUploadIntlService {
    constructor() {
        this._change$ = new BehaviorSubject(RdsUploadIntlService.translations);
        this.change$ = this._change$.asObservable();
        this.fileItemUploadSuccessMessageFactory = (fileItem) => {
            return fileItem.file.name + ' upload completed successfully';
        };
        this.fileItemUploadErrorMessageFactory = (fileItem) => {
            return (fileItem.file.name +
                ' error: ' +
                RdsUploadIntlService.translations[fileItem.errorIntlToken]);
        };
        this.fileItemFilterFailedMessageFactory = (fileItem) => {
            return (fileItem.file.name +
                ' error: ' +
                RdsUploadIntlService.translations[fileItem.errorIntlToken]);
        };
        this.fileItemProgressMessageFactory = (progress) => {
            return progress == null ? '' : `${progress}% Uploaded`;
        };
    }
    static { this.translations = {
        EMPTY: '',
        chooseFilesButtonLabel: 'Upload',
        dropZoneChooseFiles: 'Upload',
        dropZoneOrDropFiles: 'or drop files here',
        uploadListAriaLabel: 'File upload queue',
        startUploadButtonLabel: 'Upload',
        retryButtonAriaLabel: 'Retry',
        cancelButtonAriaLabel: 'Cancel',
        uploadFailed: 'Upload failed.',
        [FILTER_QUEUE_LIMIT_DESCRIPTION_INTL_TOKEN]: '',
        [FILTER_FILE_SIZE_DESCRIPTION_INTL_TOKEN]: 'File exceeds size limit.',
        [FILTER_FILE_TYPE_DESCRIPTION_INTL_TOKEN]: 'Invalid file type.',
    }; }
    setTranslation(key, value) {
        RdsUploadIntlService.translations[key] = value;
        this._change$.next({ ...RdsUploadIntlService.translations });
    }
    setFileItemUploadSuccessMessageFactory(fn) {
        this.fileItemUploadSuccessMessageFactory = fn;
    }
    setFileItemUploadErrorMessageFactory(fn) {
        this.fileItemUploadErrorMessageFactory = fn;
    }
    setFileItemFilterFailedMessageFactory(fn) {
        this.fileItemFilterFailedMessageFactory = fn;
    }
    setFileItemProgressMessageFactory(fn) {
        this.fileItemProgressMessageFactory = fn;
    }
    getFileItemUploadSuccessMessage(fileItem) {
        return this.fileItemUploadSuccessMessageFactory(fileItem);
    }
    getFileItemUploadErrorMessage(fileItem) {
        return this.fileItemUploadErrorMessageFactory(fileItem);
    }
    getFileItemFilterFailedMessage(fileItem) {
        return this.fileItemFilterFailedMessageFactory(fileItem);
    }
    getFileItemProgressMessage(progress) {
        return this.fileItemProgressMessageFactory(progress);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadIntlService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadIntlService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadIntlService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmRzLXVwbG9hZC1pbnRsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3VwbG9hZC9yZHMtdXBsb2FkLWludGwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFdkMsT0FBTyxFQUNMLHVDQUF1QyxFQUN2Qyx1Q0FBdUMsRUFDdkMseUNBQXlDLEdBQzFDLE1BQU0sa0JBQWtCLENBQUM7O0FBTTFCLE1BQU0sT0FBTyxvQkFBb0I7SUFEakM7UUFpQm1CLGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FDN0Msb0JBQW9CLENBQUMsWUFBWSxDQUNsQyxDQUFDO1FBQ0YsWUFBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7UUEyQy9CLHdDQUFtQyxHQUFnQyxDQUN6RSxRQUFRLEVBQ0EsRUFBRTtZQUNWLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsZ0NBQWdDLENBQUM7UUFDL0QsQ0FBQyxDQUFDO1FBRU0sc0NBQWlDLEdBQWdDLENBQ3ZFLFFBQVEsRUFDQSxFQUFFO1lBQ1YsT0FBTyxDQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFDbEIsVUFBVTtnQkFDVixvQkFBb0IsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUMzRCxDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBRU0sdUNBQWtDLEdBQWdDLENBQ3hFLFFBQVEsRUFDUixFQUFFO1lBQ0YsT0FBTyxDQUNMLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFDbEIsVUFBVTtnQkFDVixvQkFBb0IsQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUMzRCxDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBRU0sbUNBQThCLEdBQUcsQ0FDdkMsUUFBdUIsRUFDZixFQUFFO1lBQ1YsT0FBTyxRQUFRLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxZQUFZLENBQUM7UUFDekQsQ0FBQyxDQUFDO0tBQ0g7YUE1RmlCLGlCQUFZLEdBQUc7UUFDN0IsS0FBSyxFQUFFLEVBQUU7UUFDVCxzQkFBc0IsRUFBRSxRQUFRO1FBQ2hDLG1CQUFtQixFQUFFLFFBQVE7UUFDN0IsbUJBQW1CLEVBQUUsb0JBQW9CO1FBQ3pDLG1CQUFtQixFQUFFLG1CQUFtQjtRQUN4QyxzQkFBc0IsRUFBRSxRQUFRO1FBQ2hDLG9CQUFvQixFQUFFLE9BQU87UUFDN0IscUJBQXFCLEVBQUUsUUFBUTtRQUMvQixZQUFZLEVBQUUsZ0JBQWdCO1FBQzlCLENBQUMseUNBQXlDLENBQUMsRUFBRSxFQUFFO1FBQy9DLENBQUMsdUNBQXVDLENBQUMsRUFBRSwwQkFBMEI7UUFDckUsQ0FBQyx1Q0FBdUMsQ0FBQyxFQUFFLG9CQUFvQjtLQUNoRSxBQWIyQixDQWExQjtJQU9GLGNBQWMsQ0FBQyxHQUF1QixFQUFFLEtBQWE7UUFDbkQsb0JBQW9CLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUMvQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsb0JBQW9CLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsc0NBQXNDLENBQ3BDLEVBQStCO1FBRS9CLElBQUksQ0FBQyxtQ0FBbUMsR0FBRyxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELG9DQUFvQyxDQUFDLEVBQStCO1FBQ2xFLElBQUksQ0FBQyxpQ0FBaUMsR0FBRyxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVELHFDQUFxQyxDQUFDLEVBQStCO1FBQ25FLElBQUksQ0FBQyxrQ0FBa0MsR0FBRyxFQUFFLENBQUM7SUFDL0MsQ0FBQztJQUVELGlDQUFpQyxDQUMvQixFQUF1QztRQUV2QyxJQUFJLENBQUMsOEJBQThCLEdBQUcsRUFBRSxDQUFDO0lBQzNDLENBQUM7SUFFRCwrQkFBK0IsQ0FBQyxRQUFxQjtRQUNuRCxPQUFPLElBQUksQ0FBQyxtQ0FBbUMsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1RCxDQUFDO0lBRUQsNkJBQTZCLENBQUMsUUFBcUI7UUFDakQsT0FBTyxJQUFJLENBQUMsaUNBQWlDLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELDhCQUE4QixDQUFDLFFBQXFCO1FBQ2xELE9BQU8sSUFBSSxDQUFDLGtDQUFrQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxRQUF1QjtRQUNoRCxPQUFPLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN2RCxDQUFDOzhHQTVEVSxvQkFBb0I7a0hBQXBCLG9CQUFvQixjQURQLE1BQU07OzJGQUNuQixvQkFBb0I7a0JBRGhDLFVBQVU7bUJBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZHNGaWxlSXRlbSB9IGZyb20gJy4vZmlsZS1pdGVtLmNsYXNzJztcbmltcG9ydCB7XG4gIEZJTFRFUl9GSUxFX1NJWkVfREVTQ1JJUFRJT05fSU5UTF9UT0tFTixcbiAgRklMVEVSX0ZJTEVfVFlQRV9ERVNDUklQVElPTl9JTlRMX1RPS0VOLFxuICBGSUxURVJfUVVFVUVfTElNSVRfREVTQ1JJUFRJT05fSU5UTF9UT0tFTixcbn0gZnJvbSAnLi91cGxvYWQuZmlsdGVycyc7XG5cbmV4cG9ydCB0eXBlIFJkc1VwbG9hZEludGxNZXNzYWdlRmFjdG9yeSA9IChmaWxlSXRlbTogUmRzRmlsZUl0ZW0pID0+IHN0cmluZztcbmV4cG9ydCB0eXBlIFJkc1VwbG9hZEludGxUb2tlbiA9IGtleW9mIHR5cGVvZiBSZHNVcGxvYWRJbnRsU2VydmljZS50cmFuc2xhdGlvbnM7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUmRzVXBsb2FkSW50bFNlcnZpY2Uge1xuICBzdGF0aWMgcmVhZG9ubHkgdHJhbnNsYXRpb25zID0ge1xuICAgIEVNUFRZOiAnJyxcbiAgICBjaG9vc2VGaWxlc0J1dHRvbkxhYmVsOiAnVXBsb2FkJyxcbiAgICBkcm9wWm9uZUNob29zZUZpbGVzOiAnVXBsb2FkJyxcbiAgICBkcm9wWm9uZU9yRHJvcEZpbGVzOiAnb3IgZHJvcCBmaWxlcyBoZXJlJyxcbiAgICB1cGxvYWRMaXN0QXJpYUxhYmVsOiAnRmlsZSB1cGxvYWQgcXVldWUnLFxuICAgIHN0YXJ0VXBsb2FkQnV0dG9uTGFiZWw6ICdVcGxvYWQnLFxuICAgIHJldHJ5QnV0dG9uQXJpYUxhYmVsOiAnUmV0cnknLFxuICAgIGNhbmNlbEJ1dHRvbkFyaWFMYWJlbDogJ0NhbmNlbCcsXG4gICAgdXBsb2FkRmFpbGVkOiAnVXBsb2FkIGZhaWxlZC4nLFxuICAgIFtGSUxURVJfUVVFVUVfTElNSVRfREVTQ1JJUFRJT05fSU5UTF9UT0tFTl06ICcnLFxuICAgIFtGSUxURVJfRklMRV9TSVpFX0RFU0NSSVBUSU9OX0lOVExfVE9LRU5dOiAnRmlsZSBleGNlZWRzIHNpemUgbGltaXQuJyxcbiAgICBbRklMVEVSX0ZJTEVfVFlQRV9ERVNDUklQVElPTl9JTlRMX1RPS0VOXTogJ0ludmFsaWQgZmlsZSB0eXBlLicsXG4gIH07XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfY2hhbmdlJCA9IG5ldyBCZWhhdmlvclN1YmplY3QoXG4gICAgUmRzVXBsb2FkSW50bFNlcnZpY2UudHJhbnNsYXRpb25zLFxuICApO1xuICBjaGFuZ2UkID0gdGhpcy5fY2hhbmdlJC5hc09ic2VydmFibGUoKTtcblxuICBzZXRUcmFuc2xhdGlvbihrZXk6IFJkc1VwbG9hZEludGxUb2tlbiwgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIFJkc1VwbG9hZEludGxTZXJ2aWNlLnRyYW5zbGF0aW9uc1trZXldID0gdmFsdWU7XG4gICAgdGhpcy5fY2hhbmdlJC5uZXh0KHsgLi4uUmRzVXBsb2FkSW50bFNlcnZpY2UudHJhbnNsYXRpb25zIH0pO1xuICB9XG5cbiAgc2V0RmlsZUl0ZW1VcGxvYWRTdWNjZXNzTWVzc2FnZUZhY3RvcnkoXG4gICAgZm46IFJkc1VwbG9hZEludGxNZXNzYWdlRmFjdG9yeSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5maWxlSXRlbVVwbG9hZFN1Y2Nlc3NNZXNzYWdlRmFjdG9yeSA9IGZuO1xuICB9XG5cbiAgc2V0RmlsZUl0ZW1VcGxvYWRFcnJvck1lc3NhZ2VGYWN0b3J5KGZuOiBSZHNVcGxvYWRJbnRsTWVzc2FnZUZhY3RvcnkpOiB2b2lkIHtcbiAgICB0aGlzLmZpbGVJdGVtVXBsb2FkRXJyb3JNZXNzYWdlRmFjdG9yeSA9IGZuO1xuICB9XG5cbiAgc2V0RmlsZUl0ZW1GaWx0ZXJGYWlsZWRNZXNzYWdlRmFjdG9yeShmbjogUmRzVXBsb2FkSW50bE1lc3NhZ2VGYWN0b3J5KTogdm9pZCB7XG4gICAgdGhpcy5maWxlSXRlbUZpbHRlckZhaWxlZE1lc3NhZ2VGYWN0b3J5ID0gZm47XG4gIH1cblxuICBzZXRGaWxlSXRlbVByb2dyZXNzTWVzc2FnZUZhY3RvcnkoXG4gICAgZm46IChwcm9ncmVzczogbnVtYmVyIHwgbnVsbCkgPT4gc3RyaW5nLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLmZpbGVJdGVtUHJvZ3Jlc3NNZXNzYWdlRmFjdG9yeSA9IGZuO1xuICB9XG5cbiAgZ2V0RmlsZUl0ZW1VcGxvYWRTdWNjZXNzTWVzc2FnZShmaWxlSXRlbTogUmRzRmlsZUl0ZW0pOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZpbGVJdGVtVXBsb2FkU3VjY2Vzc01lc3NhZ2VGYWN0b3J5KGZpbGVJdGVtKTtcbiAgfVxuXG4gIGdldEZpbGVJdGVtVXBsb2FkRXJyb3JNZXNzYWdlKGZpbGVJdGVtOiBSZHNGaWxlSXRlbSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuZmlsZUl0ZW1VcGxvYWRFcnJvck1lc3NhZ2VGYWN0b3J5KGZpbGVJdGVtKTtcbiAgfVxuXG4gIGdldEZpbGVJdGVtRmlsdGVyRmFpbGVkTWVzc2FnZShmaWxlSXRlbTogUmRzRmlsZUl0ZW0pOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZpbGVJdGVtRmlsdGVyRmFpbGVkTWVzc2FnZUZhY3RvcnkoZmlsZUl0ZW0pO1xuICB9XG5cbiAgZ2V0RmlsZUl0ZW1Qcm9ncmVzc01lc3NhZ2UocHJvZ3Jlc3M6IG51bWJlciB8IG51bGwpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmZpbGVJdGVtUHJvZ3Jlc3NNZXNzYWdlRmFjdG9yeShwcm9ncmVzcyk7XG4gIH1cblxuICBwcml2YXRlIGZpbGVJdGVtVXBsb2FkU3VjY2Vzc01lc3NhZ2VGYWN0b3J5OiBSZHNVcGxvYWRJbnRsTWVzc2FnZUZhY3RvcnkgPSAoXG4gICAgZmlsZUl0ZW0sXG4gICk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIGZpbGVJdGVtLmZpbGUubmFtZSArICcgdXBsb2FkIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHknO1xuICB9O1xuXG4gIHByaXZhdGUgZmlsZUl0ZW1VcGxvYWRFcnJvck1lc3NhZ2VGYWN0b3J5OiBSZHNVcGxvYWRJbnRsTWVzc2FnZUZhY3RvcnkgPSAoXG4gICAgZmlsZUl0ZW0sXG4gICk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIGZpbGVJdGVtLmZpbGUubmFtZSArXG4gICAgICAnIGVycm9yOiAnICtcbiAgICAgIFJkc1VwbG9hZEludGxTZXJ2aWNlLnRyYW5zbGF0aW9uc1tmaWxlSXRlbS5lcnJvckludGxUb2tlbl1cbiAgICApO1xuICB9O1xuXG4gIHByaXZhdGUgZmlsZUl0ZW1GaWx0ZXJGYWlsZWRNZXNzYWdlRmFjdG9yeTogUmRzVXBsb2FkSW50bE1lc3NhZ2VGYWN0b3J5ID0gKFxuICAgIGZpbGVJdGVtLFxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgZmlsZUl0ZW0uZmlsZS5uYW1lICtcbiAgICAgICcgZXJyb3I6ICcgK1xuICAgICAgUmRzVXBsb2FkSW50bFNlcnZpY2UudHJhbnNsYXRpb25zW2ZpbGVJdGVtLmVycm9ySW50bFRva2VuXVxuICAgICk7XG4gIH07XG5cbiAgcHJpdmF0ZSBmaWxlSXRlbVByb2dyZXNzTWVzc2FnZUZhY3RvcnkgPSAoXG4gICAgcHJvZ3Jlc3M6IG51bWJlciB8IG51bGwsXG4gICk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIHByb2dyZXNzID09IG51bGwgPyAnJyA6IGAke3Byb2dyZXNzfSUgVXBsb2FkZWRgO1xuICB9O1xufVxuIl19