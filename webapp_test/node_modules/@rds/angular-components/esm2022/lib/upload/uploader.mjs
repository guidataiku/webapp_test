import { BehaviorSubject, Subject } from 'rxjs';
import { RdsFileItem } from './file-item.class';
import { RdsUploadFilters } from './upload.filters';
import { RdsHttpClientWrapper } from './http-client-wrapper';
export class RdsFileUploader {
    get config() {
        return this._config;
    }
    get isUploading() {
        return this.events.isUploading.value;
    }
    set isUploading(v) {
        this.events.isUploading.next(v);
    }
    constructor(config, client) {
        this.client = client;
        this._config = {
            autoUpload: true,
            filters: [],
            url: '',
        };
        this.queue = [];
        this.itemIdToRequest = new Map();
        this.events = {
            fileInvalid: new Subject(),
            fileItemSuccess: new Subject(),
            fileItemError: new Subject(),
            fileItemCanceled: new Subject(),
            fileItemCompleted: new Subject(),
            allComplete: new Subject(),
            isUploading: new BehaviorSubject(false),
            config: new BehaviorSubject(this._config),
            queue: new BehaviorSubject(this.queue),
        };
        this.fileInvalid$ = this.events.fileInvalid.asObservable();
        this.fileItemSuccess$ = this.events.fileItemSuccess.asObservable();
        this.fileItemError$ = this.events.fileItemError.asObservable();
        this.fileItemCanceled$ = this.events.fileItemCanceled.asObservable();
        this.fileItemCompleted$ = this.events.fileItemCompleted.asObservable();
        this.allComplete$ = this.events.allComplete.asObservable();
        this.isUploading$ = this.events.isUploading.asObservable();
        this.config$ = this.events.config.asObservable();
        this.queue$ = this.events.queue.asObservable();
        this.setConfig(config);
    }
    setConfig(config) {
        this._config = {
            ...config,
            filters: RdsUploadFilters.compose(config.filters ?? [], config),
        };
        if (this._config.queueLimit == undefined) {
            this._config.queueLimit = this._config.multiple ? undefined : 1;
        }
        this.events.config.next(this.config);
    }
    updateConfig(update) {
        this._config = Object.assign(this._config, update);
        this._config.filters = RdsUploadFilters.compose(this._config.filters, this._config);
        this._config = { ...this._config };
        this.events.config.next(this.config);
    }
    addToQueue(files, filters, bypassAutoUpload = false) {
        const list = [...files];
        const selectedFilters = this.getFilters(filters);
        const addedItems = [];
        list.forEach((file) => {
            const fileItem = this.addFileToQueue(file, selectedFilters);
            if (!fileItem) {
                return;
            }
            addedItems.push(fileItem);
            if (!bypassAutoUpload && this._config.autoUpload) {
                this.uploadItem(fileItem);
            }
        });
        this.events.queue.next(this.queue);
        return addedItems;
    }
    removeFromQueue(value) {
        const index = this.getIndexOfItem(value);
        if (index == null) {
            return false;
        }
        this.removeItem(index);
        return true;
    }
    clearQueue() {
        for (let i = this.queue.length; i >= 0; i--) {
            this.removeItem(i, false);
        }
        this.events.queue.next(this.queue);
    }
    uploadItem(value) {
        const index = this.getIndexOfItem(value);
        if (index == null) {
            return;
        }
        const item = this.queue[index];
        if ((this.isUploading && this._config.uploadSequentially) ||
            item.hasFailedFilters) {
            return;
        }
        if (!this.client) {
            throw new Error('Missing HttpClient! Pass it as a RdsUploader\'s constructor param or use "registerHttpClient" method to provide one.');
        }
        this.isUploading = true;
        const request = new RdsHttpClientWrapper(item, this._config, this.client);
        request.progress = (change) => this.onProgressItem(change);
        request.success = (change) => this.onSuccessItem(change);
        request.cancel = (change) => this.onCancelItem(change);
        request.error = (change) => this.onErrorItem(change);
        request.complete = (change) => this.onCompleteItem(change);
        item.onBeforeUpload();
        request.send();
        this.itemIdToRequest.set(item.id, request);
    }
    cancelItem(value) {
        const index = this.getIndexOfItem(value);
        if (index == null) {
            return;
        }
        const item = this.queue[index];
        if (item && item.isUploading) {
            const request = this.itemIdToRequest.get(item.id);
            request?.abort();
        }
    }
    uploadAll() {
        const items = this.queue.filter((item) => item.state !== 'success' && !item.isUploading && !item.hasFailedFilters);
        if (!items.length) {
            return;
        }
        items.forEach((item) => {
            this.uploadItem(item);
        });
    }
    cancelAll() {
        this.queue
            .filter((item) => item.isUploading)
            .forEach((item) => this.cancelItem(item));
    }
    destroy() {
        this.cancelAll();
        Object.values(this.events).forEach((subject) => subject.complete());
    }
    registerHttpClient(client) {
        this.client = client;
    }
    isHttpClientRegistered() {
        return !!this.client;
    }
    removeItem(index, emitEvent = true) {
        const fileItem = this.queue[index];
        if (fileItem.isUploading) {
            this.cancelItem(fileItem);
        }
        this.queue.splice(index, 1);
        this.itemIdToRequest.delete(fileItem.id);
        emitEvent && this.events.queue.next(this.queue);
    }
    getIndexOfItem(value) {
        if (typeof value === 'number') {
            return this.isValidIndex(value) ? value : null;
        }
        else {
            return this.queue.indexOf(value);
        }
    }
    isValidIndex(index) {
        return 0 <= index && index < this.queue.length;
    }
    getReadyItems() {
        return this.queue.filter((item) => item.state === 'ready');
    }
    onErrorItem(event) {
        event.item.onError();
        this.events.fileItemError.next(event);
    }
    onCompleteItem(change) {
        if (this._config.removeAfterUpload && change.item.state === 'success') {
            this.removeFromQueue(change.item);
        }
        this.events.fileItemCompleted.next(change);
        const nextItem = this.getReadyItems()[0];
        this.isUploading = false;
        if (nextItem) {
            this.uploadItem(nextItem);
            return;
        }
        this.events.allComplete.next();
    }
    addFileToQueue(file, filters) {
        const { isValid, failedFilters } = this.isValidFile(file, filters);
        if (!isValid) {
            this.events.fileInvalid.next({
                file,
                failedFilters,
                config: this.config,
            });
        }
        if (failedFilters.some((f) => f.preventsAddingToQueue)) {
            return null;
        }
        const fileItem = new RdsFileItem(file, failedFilters);
        this.queue.push(fileItem);
        return fileItem;
    }
    getFilters(filters) {
        if (!filters) {
            return this._config.filters;
        }
        if (Array.isArray(filters)) {
            return filters;
        }
        const names = filters.match(/[^\s,]+/g);
        if (!names) {
            return this._config.filters;
        }
        return this._config.filters.filter((filter) => names.includes(filter.name));
    }
    isValidFile(file, filters) {
        const failedFilters = [];
        filters.forEach((filter) => {
            if (!filter.fn(file, this.config, this.queue)) {
                failedFilters.push(filter);
            }
        });
        return { isValid: failedFilters.length === 0, failedFilters };
    }
    onProgressItem(change) {
        change.item.onProgress(change.progress);
    }
    onSuccessItem(change) {
        change.item.onSuccess();
        this.events.fileItemSuccess.next(change);
    }
    onCancelItem(change) {
        change.item.onAbort();
        this.events.fileItemCanceled.next(change);
    }
}
//# sourceMappingURL=data:application/json;base64,