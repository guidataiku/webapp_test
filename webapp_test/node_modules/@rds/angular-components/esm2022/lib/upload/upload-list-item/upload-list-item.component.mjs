import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, EventEmitter, HostBinding, inject, Input, Output, } from '@angular/core';
import { RdsFileItem } from '../file-item.class';
import { RdsUploadIntlService } from '../rds-upload-intl.service';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "../../icons/icon.component";
import * as i2 from "../../button/icon-button.component";
import * as i3 from "../../progress-bar/progress-bar.component";
import * as i4 from "@angular/common";
import * as i5 from "../file-size.pipe";
let rdsUploadItemNextId = 0;
export class RdsUploadListItemComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.destroyRef = inject(DestroyRef);
        this.intl = inject(RdsUploadIntlService);
        this.stateClass = '';
        this.ariaLiveContent = '';
        this.disabled = false;
        this.upload = new EventEmitter();
        this.remove = new EventEmitter();
        this.nameId = `rds-upload-item-${rdsUploadItemNextId++}-name`;
    }
    set size(v) {
        this._size = v;
        this.actionButtonSize = v === 'l' ? 'm' : 's';
    }
    get size() {
        return this._size;
    }
    get classes() {
        return [this.stateClass, `rds-upload-item-size-${this.size}`];
    }
    ngOnInit() {
        this.fileItem.state$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((state) => {
            this.stateClass = `rds-upload-item-${state}`;
            this.updateAriaLiveRegion();
            this.cdr.markForCheck();
        });
    }
    updateAriaLiveRegion() {
        if (this.fileItem.hasFailedFilters) {
            // we need to delay the update in case of immediately known errors, like incorrect file type,
            // because otherwise screen readers will miss the difference and won't announce anything
            setTimeout(() => {
                this.ariaLiveContent = this.intl.getFileItemFilterFailedMessage(this.fileItem);
                this.cdr.markForCheck();
            });
            return;
        }
        if (this.fileItem.state === 'success') {
            this.ariaLiveContent = this.intl.getFileItemUploadSuccessMessage(this.fileItem);
        }
        if (this.fileItem.state === 'error') {
            this.ariaLiveContent = this.intl.getFileItemUploadErrorMessage(this.fileItem);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadListItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsUploadListItemComponent, selector: "li[rds-upload-list-item], li[rdsUploadListItem]", inputs: { fileItem: "fileItem", disabled: ["disabled", "disabled", booleanAttribute], size: "size" }, outputs: { upload: "upload", remove: "remove" }, host: { properties: { "class": "this.classes", "attr.aria-labelledby": "this.nameId" } }, ngImport: i0, template: "@if (intl.change$ | async; as t) {\n  <div class=\"rds-upload-name-and-actions\">\n    <div class=\"rds-upload-name\" [id]=\"nameId\">{{ fileItem.file.name }}</div>\n    <div class=\"rds-upload-actions\">\n      <ng-content />\n      @if (fileItem.state === 'error') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-error\"\n          namespace=\"outlined\"\n          icon=\"warning_circle\"\n        />\n        @if (!fileItem.hasFailedFilters) {\n          <button\n            rds-icon-button\n            [attr.aria-label]=\"t.retryButtonAriaLabel\"\n            [disabled]=\"disabled\"\n            [size]=\"actionButtonSize\"\n            (click)=\"upload.emit(fileItem)\"\n          >\n            <rds-icon namespace=\"outlined\" icon=\"repeat\" />\n          </button>\n        }\n      }\n      @if (fileItem.state === 'success') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-success\"\n          namespace=\"outlined\"\n          icon=\"checkmark_circle\"\n        />\n      } @else {\n        <button\n          rds-icon-button\n          [attr.aria-label]=\"t.cancelButtonAriaLabel\"\n          [disabled]=\"disabled\"\n          [size]=\"actionButtonSize\"\n          (click)=\"remove.emit(fileItem)\"\n        >\n          <rds-icon namespace=\"outlined\" icon=\"close\" />\n        </button>\n      }\n    </div>\n  </div>\n  @if ({ progress: fileItem.progress$ | async }; as fi) {\n    @if (!fileItem.hasFailedFilters) {\n      <rds-progress-bar\n        [mode]=\"fi.progress === null ? 'indeterminate' : 'determinate'\"\n        [value]=\"fi.progress\"\n      />\n    }\n    <div class=\"rds-upload-size-and-state\">\n      <span class=\"rds-upload-size\">{{\n        fileItem.file.size | rdsFileSize\n      }}</span>\n      {{ fileItem.isUploading || t[fileItem.errorIntlToken] ? '-' : '' }}\n      @if (fileItem.isUploading) {\n        <span>{{ intl.getFileItemProgressMessage(fi.progress) }}</span>\n      }\n      @if (fileItem.errorIntlToken !== 'EMPTY') {\n        <span>{{ t[fileItem.errorIntlToken] }}</span>\n      }\n      <div class=\"sr-only\" aria-live=\"polite\">\n        {{ ariaLiveContent }}\n      </div>\n    </div>\n  }\n}\n", styles: [":host.rds-upload-item-success .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-success)}:host.rds-upload-item-error .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-error)}:host.rds-upload-item-error .rds-upload-size-and-state,:host.rds-upload-item-error .rds-upload-size-and-state>.rds-upload-size{color:var(--rds-color-error)}:host.rds-upload-item-size-s .rds-upload-name-and-actions{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-s .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-m .rds-upload-name-and-actions{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-m .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-l .rds-upload-name-and-actions{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-l .rds-upload-name-and-actions .rds-upload-status-icon{width:24px;height:24px}.rds-upload-name-and-actions{display:flex;align-items:center;justify-content:space-between;gap:16px}.rds-upload-name-and-actions .rds-upload-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rds-upload-name-and-actions .rds-upload-actions{display:flex;align-items:center;justify-content:flex-end;gap:16px}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon{display:inline-flex}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-success{color:var(--rds-color-success)}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-error{color:var(--rds-color-error)}.rds-progress-bar{margin-block:8px 0}.rds-upload-size-and-state{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-top:4px;color:var(--rds-color-grey-3)}.rds-upload-size-and-state .rds-upload-size{color:var(--rds-color-low-contrast)}\n"], dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: i2.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: i3.RdsProgressBarComponent, selector: "rds-progress-bar", inputs: ["value", "bufferValue", "mode"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }, { kind: "pipe", type: i5.RdsFileSizePipe, name: "rdsFileSize" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadListItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'li[rds-upload-list-item], li[rdsUploadListItem]', changeDetection: ChangeDetectionStrategy.OnPush, template: "@if (intl.change$ | async; as t) {\n  <div class=\"rds-upload-name-and-actions\">\n    <div class=\"rds-upload-name\" [id]=\"nameId\">{{ fileItem.file.name }}</div>\n    <div class=\"rds-upload-actions\">\n      <ng-content />\n      @if (fileItem.state === 'error') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-error\"\n          namespace=\"outlined\"\n          icon=\"warning_circle\"\n        />\n        @if (!fileItem.hasFailedFilters) {\n          <button\n            rds-icon-button\n            [attr.aria-label]=\"t.retryButtonAriaLabel\"\n            [disabled]=\"disabled\"\n            [size]=\"actionButtonSize\"\n            (click)=\"upload.emit(fileItem)\"\n          >\n            <rds-icon namespace=\"outlined\" icon=\"repeat\" />\n          </button>\n        }\n      }\n      @if (fileItem.state === 'success') {\n        <rds-icon\n          class=\"rds-upload-status-icon rds-upload-status-icon-success\"\n          namespace=\"outlined\"\n          icon=\"checkmark_circle\"\n        />\n      } @else {\n        <button\n          rds-icon-button\n          [attr.aria-label]=\"t.cancelButtonAriaLabel\"\n          [disabled]=\"disabled\"\n          [size]=\"actionButtonSize\"\n          (click)=\"remove.emit(fileItem)\"\n        >\n          <rds-icon namespace=\"outlined\" icon=\"close\" />\n        </button>\n      }\n    </div>\n  </div>\n  @if ({ progress: fileItem.progress$ | async }; as fi) {\n    @if (!fileItem.hasFailedFilters) {\n      <rds-progress-bar\n        [mode]=\"fi.progress === null ? 'indeterminate' : 'determinate'\"\n        [value]=\"fi.progress\"\n      />\n    }\n    <div class=\"rds-upload-size-and-state\">\n      <span class=\"rds-upload-size\">{{\n        fileItem.file.size | rdsFileSize\n      }}</span>\n      {{ fileItem.isUploading || t[fileItem.errorIntlToken] ? '-' : '' }}\n      @if (fileItem.isUploading) {\n        <span>{{ intl.getFileItemProgressMessage(fi.progress) }}</span>\n      }\n      @if (fileItem.errorIntlToken !== 'EMPTY') {\n        <span>{{ t[fileItem.errorIntlToken] }}</span>\n      }\n      <div class=\"sr-only\" aria-live=\"polite\">\n        {{ ariaLiveContent }}\n      </div>\n    </div>\n  }\n}\n", styles: [":host.rds-upload-item-success .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-success)}:host.rds-upload-item-error .rds-progress-bar{--rds-progress-bar-fill-color: var(--rds-color-error)}:host.rds-upload-item-error .rds-upload-size-and-state,:host.rds-upload-item-error .rds-upload-size-and-state>.rds-upload-size{color:var(--rds-color-error)}:host.rds-upload-item-size-s .rds-upload-name-and-actions{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-s .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-m .rds-upload-name-and-actions{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-m .rds-upload-name-and-actions .rds-upload-status-icon{width:18px;height:18px}:host.rds-upload-item-size-l .rds-upload-name-and-actions{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}:host.rds-upload-item-size-l .rds-upload-name-and-actions .rds-upload-status-icon{width:24px;height:24px}.rds-upload-name-and-actions{display:flex;align-items:center;justify-content:space-between;gap:16px}.rds-upload-name-and-actions .rds-upload-name{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.rds-upload-name-and-actions .rds-upload-actions{display:flex;align-items:center;justify-content:flex-end;gap:16px}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon{display:inline-flex}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-success{color:var(--rds-color-success)}.rds-upload-name-and-actions .rds-upload-actions .rds-upload-status-icon-error{color:var(--rds-color-error)}.rds-progress-bar{margin-block:8px 0}.rds-upload-size-and-state{font-size:12px;font-weight:400;line-height:16px;text-transform:none;letter-spacing:.5px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;margin-top:4px;color:var(--rds-color-grey-3)}.rds-upload-size-and-state .rds-upload-size{color:var(--rds-color-low-contrast)}\n"] }]
        }], propDecorators: { fileItem: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], size: [{
                type: Input
            }], upload: [{
                type: Output
            }], remove: [{
                type: Output
            }], classes: [{
                type: HostBinding,
                args: ['class']
            }], nameId: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }] } });
//# sourceMappingURL=data:application/json;base64,