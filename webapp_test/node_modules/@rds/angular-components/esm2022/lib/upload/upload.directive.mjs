import { Directive, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, Output, Renderer2, } from '@angular/core';
import * as i0 from "@angular/core";
export class RdsUploadDirective {
    constructor() {
        this.renderer = inject(Renderer2);
        this.nativeElement = inject(ElementRef).nativeElement;
        this.fileSelected = new EventEmitter();
        this.display = 'none';
        this.type = 'file';
    }
    set config(v) {
        this._config = v;
        this.onConfigChange();
    }
    onChange() {
        const files = Array.from(this.nativeElement.files ?? []);
        this.fileSelected.emit(files);
        this.nativeElement.value = '';
    }
    ngOnInit() {
        if (ngDevMode && !this._config) {
            throw new Error(`The "config" input is required, received "${JSON.stringify(this._config)}"`);
        }
        this.onConfigChange();
    }
    onConfigChange() {
        this._config.multiple
            ? this.renderer.setAttribute(this.nativeElement, 'multiple', '')
            : this.renderer.removeAttribute(this.nativeElement, 'multiple');
        const accept = this._config.accept?.join(',');
        accept
            ? this.renderer.setAttribute(this.nativeElement, 'accept', accept)
            : this.renderer.removeAttribute(this.nativeElement, 'accept');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsUploadDirective, selector: "input[rds-upload], input[rdsUpload]", inputs: { config: "config" }, outputs: { fileSelected: "fileSelected" }, host: { listeners: { "change": "onChange()" }, properties: { "style.display": "this.display", "type": "this.type" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rds-upload], input[rdsUpload]',
                }]
        }], propDecorators: { config: [{
                type: Input
            }], fileSelected: [{
                type: Output
            }], display: [{
                type: HostBinding,
                args: ['style.display']
            }], type: [{
                type: HostBinding,
                args: ['type']
            }], onChange: [{
                type: HostListener,
                args: ['change']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvdXBsb2FkL3VwbG9hZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFFTCxNQUFNLEVBQ04sU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDOztBQVF2QixNQUFNLE9BQU8sa0JBQWtCO0lBSC9CO1FBS21CLGFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0Isa0JBQWEsR0FDNUIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQU96QixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFHNUMsWUFBTyxHQUFHLE1BQU0sQ0FBQztRQUdqQixTQUFJLEdBQUcsTUFBTSxDQUFDO0tBZ0N2QjtJQTNDQyxJQUFhLE1BQU0sQ0FBQyxDQUFrQjtRQUNwQyxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztRQUNqQixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQVdPLFFBQVE7UUFDZCxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztJQUNoQyxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQ2IsNkNBQTZDLElBQUksQ0FBQyxTQUFTLENBQ3pELElBQUksQ0FBQyxPQUFPLENBQ2IsR0FBRyxDQUNMLENBQUM7UUFDSixDQUFDO1FBRUQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFFTyxjQUFjO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQ2hFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWxFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QyxNQUFNO1lBQ0osQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQztZQUNsRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsRSxDQUFDOzhHQWhEVSxrQkFBa0I7a0dBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFIOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUNBQXFDO2lCQUNoRDs4QkFPYyxNQUFNO3NCQUFsQixLQUFLO2dCQUtJLFlBQVk7c0JBQXJCLE1BQU07Z0JBR0MsT0FBTztzQkFEZCxXQUFXO3VCQUFDLGVBQWU7Z0JBSXBCLElBQUk7c0JBRFgsV0FBVzt1QkFBQyxNQUFNO2dCQUlYLFFBQVE7c0JBRGYsWUFBWTt1QkFBQyxRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIE9uSW5pdCxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmRzVXBsb2FkQ29uZmlnIH0gZnJvbSAnLi91cGxvYWQudHlwZXMnO1xuXG5kZWNsYXJlIGNvbnN0IG5nRGV2TW9kZTogYm9vbGVhbjtcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbcmRzLXVwbG9hZF0sIGlucHV0W3Jkc1VwbG9hZF0nLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNVcGxvYWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIF9jb25maWc6IFJkc1VwbG9hZENvbmZpZztcbiAgcHJpdmF0ZSByZWFkb25seSByZW5kZXJlciA9IGluamVjdChSZW5kZXJlcjIpO1xuICBwcml2YXRlIHJlYWRvbmx5IG5hdGl2ZUVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQgPVxuICAgIGluamVjdChFbGVtZW50UmVmKS5uYXRpdmVFbGVtZW50O1xuXG4gIEBJbnB1dCgpIHNldCBjb25maWcodjogUmRzVXBsb2FkQ29uZmlnKSB7XG4gICAgdGhpcy5fY29uZmlnID0gdjtcbiAgICB0aGlzLm9uQ29uZmlnQ2hhbmdlKCk7XG4gIH1cblxuICBAT3V0cHV0KCkgZmlsZVNlbGVjdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxGaWxlW10+KCk7XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5kaXNwbGF5JylcbiAgcHJpdmF0ZSBkaXNwbGF5ID0gJ25vbmUnO1xuXG4gIEBIb3N0QmluZGluZygndHlwZScpXG4gIHByaXZhdGUgdHlwZSA9ICdmaWxlJztcblxuICBASG9zdExpc3RlbmVyKCdjaGFuZ2UnKVxuICBwcml2YXRlIG9uQ2hhbmdlKCk6IHZvaWQge1xuICAgIGNvbnN0IGZpbGVzID0gQXJyYXkuZnJvbSh0aGlzLm5hdGl2ZUVsZW1lbnQuZmlsZXMgPz8gW10pO1xuICAgIHRoaXMuZmlsZVNlbGVjdGVkLmVtaXQoZmlsZXMpO1xuICAgIHRoaXMubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKG5nRGV2TW9kZSAmJiAhdGhpcy5fY29uZmlnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGUgXCJjb25maWdcIiBpbnB1dCBpcyByZXF1aXJlZCwgcmVjZWl2ZWQgXCIke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgIHRoaXMuX2NvbmZpZyxcbiAgICAgICAgKX1cImAsXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMub25Db25maWdDaGFuZ2UoKTtcbiAgfVxuXG4gIHByaXZhdGUgb25Db25maWdDaGFuZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5fY29uZmlnLm11bHRpcGxlXG4gICAgICA/IHRoaXMucmVuZGVyZXIuc2V0QXR0cmlidXRlKHRoaXMubmF0aXZlRWxlbWVudCwgJ211bHRpcGxlJywgJycpXG4gICAgICA6IHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMubmF0aXZlRWxlbWVudCwgJ211bHRpcGxlJyk7XG5cbiAgICBjb25zdCBhY2NlcHQgPSB0aGlzLl9jb25maWcuYWNjZXB0Py5qb2luKCcsJyk7XG5cbiAgICBhY2NlcHRcbiAgICAgID8gdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5uYXRpdmVFbGVtZW50LCAnYWNjZXB0JywgYWNjZXB0KVxuICAgICAgOiB0aGlzLnJlbmRlcmVyLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hdGl2ZUVsZW1lbnQsICdhY2NlcHQnKTtcbiAgfVxufVxuIl19