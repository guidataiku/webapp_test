import { booleanAttribute, Directive, ElementRef, EventEmitter, HostListener, inject, Input, Output, Renderer2, } from '@angular/core';
import * as i0 from "@angular/core";
const RDS_DROPZONE_DRAGOVER_CLASS_TOKEN = 'rds-upload-drop-zone-dragover';
const RDS_DROPZONE_DISABLED_CLASS_TOKEN = 'rds-upload-drop-zone-disabled';
export class RdsUploadDropZoneDirective {
    constructor() {
        this.nativeElement = inject(ElementRef).nativeElement;
        this.renderer = inject(Renderer2);
        this._disabled = false;
        this.fileOver = new EventEmitter();
        this.fileDropped = new EventEmitter();
    }
    set disabled(v) {
        this._disabled = booleanAttribute(v);
        this.onDisabledChange();
    }
    get disabled() {
        return this._disabled;
    }
    onDragenter(e) {
        if (!this.hasFiles(e)) {
            return;
        }
        this.fileOver.emit(true);
        this.toggleDragoverClass(true);
    }
    onDragover(e) {
        if (!this.hasFiles(e)) {
            return;
        }
        e.dataTransfer.dropEffect = this.disabled ? 'none' : 'copy';
        // without this 'drop' event won't be fired in chrome
        e.preventDefault();
    }
    onDragleave() {
        this.fileOver.emit(false);
        this.toggleDragoverClass(false);
    }
    onDrop(e) {
        if (!this.hasFiles(e) || this.disabled) {
            return;
        }
        e.preventDefault();
        this.fileOver.emit(false);
        this.toggleDragoverClass(false);
        this.fileDropped.emit(Array.from(e.dataTransfer.files));
    }
    hasFiles(event) {
        return !!event.dataTransfer?.types?.includes('Files');
    }
    toggleDragoverClass(hasDragover) {
        if (hasDragover) {
            this.renderer.addClass(this.nativeElement, RDS_DROPZONE_DRAGOVER_CLASS_TOKEN);
        }
        else {
            this.renderer.removeClass(this.nativeElement, RDS_DROPZONE_DRAGOVER_CLASS_TOKEN);
        }
    }
    onDisabledChange() {
        if (this.disabled) {
            this.renderer.setAttribute(this.nativeElement, 'disabled', '');
            this.renderer.addClass(this.nativeElement, RDS_DROPZONE_DISABLED_CLASS_TOKEN);
        }
        else {
            this.renderer.removeAttribute(this.nativeElement, 'disabled');
            this.renderer.removeClass(this.nativeElement, RDS_DROPZONE_DISABLED_CLASS_TOKEN);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDropZoneDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsUploadDropZoneDirective, selector: "[rds-upload-drop-zone], [rdsUploadDropZone]", inputs: { disabled: "disabled" }, outputs: { fileOver: "fileOver", fileDropped: "fileDropped" }, host: { listeners: { "dragenter": "onDragenter($event)", "dragover": "onDragover($event)", "dragleave": "onDragleave()", "drop": "onDrop($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsUploadDropZoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-upload-drop-zone], [rdsUploadDropZone]',
                }]
        }], propDecorators: { disabled: [{
                type: Input
            }], fileOver: [{
                type: Output
            }], fileDropped: [{
                type: Output
            }], onDragenter: [{
                type: HostListener,
                args: ['dragenter', ['$event']]
            }], onDragover: [{
                type: HostListener,
                args: ['dragover', ['$event']]
            }], onDragleave: [{
                type: HostListener,
                args: ['dragleave']
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBsb2FkLWRyb3Atem9uZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL3VwbG9hZC91cGxvYWQtZHJvcC16b25lLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7O0FBSXZCLE1BQU0saUNBQWlDLEdBQUcsK0JBQStCLENBQUM7QUFDMUUsTUFBTSxpQ0FBaUMsR0FBRywrQkFBK0IsQ0FBQztBQUsxRSxNQUFNLE9BQU8sMEJBQTBCO0lBSHZDO1FBSW1CLGtCQUFhLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQztRQUNqRCxhQUFRLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBV3RDLGNBQVMsR0FBRyxLQUFLLENBQUM7UUFFaEIsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFDdkMsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0tBNEVwRDtJQXhGQyxJQUNJLFFBQVEsQ0FBQyxDQUFlO1FBQzFCLElBQUksQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDO0lBT08sV0FBVyxDQUFDLENBQVk7UUFDOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN0QixPQUFPO1FBQ1QsQ0FBQztRQUVELElBQUks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LFFBQVEsQ0FBQztnQkFhNUIsV0FBVztzQkFEbEIsWUFBWTt1QkFBQyxXQUFXO2dCQU9qQixNQUFNO3NCQURiLFlBQVk7dUJBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBJbnB1dCxcbiAgT3V0cHV0LFxuICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRHJhZ0V2ZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQm9vbGVhbklucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcblxuY29uc3QgUkRTX0RST1BaT05FX0RSQUdPVkVSX0NMQVNTX1RPS0VOID0gJ3Jkcy11cGxvYWQtZHJvcC16b25lLWRyYWdvdmVyJztcbmNvbnN0IFJEU19EUk9QWk9ORV9ESVNBQkxFRF9DTEFTU19UT0tFTiA9ICdyZHMtdXBsb2FkLWRyb3Atem9uZS1kaXNhYmxlZCc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyZHMtdXBsb2FkLWRyb3Atem9uZV0sIFtyZHNVcGxvYWREcm9wWm9uZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNVcGxvYWREcm9wWm9uZURpcmVjdGl2ZSB7XG4gIHByaXZhdGUgcmVhZG9ubHkgbmF0aXZlRWxlbWVudCA9IGluamVjdChFbGVtZW50UmVmKS5uYXRpdmVFbGVtZW50O1xuICBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyID0gaW5qZWN0KFJlbmRlcmVyMik7XG5cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHY6IEJvb2xlYW5JbnB1dCkge1xuICAgIHRoaXMuX2Rpc2FibGVkID0gYm9vbGVhbkF0dHJpYnV0ZSh2KTtcbiAgICB0aGlzLm9uRGlzYWJsZWRDaGFuZ2UoKTtcbiAgfVxuXG4gIGdldCBkaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZGlzYWJsZWQ7XG4gIH1cbiAgcHJpdmF0ZSBfZGlzYWJsZWQgPSBmYWxzZTtcblxuICBAT3V0cHV0KCkgZmlsZU92ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG4gIEBPdXRwdXQoKSBmaWxlRHJvcHBlZCA9IG5ldyBFdmVudEVtaXR0ZXI8RmlsZVtdPigpO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ2RyYWdlbnRlcicsIFsnJGV2ZW50J10pXG4gIHByaXZhdGUgb25EcmFnZW50ZXIoZTogRHJhZ0V2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmhhc0ZpbGVzKGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5maWxlT3Zlci5lbWl0KHRydWUpO1xuICAgIHRoaXMudG9nZ2xlRHJhZ292ZXJDbGFzcyh0cnVlKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2RyYWdvdmVyJywgWyckZXZlbnQnXSlcbiAgcHJpdmF0ZSBvbkRyYWdvdmVyKGU6IERyYWdFdmVudCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5oYXNGaWxlcyhlKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGUuZGF0YVRyYW5zZmVyLmRyb3BFZmZlY3QgPSB0aGlzLmRpc2FibGVkID8gJ25vbmUnIDogJ2NvcHknO1xuXG4gICAgLy8gd2l0aG91dCB0aGlzICdkcm9wJyBldmVudCB3b24ndCBiZSBmaXJlZCBpbiBjaHJvbWVcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdkcmFnbGVhdmUnKVxuICBwcml2YXRlIG9uRHJhZ2xlYXZlKCk6IHZvaWQge1xuICAgIHRoaXMuZmlsZU92ZXIuZW1pdChmYWxzZSk7XG4gICAgdGhpcy50b2dnbGVEcmFnb3ZlckNsYXNzKGZhbHNlKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2Ryb3AnLCBbJyRldmVudCddKVxuICBwcml2YXRlIG9uRHJvcChlOiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaGFzRmlsZXMoZSkgfHwgdGhpcy5kaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIHRoaXMuZmlsZU92ZXIuZW1pdChmYWxzZSk7XG4gICAgdGhpcy50b2dnbGVEcmFnb3ZlckNsYXNzKGZhbHNlKTtcbiAgICB0aGlzLmZpbGVEcm9wcGVkLmVtaXQoQXJyYXkuZnJvbShlLmRhdGFUcmFuc2Zlci5maWxlcykpO1xuICB9XG5cbiAgcHJpdmF0ZSBoYXNGaWxlcyhldmVudDogRHJhZ0V2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhZXZlbnQuZGF0YVRyYW5zZmVyPy50eXBlcz8uaW5jbHVkZXMoJ0ZpbGVzJyk7XG4gIH1cblxuICBwcml2YXRlIHRvZ2dsZURyYWdvdmVyQ2xhc3MoaGFzRHJhZ292ZXI6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAoaGFzRHJhZ292ZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoXG4gICAgICAgIHRoaXMubmF0aXZlRWxlbWVudCxcbiAgICAgICAgUkRTX0RST1BaT05FX0RSQUdPVkVSX0NMQVNTX1RPS0VOLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhcbiAgICAgICAgdGhpcy5uYXRpdmVFbGVtZW50LFxuICAgICAgICBSRFNfRFJPUFpPTkVfRFJBR09WRVJfQ0xBU1NfVE9LRU4sXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25EaXNhYmxlZENoYW5nZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRBdHRyaWJ1dGUodGhpcy5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCAnJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKFxuICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIFJEU19EUk9QWk9ORV9ESVNBQkxFRF9DTEFTU19UT0tFTixcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQXR0cmlidXRlKHRoaXMubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJyk7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKFxuICAgICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQsXG4gICAgICAgIFJEU19EUk9QWk9ORV9ESVNBQkxFRF9DTEFTU19UT0tFTixcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iXX0=