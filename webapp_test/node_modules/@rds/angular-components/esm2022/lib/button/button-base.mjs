import { booleanAttribute, Component, ContentChildren, DestroyRef, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, Output, QueryList, } from '@angular/core';
import { FocusMonitor } from '@angular/cdk/a11y';
import { RdsIconComponent } from '../icons';
import { throwInvalidSizeError } from '../core/errors';
import { ContentObserver } from '@angular/cdk/observers';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsButtonBaseComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.destroyRef = inject(DestroyRef);
        this.contentObserver = inject(ContentObserver);
        this.buttonHostAttributesToClassMapper = {};
        this._defaultSize = 'm';
        this._size = this._defaultSize;
        this._hasIcon = false;
        this._hasFirstIcon = false;
        this._hasLastIcon = false;
        this._hasOnlyIcon = false;
        this._pressed = false;
        this.toggle = false;
        this.pressedChange = new EventEmitter();
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm' && size !== 'l') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    set pressed(isPressed) {
        const value = this.pressed;
        this._pressed = booleanAttribute(isPressed);
        if (this.toggle && value !== this._pressed) {
            this.pressedChange.next(this._pressed);
        }
    }
    get pressed() {
        return this.toggle && this._pressed;
    }
    get attrToggle() {
        return this.toggle ? this.pressed : null;
    }
    get disabled() {
        return !!this.elementRef.nativeElement.getAttribute('disabled');
    }
    get buttonClasses() {
        const classesMappedFromHostAttributes = Object.entries(this.buttonHostAttributesToClassMapper)
            .filter(([hostAttribute]) => this.hostElement.hasAttribute(hostAttribute))
            .map(([, buttonClass]) => buttonClass);
        const additionalClasses = [];
        if (this._hasFirstIcon) {
            additionalClasses.push('rds-button--with-left-icon');
        }
        if (this._hasLastIcon) {
            additionalClasses.push('rds-button--with-right-icon');
        }
        if (this._hasOnlyIcon) {
            additionalClasses.push('rds-button--with-only-icon');
        }
        return [
            'rds-button',
            `rds-button-${this.size}`,
            ...classesMappedFromHostAttributes,
            ...additionalClasses,
        ];
    }
    get hasIcon() {
        return this._hasIcon;
    }
    ngAfterContentInit() {
        this.checkIcons();
        this.icons.changes.subscribe(() => this.checkIcons());
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true);
        this.contentObserver
            .observe(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.onContentChange());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    changeToggle() {
        if (this.toggle && !this.disabled) {
            this.pressed = !this.pressed;
        }
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.hostElement, origin, options);
    }
    get hostElement() {
        return this.elementRef.nativeElement;
    }
    checkIcons() {
        this._hasIcon = this.icons.length > 0;
        if (this.hasIcon) {
            const btnContent = this.elementRef.nativeElement;
            const firstChild = this._getChild('first');
            const lastChild = this._getChild('last');
            if (firstChild && firstChild.nodeName) {
                this._hasFirstIcon = firstChild.nodeName.toUpperCase() === 'RDS-ICON';
            }
            else {
                this._hasFirstIcon = false;
            }
            if (lastChild && lastChild.nodeName) {
                this._hasLastIcon =
                    btnContent.lastChild?.nodeName.toUpperCase() === 'RDS-ICON';
            }
            else {
                this._hasLastIcon = false;
            }
            if (firstChild && firstChild === lastChild) {
                this._hasOnlyIcon = true;
                this._hasLastIcon = false;
                this._hasFirstIcon = false;
            }
            else {
                this._hasOnlyIcon = false;
            }
        }
        else {
            this._hasLastIcon = false;
            this._hasLastIcon = false;
            this._hasOnlyIcon = false;
        }
    }
    _getButtonClassName() {
        return this.constructor.name;
    }
    onContentChange() {
        this.checkIcons();
    }
    _getChild(firstOrLast) {
        let currentChild = firstOrLast === 'first'
            ? this.elementRef.nativeElement.firstChild
            : this.elementRef.nativeElement.lastChild;
        while (!currentChild ||
            currentChild.nodeName.toUpperCase() === '#COMMENT') {
            if (!currentChild) {
                return null;
            }
            currentChild =
                firstOrLast === 'first'
                    ? currentChild.nextSibling
                    : currentChild.previousSibling;
        }
        return currentChild;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsButtonBaseComponent, selector: "ng-component", inputs: { size: "size", pressed: "pressed", toggle: ["toggle", "toggle", booleanAttribute] }, outputs: { pressedChange: "pressedChange" }, host: { listeners: { "click": "changeToggle()" }, properties: { "class.rds-button-active": "this.pressed", "attr.aria-pressed": "this.attrToggle", "class": "this.buttonClasses", "class.rds-button--with-icon": "this.hasIcon" } }, queries: [{ propertyName: "icons", predicate: RdsIconComponent }], ngImport: i0, template: '', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonBaseComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], propDecorators: { size: [{
                type: Input
            }], pressed: [{
                type: HostBinding,
                args: ['class.rds-button-active']
            }, {
                type: Input
            }], attrToggle: [{
                type: HostBinding,
                args: ['attr.aria-pressed']
            }], toggle: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], buttonClasses: [{
                type: HostBinding,
                args: ['class']
            }], hasIcon: [{
                type: HostBinding,
                args: ['class.rds-button--with-icon']
            }], icons: [{
                type: ContentChildren,
                args: [RdsIconComponent]
            }], pressedChange: [{
                type: Output
            }], changeToggle: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,