import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { RdsButtonComponent } from './button.component';
import { RdsIconComponent } from '../icons';
import { RdsIconButtonComponent } from './icon-button.component';
import { RdsButtonBaseComponent } from './button-base';
import { RdsFabButtonComponent } from './fab-button.component';
import { RdsTextButtonComponent } from './text-button.component';
import { ObserversModule } from '@angular/cdk/observers';
import * as i0 from "@angular/core";
const ELEMENTS = [
    RdsButtonComponent,
    RdsIconButtonComponent,
    RdsFabButtonComponent,
    RdsTextButtonComponent,
];
export class RdsButtonModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, declarations: [RdsButtonBaseComponent, RdsButtonComponent,
            RdsIconButtonComponent,
            RdsFabButtonComponent,
            RdsTextButtonComponent], imports: [CommonModule, ObserversModule, RdsIconComponent], exports: [RdsButtonComponent,
            RdsIconButtonComponent,
            RdsFabButtonComponent,
            RdsTextButtonComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, imports: [CommonModule, ObserversModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ObserversModule, RdsIconComponent],
                    declarations: [RdsButtonBaseComponent, ...ELEMENTS],
                    exports: [...ELEMENTS],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnV0dG9uLW1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvYnV0dG9uL2J1dHRvbi1tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMvRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBRXpELE1BQU0sUUFBUSxHQUFHO0lBQ2Ysa0JBQWtCO0lBQ2xCLHNCQUFzQjtJQUN0QixxQkFBcUI7SUFDckIsc0JBQXNCO0NBQ3ZCLENBQUM7QUFPRixNQUFNLE9BQU8sZUFBZTs4R0FBZixlQUFlOytHQUFmLGVBQWUsaUJBSFgsc0JBQXNCLEVBUnJDLGtCQUFrQjtZQUNsQixzQkFBc0I7WUFDdEIscUJBQXFCO1lBQ3JCLHNCQUFzQixhQUlaLFlBQVksRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLGFBUHpELGtCQUFrQjtZQUNsQixzQkFBc0I7WUFDdEIscUJBQXFCO1lBQ3JCLHNCQUFzQjsrR0FRWCxlQUFlLFlBSmhCLFlBQVksRUFBRSxlQUFlOzsyRkFJNUIsZUFBZTtrQkFMM0IsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixDQUFDO29CQUMxRCxZQUFZLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSxHQUFHLFFBQVEsQ0FBQztvQkFDbkQsT0FBTyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUM7aUJBQ3ZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZHNCdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2J1dHRvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgUmRzSWNvbkNvbXBvbmVudCB9IGZyb20gJy4uL2ljb25zJztcbmltcG9ydCB7IFJkc0ljb25CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2ljb24tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBSZHNCdXR0b25CYXNlQ29tcG9uZW50IH0gZnJvbSAnLi9idXR0b24tYmFzZSc7XG5pbXBvcnQgeyBSZHNGYWJCdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2ZhYi1idXR0b24uY29tcG9uZW50JztcbmltcG9ydCB7IFJkc1RleHRCdXR0b25Db21wb25lbnQgfSBmcm9tICcuL3RleHQtYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBPYnNlcnZlcnNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb2JzZXJ2ZXJzJztcblxuY29uc3QgRUxFTUVOVFMgPSBbXG4gIFJkc0J1dHRvbkNvbXBvbmVudCxcbiAgUmRzSWNvbkJ1dHRvbkNvbXBvbmVudCxcbiAgUmRzRmFiQnV0dG9uQ29tcG9uZW50LFxuICBSZHNUZXh0QnV0dG9uQ29tcG9uZW50LFxuXTtcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgT2JzZXJ2ZXJzTW9kdWxlLCBSZHNJY29uQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbUmRzQnV0dG9uQmFzZUNvbXBvbmVudCwgLi4uRUxFTUVOVFNdLFxuICBleHBvcnRzOiBbLi4uRUxFTUVOVFNdLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNCdXR0b25Nb2R1bGUge31cbiJdfQ==