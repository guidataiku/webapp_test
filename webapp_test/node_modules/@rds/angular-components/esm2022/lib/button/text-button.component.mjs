import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation, } from '@angular/core';
import { RdsButtonBaseComponent } from './button-base';
import { throwRdsButtonInvalidIconOnlyError } from './button-error';
import { throwInvalidSizeError } from '../core/errors';
import * as i0 from "@angular/core";
export class RdsTextButtonComponent extends RdsButtonBaseComponent {
    constructor() {
        super(...arguments);
        this.buttonHostAttributesToClassMapper = {
            'rds-text-button': 'rds-button--text',
            rdsTextButton: 'rds-button--text',
            'rds-text-warning-button': 'rds-button--text-warning',
            rdsTextWarningButton: 'rds-button--text-warning',
        };
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm' && size !== 'l') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    checkIcons() {
        super.checkIcons();
        if (this._hasOnlyIcon) {
            throwRdsButtonInvalidIconOnlyError(this._getButtonClassName());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsTextButtonComponent, selector: "\n    button[rds-text-button],\n    button[rdsTextButton],\n    button[rds-text-warning-button],\n    button[rdsTextWarningButton],\n  ", inputs: { size: "size" }, usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTextButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: `
    button[rds-text-button],
    button[rdsTextButton],
    button[rds-text-warning-button],
    button[rdsTextWarningButton],
  `,
                    template: '<ng-content />',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9idXR0b24vdGV4dC1idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFhdkQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHNCQUFzQjtJQVhsRTs7UUFZcUIsc0NBQWlDLEdBQUc7WUFDckQsaUJBQWlCLEVBQUUsa0JBQWtCO1lBQ3JDLGFBQWEsRUFBRSxrQkFBa0I7WUFDakMseUJBQXlCLEVBQUUsMEJBQTBCO1lBQ3JELG9CQUFvQixFQUFFLDBCQUEwQjtTQUNqRCxDQUFDO0tBc0JIO0lBcEJDLElBQ2EsSUFBSTtRQUNmLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsSUFBYSxJQUFJLENBQUMsSUFBbUI7UUFDbkMsSUFBSSxJQUFJLEtBQUssR0FBRyxJQUFJLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2pELHFCQUFxQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVrQixVQUFVO1FBQzNCLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUVuQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN0QixrQ0FBa0MsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBQ2pFLENBQUM7SUFDSCxDQUFDOzhHQTNCVSxzQkFBc0I7a0dBQXRCLHNCQUFzQixnT0FKdkIsZ0JBQWdCOzsyRkFJZixzQkFBc0I7a0JBWGxDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFOzs7OztHQUtUO29CQUNELFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTtpQkFDdEM7OEJBVWMsSUFBSTtzQkFEaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIElucHV0LFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZHNCdXR0b25CYXNlQ29tcG9uZW50LCBSZHNCdXR0b25TaXplIH0gZnJvbSAnLi9idXR0b24tYmFzZSc7XG5pbXBvcnQgeyB0aHJvd1Jkc0J1dHRvbkludmFsaWRJY29uT25seUVycm9yIH0gZnJvbSAnLi9idXR0b24tZXJyb3InO1xuaW1wb3J0IHsgdGhyb3dJbnZhbGlkU2l6ZUVycm9yIH0gZnJvbSAnLi4vY29yZS9lcnJvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6IGBcbiAgICBidXR0b25bcmRzLXRleHQtYnV0dG9uXSxcbiAgICBidXR0b25bcmRzVGV4dEJ1dHRvbl0sXG4gICAgYnV0dG9uW3Jkcy10ZXh0LXdhcm5pbmctYnV0dG9uXSxcbiAgICBidXR0b25bcmRzVGV4dFdhcm5pbmdCdXR0b25dLFxuICBgLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50IC8+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG59KVxuZXhwb3J0IGNsYXNzIFJkc1RleHRCdXR0b25Db21wb25lbnQgZXh0ZW5kcyBSZHNCdXR0b25CYXNlQ29tcG9uZW50IHtcbiAgcHJvdGVjdGVkIG92ZXJyaWRlIGJ1dHRvbkhvc3RBdHRyaWJ1dGVzVG9DbGFzc01hcHBlciA9IHtcbiAgICAncmRzLXRleHQtYnV0dG9uJzogJ3Jkcy1idXR0b24tLXRleHQnLFxuICAgIHJkc1RleHRCdXR0b246ICdyZHMtYnV0dG9uLS10ZXh0JyxcbiAgICAncmRzLXRleHQtd2FybmluZy1idXR0b24nOiAncmRzLWJ1dHRvbi0tdGV4dC13YXJuaW5nJyxcbiAgICByZHNUZXh0V2FybmluZ0J1dHRvbjogJ3Jkcy1idXR0b24tLXRleHQtd2FybmluZycsXG4gIH07XG5cbiAgQElucHV0KClcbiAgb3ZlcnJpZGUgZ2V0IHNpemUoKTogUmRzQnV0dG9uU2l6ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBvdmVycmlkZSBzZXQgc2l6ZShzaXplOiBSZHNCdXR0b25TaXplKSB7XG4gICAgaWYgKHNpemUgIT09ICdzJyAmJiBzaXplICE9PSAnbScgJiYgc2l6ZSAhPT0gJ2wnKSB7XG4gICAgICB0aHJvd0ludmFsaWRTaXplRXJyb3IodGhpcywgc2l6ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gIH1cblxuICBwcm90ZWN0ZWQgb3ZlcnJpZGUgY2hlY2tJY29ucygpOiB2b2lkIHtcbiAgICBzdXBlci5jaGVja0ljb25zKCk7XG5cbiAgICBpZiAodGhpcy5faGFzT25seUljb24pIHtcbiAgICAgIHRocm93UmRzQnV0dG9uSW52YWxpZEljb25Pbmx5RXJyb3IodGhpcy5fZ2V0QnV0dG9uQ2xhc3NOYW1lKCkpO1xuICAgIH1cbiAgfVxufVxuIl19