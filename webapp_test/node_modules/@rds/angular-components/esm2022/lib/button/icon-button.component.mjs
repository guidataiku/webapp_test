import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation, } from '@angular/core';
import { RdsButtonBaseComponent } from './button-base';
import { throwRdsButtonInvalidOtherIconOnlyError } from './button-error';
import { throwInvalidSizeError } from '../core/errors';
import * as i0 from "@angular/core";
export class RdsIconButtonComponent extends RdsButtonBaseComponent {
    constructor() {
        super(...arguments);
        this.buttonHostAttributesToClassMapper = {
            'rds-icon-button': 'rds-button--icon',
            rdsIconButton: 'rds-button--icon',
            'rds-icon-warning-button': 'rds-button--icon-warning',
            rdsnIconWarningButton: 'rds-button--icon-warning',
        };
        this._defaultSize = 's';
        this._size = this._defaultSize;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        if (size !== 's' && size !== 'm') {
            throwInvalidSizeError(this, size);
        }
        this._size = size;
    }
    checkIcons() {
        super.checkIcons();
        if (this.hasIcon && !this._hasOnlyIcon) {
            this.cleanIconProperties();
            throwRdsButtonInvalidOtherIconOnlyError(this._getButtonClassName());
        }
        this.cleanIconProperties();
    }
    cleanIconProperties() {
        this._hasFirstIcon = false;
        this._hasLastIcon = false;
        this._hasOnlyIcon = false;
        this._hasIcon = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconButtonComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: { size: "size" }, usesInheritance: true, ngImport: i0, template: `<ng-content />`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: `
    button[rds-icon-button],
    button[rdsIconButton],
    button[rds-icon-warning-button],
    button[rdsIconWarningButton],
  `,
                    template: `<ng-content />`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], propDecorators: { size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi1idXR0b24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9idXR0b24vaWNvbi1idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULEtBQUssRUFDTCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLHNCQUFzQixFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUN0RSxPQUFPLEVBQUUsdUNBQXVDLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFhdkQsTUFBTSxPQUFPLHNCQUF1QixTQUFRLHNCQUFzQjtJQVhsRTs7UUFZcUIsc0NBQWlDLEdBQUc7WUFDckQsaUJBQWlCLEVBQUUsa0JBQWtCO1lBQ3JDLGFBQWEsRUFBRSxrQkFBa0I7WUFDakMseUJBQXlCLEVBQUUsMEJBQTBCO1lBQ3JELHFCQUFxQixFQUFFLDBCQUEwQjtTQUNsRCxDQUFDO1FBRU8saUJBQVksR0FBa0IsR0FBRyxDQUFDO1FBQ2xDLFVBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO0tBZ0NwQztJQTlCQyxJQUNhLElBQUk7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUVELElBQWEsSUFBSSxDQUFDLElBQW1CO1FBQ25DLElBQUksSUFBSSxLQUFLLEdBQUcsSUFBSSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7WUFDakMscUJBQXFCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BDLENBQUM7UUFFRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRWtCLFVBQVU7UUFDM0IsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBRW5CLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztZQUN2QyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUMzQix1Q0FBdUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7UUFFRCxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRU8sbUJBQW1CO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7OEdBeENVLHNCQUFzQjtrR0FBdEIsc0JBQXNCLGdPQUp2QixnQkFBZ0I7OzJGQUlmLHNCQUFzQjtrQkFYbEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUU7Ozs7O0dBS1Q7b0JBQ0QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN0Qzs4QkFhYyxJQUFJO3NCQURoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJkc0J1dHRvbkJhc2VDb21wb25lbnQsIFJkc0J1dHRvblNpemUgfSBmcm9tICcuL2J1dHRvbi1iYXNlJztcbmltcG9ydCB7IHRocm93UmRzQnV0dG9uSW52YWxpZE90aGVySWNvbk9ubHlFcnJvciB9IGZyb20gJy4vYnV0dG9uLWVycm9yJztcbmltcG9ydCB7IHRocm93SW52YWxpZFNpemVFcnJvciB9IGZyb20gJy4uL2NvcmUvZXJyb3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiBgXG4gICAgYnV0dG9uW3Jkcy1pY29uLWJ1dHRvbl0sXG4gICAgYnV0dG9uW3Jkc0ljb25CdXR0b25dLFxuICAgIGJ1dHRvbltyZHMtaWNvbi13YXJuaW5nLWJ1dHRvbl0sXG4gICAgYnV0dG9uW3Jkc0ljb25XYXJuaW5nQnV0dG9uXSxcbiAgYCxcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudCAvPmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNJY29uQnV0dG9uQ29tcG9uZW50IGV4dGVuZHMgUmRzQnV0dG9uQmFzZUNvbXBvbmVudCB7XG4gIHByb3RlY3RlZCBvdmVycmlkZSBidXR0b25Ib3N0QXR0cmlidXRlc1RvQ2xhc3NNYXBwZXIgPSB7XG4gICAgJ3Jkcy1pY29uLWJ1dHRvbic6ICdyZHMtYnV0dG9uLS1pY29uJyxcbiAgICByZHNJY29uQnV0dG9uOiAncmRzLWJ1dHRvbi0taWNvbicsXG4gICAgJ3Jkcy1pY29uLXdhcm5pbmctYnV0dG9uJzogJ3Jkcy1idXR0b24tLWljb24td2FybmluZycsXG4gICAgcmRzbkljb25XYXJuaW5nQnV0dG9uOiAncmRzLWJ1dHRvbi0taWNvbi13YXJuaW5nJyxcbiAgfTtcblxuICBvdmVycmlkZSBfZGVmYXVsdFNpemU6IFJkc0J1dHRvblNpemUgPSAncyc7XG4gIG92ZXJyaWRlIF9zaXplID0gdGhpcy5fZGVmYXVsdFNpemU7XG5cbiAgQElucHV0KClcbiAgb3ZlcnJpZGUgZ2V0IHNpemUoKTogUmRzQnV0dG9uU2l6ZSB7XG4gICAgcmV0dXJuIHRoaXMuX3NpemU7XG4gIH1cblxuICBvdmVycmlkZSBzZXQgc2l6ZShzaXplOiBSZHNCdXR0b25TaXplKSB7XG4gICAgaWYgKHNpemUgIT09ICdzJyAmJiBzaXplICE9PSAnbScpIHtcbiAgICAgIHRocm93SW52YWxpZFNpemVFcnJvcih0aGlzLCBzaXplKTtcbiAgICB9XG5cbiAgICB0aGlzLl9zaXplID0gc2l6ZTtcbiAgfVxuXG4gIHByb3RlY3RlZCBvdmVycmlkZSBjaGVja0ljb25zKCk6IHZvaWQge1xuICAgIHN1cGVyLmNoZWNrSWNvbnMoKTtcblxuICAgIGlmICh0aGlzLmhhc0ljb24gJiYgIXRoaXMuX2hhc09ubHlJY29uKSB7XG4gICAgICB0aGlzLmNsZWFuSWNvblByb3BlcnRpZXMoKTtcbiAgICAgIHRocm93UmRzQnV0dG9uSW52YWxpZE90aGVySWNvbk9ubHlFcnJvcih0aGlzLl9nZXRCdXR0b25DbGFzc05hbWUoKSk7XG4gICAgfVxuXG4gICAgdGhpcy5jbGVhbkljb25Qcm9wZXJ0aWVzKCk7XG4gIH1cblxuICBwcml2YXRlIGNsZWFuSWNvblByb3BlcnRpZXMoKTogdm9pZCB7XG4gICAgdGhpcy5faGFzRmlyc3RJY29uID0gZmFsc2U7XG4gICAgdGhpcy5faGFzTGFzdEljb24gPSBmYWxzZTtcbiAgICB0aGlzLl9oYXNPbmx5SWNvbiA9IGZhbHNlO1xuICAgIHRoaXMuX2hhc0ljb24gPSBmYWxzZTtcbiAgfVxufVxuIl19