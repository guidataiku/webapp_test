import { InjectionToken } from '@angular/core';
export const RDS_ICON_LOADER_CONFIG = new InjectionToken('RDS_ICON_LOADER_CONFIG');
//# sourceMappingURL=data:application/json;base64,