import { Component, ElementRef, ErrorHandler, HostBinding, inject, Input, ViewEncapsulation, } from '@angular/core';
import { RdsIconLoader } from './icon-loader';
import { Subscription } from 'rxjs';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class RdsIconComponent {
    constructor() {
        this.elementRef = inject(ElementRef);
        this.iconLoader = inject(RdsIconLoader);
        this.errorHandler = inject(ErrorHandler);
        this.namespace = 'filled';
        this.icon = null;
        this.hostClass = 'rds-icon';
        this.hostAriaHidden = 'true';
        this.currentIconFetch = Subscription.EMPTY;
    }
    ngOnChanges(changes) {
        const namespaceChanges = changes['namespace'];
        const iconChanges = changes['icon'];
        // Update the inline SVG if the icon or namespace inputs changed, to avoid unnecessary DOM operations.
        if (iconChanges || namespaceChanges) {
            this.currentIconFetch.unsubscribe();
            if (this.icon) {
                this.currentIconFetch = this.iconLoader
                    .getSvgIcon(this.icon, this.namespace)
                    .pipe(take(1))
                    .subscribe({
                    next: (svg) => this._setSvgIcon(svg),
                    error: (err) => {
                        const errorMessage = `Error retrieving icon ${this.namespace}:${this.icon}! ${err.message}`;
                        this.errorHandler.handleError(new Error(errorMessage));
                    },
                });
            }
            else if (iconChanges.previousValue) {
                this._removeSvgIcon();
            }
        }
    }
    ngOnDestroy() {
        this.currentIconFetch.unsubscribe();
    }
    _setSvgIcon(svgElement) {
        this._removeSvgIcon();
        this.elementRef.nativeElement.appendChild(svgElement);
    }
    _removeSvgIcon() {
        const layoutElement = this.elementRef.nativeElement;
        let childCount = layoutElement.childNodes.length;
        while (childCount--) {
            const child = layoutElement.childNodes[childCount];
            if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {
                layoutElement.removeChild(child);
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsIconComponent, isStandalone: true, selector: "rds-icon", inputs: { namespace: "namespace", icon: "icon" }, host: { properties: { "class": "this.hostClass", "attr.aria-hidden": "this.hostAriaHidden" } }, usesOnChanges: true, ngImport: i0, template: '', isInline: true, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-icon',
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                    standalone: true,
                }]
        }], propDecorators: { namespace: [{
                type: Input
            }], icon: [{
                type: Input
            }], hostClass: [{
                type: HostBinding,
                args: ['class']
            }], hostAriaHidden: [{
                type: HostBinding,
                args: ['attr.aria-hidden']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL2ljb25zL2ljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFJTCxpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFTdEMsTUFBTSxPQUFPLGdCQUFnQjtJQU43QjtRQU9tQixlQUFVLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hDLGVBQVUsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbkMsaUJBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFNUMsY0FBUyxHQUFxQixRQUFRLENBQUM7UUFDdkMsU0FBSSxHQUF1QixJQUFJLENBQUM7UUFFbkIsY0FBUyxHQUFHLFVBQVUsQ0FBQztRQUNaLG1CQUFjLEdBQUcsTUFBTSxDQUFDO1FBRWpELHFCQUFnQixHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7S0FnRC9DO0lBOUNDLFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxNQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM5QyxNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFcEMsc0dBQXNHO1FBQ3RHLElBQUksV0FBVyxJQUFJLGdCQUFnQixFQUFFLENBQUM7WUFDcEMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO1lBRXBDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNkLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVTtxQkFDcEMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztxQkFDckMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDYixTQUFTLENBQUM7b0JBQ1QsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQztvQkFDcEMsS0FBSyxFQUFFLENBQUMsR0FBVSxFQUFFLEVBQUU7d0JBQ3BCLE1BQU0sWUFBWSxHQUFHLHlCQUF5QixJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO3dCQUM1RixJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO29CQUN6RCxDQUFDO2lCQUNGLENBQUMsQ0FBQztZQUNQLENBQUM7aUJBQU0sSUFBSSxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ3JDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN4QixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFFTyxXQUFXLENBQUMsVUFBc0I7UUFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRU8sY0FBYztRQUNwQixNQUFNLGFBQWEsR0FBZ0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDakUsSUFBSSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFFakQsT0FBTyxVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQ3BCLE1BQU0sS0FBSyxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7WUFFbkQsSUFBSSxLQUFLLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxLQUFLLEtBQUssRUFBRSxDQUFDO2dCQUNuRSxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ25DLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQzs4R0ExRFUsZ0JBQWdCO2tHQUFoQixnQkFBZ0IsMk9BSmpCLEVBQUU7OzJGQUlELGdCQUFnQjtrQkFONUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7b0JBQ3JDLFVBQVUsRUFBRSxJQUFJO2lCQUNqQjs4QkFNVSxTQUFTO3NCQUFqQixLQUFLO2dCQUNHLElBQUk7c0JBQVosS0FBSztnQkFFZ0IsU0FBUztzQkFBOUIsV0FBVzt1QkFBQyxPQUFPO2dCQUNhLGNBQWM7c0JBQTlDLFdBQVc7dUJBQUMsa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFcnJvckhhbmRsZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBpbmplY3QsXG4gIElucHV0LFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmRzSWNvbkxvYWRlciB9IGZyb20gJy4vaWNvbi1sb2FkZXInO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmRzSWNvbk5hbWUsIFJkc0ljb25OYW1lc3BhY2UgfSBmcm9tICcuL2ljb24tdHlwZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyZHMtaWNvbicsXG4gIHRlbXBsYXRlOiAnJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzSWNvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgcHJpdmF0ZSByZWFkb25seSBlbGVtZW50UmVmID0gaW5qZWN0KEVsZW1lbnRSZWYpO1xuICBwcml2YXRlIHJlYWRvbmx5IGljb25Mb2FkZXIgPSBpbmplY3QoUmRzSWNvbkxvYWRlcik7XG4gIHByaXZhdGUgcmVhZG9ubHkgZXJyb3JIYW5kbGVyID0gaW5qZWN0KEVycm9ySGFuZGxlcik7XG5cbiAgQElucHV0KCkgbmFtZXNwYWNlOiBSZHNJY29uTmFtZXNwYWNlID0gJ2ZpbGxlZCc7XG4gIEBJbnB1dCgpIGljb246IFJkc0ljb25OYW1lIHwgbnVsbCA9IG51bGw7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGhvc3RDbGFzcyA9ICdyZHMtaWNvbic7XG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWhpZGRlbicpIGhvc3RBcmlhSGlkZGVuID0gJ3RydWUnO1xuXG4gIHByaXZhdGUgY3VycmVudEljb25GZXRjaCA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgY29uc3QgbmFtZXNwYWNlQ2hhbmdlcyA9IGNoYW5nZXNbJ25hbWVzcGFjZSddO1xuICAgIGNvbnN0IGljb25DaGFuZ2VzID0gY2hhbmdlc1snaWNvbiddO1xuXG4gICAgLy8gVXBkYXRlIHRoZSBpbmxpbmUgU1ZHIGlmIHRoZSBpY29uIG9yIG5hbWVzcGFjZSBpbnB1dHMgY2hhbmdlZCwgdG8gYXZvaWQgdW5uZWNlc3NhcnkgRE9NIG9wZXJhdGlvbnMuXG4gICAgaWYgKGljb25DaGFuZ2VzIHx8IG5hbWVzcGFjZUNoYW5nZXMpIHtcbiAgICAgIHRoaXMuY3VycmVudEljb25GZXRjaC51bnN1YnNjcmliZSgpO1xuXG4gICAgICBpZiAodGhpcy5pY29uKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEljb25GZXRjaCA9IHRoaXMuaWNvbkxvYWRlclxuICAgICAgICAgIC5nZXRTdmdJY29uKHRoaXMuaWNvbiwgdGhpcy5uYW1lc3BhY2UpXG4gICAgICAgICAgLnBpcGUodGFrZSgxKSlcbiAgICAgICAgICAuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgIG5leHQ6IChzdmcpID0+IHRoaXMuX3NldFN2Z0ljb24oc3ZnKSxcbiAgICAgICAgICAgIGVycm9yOiAoZXJyOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBgRXJyb3IgcmV0cmlldmluZyBpY29uICR7dGhpcy5uYW1lc3BhY2V9OiR7dGhpcy5pY29ufSEgJHtlcnIubWVzc2FnZX1gO1xuICAgICAgICAgICAgICB0aGlzLmVycm9ySGFuZGxlci5oYW5kbGVFcnJvcihuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChpY29uQ2hhbmdlcy5wcmV2aW91c1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3JlbW92ZVN2Z0ljb24oKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRJY29uRmV0Y2gudW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgX3NldFN2Z0ljb24oc3ZnRWxlbWVudDogU1ZHRWxlbWVudCk6IHZvaWQge1xuICAgIHRoaXMuX3JlbW92ZVN2Z0ljb24oKTtcbiAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZChzdmdFbGVtZW50KTtcbiAgfVxuXG4gIHByaXZhdGUgX3JlbW92ZVN2Z0ljb24oKTogdm9pZCB7XG4gICAgY29uc3QgbGF5b3V0RWxlbWVudDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBsZXQgY2hpbGRDb3VudCA9IGxheW91dEVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoY2hpbGRDb3VudC0tKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IGxheW91dEVsZW1lbnQuY2hpbGROb2Rlc1tjaGlsZENvdW50XTtcblxuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlICE9PSAxIHx8IGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzdmcnKSB7XG4gICAgICAgIGxheW91dEVsZW1lbnQucmVtb3ZlQ2hpbGQoY2hpbGQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19