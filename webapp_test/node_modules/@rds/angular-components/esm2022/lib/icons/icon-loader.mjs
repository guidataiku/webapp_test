import { inject, Injectable, SecurityContext } from '@angular/core';
import { of } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { DOCUMENT } from '@angular/common';
import { finalize, map, share, tap } from 'rxjs/operators';
import { IconLoaderErrors } from './icon-loader-errors';
import { RDS_ICON_LOADER_CONFIG, } from './icon-types';
import { RDS_VERSION_AS_FILENAME_SUFFIX } from '../core';
import * as i0 from "@angular/core";
// in case of change remember to modify create-svg-symbols.js accordingly
const getAllIconsFilename = (namespace) => `_all-${namespace}`;
class IconConfig {
    constructor(data) {
        this.url = '';
        if (isSVGElement(data)) {
            this.svgElement = data;
        }
        else {
            this.url = data;
        }
    }
}
function isSVGElement(data) {
    return typeof data !== 'string' && 'nodeName' in data;
}
export function getSvgHref(namespace, name) {
    return `/assets/icons/${namespace}/${name}${RDS_VERSION_AS_FILENAME_SUFFIX}.svg#${name}`;
}
/**
 * Service to load icons used by the `<rds-icon>` component.
 * Icons are get from, assets/icons/{namespace}/{iconName}
 */
export class RdsIconLoader {
    // Keys are of in the format namespace:icon
    static { this.BASE_URL = '/'; }
    static { this.BASE_URL_FETCHED = false; }
    static _getBaseUrl() {
        if (!RdsIconLoader.BASE_URL_FETCHED) {
            const baseTag = document.getElementsByTagName('base')[0];
            if (!baseTag || !baseTag.href || baseTag.href === '') {
                RdsIconLoader.BASE_URL = '/';
            }
            else {
                RdsIconLoader.BASE_URL = baseTag.href;
            }
            RdsIconLoader.BASE_URL_FETCHED = true;
        }
        return RdsIconLoader.BASE_URL;
    }
    constructor() {
        this.config = inject(RDS_ICON_LOADER_CONFIG, { optional: true });
        this.httpClient = inject(HttpClient, { optional: true });
        this.document = inject(DOCUMENT, { optional: true });
        this.domSanitizer = inject(DomSanitizer);
        this.iconConfigsCache = new Map();
        this.iconFetchesInProgress = new Map();
        this.allIcons = {};
        this.preloadAll = false;
        this.handleConfig(this.config);
    }
    preloadSelectedIcons(selectedIcons) {
        Object.entries(selectedIcons).forEach(([namespace, icons]) => {
            for (const iconName of icons) {
                this.getSvgIcon(iconName, namespace).subscribe();
            }
        });
    }
    /**
     * Returns an Observable with the icon (as an `<svg>` SVGelement) for the given name
     * and namespace.
     * @param name Name of the icon to be retrieved.
     * @param namespace Namespace in which to look for the icon.
     */
    getSvgIcon(name, namespace) {
        if (this.preloadAll) {
            return this.getFromAllIconsFile(name, namespace);
        }
        const iconConfig = this.getOrCreateIconConfig(name, namespace);
        return this._getSvgElementFromIconConfig(iconConfig);
    }
    ngOnDestroy() {
        this.iconConfigsCache.clear();
    }
    getFromAllIconsFile(name, namespace) {
        if (this.allIcons[namespace]) {
            return of(this.buildFromSymbol(name, namespace));
        }
        const iconConfig = this.getOrCreateIconConfig(name, namespace);
        return this._fetchIcon(iconConfig).pipe(tap((svgText) => {
            this.allIcons[namespace] = this._convertSVGStringToSvgElement(svgText);
        }), map(() => this.buildFromSymbol(name, namespace)));
    }
    getOrCreateIconConfig(name, namespace) {
        const keyName = this.preloadAll ? getAllIconsFilename(namespace) : name;
        const key = iconKey(namespace, keyName);
        return (this.iconConfigsCache.get(key) ||
            this._addIconConfigToCache(namespace, name));
    }
    _addIconConfigToCache(namespace, iconName) {
        if (!namespace || !iconName) {
            throw IconLoaderErrors.invalidNamespaceOrIconNameError(namespace, iconName);
        }
        const url = this._buildIconUrl(namespace, iconName);
        const iconConfig = new IconConfig(url);
        this.iconConfigsCache.set(iconKey(namespace, iconName), iconConfig);
        return iconConfig;
    }
    _buildIconUrl(namespace, iconName) {
        if (this.preloadAll) {
            iconName = getAllIconsFilename(namespace);
        }
        const safeResourceUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(RdsIconLoader._getBaseUrl() +
            `assets/icons/${namespace}/${iconName}${RDS_VERSION_AS_FILENAME_SUFFIX}.svg`);
        const url = this.domSanitizer.sanitize(SecurityContext.RESOURCE_URL, safeResourceUrl);
        if (!url) {
            throw IconLoaderErrors.iconUrlFailedToSanitize(safeResourceUrl);
        }
        return url;
    }
    _getSvgElementFromIconConfig(iconConfig) {
        const svgElement = iconConfig.svgElement;
        if (svgElement) {
            // We already have the SVG element for this icon, return a copy.
            return of(cloneSvg(svgElement));
        }
        else {
            // Fetch the icon from the iconConfig's URL, cache it, and return a copy.
            return this._fetchIcon(iconConfig).pipe(map((svgText) => this._buildSvgElement(svgText)), tap((builtSvgElement) => (iconConfig.svgElement = builtSvgElement)), map((builtSvgElement) => cloneSvg(builtSvgElement)));
        }
    }
    _fetchIcon(iconConfig) {
        const { url } = iconConfig;
        if (!this.httpClient) {
            throw IconLoaderErrors.noHttpProviderError();
        }
        const inProgressFetch = this.iconFetchesInProgress.get(url);
        if (inProgressFetch) {
            return inProgressFetch;
        }
        const req = this.httpClient.get(url, { responseType: 'text' }).pipe(finalize(() => this.iconFetchesInProgress.delete(url)), share());
        this.iconFetchesInProgress.set(url, req);
        return req;
    }
    _buildSvgElement(responseText) {
        const svgElement = this._convertSVGStringToSvgElement(responseText);
        this._setDefaultSvgAttributes(svgElement);
        return svgElement;
    }
    buildFromSymbol(name, namespace) {
        const symbol = this.allIcons[namespace]?.querySelector(`#${name}`);
        const svgString = symbol
            ? `<svg ${symbol.outerHTML.slice(7, -9)}</svg>`
            : '<svg></svg>';
        return this._convertSVGStringToSvgElement(svgString);
    }
    _convertSVGStringToSvgElement(svgString) {
        const div = this.document.createElement('DIV');
        div.innerHTML = svgString;
        const svg = div.querySelector('svg');
        if (svg) {
            return svg;
        }
        throw IconLoaderErrors.svgTagNotFound();
    }
    _setDefaultSvgAttributes(svg) {
        svg.setAttribute('fit', '');
        svg.setAttribute('height', '100%');
        svg.setAttribute('width', '100%');
        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
        svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.
        svg.setAttribute('viewBox', '0 0 24 24');
        return svg;
    }
    handleConfig(config) {
        if (config?.preloadSelected) {
            config.preloadSelected === 'all'
                ? (this.preloadAll = true)
                : this.preloadSelectedIcons(config.preloadSelected);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconLoader, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconLoader, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsIconLoader, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });
function cloneSvg(svg) {
    return svg.cloneNode(true);
}
function iconKey(namespace, name) {
    return namespace + ':' + name;
}
//# sourceMappingURL=data:application/json;base64,