import { CdkScrollable, ScrollDispatcher } from '@angular/cdk/scrolling';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, forwardRef, HostBinding, inject, NgZone, ViewEncapsulation, } from '@angular/core';
import { RdsDrawerContainerComponent } from './drawer-container.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsDrawerContentComponent extends CdkScrollable {
    get marginRight() {
        return this.contentMargins.right ?? 0;
    }
    get marginLeft() {
        return this.contentMargins.left ?? 0;
    }
    constructor() {
        super(inject(ElementRef), inject(ScrollDispatcher), inject(NgZone));
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.container = inject(forwardRef(() => RdsDrawerContainerComponent));
        this.class = 'rds-drawer-content';
    }
    ngAfterContentInit() {
        this.container.contentMargins$
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((m) => {
            this.contentMargins = m;
            this.cdr.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDrawerContentComponent, isStandalone: true, selector: "rds-drawer-content", host: { properties: { "class": "this.class", "style.margin-right.px": "this.marginRight", "style.margin-left.px": "this.marginLeft" } }, usesInheritance: true, ngImport: i0, template: '<ng-content />', isInline: true, styles: [".rds-drawer-content{width:100%;height:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-drawer-content', template: '<ng-content />', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, styles: [".rds-drawer-content{width:100%;height:100%}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], marginRight: [{
                type: HostBinding,
                args: ['style.margin-right.px']
            }], marginLeft: [{
                type: HostBinding,
                args: ['style.margin-left.px']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhd2VyLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9kcmF3ZXIvZHJhd2VyLWNvbnRlbnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsV0FBVyxFQUNYLE1BQU0sRUFDTixNQUFNLEVBQ04saUJBQWlCLEdBQ2xCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTNFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDOztBQVVoRSxNQUFNLE9BQU8seUJBQ1gsU0FBUSxhQUFhO0lBV3JCLElBQTBDLFdBQVc7UUFDbkQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQXlDLFVBQVU7UUFDakQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUlEO1FBQ0UsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsRUFBRSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQW5CckQsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoQyxRQUFHLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDaEMsY0FBUyxHQUFHLE1BQU0sQ0FDakMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUEyQixDQUFDLENBQzlDLENBQUM7UUFFb0IsVUFBSyxHQUFHLG9CQUFvQixDQUFDO0lBY25ELENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlO2FBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDekMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7WUFDZixJQUFJLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs4R0FqQ1UseUJBQXlCO2tHQUF6Qix5QkFBeUIsOE9BTjFCLGdCQUFnQjs7MkZBTWYseUJBQXlCO2tCQVJyQyxTQUFTOytCQUNFLG9CQUFvQixZQUNwQixnQkFBZ0IsaUJBRVgsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTSxjQUNuQyxJQUFJO3dEQVlNLEtBQUs7c0JBQTFCLFdBQVc7dUJBQUMsT0FBTztnQkFFc0IsV0FBVztzQkFBcEQsV0FBVzt1QkFBQyx1QkFBdUI7Z0JBSUssVUFBVTtzQkFBbEQsV0FBVzt1QkFBQyxzQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZGtTY3JvbGxhYmxlLCBTY3JvbGxEaXNwYXRjaGVyIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3Njcm9sbGluZyc7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRGVzdHJveVJlZixcbiAgRWxlbWVudFJlZixcbiAgZm9yd2FyZFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIGluamVjdCxcbiAgTmdab25lLFxuICBWaWV3RW5jYXBzdWxhdGlvbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZHNEcmF3ZXJDb250YWluZXJDb21wb25lbnQgfSBmcm9tICcuL2RyYXdlci1jb250YWluZXIuY29tcG9uZW50JztcbmltcG9ydCB7IFJkc0RyYXdlckNvbnRhaW5lckNvbnRlbnRNYXJnaW5zIH0gZnJvbSAnLi9kcmF3ZXItdHlwZXMnO1xuaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyZHMtZHJhd2VyLWNvbnRlbnQnLFxuICB0ZW1wbGF0ZTogJzxuZy1jb250ZW50IC8+JyxcbiAgc3R5bGVVcmxzOiBbJy4vZHJhd2VyLWNvbnRlbnQuY29tcG9uZW50LnNjc3MnXSxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG59KVxuZXhwb3J0IGNsYXNzIFJkc0RyYXdlckNvbnRlbnRDb21wb25lbnRcbiAgZXh0ZW5kcyBDZGtTY3JvbGxhYmxlXG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdFxue1xuICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3lSZWYgPSBpbmplY3QoRGVzdHJveVJlZik7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2RyID0gaW5qZWN0KENoYW5nZURldGVjdG9yUmVmKTtcbiAgcHJpdmF0ZSByZWFkb25seSBjb250YWluZXIgPSBpbmplY3Q8UmRzRHJhd2VyQ29udGFpbmVyQ29tcG9uZW50PihcbiAgICBmb3J3YXJkUmVmKCgpID0+IFJkc0RyYXdlckNvbnRhaW5lckNvbXBvbmVudCksXG4gICk7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNsYXNzID0gJ3Jkcy1kcmF3ZXItY29udGVudCc7XG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5tYXJnaW4tcmlnaHQucHgnKSBnZXQgbWFyZ2luUmlnaHQoKTogbnVtYmVyIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuY29udGVudE1hcmdpbnMucmlnaHQgPz8gMDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnc3R5bGUubWFyZ2luLWxlZnQucHgnKSBnZXQgbWFyZ2luTGVmdCgpOiBudW1iZXIgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZW50TWFyZ2lucy5sZWZ0ID8/IDA7XG4gIH1cblxuICBwcml2YXRlIGNvbnRlbnRNYXJnaW5zOiBSZHNEcmF3ZXJDb250YWluZXJDb250ZW50TWFyZ2lucztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihpbmplY3QoRWxlbWVudFJlZiksIGluamVjdChTY3JvbGxEaXNwYXRjaGVyKSwgaW5qZWN0KE5nWm9uZSkpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY29udGFpbmVyLmNvbnRlbnRNYXJnaW5zJFxuICAgICAgLnBpcGUodGFrZVVudGlsRGVzdHJveWVkKHRoaXMuZGVzdHJveVJlZikpXG4gICAgICAuc3Vic2NyaWJlKChtKSA9PiB7XG4gICAgICAgIHRoaXMuY29udGVudE1hcmdpbnMgPSBtO1xuICAgICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICAgIH0pO1xuICB9XG59XG4iXX0=