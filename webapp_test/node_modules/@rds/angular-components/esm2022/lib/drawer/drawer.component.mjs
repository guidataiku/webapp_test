import { ConfigurableFocusTrapFactory, FocusMonitor, InteractivityChecker, } from '@angular/cdk/a11y';
import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';
import { ContentObserver } from '@angular/cdk/observers';
import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, DestroyRef, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, NgZone, Output, PLATFORM_ID, ViewChild, ViewEncapsulation, } from '@angular/core';
import { BehaviorSubject, filter, fromEvent, Subject } from 'rxjs';
import { RdsDrawerActionsDirective } from './drawer-actions.directive';
import { rdsDrawerAnimations } from './drawer-animations';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import { RdsIconComponent } from '../icons';
import { RdsButtonModule } from '../button';
import * as i0 from "@angular/core";
import * as i1 from "../button/icon-button.component";
export class RdsDrawerComponent {
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = value;
        this.updateFocusTrapState();
        this._modeChanged.next();
    }
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value === 'end' ? 'end' : 'start';
        this.positionChanged.emit(this._position);
    }
    set expanded(value) {
        this.toggle(booleanAttribute(value));
    }
    get expanded() {
        return this.isOpened;
    }
    set autoFocus(value) {
        if (value === 'true' || value === 'false' || value == null) {
            value = booleanAttribute(value);
        }
        this._autoFocus = value;
    }
    get autoFocus() {
        const value = this._autoFocus;
        if (value == null) {
            if (this.mode === 'side') {
                return 'dialog';
            }
            else {
                return 'first-tabbable';
            }
        }
        return value;
    }
    get class() {
        const classes = ['rds-drawer', `rds-drawer-${this.size}`];
        if (this.mode === 'overlay') {
            classes.push('rds-drawer-overlay');
        }
        if (this.position === 'end') {
            classes.push('rds-drawer-end');
        }
        else {
            classes.push('rds-drawer-start');
        }
        return classes;
    }
    get transform() {
        return this._animationState;
    }
    get isOpened() {
        return this._isOpened$.getValue();
    }
    get isOpened$() {
        return this._isOpened$.asObservable();
    }
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.contentObserver = inject(ContentObserver);
        this.ngZone = inject(NgZone);
        this.focusTrapFactory = inject(ConfigurableFocusTrapFactory);
        this.focusMonitor = inject(FocusMonitor);
        this.document = inject(DOCUMENT);
        this.interactivityChecker = inject(InteractivityChecker);
        this.platformId = inject(PLATFORM_ID);
        this._modeChanged = new Subject();
        this._animationStarted = new Subject();
        this._animationEnd = new Subject();
        this._animationState = 'void';
        this._animating = null;
        this._isOpened$ = new BehaviorSubject(false);
        this._elementFocusedBeforeDrawerWasOpened = null;
        this.size = 'm';
        this.closeBtnAriaLabel = 'Close';
        this._mode = 'overlay';
        this._position = 'start';
        this.closable = true;
        this.disableClose = false;
        this.closeDrawer = new EventEmitter();
        this.openDrawer = new EventEmitter();
        this.positionChanged = new EventEmitter();
        this.body = { nativeElement: undefined };
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this.scrollable = false;
        this.ngZone.runOutsideAngular(() => {
            if (isPlatformBrowser(this.platformId)) {
                fromEvent(window, 'keydown')
                    .pipe(filter((event) => event.keyCode === ESCAPE &&
                    !this.disableClose &&
                    !hasModifierKey(event)), takeUntilDestroyed())
                    .subscribe((event) => this.ngZone.run(() => {
                    this.close();
                    event.stopPropagation();
                    event.preventDefault();
                }));
            }
        });
    }
    ngAfterViewInit() {
        this._focusTrap = this.focusTrapFactory.create(this.elementRef.nativeElement);
        this.updateFocusTrapState();
    }
    ngAfterContentInit() {
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.scrollable = this.isScrollable();
            this.cdr.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
        this._animationStarted.complete();
        this._animationEnd.complete();
        this._modeChanged.complete();
    }
    transformStart(event) {
        if (event.toState === 'void') {
            this._animating = 'collapsing';
        }
        else if (event.toState === 'open') {
            this._animating = 'expanding';
        }
        this._animationStarted.next(event);
    }
    transformEnd(event) {
        this._animating = null;
        this._animationEnd.next(event);
        // animation.done changes opened value
        const isOpened = event.toState === 'open' || event.toState === 'open-instant';
        if (isOpened) {
            if (this.document) {
                this._elementFocusedBeforeDrawerWasOpened = this.document
                    .activeElement;
            }
            this.takeFocus();
        }
        else if (this.isFocusWithinDrawer()) {
            this.restoreFocus(this._openedVia || 'program');
        }
        this._isOpened$.next(isOpened);
        if (event.fromState !== event.toState) {
            if (isOpened) {
                this.openDrawer.emit();
            }
            else {
                this.closeDrawer.emit();
            }
        }
        this.scrollable = this.isScrollable();
    }
    toggle(expanded = !this._isOpened$.getValue(), openedVia) {
        if (expanded && openedVia) {
            this._openedVia = openedVia;
        }
        if (this.isOpened !== expanded) {
            if (expanded) {
                this.open();
            }
            else {
                this.close();
            }
        }
    }
    open() {
        this._animationState = 'open';
    }
    close() {
        this._animationState = 'void';
    }
    forceFocus(element, options) {
        if (!this.interactivityChecker.isFocusable(element)) {
            element.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
            this.ngZone.runOutsideAngular(() => {
                const callback = () => {
                    element.removeEventListener('blur', callback);
                    element.removeEventListener('mousedown', callback);
                    element.removeAttribute('tabindex');
                };
                element.addEventListener('blur', callback);
                element.addEventListener('mousedown', callback);
            });
        }
        element.focus(options);
    }
    focusByCssSelector(selector, options) {
        const elementToFocus = this.elementRef.nativeElement.querySelector(selector);
        if (elementToFocus) {
            this.forceFocus(elementToFocus, options);
        }
    }
    takeFocus() {
        if (!this._focusTrap) {
            return;
        }
        const element = this.elementRef.nativeElement;
        switch (this.autoFocus) {
            case false:
            case 'dialog':
                return;
            case true:
            case 'first-tabbable':
                this._focusTrap.focusInitialElementWhenReady().then((hasMovedFocus) => {
                    if (!hasMovedFocus &&
                        typeof this.elementRef.nativeElement.focus === 'function') {
                        element.focus();
                    }
                });
                break;
            case 'first-heading':
                this.focusByCssSelector('rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]');
                break;
            default:
                this.focusByCssSelector(this.autoFocus);
                break;
        }
    }
    restoreFocus(focusOrigin) {
        if (this.autoFocus === 'dialog') {
            return;
        }
        else if (this._elementFocusedBeforeDrawerWasOpened) {
            this.focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, focusOrigin);
        }
        else {
            this.elementRef.nativeElement.blur();
        }
        this._elementFocusedBeforeDrawerWasOpened = null;
    }
    isFocusWithinDrawer() {
        const activeEl = this.document.activeElement;
        return !!activeEl && this.elementRef.nativeElement.contains(activeEl);
    }
    updateFocusTrapState() {
        if (this._focusTrap) {
            this._focusTrap.enabled = this.expanded && this.mode !== 'side';
        }
    }
    isScrollable() {
        return (this.body.nativeElement.scrollHeight >
            this.body.nativeElement.clientHeight);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDrawerComponent, isStandalone: true, selector: "rds-drawer", inputs: { size: "size", closeBtnAriaLabel: "closeBtnAriaLabel", mode: "mode", position: "position", closable: ["closable", "closable", booleanAttribute], expanded: "expanded", disableClose: ["disableClose", "disableClose", booleanAttribute], autoFocus: "autoFocus" }, outputs: { closeDrawer: "closeDrawer", openDrawer: "openDrawer", positionChanged: "positionChanged" }, host: { listeners: { "@transform.start": "transformStart($event)", "@transform.done": "transformEnd($event)" }, properties: { "class": "this.class", "tabIndex": "this.tabIndex", "@transform": "this.transform", "class.rds-drawer-scrollable": "this.scrollable" } }, queries: [{ propertyName: "actions", first: true, predicate: RdsDrawerActionsDirective, descendants: true }], viewQueries: [{ propertyName: "body", first: true, predicate: ["body"], descendants: true }], ngImport: i0, template: "<div class=\"rds-drawer-header\">\n  <ng-content\n    select=\"rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]\"\n  />\n  @if (closable) {\n    <button\n      rds-icon-button\n      size=\"m\"\n      (click)=\"toggle(false)\"\n      [attr.aria-label]=\"closeBtnAriaLabel\"\n    >\n      <rds-icon icon=\"close\" />\n    </button>\n  }\n</div>\n<div class=\"rds-drawer-body\" #body>\n  <ng-content />\n</div>\n<div [class.rds-drawer-actions]=\"actions\">\n  <ng-content\n    select=\"rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]\"\n  />\n</div>\n", styles: [".rds-drawer{background-color:var(--rds-color-bg-base-elevated);border-radius:2px;position:absolute;z-index:3;top:0;bottom:0;outline:0;display:flex;flex-direction:column;box-sizing:border-box;height:100%}.rds-drawer.rds-drawer-s{width:360px}.rds-drawer.rds-drawer-m{width:512px}.rds-drawer.rds-drawer-l{width:736px}.rds-drawer[style*=\"visibility: hidden\"]{display:none}.rds-drawer.rds-drawer-end{transform:translate3d(100%,0,0);order:1;right:0}.rds-drawer.rds-drawer-start{transform:translate3d(-100%,0,0);left:0}.rds-drawer.rds-drawer-overlay{position:absolute;z-index:4}.rds-drawer .rds-drawer-header{font-size:20px;font-weight:600;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;justify-content:space-between;padding:24px;row-gap:16px;color:var(--rds-color-high-contrast)}.rds-drawer .rds-drawer-body{padding-inline:24px;padding-block:0 24px;overflow-y:auto;color:var(--rds-color-high-contrast);width:100%;height:100%}@media (max-width: 767.999999px){.rds-drawer .rds-drawer-body{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-drawer .rds-drawer-actions{display:flex;justify-content:flex-end;gap:16px;width:100%;padding:24px}.rds-drawer.rds-drawer-scrollable .rds-drawer-body{padding-right:12px}.rds-drawer.rds-drawer-scrollable .rds-drawer-actions{border-top:1px solid var(--rds-color-grey-2)}\n"], dependencies: [{ kind: "component", type: RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "ngmodule", type: RdsButtonModule }, { kind: "component", type: i1.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }], animations: [rdsDrawerAnimations.expandDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-drawer', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [rdsDrawerAnimations.expandDrawer], standalone: true, imports: [RdsIconComponent, RdsButtonModule], template: "<div class=\"rds-drawer-header\">\n  <ng-content\n    select=\"rds-drawer-header, [rds-drawer-header], [rdsDrawerHeader]\"\n  />\n  @if (closable) {\n    <button\n      rds-icon-button\n      size=\"m\"\n      (click)=\"toggle(false)\"\n      [attr.aria-label]=\"closeBtnAriaLabel\"\n    >\n      <rds-icon icon=\"close\" />\n    </button>\n  }\n</div>\n<div class=\"rds-drawer-body\" #body>\n  <ng-content />\n</div>\n<div [class.rds-drawer-actions]=\"actions\">\n  <ng-content\n    select=\"rds-drawer-actions, [rds-drawer-actions], [rdsDrawerActions]\"\n  />\n</div>\n", styles: [".rds-drawer{background-color:var(--rds-color-bg-base-elevated);border-radius:2px;position:absolute;z-index:3;top:0;bottom:0;outline:0;display:flex;flex-direction:column;box-sizing:border-box;height:100%}.rds-drawer.rds-drawer-s{width:360px}.rds-drawer.rds-drawer-m{width:512px}.rds-drawer.rds-drawer-l{width:736px}.rds-drawer[style*=\"visibility: hidden\"]{display:none}.rds-drawer.rds-drawer-end{transform:translate3d(100%,0,0);order:1;right:0}.rds-drawer.rds-drawer-start{transform:translate3d(-100%,0,0);left:0}.rds-drawer.rds-drawer-overlay{position:absolute;z-index:4}.rds-drawer .rds-drawer-header{font-size:20px;font-weight:600;line-height:28px;text-transform:none;letter-spacing:0;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;display:flex;justify-content:space-between;padding:24px;row-gap:16px;color:var(--rds-color-high-contrast)}.rds-drawer .rds-drawer-body{padding-inline:24px;padding-block:0 24px;overflow-y:auto;color:var(--rds-color-high-contrast);width:100%;height:100%}@media (max-width: 767.999999px){.rds-drawer .rds-drawer-body{font-size:14px;font-weight:200;line-height:20px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 768px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1024px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1440px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}@media (min-width: 1672px){.rds-drawer .rds-drawer-body{font-size:16px;font-weight:200;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}}.rds-drawer .rds-drawer-actions{display:flex;justify-content:flex-end;gap:16px;width:100%;padding:24px}.rds-drawer.rds-drawer-scrollable .rds-drawer-body{padding-right:12px}.rds-drawer.rds-drawer-scrollable .rds-drawer-actions{border-top:1px solid var(--rds-color-grey-2)}\n"] }]
        }], ctorParameters: () => [], propDecorators: { size: [{
                type: Input
            }], closeBtnAriaLabel: [{
                type: Input
            }], mode: [{
                type: Input
            }], position: [{
                type: Input
            }], closable: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], expanded: [{
                type: Input
            }], disableClose: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], autoFocus: [{
                type: Input
            }], closeDrawer: [{
                type: Output
            }], openDrawer: [{
                type: Output
            }], positionChanged: [{
                type: Output
            }], actions: [{
                type: ContentChild,
                args: [RdsDrawerActionsDirective]
            }], body: [{
                type: ViewChild,
                args: ['body']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], transform: [{
                type: HostBinding,
                args: ['@transform']
            }], scrollable: [{
                type: HostBinding,
                args: ['class.rds-drawer-scrollable']
            }], transformStart: [{
                type: HostListener,
                args: ['@transform.start', ['$event']]
            }], transformEnd: [{
                type: HostListener,
                args: ['@transform.done', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,