import { booleanAttribute, Component, ContentChild, DestroyRef, ElementRef, EventEmitter, HostBinding, inject, Input, NgZone, Output, Renderer2, ViewEncapsulation, } from '@angular/core';
import { BehaviorSubject, filter, merge } from 'rxjs';
import { RdsDrawerComponent } from './drawer.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsDrawerContainerComponent {
    constructor() {
        this.ngZone = inject(NgZone);
        this.elementRef = inject(ElementRef);
        this.destroyRef = inject(DestroyRef);
        this.renderer = inject(Renderer2);
        this.class = [
            'rds-drawer-container',
            'rds-drawer-overlay',
        ];
        this.backdropClick = new EventEmitter();
        this._contentMargin$ = new BehaviorSubject({
            left: 0,
            right: 0,
        });
        this.contentMargins$ = this._contentMargin$.asObservable();
        this._backdrop = false;
    }
    set backdrop(value) {
        if (value !== 'transparent') {
            value = booleanAttribute(value);
        }
        this._backdrop = value;
    }
    get backdrop() {
        if (this._backdrop == null) {
            return !this.start || !this.end;
        }
        return this._backdrop;
    }
    ngAfterContentInit() {
        this.watchDrawerToggle();
        merge(this.drawer.positionChanged, this.drawer._modeChanged)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.updateContentMargins());
    }
    ngOnDestroy() {
        this._contentMargin$.complete();
    }
    /** for internal purposes only */
    _onBackdropClicked() {
        this.drawer.toggle(false);
        this.backdropClick.emit();
    }
    isShowingBackdrop() {
        return this.isDrawerOpen() && !!this.backdrop;
    }
    updateContentMargins() {
        let left = 0;
        let right = 0;
        if (this.drawer &&
            this.drawer._animating === 'expanding' &&
            this.drawer.position == 'start') {
            if (this.drawer.mode == 'side') {
                left += this.getDrawerWidth();
            }
            else if (this.drawer.mode == 'push') {
                const width = this.getDrawerWidth();
                left += width;
                right -= width;
            }
        }
        if (this.drawer &&
            this.drawer._animating === 'expanding' &&
            this.drawer.position == 'end') {
            if (this.drawer.mode == 'side') {
                right += this.getDrawerWidth();
            }
            else if (this.drawer.mode == 'push') {
                const width = this.getDrawerWidth();
                right += width;
                left -= width;
            }
        }
        this.ngZone.run(() => this._contentMargin$.next({ left, right }));
    }
    isDrawerOpen() {
        return (this.drawer != null &&
            (this.drawer._animating !== null || this.drawer.expanded));
    }
    watchDrawerToggle() {
        this.drawer._animationStarted
            .pipe(filter((event) => event.fromState !== event.toState), takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            if (event.toState !== 'open-instant') {
                this.renderer.addClass(this.elementRef.nativeElement, 'rds-drawer-transition');
            }
            this.updateContentMargins();
        });
    }
    getDrawerWidth() {
        return this.drawerElement?.nativeElement?.offsetWidth ?? 0;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDrawerContainerComponent, isStandalone: true, selector: "rds-drawer-container", inputs: { backdrop: "backdrop" }, outputs: { backdropClick: "backdropClick" }, host: { properties: { "class": "this.class" } }, queries: [{ propertyName: "drawer", first: true, predicate: RdsDrawerComponent, descendants: true }, { propertyName: "drawerElement", first: true, predicate: RdsDrawerComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "@if (backdrop) {\n  <div\n    (click)=\"_onBackdropClicked()\"\n    class=\"rds-drawer-backdrop\"\n    [class.cdk-overlay-dark-backdrop]=\"backdrop !== 'transparent'\"\n    [class.rds-drawer-backdrop--transparent]=\"backdrop === 'transparent'\"\n    [class.rds-drawer-shown]=\"isShowingBackdrop()\"\n  ></div>\n}\n<ng-content select=\"rds-drawer\" />\n<ng-content select=\"rds-drawer-content\" />\n", styles: [".rds-drawer-container{position:relative;display:flex;flex-direction:row;align-items:flex-start;overflow:hidden;width:100%;height:100%}.rds-drawer-container.rds-drawer-transition .rds-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.rds-drawer-backdrop{position:absolute;z-index:3;inset:0;display:block;visibility:hidden}.rds-drawer-backdrop.rds-drawer-shown{visibility:visible}.rds-drawer-backdrop.rds-drawer-backdrop--transparent{background-color:transparent}\n"], encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDrawerContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-drawer-container', encapsulation: ViewEncapsulation.None, standalone: true, template: "@if (backdrop) {\n  <div\n    (click)=\"_onBackdropClicked()\"\n    class=\"rds-drawer-backdrop\"\n    [class.cdk-overlay-dark-backdrop]=\"backdrop !== 'transparent'\"\n    [class.rds-drawer-backdrop--transparent]=\"backdrop === 'transparent'\"\n    [class.rds-drawer-shown]=\"isShowingBackdrop()\"\n  ></div>\n}\n<ng-content select=\"rds-drawer\" />\n<ng-content select=\"rds-drawer-content\" />\n", styles: [".rds-drawer-container{position:relative;display:flex;flex-direction:row;align-items:flex-start;overflow:hidden;width:100%;height:100%}.rds-drawer-container.rds-drawer-transition .rds-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.rds-drawer-backdrop{position:absolute;z-index:3;inset:0;display:block;visibility:hidden}.rds-drawer-backdrop.rds-drawer-shown{visibility:visible}.rds-drawer-backdrop.rds-drawer-backdrop--transparent{background-color:transparent}\n"] }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], drawer: [{
                type: ContentChild,
                args: [RdsDrawerComponent, { descendants: true }]
            }], drawerElement: [{
                type: ContentChild,
                args: [RdsDrawerComponent, { descendants: true, read: ElementRef }]
            }], backdropClick: [{
                type: Output
            }], backdrop: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,