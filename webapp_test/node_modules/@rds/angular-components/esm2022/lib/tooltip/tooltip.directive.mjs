import { AriaDescriber, FocusMonitor } from '@angular/cdk/a11y';
import { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';
import { Overlay, ScrollDispatcher, } from '@angular/cdk/overlay';
import { normalizePassiveListenerOptions, Platform, } from '@angular/cdk/platform';
import { ComponentPortal } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { booleanAttribute, DestroyRef, Directive, ElementRef, HostBinding, inject, Input, NgZone, numberAttribute, Renderer2, ViewContainerRef, } from '@angular/core';
import { take } from 'rxjs/operators';
import { RDS_TOOLTIP_DEFAULT_OPTIONS, RDS_TOOLTIP_SCROLL_STRATEGY, } from './tokens';
import { RdsTooltipComponent } from './tooltip.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
const PRESS_DELAY = 500;
/** Options used to bind passive event listeners. */
const passiveListenerOptions = normalizePassiveListenerOptions({
    passive: true,
});
const rdsTooltipPositionToRdsTooltipOverlayConnectionPosition = {
    'top-left': { overlayX: 'start', overlayY: 'bottom', offsetY: -10 },
    'top-center': { overlayX: 'center', overlayY: 'bottom', offsetY: -10 },
    'top-right': { overlayX: 'end', overlayY: 'bottom', offsetY: -10 },
    'right-top': { overlayX: 'start', overlayY: 'top', offsetX: 10 },
    'right-center': { overlayX: 'start', overlayY: 'center', offsetX: 10 },
    'right-bottom': { overlayX: 'start', overlayY: 'bottom', offsetX: 10 },
    'bottom-right': { overlayX: 'end', overlayY: 'top', offsetY: 10 },
    'bottom-center': { overlayX: 'center', overlayY: 'top', offsetY: 10 },
    'bottom-left': { overlayX: 'start', overlayY: 'top', offsetY: 10 },
    'left-bottom': { overlayX: 'end', overlayY: 'bottom', offsetX: -10 },
    'left-center': { overlayX: 'end', overlayY: 'center', offsetX: -10 },
    'left-top': { overlayX: 'end', overlayY: 'top', offsetX: -10 },
};
const rdsTooltipPositionToRdsTooltipOverlayConnectionPositionWithIcon = {
    'top-left': { overlayX: 'start', overlayY: 'bottom', offsetY: -4 },
    'top-center': { overlayX: 'center', overlayY: 'bottom', offsetY: -4 },
    'top-right': { overlayX: 'end', overlayY: 'bottom', offsetY: -4 },
    'right-top': { overlayX: 'start', overlayY: 'top', offsetX: 4 },
    'right-center': { overlayX: 'start', overlayY: 'center', offsetX: 4 },
    'right-bottom': { overlayX: 'start', overlayY: 'bottom', offsetX: 4 },
    'bottom-right': { overlayX: 'end', overlayY: 'top', offsetY: 4 },
    'bottom-center': { overlayX: 'center', overlayY: 'top', offsetY: 4 },
    'bottom-left': { overlayX: 'start', overlayY: 'top', offsetY: 4 },
    'left-bottom': { overlayX: 'end', overlayY: 'bottom', offsetX: -4 },
    'left-center': { overlayX: 'end', overlayY: 'center', offsetX: -4 },
    'left-top': { overlayX: 'end', overlayY: 'top', offsetX: -4 },
};
const rdsTooltipPositionToOriginConnectionPosition = {
    'top-left': { originX: 'start', originY: 'top' },
    'top-center': { originX: 'center', originY: 'top' },
    'top-right': { originX: 'end', originY: 'top' },
    'right-top': { originX: 'end', originY: 'top' },
    'right-center': { originX: 'end', originY: 'center' },
    'right-bottom': { originX: 'end', originY: 'bottom' },
    'bottom-right': { originX: 'end', originY: 'bottom' },
    'bottom-center': { originX: 'center', originY: 'bottom' },
    'bottom-left': { originX: 'start', originY: 'bottom' },
    'left-bottom': { originX: 'start', originY: 'bottom' },
    'left-center': { originX: 'start', originY: 'center' },
    'left-top': { originX: 'start', originY: 'top' },
};
export class RdsTooltipDirective {
    set hideArrow(shouldHideArrow) {
        if (shouldHideArrow === null || shouldHideArrow === undefined) {
            this._hideArrow = null;
        }
        else {
            this._hideArrow = booleanAttribute(shouldHideArrow);
        }
    }
    get hideArrow() {
        return this._hideArrow !== null
            ? this._hideArrow
            : this.defaultOptions?.hideArrow || false;
    }
    get position() {
        return this._position;
    }
    set position(value) {
        if (value !== this._position) {
            this._position = value;
            if (this._overlayRef) {
                this.updatePosition();
                if (this._tooltipInstance) {
                    this._tooltipInstance.show();
                }
                this._overlayRef.updatePosition();
            }
        }
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        if (this._disabled) {
            this.hide(0);
        }
        else {
            this.setupPointerEnterEventsIfNeeded();
        }
    }
    get disabled() {
        return this._disabled;
    }
    get content() {
        return this._content;
    }
    set content(value) {
        this.ariaDescriber.removeDescription(this.elementRef.nativeElement, this.tooltipDescription);
        this._content = value;
        if (!this._content && this.isTooltipVisible()) {
            this.hide(0);
        }
        else {
            this.setupPointerEnterEventsIfNeeded();
            this.updateTooltipContent();
            this.ngZone.runOutsideAngular(() => {
                // The `AriaDescriber` has some functionality that avoids adding a description if it's the
                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger
                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the
                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.
                Promise.resolve().then(() => {
                    this.ariaDescriber.describe(this.elementRef.nativeElement, this.tooltipDescription);
                });
            });
        }
    }
    get tooltipClass() {
        return this._tooltipClass;
    }
    set tooltipClass(value) {
        this._tooltipClass = value;
        if (this._tooltipInstance) {
            if (this.shouldHideArrow()) {
                this._tooltipClass = 'rds-tooltip--hide-arrow';
            }
            this.setTooltipClassIfTooltipInstanceExists(this._tooltipClass);
        }
    }
    get tooltipDescription() {
        return this.ariaDescription
            ? this.ariaDescription
            : typeof this.content === 'string'
                ? this.content
                : '';
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set hasBackdrop(v) {
        const newValue = booleanAttribute(v);
        if (newValue !== this._hasBackdrop) {
            this._hasBackdrop = newValue;
            // whole overlay has to be recreated
            if (this._overlayRef) {
                this._overlayRef.dispose();
                this._overlayRef = null;
                this._tooltipInstance = null;
            }
        }
    }
    get showCloseButton() {
        return this._showCloseButton;
    }
    set showCloseButton(v) {
        this._showCloseButton = booleanAttribute(v);
    }
    constructor() {
        this.overlay = inject(Overlay);
        this.elementRef = inject(ElementRef);
        this.scrollDispatcher = inject(ScrollDispatcher);
        this.viewContainerRef = inject(ViewContainerRef);
        this.ngZone = inject(NgZone);
        this.platform = inject(Platform);
        this.ariaDescriber = inject(AriaDescriber);
        this.renderer = inject(Renderer2);
        this.destroyRef = inject(DestroyRef);
        this.focusMonitor = inject(FocusMonitor);
        this.scrollStrategy = inject(RDS_TOOLTIP_SCROLL_STRATEGY);
        this.defaultOptions = inject(RDS_TOOLTIP_DEFAULT_OPTIONS, {
            optional: true,
        });
        this.document = inject(DOCUMENT);
        this.isPopover = false;
        this._hasBackdrop = false;
        this._showCloseButton = true;
        /** Manually-bound passive event listeners. */
        this._passiveListeners = [];
        this._disabled = false;
        this._viewInitialized = false;
        this._pointerExitEventsInitialized = false;
        this._content = '';
        this._position = 'bottom-center';
        this.ariaDescription = '';
        this._hideArrow = null;
        /**
         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive
         * uses a long press gesture to show and hide, however it can conflict with the native browser
         * gestures. To work around the conflict, Angular Material disables native gestures on the
         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable
         * elements). The different values for this option configure the touch event handling as follows:
         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native
         *   browser gestures on particular elements. In particular, it allows text selection on inputs
         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.
         * - `on` - Enables touch gestures for all elements and disables native
         *   browser gestures with no exceptions.
         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from
         *   showing on touch devices.
         */
        this.touchGestures = 'auto';
        this.ariaControls = null;
        this.ariaExpanded = null;
        this.handleHostKeydown = (event) => {
            if (this.isTooltipVisible() &&
                event.keyCode === ESCAPE &&
                !hasModifierKey(event)) {
                event.preventDefault();
                event.stopPropagation();
                this.ngZone.run(() => this.hide(0));
            }
        };
        if (this.defaultOptions) {
            if (this.defaultOptions.position) {
                this.position = this.defaultOptions.position;
            }
            if (this.defaultOptions.touchGestures) {
                this.touchGestures = this.defaultOptions.touchGestures;
            }
            if (this.defaultOptions.showDelay) {
                this.showDelay = this.defaultOptions.showDelay;
            }
            if (this.defaultOptions.hideDelay) {
                this.hideDelay = this.defaultOptions.hideDelay;
            }
        }
        this.ngZone.runOutsideAngular(() => {
            this.elementRef.nativeElement.addEventListener('keydown', this.handleHostKeydown);
        });
    }
    ngAfterViewInit() {
        this._viewInitialized = true;
        this.setupPointerEnterEventsIfNeeded();
        this.setupFocusMonitor();
    }
    ngOnDestroy() {
        const nativeElement = this.elementRef.nativeElement;
        clearTimeout(this._touchstartTimeout);
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._tooltipInstance = null;
        }
        // Clean up the event listeners set in the constructor
        nativeElement.removeEventListener('keydown', this.handleHostKeydown);
        this._passiveListeners.forEach(([event, listener]) => {
            nativeElement.removeEventListener(event, listener, passiveListenerOptions);
        });
        this._passiveListeners.length = 0;
        this.ariaDescriber.removeDescription(nativeElement, this.tooltipDescription);
        this.focusMonitor.stopMonitoring(nativeElement);
    }
    show(delay = this.showDelay) {
        if (this.disabled ||
            !this.content ||
            (this.isTooltipVisible() &&
                !this._tooltipInstance?._showTimeout &&
                !this._tooltipInstance?._hideTimeout)) {
            return;
        }
        const overlayRef = this.createOverlay();
        this.detachTooltip();
        this._portal =
            this._portal ||
                new ComponentPortal(RdsTooltipComponent, this.viewContainerRef);
        this._tooltipInstance = overlayRef.attach(this._portal).instance;
        this._tooltipInstance._position = this.position;
        this._tooltipInstance.isPopover = this.isPopover;
        if (this.isPopover) {
            this._tooltipInstance.triggerDirectiveRef = this;
            this._tooltipInstance.role = 'dialog';
            this._tooltipInstance.isModal = this.hasBackdrop;
            this._tooltipInstance.showCloseButton = this.showCloseButton;
            this.ariaControls = this._tooltipInstance.id;
            this.ariaExpanded = true;
        }
        if (this.shouldHideArrow()) {
            this._tooltipInstance._tooltipArrow = true;
        }
        this._tooltipInstance
            .afterHidden()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.detachTooltip();
            if (this.isPopover) {
                this.restoreTriggerFocus();
            }
        });
        this.setTooltipClassIfTooltipInstanceExists(this._tooltipClass);
        this.updateTooltipContent();
        this._tooltipInstance.show(delay);
        this.handleFocus();
    }
    /**
     * Hides the tooltip
     * @param delay ms
     */
    hide(delay = this.hideDelay) {
        if (this._tooltipInstance) {
            this._tooltipInstance.hide(delay);
        }
        if (this.isPopover) {
            this.ariaControls = null;
            this.ariaExpanded = false;
        }
    }
    /**
     * Shows/hides tooltip
     */
    toggle() {
        this.isTooltipVisible() ? this.hide() : this.show();
    }
    isHideArrowSet() {
        return this._hideArrow !== null && this._hideArrow !== undefined;
    }
    isTooltipVisible() {
        return !!this._tooltipInstance && this._tooltipInstance.isVisible();
    }
    createOverlay() {
        if (this._overlayRef) {
            return this._overlayRef;
        }
        const scrollableAncestors = this.scrollDispatcher.getAncestorScrollContainers(this.elementRef);
        // Create connected position strategy that listens for scroll events to reposition.
        const strategy = this.overlay
            .position()
            .flexibleConnectedTo(this.elementRef)
            .withTransformOriginOn('.rds-tooltip')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withScrollableContainers(scrollableAncestors);
        strategy.positionChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((change) => {
            if (this._tooltipInstance) {
                this.ngZone.run(() => this.updateTooltipStyling(change.connectionPair));
                if (change.scrollableViewProperties.isOverlayClipped &&
                    this._tooltipInstance.isVisible()) {
                    // After position changes occur and the overlay is clipped by
                    // a parent scrollable then close the tooltip.
                    this.ngZone.run(() => this.hide(0));
                }
            }
        });
        this._overlayRef = this.overlay.create({
            positionStrategy: strategy,
            panelClass: 'rds-tooltip-panel',
            scrollStrategy: this.scrollStrategy(),
            backdropClass: 'cdk-overlay-transparent-backdrop',
            hasBackdrop: this.isPopover && this.hasBackdrop,
        });
        this.updatePosition();
        this._overlayRef
            .keydownEvents()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(this.handleHostKeydown);
        this._overlayRef
            .backdropClick()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.hide());
        this._overlayRef
            .detachments()
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            this.detachTooltip();
        });
        return this._overlayRef;
    }
    // for override by popover
    handleFocus() {
        return;
    }
    updateTooltipStyling(connectionPair) {
        if (!this._tooltipInstance) {
            return;
        }
        const xRename = { start: 'left', center: 'center', end: 'right' };
        const originX = xRename[connectionPair.originX];
        const originY = connectionPair.originY;
        const isYFirst = connectionPair.originX === connectionPair.overlayX;
        const newPosition = (isYFirst ? `${originY}-${originX}` : `${originX}-${originY}`);
        if (newPosition !== this._tooltipInstance._position) {
            this._tooltipInstance._position = newPosition;
            this._tooltipInstance._markForCheck();
        }
    }
    restoreTriggerFocus() {
        this.focusMonitor.focusVia(this.elementRef, this.origin);
    }
    detachTooltip() {
        if (this._overlayRef && this._overlayRef.hasAttached()) {
            this._overlayRef.detach();
        }
        this._tooltipInstance = null;
    }
    updatePosition() {
        const position = this._overlayRef?.getConfig()
            .positionStrategy;
        const origin = this.getOrigin();
        const overlay = this.getOverlayPosition();
        if (this.position && this._tooltipInstance) {
            this._tooltipInstance._position = this.position;
        }
        position.withPositions([
            { ...origin.main, ...overlay.main },
            { ...origin.fallback, ...overlay.fallback },
        ]);
    }
    getOrigin() {
        const originPosition = rdsTooltipPositionToOriginConnectionPosition[this.position];
        const { x, y } = this.invertPosition(originPosition.originX, originPosition.originY);
        return {
            main: originPosition,
            fallback: { originX: x, originY: y },
        };
    }
    getOverlayPosition() {
        const overlayPosition = this.shouldHideArrow()
            ? rdsTooltipPositionToRdsTooltipOverlayConnectionPositionWithIcon[this.position]
            : rdsTooltipPositionToRdsTooltipOverlayConnectionPosition[this.position];
        const { x, y } = this.invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);
        return {
            main: overlayPosition,
            fallback: {
                overlayX: x,
                overlayY: y,
                ...this.invertOffset(overlayPosition),
            },
        };
    }
    updateTooltipContent() {
        if (this._tooltipInstance) {
            this._tooltipInstance._content = this.content;
            this._tooltipInstance._markForCheck();
            this.ngZone.onMicrotaskEmpty
                .pipe(take(1), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                if (this._tooltipInstance) {
                    this._overlayRef?.updatePosition();
                }
                const overlayTemplate = this._overlayRef?.hostElement;
                const header = overlayTemplate?.querySelector('.rds-popover-header');
                if (header && this.showCloseButton) {
                    this.renderer.addClass(header, 'rds-popover-with-close-button');
                }
            });
        }
    }
    setTooltipClassIfTooltipInstanceExists(tooltipClass) {
        if (this._tooltipInstance) {
            this._tooltipInstance._tooltipClass = tooltipClass;
            this._tooltipInstance._markForCheck();
        }
    }
    invertPosition(x, y) {
        if (this.position.startsWith('top') || this.position.startsWith('bottom')) {
            if (y === 'top') {
                y = 'bottom';
            }
            else if (y === 'bottom') {
                y = 'top';
            }
        }
        else {
            if (x === 'end') {
                x = 'start';
            }
            else if (x === 'start') {
                x = 'end';
            }
        }
        return { x, y };
    }
    invertOffset({ offsetX, offsetY, }) {
        const result = {};
        if (offsetX) {
            result.offsetX = offsetX * -1;
        }
        if (offsetY) {
            result.offsetY = offsetY * -1;
        }
        return result;
    }
    setupFocusMonitor() {
        this.focusMonitor
            .monitor(this.elementRef)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((origin) => {
            if (this.isPopover) {
                this.origin = origin;
                return;
            }
            // Note that the focus monitor runs outside the Angular zone.
            if (!origin) {
                this.ngZone.run(() => this.hide(0));
            }
            else if (origin === 'keyboard') {
                this.ngZone.run(() => this.show());
            }
        });
    }
    setupPointerEnterEventsIfNeeded() {
        if (this.isPopover ||
            this._disabled ||
            !this.content ||
            !this._viewInitialized ||
            this._passiveListeners.length) {
            return;
        }
        if (this.platformSupportsMouseEvents()) {
            this._passiveListeners.push([
                'mouseenter',
                () => {
                    this.setupPointerExitEventsIfNeeded();
                    this.show();
                },
            ]);
        }
        else if (this.touchGestures !== 'off') {
            this.disableNativeGestures();
            this._passiveListeners.push([
                'touchstart',
                () => {
                    this.setupPointerExitEventsIfNeeded();
                    clearTimeout(this._touchstartTimeout);
                    this._touchstartTimeout = setTimeout(() => this.show(), PRESS_DELAY);
                },
            ]);
        }
        this.addListeners(this._passiveListeners);
    }
    setupPointerExitEventsIfNeeded() {
        if (this._pointerExitEventsInitialized) {
            return;
        }
        this._pointerExitEventsInitialized = true;
        const exitListeners = [];
        if (this.platformSupportsMouseEvents()) {
            exitListeners.push(['mouseleave', () => this.hide()], ['wheel', (event) => this.wheelListener(event)]);
        }
        else if (this.touchGestures !== 'off') {
            this.disableNativeGestures();
            const touchendListener = () => {
                clearTimeout(this._touchstartTimeout);
                this.hide(this.defaultOptions?.touchendHideDelay);
            };
            exitListeners.push(['touchend', touchendListener], ['touchcancel', touchendListener]);
        }
        this.addListeners(exitListeners);
        this._passiveListeners.push(...exitListeners);
    }
    addListeners(listeners) {
        listeners.forEach(([event, listener]) => {
            this.elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);
        });
    }
    platformSupportsMouseEvents() {
        return !this.platform.IOS && !this.platform.ANDROID;
    }
    wheelListener(event) {
        if (this.isTooltipVisible()) {
            const doc = this.document || document;
            const elementUnderPointer = doc.elementFromPoint(event.clientX, event.clientY);
            const element = this.elementRef.nativeElement;
            // On non-touch devices we depend on the `mouseleave` event to close the tooltip, but it
            // won't fire if the user scrolls away using the wheel without moving their cursor. We
            // work around it by finding the element under the user's cursor and closing the tooltip
            // if it's not the trigger.
            if (elementUnderPointer !== element &&
                !element.contains(elementUnderPointer)) {
                this.hide();
            }
        }
    }
    disableNativeGestures() {
        const element = this.elementRef.nativeElement;
        const style = element.style;
        // If gestures are set to `auto`, we don't disable text selection on inputs and
        // textareas, because it prevents the user from typing into them on iOS Safari.
        if (this.touchGestures === 'on' ||
            (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {
            style.userSelect =
                style.msUserSelect =
                    style.webkitUserSelect =
                        style.MozUserSelect =
                            'none';
        }
        // If we have `auto` this.touchGestures and the element uses native HTML dragging,
        // we don't set `-webkit-user-drag` because it prevents the native behavior.
        if (this.touchGestures === 'on' || !element.draggable) {
            style.webkitUserDrag = 'none';
        }
        style.touchAction = 'none';
        style.webkitTapHighlightColor = 'transparent';
    }
    shouldHideArrow() {
        return this.isHideArrowSet()
            ? this.hideArrow
            : this.elementRef.nativeElement.tagName.toUpperCase() === 'RDS-ICON' ||
                this.elementRef.nativeElement.hasAttribute('rds-icon-button') ||
                this.elementRef.nativeElement.hasAttribute('rdsiconbutton');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsTooltipDirective, selector: "[rdsTooltip], [rds-tooltip]", inputs: { ariaDescription: ["rdsTooltipAriaDescription", "ariaDescription"], showDelay: ["rdsTooltipShowDelay", "showDelay", numberAttribute], hideDelay: ["rdsTooltipHideDelay", "hideDelay", numberAttribute], hideArrow: ["rdsTooltipHideArrow", "hideArrow"], touchGestures: ["rdsTooltipTouchGestures", "touchGestures"], position: ["rdsTooltipPosition", "position"], disabled: ["rdsTooltipDisabled", "disabled"], content: ["rdsTooltip", "content"], tooltipClass: ["rdsTooltipClass", "tooltipClass"] }, host: { properties: { "attr.aria-controls": "this.ariaControls", "attr.aria-expanded": "this.ariaExpanded" } }, exportAs: ["rdsTooltip"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsTooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsTooltip], [rds-tooltip]',
                    exportAs: 'rdsTooltip',
                }]
        }], ctorParameters: () => [], propDecorators: { ariaDescription: [{
                type: Input,
                args: ['rdsTooltipAriaDescription']
            }], showDelay: [{
                type: Input,
                args: [{ alias: 'rdsTooltipShowDelay', transform: numberAttribute }]
            }], hideDelay: [{
                type: Input,
                args: [{ alias: 'rdsTooltipHideDelay', transform: numberAttribute }]
            }], hideArrow: [{
                type: Input,
                args: ['rdsTooltipHideArrow']
            }], touchGestures: [{
                type: Input,
                args: ['rdsTooltipTouchGestures']
            }], position: [{
                type: Input,
                args: ['rdsTooltipPosition']
            }], disabled: [{
                type: Input,
                args: ['rdsTooltipDisabled']
            }], content: [{
                type: Input,
                args: ['rdsTooltip']
            }], tooltipClass: [{
                type: Input,
                args: ['rdsTooltipClass']
            }], ariaControls: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }] } });
//# sourceMappingURL=data:application/json;base64,