import { FocusMonitor } from '@angular/cdk/a11y';
import { ContentObserver } from '@angular/cdk/observers';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, DestroyRef, ElementRef, HostBinding, inject, Input, numberAttribute, } from '@angular/core';
import { RouterLink } from '@angular/router';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
export class RdsLinkComponent {
    get hostClasses() {
        const classes = ['rds-link'];
        if (this.standalone) {
            classes.push(`rds-link--${this.type}`, `rds-link-${this.size}`);
        }
        else if (this.elementRef) {
            classes.push(`rds-link-inline`);
        }
        return classes;
    }
    get hasFirstIcon() {
        return (this.elementRef?.nativeElement.firstChild?.tagName?.toUpperCase() ===
            'RDS-ICON');
    }
    get hasLastIcon() {
        return (this.elementRef?.nativeElement.lastChild?.tagName?.toUpperCase() ===
            'RDS-ICON');
    }
    set standalone(isStandalone) {
        this._standalone = booleanAttribute(isStandalone);
    }
    get standalone() {
        return (this._standalone ||
            this.elementRef.nativeElement.tagName === 'BUTTON' ||
            this.hasFirstIcon ||
            this.hasLastIcon);
    }
    get attrDisabled() {
        return this.disabled ? this.disabled : null;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.contentObserver = inject(ContentObserver);
        this.routerLink = inject(RouterLink, { optional: true });
        this._standalone = false;
        this.active = false;
        this.disabled = false;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.type = 'primary';
        this.size = 'l';
        this._preventDisabledLinkClick();
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, true);
        this.contentObserver
            .observe(this.elementRef.nativeElement)
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.cdr?.markForCheck());
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    _preventDisabledLinkClick() {
        const link = this.routerLink;
        if (link) {
            const onClick = link.onClick;
            link.onClick = (...args) => {
                if (this.disabled) {
                    return !this.routerLink;
                }
                else {
                    return onClick.apply(link, args);
                }
            };
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsLinkComponent, isStandalone: true, selector: "a[rds-link], a[rdsLink], button[rds-link], button[rdsLink]", inputs: { standalone: "standalone", active: ["active", "active", booleanAttribute], disabled: ["disabled", "disabled", booleanAttribute], tabIndex: "tabIndex", type: "type", size: "size" }, host: { properties: { "class": "this.hostClasses", "class.rds-link-before-icon": "this.hasFirstIcon", "class.rds-link-after-icon": "this.hasLastIcon", "class.rds-link-standalone": "this.standalone", "class.rds-link--active": "this.active", "attr.disabled": "this.attrDisabled", "attr.aria-disabled": "this.disabled", "tabIndex": "this.tabIndex" } }, ngImport: i0, template: '<ng-content/>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsLinkComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'a[rds-link], a[rdsLink], button[rds-link], button[rdsLink]',
                    template: '<ng-content/>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                }]
        }], ctorParameters: () => [], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], hasFirstIcon: [{
                type: HostBinding,
                args: ['class.rds-link-before-icon']
            }], hasLastIcon: [{
                type: HostBinding,
                args: ['class.rds-link-after-icon']
            }], standalone: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.rds-link-standalone']
            }], active: [{
                type: HostBinding,
                args: ['class.rds-link--active']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }], disabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input
            }], type: [{
                type: Input
            }], size: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,