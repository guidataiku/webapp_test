import { booleanAttribute, ContentChildren, Directive, HostBinding, Input, QueryList, } from '@angular/core';
import { FocusKeyManager } from '@angular/cdk/a11y';
import { startWith } from 'rxjs/operators';
import { RDS_ACCORDION, } from './accordion-base';
import { RdsExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { Subject } from 'rxjs';
import { CdkAccordion } from '@angular/cdk/accordion';
import * as i0 from "@angular/core";
let nextId = 0;
export class RdsAccordionDirective extends CdkAccordion {
    constructor() {
        super(...arguments);
        this._stateChanges = new Subject();
        this._openCloseAllActions = new Subject();
        this.id = `rds-accordion-${nextId++}`;
        this._ownHeaders = new QueryList();
        this.size = 'm';
        this.togglePosition = 'after';
    }
    get class() {
        return ['rds-accordion', `rds-accordion-size-${this.size}`];
    }
    ngAfterContentInit() {
        this._headers.changes
            .pipe(startWith(this._headers))
            .subscribe((headers) => {
            this._ownHeaders.reset(headers.filter((header) => header.panel.accordion === this));
            this._ownHeaders.notifyOnChanges();
        });
        this._keyManager = new FocusKeyManager(this._ownHeaders)
            .withWrap()
            .withHomeAndEnd();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._ownHeaders.destroy();
    }
    _handleHeaderKeydown(event) {
        this._keyManager.onKeydown(event);
    }
    _handleHeaderFocus(header) {
        this._keyManager.updateActiveItem(header);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsAccordionDirective, selector: "rds-accordion", inputs: { size: "size", multi: ["multi", "multi", booleanAttribute], togglePosition: "togglePosition" }, host: { properties: { "class": "this.class", "class.rds-accordion-multi": "this.multi" } }, providers: [
            {
                provide: RDS_ACCORDION,
                useExisting: RdsAccordionDirective,
            },
        ], queries: [{ propertyName: "_headers", predicate: RdsExpansionPanelHeaderComponent, descendants: true }], exportAs: ["rdsAccordion"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsAccordionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-accordion',
                    exportAs: 'rdsAccordion',
                    providers: [
                        {
                            provide: RDS_ACCORDION,
                            useExisting: RdsAccordionDirective,
                        },
                    ],
                }]
        }], propDecorators: { _headers: [{
                type: ContentChildren,
                args: [RdsExpansionPanelHeaderComponent, { descendants: true }]
            }], size: [{
                type: Input
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], multi: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.rds-accordion-multi']
            }], togglePosition: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvYWNjb3JkaW9uL2FjY29yZGlvbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLGdCQUFnQixFQUNoQixlQUFlLEVBQ2YsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBRUwsU0FBUyxHQUVWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUNMLGFBQWEsR0FJZCxNQUFNLGtCQUFrQixDQUFDO0FBQzFCLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ3RGLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQUV0RCxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFZZixNQUFNLE9BQU8scUJBQ1gsU0FBUSxZQUFZO0lBWHRCOztRQWNvQixrQkFBYSxHQUFHLElBQUksT0FBTyxFQUFpQixDQUFDO1FBQzdDLHlCQUFvQixHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFDOUMsT0FBRSxHQUFHLGlCQUFpQixNQUFNLEVBQUUsRUFBRSxDQUFDO1FBQzNDLGdCQUFXLEdBQUcsSUFBSSxTQUFTLEVBQW9DLENBQUM7UUFPeEUsU0FBSSxHQUFxQixHQUFHLENBQUM7UUFVcEIsbUJBQWMsR0FBK0IsT0FBTyxDQUFDO0tBNkIvRDtJQXJDQyxJQUEwQixLQUFLO1FBQzdCLE9BQU8sQ0FBQyxlQUFlLEVBQUUsc0JBQXNCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFRRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPO2FBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQzlCLFNBQVMsQ0FBQyxDQUFDLE9BQW9ELEVBQUUsRUFBRTtZQUNsRSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FDcEIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLEtBQUssSUFBSSxDQUFDLENBQzVELENBQUM7WUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3JDLENBQUMsQ0FBQyxDQUFDO1FBRUwsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDO2FBQ3JELFFBQVEsRUFBRTthQUNWLGNBQWMsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFUSxXQUFXO1FBQ2xCLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxLQUFvQjtRQUN2QyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsa0JBQWtCLENBQUMsTUFBd0M7UUFDekQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxDQUFDOzhHQXBEVSxxQkFBcUI7a0dBQXJCLHFCQUFxQiwrRUFvQlosZ0JBQWdCLDhJQTNCekI7WUFDVDtnQkFDRSxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsV0FBVyxFQUFFLHFCQUFxQjthQUNuQztTQUNGLG1EQVlnQixnQ0FBZ0M7OzJGQVZ0QyxxQkFBcUI7a0JBVmpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxjQUFjO29CQUN4QixTQUFTLEVBQUU7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGFBQWE7NEJBQ3RCLFdBQVcsdUJBQXVCO3lCQUNuQztxQkFDRjtpQkFDRjs4QkFZQyxRQUFRO3NCQURQLGVBQWU7dUJBQUMsZ0NBQWdDLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO2dCQUl4RSxJQUFJO3NCQURILEtBQUs7Z0JBR29CLEtBQUs7c0JBQTlCLFdBQVc7dUJBQUMsT0FBTztnQkFNWCxLQUFLO3NCQUZiLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7O3NCQUNyQyxXQUFXO3VCQUFDLDJCQUEyQjtnQkFHL0IsY0FBYztzQkFBdEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyQ29udGVudEluaXQsXG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRGlyZWN0aXZlLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgUXVlcnlMaXN0LFxuICBTaW1wbGVDaGFuZ2VzLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvY3VzS2V5TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9hMTF5JztcbmltcG9ydCB7IHN0YXJ0V2l0aCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7XG4gIFJEU19BQ0NPUkRJT04sXG4gIFJkc0FjY29yZGlvbkJhc2UsXG4gIFJkc0FjY29yZGlvblNpemUsXG4gIFJkc0FjY29yZGlvblRvZ2dsZVBvc2l0aW9uLFxufSBmcm9tICcuL2FjY29yZGlvbi1iYXNlJztcbmltcG9ydCB7IFJkc0V4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50IH0gZnJvbSAnLi9leHBhbnNpb24tcGFuZWwtaGVhZGVyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDZGtBY2NvcmRpb24gfSBmcm9tICdAYW5ndWxhci9jZGsvYWNjb3JkaW9uJztcblxubGV0IG5leHRJZCA9IDA7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ3Jkcy1hY2NvcmRpb24nLFxuICBleHBvcnRBczogJ3Jkc0FjY29yZGlvbicsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJEU19BQ0NPUkRJT04sXG4gICAgICB1c2VFeGlzdGluZzogUmRzQWNjb3JkaW9uRGlyZWN0aXZlLFxuICAgIH0sXG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIFJkc0FjY29yZGlvbkRpcmVjdGl2ZVxuICBleHRlbmRzIENka0FjY29yZGlvblxuICBpbXBsZW1lbnRzIFJkc0FjY29yZGlvbkJhc2UsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveVxue1xuICBvdmVycmlkZSByZWFkb25seSBfc3RhdGVDaGFuZ2VzID0gbmV3IFN1YmplY3Q8U2ltcGxlQ2hhbmdlcz4oKTtcbiAgb3ZlcnJpZGUgcmVhZG9ubHkgX29wZW5DbG9zZUFsbEFjdGlvbnMgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuICBvdmVycmlkZSByZWFkb25seSBpZCA9IGByZHMtYWNjb3JkaW9uLSR7bmV4dElkKyt9YDtcbiAgcHJpdmF0ZSBfb3duSGVhZGVycyA9IG5ldyBRdWVyeUxpc3Q8UmRzRXhwYW5zaW9uUGFuZWxIZWFkZXJDb21wb25lbnQ+KCk7XG4gIHByaXZhdGUgX2tleU1hbmFnZXI6IEZvY3VzS2V5TWFuYWdlcjxSZHNFeHBhbnNpb25QYW5lbEhlYWRlckNvbXBvbmVudD47XG5cbiAgQENvbnRlbnRDaGlsZHJlbihSZHNFeHBhbnNpb25QYW5lbEhlYWRlckNvbXBvbmVudCwgeyBkZXNjZW5kYW50czogdHJ1ZSB9KVxuICBfaGVhZGVyczogUXVlcnlMaXN0PFJkc0V4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50PjtcblxuICBASW5wdXQoKVxuICBzaXplOiBSZHNBY2NvcmRpb25TaXplID0gJ20nO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKSBnZXQgY2xhc3MoKTogc3RyaW5nW10ge1xuICAgIHJldHVybiBbJ3Jkcy1hY2NvcmRpb24nLCBgcmRzLWFjY29yZGlvbi1zaXplLSR7dGhpcy5zaXplfWBdO1xuICB9XG5cbiAgQElucHV0KHsgdHJhbnNmb3JtOiBib29sZWFuQXR0cmlidXRlIH0pXG4gIEBIb3N0QmluZGluZygnY2xhc3MucmRzLWFjY29yZGlvbi1tdWx0aScpXG4gIG92ZXJyaWRlIG11bHRpOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIHRvZ2dsZVBvc2l0aW9uOiBSZHNBY2NvcmRpb25Ub2dnbGVQb3NpdGlvbiA9ICdhZnRlcic7XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX2hlYWRlcnMuY2hhbmdlc1xuICAgICAgLnBpcGUoc3RhcnRXaXRoKHRoaXMuX2hlYWRlcnMpKVxuICAgICAgLnN1YnNjcmliZSgoaGVhZGVyczogUXVlcnlMaXN0PFJkc0V4cGFuc2lvblBhbmVsSGVhZGVyQ29tcG9uZW50PikgPT4ge1xuICAgICAgICB0aGlzLl9vd25IZWFkZXJzLnJlc2V0KFxuICAgICAgICAgIGhlYWRlcnMuZmlsdGVyKChoZWFkZXIpID0+IGhlYWRlci5wYW5lbC5hY2NvcmRpb24gPT09IHRoaXMpLFxuICAgICAgICApO1xuICAgICAgICB0aGlzLl9vd25IZWFkZXJzLm5vdGlmeU9uQ2hhbmdlcygpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLl9rZXlNYW5hZ2VyID0gbmV3IEZvY3VzS2V5TWFuYWdlcih0aGlzLl9vd25IZWFkZXJzKVxuICAgICAgLndpdGhXcmFwKClcbiAgICAgIC53aXRoSG9tZUFuZEVuZCgpO1xuICB9XG5cbiAgb3ZlcnJpZGUgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcbiAgICB0aGlzLl9vd25IZWFkZXJzLmRlc3Ryb3koKTtcbiAgfVxuXG4gIF9oYW5kbGVIZWFkZXJLZXlkb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fa2V5TWFuYWdlci5vbktleWRvd24oZXZlbnQpO1xuICB9XG5cbiAgX2hhbmRsZUhlYWRlckZvY3VzKGhlYWRlcjogUmRzRXhwYW5zaW9uUGFuZWxIZWFkZXJDb21wb25lbnQpOiB2b2lkIHtcbiAgICB0aGlzLl9rZXlNYW5hZ2VyLnVwZGF0ZUFjdGl2ZUl0ZW0oaGVhZGVyKTtcbiAgfVxufVxuIl19