import { FocusMonitor } from '@angular/cdk/a11y';
import { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';
import { Attribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, HostBinding, HostListener, inject, Input, numberAttribute, ViewEncapsulation, } from '@angular/core';
import { EMPTY, merge, Subscription } from 'rxjs';
import { filter } from 'rxjs/operators';
import { rdsExpansionAnimations } from './expansion.animations';
import { RdsExpansionPanelComponent } from './expansion-panel.component';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "../icons/icon.component";
export class RdsExpansionPanelHeaderComponent {
    get attrId() {
        return this.panel._headerId;
    }
    get attrDisabled() {
        return this.panel.disabled;
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get disabled() {
        return this.panel.disabled;
    }
    get _isExpanded() {
        return this.panel.expanded;
    }
    get _getPanelId() {
        return this.panel.id;
    }
    get _isAfterTogglePosition() {
        return this.panel.togglePosition === 'after';
    }
    get _isBeforeTogglePosition() {
        return this.panel.togglePosition === 'before';
    }
    constructor(tabIndex) {
        this.panel = inject(RdsExpansionPanelComponent, { host: true });
        this.element = inject(ElementRef);
        this.focusMonitor = inject(FocusMonitor);
        this.cdr = inject(ChangeDetectorRef);
        this._parentChangeSubscription = Subscription.EMPTY;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this.class = 'rds-expansion-panel-header rds-focus-indicator';
        this.role = 'button';
        const accordionHideToggleChange = this.panel.accordion
            ? this.panel.accordion._stateChanges.pipe(filter((changes) => !!changes['togglePosition']))
            : EMPTY;
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
        this._parentChangeSubscription = merge(this.panel.opened, this.panel.closed, accordionHideToggleChange, this.panel._inputChanges.pipe(filter((changes) => {
            return !!(changes['disabled'] || changes['togglePosition']);
        }))).subscribe(() => this.cdr.markForCheck());
        this.panel.closed
            .pipe(filter(() => this.panel._containsFocus()))
            .subscribe(() => this.focusMonitor.focusVia(this.element, 'program'));
    }
    _toggle() {
        if (!this.disabled) {
            this.panel.toggle();
        }
    }
    _keydown(event) {
        switch (event.keyCode) {
            case SPACE:
            case ENTER:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this._toggle();
                }
                break;
            default:
                if (this.panel.accordion) {
                    this.panel.accordion._handleHeaderKeydown(event);
                }
                return;
        }
    }
    focus(origin, options) {
        if (origin) {
            this.focusMonitor.focusVia(this.element, origin, options);
        }
        else {
            this.element.nativeElement.focus(options);
        }
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.element).subscribe((origin) => {
            if (origin && this.panel.accordion) {
                this.panel.accordion._handleHeaderFocus(this);
            }
        });
    }
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
        this.focusMonitor.stopMonitoring(this.element);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelHeaderComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsExpansionPanelHeaderComponent, selector: "rds-expansion-panel-header", inputs: { tabIndex: "tabIndex" }, host: { listeners: { "click": "_toggle()", "keydown": "_keydown($event)" }, properties: { "class": "this.class", "attr.role": "this.role", "attr.id": "this.attrId", "attr.aria-disabled": "this.attrDisabled", "tabIndex": "this.tabIndex", "attr.aria-expanded": "this._isExpanded", "class.rds-expanded": "this._isExpanded", "attr.aria-controls": "this._getPanelId", "class.rds-expansion-toggle-indicator-after": "this._isAfterTogglePosition", "class.rds-expansion-toggle-indicator-before": "this._isBeforeTogglePosition" } }, ngImport: i0, template: `<span class="rds-content">
      <ng-content select="rds-panel-title" />
      <ng-content />
    </span>
    <rds-icon
      [@indicatorRotate]="panel._getExpandedState()"
      class="rds-expansion-indicator"
      namespace="filled"
      icon="chevron_down"
    />`, isInline: true, dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], animations: [rdsExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-expansion-panel-header',
                    template: `<span class="rds-content">
      <ng-content select="rds-panel-title" />
      <ng-content />
    </span>
    <rds-icon
      [@indicatorRotate]="panel._getExpandedState()"
      class="rds-expansion-indicator"
      namespace="filled"
      icon="chevron_down"
    />`,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [rdsExpansionAnimations.indicatorRotate],
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], attrId: [{
                type: HostBinding,
                args: ['attr.id']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['attr.aria-disabled']
            }], tabIndex: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['tabIndex']
            }], _isExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }, {
                type: HostBinding,
                args: ['class.rds-expanded']
            }], _getPanelId: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], _isAfterTogglePosition: [{
                type: HostBinding,
                args: ['class.rds-expansion-toggle-indicator-after']
            }], _isBeforeTogglePosition: [{
                type: HostBinding,
                args: ['class.rds-expansion-toggle-indicator-before']
            }], _toggle: [{
                type: HostListener,
                args: ['click']
            }], _keydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
export class RdsExpansionPanelTitleDirective {
    constructor() {
        this.class = 'rds-expansion-panel-header-title';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelTitleDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsExpansionPanelTitleDirective, selector: "rds-panel-title", host: { properties: { "class": "this.class" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsExpansionPanelTitleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'rds-panel-title',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }] } });
//# sourceMappingURL=data:application/json;base64,