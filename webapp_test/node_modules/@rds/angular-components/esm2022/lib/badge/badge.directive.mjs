import { ComponentFactoryResolver, Directive, ElementRef, inject, Input, Renderer2, ViewContainerRef, } from '@angular/core';
import { RdsBadgeComponent } from './badge.component';
import { CdkPortalOutlet, ComponentPortal } from '@angular/cdk/portal';
import * as i0 from "@angular/core";
const DOT_BADGE_POS_RIGHT_PX = -4;
const BADGE_OFFSET_RIGHT_PX = 10;
export class RdsBadgeDirective {
    constructor() {
        this.viewContainerRef = inject(ViewContainerRef);
        this.componentFactoryResolver = inject(ComponentFactoryResolver);
        this.renderer = inject(Renderer2);
        this.elementRef = inject(ElementRef);
        this._componentRef = null;
        this.rdsBadgeLabel = null;
        this.rdsBadgeColor = 'info';
        this.rdsBadgeType = 'default';
        this.rdsBadgeAriaDescribedBy = null;
        this.rdsBadgePlacement = 'top-right';
    }
    ngAfterViewInit() {
        this.renderer.setStyle(this.elementRef.nativeElement, 'position', 'relative');
        this._createComponent();
    }
    ngOnChanges(changes) {
        if (this._componentRef) {
            let shouldDetectChanges = false;
            const label = this._getLabel();
            const badgeType = this._getBadgeType();
            const instance = this._componentRef.instance;
            instance.size = 's';
            if (changes['rdsBadgeLabel'] && instance.label !== label) {
                instance.label = label;
                shouldDetectChanges = true;
            }
            if (changes['rdsBadgeColor'] && instance.color !== this.rdsBadgeColor) {
                instance.color = this.rdsBadgeColor;
                shouldDetectChanges = true;
            }
            if ((changes['rdsBadgeType'] || changes['rdsBadgeLabel']) &&
                instance.type !== badgeType) {
                instance.type = badgeType;
                shouldDetectChanges = true;
            }
            if (changes['rdsBadgeAriaDescribedBy'] &&
                instance.ariaDescribedBy !== this.rdsBadgeAriaDescribedBy) {
                instance.ariaDescribedBy = this.rdsBadgeAriaDescribedBy;
                shouldDetectChanges = true;
            }
            if (shouldDetectChanges) {
                instance.detectChanges();
            }
            if (shouldDetectChanges ||
                (changes['rdsBadgePlacement'] &&
                    changes['rdsBadgePlacement'].previousValue !== this.rdsBadgePlacement)) {
                this._setPosition();
            }
        }
    }
    ngOnDestroy() {
        this._componentRef?.destroy();
    }
    _createComponent() {
        const outlet = new CdkPortalOutlet(this.componentFactoryResolver, this.viewContainerRef);
        const portal = new ComponentPortal(RdsBadgeComponent, this.viewContainerRef);
        this._componentRef = outlet.attachComponentPortal(portal);
        this._componentRef.instance._isAttached = true;
        this._componentRef.instance.label = this._getLabel();
        this._componentRef.instance.color = this.rdsBadgeColor;
        this._componentRef.instance.type = this._getBadgeType();
        this._componentRef.instance.ariaDescribedBy = this.rdsBadgeAriaDescribedBy;
        this._setComponentLocation();
        this._componentRef.changeDetectorRef.detectChanges();
        this._setPosition();
        this._componentRef.onDestroy(() => {
            portal.detach();
            outlet.detach();
        });
    }
    _setComponentLocation() {
        this.renderer.appendChild(this.elementRef.nativeElement, this._getBadgeElement());
        this.renderer.setStyle(this._getBadgeElement(), 'position', 'absolute');
    }
    _setPosition() {
        const badge = this._getBadgeElement();
        this.renderer.removeStyle(badge, 'top');
        this.renderer.removeStyle(badge, 'bottom');
        this.renderer.removeStyle(badge, 'left');
        this.renderer.removeStyle(badge, 'right');
        const offsetY = badge.offsetHeight / 2;
        const offsetWidth = badge.offsetWidth;
        if (this.rdsBadgePlacement?.includes('bottom')) {
            this.renderer.setStyle(badge, 'bottom', `${-offsetY}px`);
        }
        else {
            this.renderer.setStyle(badge, 'top', `${-offsetY}px`);
        }
        this.renderer.setStyle(badge, 'right', `${Math.min(BADGE_OFFSET_RIGHT_PX - offsetWidth, DOT_BADGE_POS_RIGHT_PX)}px`);
    }
    _getLabel() {
        if (this.rdsBadgeType === 'dot' ||
            this.rdsBadgeLabel === null ||
            this.rdsBadgeLabel === undefined) {
            return '';
        }
        return this.rdsBadgeLabel;
    }
    _getBadgeType() {
        return this._getLabel().length > 0 ? this.rdsBadgeType : 'dot';
    }
    _getBadgeElement() {
        return this._componentRef?.location.nativeElement;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsBadgeDirective, isStandalone: true, selector: "[rds-badge], [rdsBadge]", inputs: { rdsBadgeLabel: "rdsBadgeLabel", rdsBadgeColor: "rdsBadgeColor", rdsBadgeType: "rdsBadgeType", rdsBadgeAriaDescribedBy: "rdsBadgeAriaDescribedBy", rdsBadgePlacement: "rdsBadgePlacement" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBadgeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rds-badge], [rdsBadge]',
                    standalone: true,
                }]
        }], propDecorators: { rdsBadgeLabel: [{
                type: Input
            }], rdsBadgeColor: [{
                type: Input
            }], rdsBadgeType: [{
                type: Input
            }], rdsBadgeAriaDescribedBy: [{
                type: Input
            }], rdsBadgePlacement: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,