import { DOWN_ARROW, END, ENTER, ESCAPE, hasModifierKey, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW, } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, inject, Input, isDevMode, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { DateAdapter, RDS_DATE_FORMATS } from './adapter';
import { Directionality } from '@angular/cdk/bidi';
import { RdsCalendarBodyComponent, RdsCalendarCell, } from './calendar-body.component';
import { createMissingDateImplError } from './datepicker-errors';
import { Subscription } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { DateRange } from './date-selection.model';
import { RDS_DATE_RANGE_SELECTION_STRATEGY, } from './date-range-selection.strategy';
import * as i0 from "@angular/core";
import * as i1 from "./calendar-body.component";
const DAYS_PER_WEEK = 7;
export class RdsMonthViewComponent {
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {
            this._init();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
        this._setRanges(this._selected);
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dir = inject(Directionality, { optional: true });
        this.rangeStrategy = inject(RDS_DATE_RANGE_SELECTION_STRATEGY, { optional: true });
        this._rerenderSubscription = Subscription.EMPTY;
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this.selectedChange = new EventEmitter();
        this._userSelection = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this._rdsCalendarBody = null;
        this._monthLabel = null;
        this._weeks = null;
        this._firstWeekOffset = null;
        this._rangeStart = null;
        this._rangeEnd = null;
        this._comparisonRangeStart = null;
        this._comparisonRangeEnd = null;
        this._previewStart = null;
        this._previewEnd = null;
        this._isRange = false;
        this._todayDate = null;
        this._weekdays = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._activeDate = this.dateAdapter.today();
    }
    ngAfterContentInit() {
        this._rerenderSubscription = this.dateAdapter.localeChanges
            .pipe(startWith(null))
            .subscribe(() => this._init());
    }
    ngOnChanges(changes) {
        const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];
        if (comparisonChange && !comparisonChange.firstChange) {
            this._setRanges(this.selected);
        }
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    _onDateSelected(event) {
        this._dateSelected({
            value: this.dateAdapter.clone(event.value.rawValue),
            event: event.event,
        });
    }
    _dateSelected(event) {
        let rangeStartDate;
        let rangeEndDate;
        if (this._selected instanceof DateRange) {
            rangeStartDate = this._selected.start;
            rangeEndDate = this._selected.end;
        }
        else {
            rangeStartDate = rangeEndDate = this._selected;
        }
        if (!this.dateAdapter.sameDate(rangeStartDate, event.value) ||
            !this.dateAdapter.sameDate(rangeEndDate, event.value)) {
            this.selectedChange.emit(event.value);
        }
        this._userSelection.emit({ value: event.value, event: event.event });
        this._previewStart = this._previewEnd = null;
        this.cdr.markForCheck();
    }
    _handleCalendarBodyKeydown(event) {
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, -7);
                break;
            case DOWN_ARROW:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 7);
                break;
            case HOME:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, 1 - this.dateAdapter.getDate(this._activeDate));
                break;
            case END:
                this.activeDate = this.dateAdapter.addCalendarDays(this._activeDate, this.dateAdapter.getNumDaysInMonth(this._activeDate) -
                    this.dateAdapter.getDate(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = event.altKey
                    ? this.dateAdapter.addCalendarYears(this._activeDate, -1)
                    : this.dateAdapter.addCalendarMonths(this._activeDate, -1);
                break;
            case PAGE_DOWN:
                this.activeDate = event.altKey
                    ? this.dateAdapter.addCalendarYears(this._activeDate, 1)
                    : this.dateAdapter.addCalendarMonths(this._activeDate, 1);
                break;
            case ENTER:
            case SPACE:
                if (!this.dateFilter || this.dateFilter(this._activeDate)) {
                    this._dateSelected({
                        value: this.dateAdapter.createDate(this.dateAdapter.getYear(this._activeDate), this.dateAdapter.getMonth(this._activeDate), this.dateAdapter.getDate(this._activeDate)),
                        event,
                    });
                    event.preventDefault();
                }
                return;
            case ESCAPE:
                if (this._previewEnd != null && !hasModifierKey(event)) {
                    this._previewStart = this._previewEnd = null;
                    this.selectedChange.emit(null);
                    this._userSelection.emit({ value: null, event });
                    event.preventDefault();
                    event.stopPropagation();
                }
                return;
            default:
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        event.preventDefault();
    }
    _init() {
        this._setRanges(this.selected);
        this._todayDate = this._getCellCompareValue(this.dateAdapter.today());
        this._monthLabel = this.dateFormats.display.monthLabel
            ? this.dateAdapter.format(this.activeDate, this.dateFormats.display.monthLabel)
            : this.dateAdapter
                .getMonthNames('short')[this.dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();
        const firstOfMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), 1);
        this._firstWeekOffset =
            (DAYS_PER_WEEK +
                this.dateAdapter.getDayOfWeek(firstOfMonth) -
                this.dateAdapter.getFirstDayOfWeek()) %
                DAYS_PER_WEEK;
        this._initWeekdays();
        this._createWeekCells();
        this.cdr.markForCheck();
    }
    _focusActiveCell(movePreview) {
        this._rdsCalendarBody?._focusActiveCell(movePreview);
    }
    _previewChanged({ event, value: cell, }) {
        if (this.rangeStrategy) {
            const value = cell && cell.rawValue ? cell.rawValue : null;
            const previewRange = this.rangeStrategy.createPreview(value, this.selected, event);
            this._previewStart = this._getCellCompareValue(previewRange.start);
            this._previewEnd = this._getCellCompareValue(previewRange.end);
            this.cdr.detectChanges();
        }
    }
    _getActiveCell() {
        if (this._weeks) {
            for (let i = 0; i < this._weeks.length; i++) {
                for (let j = 0; j < this._weeks[i].length; j++) {
                    const cell = this._weeks[i][j];
                    if (cell &&
                        this.dateAdapter.sameDate(cell.rawValue, this.activeDate)) {
                        return cell;
                    }
                }
            }
        }
        return null;
    }
    _initWeekdays() {
        const firstDayOfWeek = this.dateAdapter.getFirstDayOfWeek();
        const narrowWeekdays = this.dateAdapter.getDayOfWeekNames('narrow');
        const longWeekdays = this.dateAdapter.getDayOfWeekNames('long');
        const weekdays = longWeekdays.map((long, i) => {
            return { long, narrow: narrowWeekdays[i] };
        });
        this._weekdays = weekdays
            .slice(firstDayOfWeek)
            .concat(weekdays.slice(0, firstDayOfWeek));
    }
    _createWeekCells() {
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.activeDate);
        const dateNames = this.dateAdapter.getDateNames();
        this._weeks = [[]];
        // previous month
        for (let i = this._firstWeekOffset || 0; i > 0; i--) {
            const date = this._getPreviousMonthDate(i - 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
            const cellClasses = this._getClasses(date, [
                'rds-calendar-body-cell-prev-month',
            ]);
            this._weeks[this._weeks.length - 1].push(new RdsCalendarCell(this.dateAdapter.getDate(date), dateNames[this.dateAdapter.getDate(date) - 1], ariaLabel, enabled, cellClasses, date, this._getCellCompareValue(date)));
        }
        // current month
        for (let i = 0, cell = this._firstWeekOffset || 0; i < daysInMonth; i++, cell++) {
            if (cell == DAYS_PER_WEEK) {
                this._weeks.push([]);
                cell = 0;
            }
            const date = this._getCurrentMonthDate(i + 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
            const cellClasses = this._getClasses(date);
            this._weeks[this._weeks.length - 1].push(new RdsCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, date, this._getCellCompareValue(date)));
        }
        // next month
        const nextMonthDays = DAYS_PER_WEEK -
            this._weeks[this._weeks.length - 1].length +
            (this._weeks.length < 6 ? DAYS_PER_WEEK : 0);
        for (let i = 0; i < nextMonthDays; i++) {
            if (this._weeks[this._weeks.length - 1].length == DAYS_PER_WEEK) {
                this._weeks.push([]);
            }
            const date = this._getNextMonthDate(i + 1);
            const enabled = this._shouldEnableDate(date);
            const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.dateA11yLabel);
            const cellClasses = this._getClasses(date, [
                'rds-calendar-body-cell-next-month',
            ]);
            this._weeks[this._weeks.length - 1].push(new RdsCalendarCell(this.dateAdapter.getDate(date), dateNames[this.dateAdapter.getDate(date) - 1], ariaLabel, enabled, cellClasses, date, this._getCellCompareValue(date)));
        }
    }
    _shouldEnableDate(date) {
        return (!!date &&
            (!this.minDate ||
                this.dateAdapter.compareDate(date, this.minDate) >= 0) &&
            (!this.maxDate ||
                this.dateAdapter.compareDate(date, this.maxDate) <= 0) &&
            (!this.dateFilter || this.dateFilter(date)));
    }
    _hasSameMonthAndYear(d1, d2) {
        return !!(d1 &&
            d2 &&
            this.dateAdapter.getMonth(d1) == this.dateAdapter.getMonth(d2) &&
            this.dateAdapter.getYear(d1) == this.dateAdapter.getYear(d2));
    }
    _getCellCompareValue(date) {
        if (date) {
            const year = this.dateAdapter.getYear(date);
            const month = this.dateAdapter.getMonth(date);
            const day = this.dateAdapter.getDate(date);
            return new Date(year, month, day).getTime();
        }
        return null;
    }
    _isRtl() {
        return !!(this.dir && this.dir.value === 'rtl');
    }
    _setRanges(selectedValue) {
        if (selectedValue instanceof DateRange) {
            this._rangeStart = this._getCellCompareValue(selectedValue.start);
            this._rangeEnd = this._getCellCompareValue(selectedValue.end);
            this._isRange = true;
        }
        else {
            this._rangeStart = this._rangeEnd =
                this._getCellCompareValue(selectedValue);
            this._isRange = false;
        }
        this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);
        this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);
    }
    _getCurrentMonthDate(day) {
        return this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), day);
    }
    _getPreviousMonthDate(minusDays) {
        let year = this.dateAdapter.getYear(this.activeDate);
        let month = this.dateAdapter.getMonth(this.activeDate);
        if (month - 1 === -1) {
            year--;
            month = 11;
        }
        else {
            month--;
        }
        const day = this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(year, month, 1)) - minusDays;
        return this.dateAdapter.createDate(year, month, day);
    }
    _getNextMonthDate(day) {
        let year = this.dateAdapter.getYear(this.activeDate);
        let month = this.dateAdapter.getMonth(this.activeDate);
        if (month + 1 === 12) {
            year++;
            month = 0;
        }
        else {
            month++;
        }
        return this.dateAdapter.createDate(year, month, day);
    }
    _getClasses(date, cssClasses = []) {
        const classes = this.dateClass ? this.dateClass(date, 'month') : undefined;
        if (classes instanceof Set) {
            cssClasses.forEach((c) => classes.add(c));
            return classes;
        }
        else if (classes instanceof Array) {
            cssClasses.forEach((c) => classes.push(c));
            return classes;
        }
        else if (typeof classes === 'string') {
            return classes + ' ' + cssClasses.join(' ');
        }
        else if (typeof classes === 'object') {
            cssClasses.forEach((c) => (classes[c] = true));
            return cssClasses;
        }
        else {
            return cssClasses;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMonthViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMonthViewComponent, selector: "rds-month-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd" }, outputs: { selectedChange: "selectedChange", _userSelection: "_userSelection", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_rdsCalendarBody", first: true, predicate: RdsCalendarBodyComponent, descendants: true }], exportAs: ["rdsMonthView"], usesOnChanges: true, ngImport: i0, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      @for (day of _weekdays; track day) {\n        <th scope=\"col\" [attr.aria-label]=\"day.long\">\n          {{ day.narrow }}\n        </th>\n      }\n    </tr>\n    <tr>\n      <th\n        class=\"rds-calendar-table-header-divider\"\n        colspan=\"7\"\n        aria-hidden=\"true\"\n      ></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_monthLabel\"\n    [rows]=\"_weeks\"\n    [todayValue]=\"_todayDate\"\n    [startValue]=\"_rangeStart\"\n    [endValue]=\"_rangeEnd\"\n    [comparisonStart]=\"_comparisonRangeStart\"\n    [comparisonEnd]=\"_comparisonRangeEnd\"\n    [previewStart]=\"_previewStart\"\n    [previewEnd]=\"_previewEnd\"\n    [isRange]=\"_isRange\"\n    [labelMinRequiredCells]=\"3\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onDateSelected($event)\"\n    (previewChange)=\"_previewChanged($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n", dependencies: [{ kind: "component", type: i1.RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: ["label", "rows", "todayValue", "startValue", "endValue", "labelMinRequiredCells", "numCols", "activeCell", "isRange", "cellAspectRatio", "comparisonStart", "comparisonEnd", "previewStart", "previewEnd"], outputs: ["selectedValueChange", "previewChange"], exportAs: ["rdsCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMonthViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-month-view', exportAs: 'rdsMonthView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      @for (day of _weekdays; track day) {\n        <th scope=\"col\" [attr.aria-label]=\"day.long\">\n          {{ day.narrow }}\n        </th>\n      }\n    </tr>\n    <tr>\n      <th\n        class=\"rds-calendar-table-header-divider\"\n        colspan=\"7\"\n        aria-hidden=\"true\"\n      ></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_monthLabel\"\n    [rows]=\"_weeks\"\n    [todayValue]=\"_todayDate\"\n    [startValue]=\"_rangeStart\"\n    [endValue]=\"_rangeEnd\"\n    [comparisonStart]=\"_comparisonRangeStart\"\n    [comparisonEnd]=\"_comparisonRangeEnd\"\n    [previewStart]=\"_previewStart\"\n    [previewEnd]=\"_previewEnd\"\n    [isRange]=\"_isRange\"\n    [labelMinRequiredCells]=\"3\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onDateSelected($event)\"\n    (previewChange)=\"_previewChanged($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n" }]
        }], ctorParameters: () => [], propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _rdsCalendarBody: [{
                type: ViewChild,
                args: [RdsCalendarBodyComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,