import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, ElementRef, HostBinding, inject, Input, isDevMode, ViewEncapsulation, } from '@angular/core';
import { DateAdapter } from './adapter';
import { Validators } from '@angular/forms';
import { merge, Subscription } from 'rxjs';
import { createMissingDateImplError } from './datepicker-errors';
import { dateInputsHaveChanged } from './datepicker-input.base';
import { RDS_DATE_RANGE_INPUT_PARENT, RdsEndDateDirective, RdsStartDateDirective, } from './date-range-input.parts';
import { RDS_FORM_FIELD } from '../form-field';
import { RdsAbstractFormFieldControl } from '../form-field';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
let nextUniqueId = 0;
export class RdsDateRangeInputComponent extends RdsAbstractFormFieldControl {
    get classes() {
        const classes = ['rds-date-range-input'];
        if (this._shouldHidePlaceholders()) {
            classes.push('rds-date-range-input-hide-placeholders');
        }
        if (this.required) {
            classes.push('rds-date-range-input-required');
        }
        if (this.disabled) {
            classes.push('rds-date-range-input-disabled');
        }
        return classes;
    }
    get _ariaLabelledby() {
        return this._getAriaLabelledby();
    }
    get dataRdsCalendar() {
        return this.rangePicker ? this.rangePicker.id : null;
    }
    get value() {
        return this._model?.selection;
    }
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    get placeholder() {
        const start = this._startInput?._getPlaceholder() || '';
        const end = this._endInput?._getPlaceholder() || '';
        return start || end ? `${start} ${this.separator} ${end}` : '';
    }
    get rangePicker() {
        return this._rangePicker;
    }
    set rangePicker(rangePicker) {
        if (rangePicker) {
            this._model = rangePicker.registerInput(this);
            this._rangePicker = rangePicker;
            this._closedSubscription.unsubscribe();
            this._closedSubscription = rangePicker.closedStream.subscribe(() => {
                this._startInput?._onTouched();
                this._endInput?._onTouched();
            });
            if (this._model) {
                this._registerModel(this._model);
            }
        }
    }
    get attrRequired() {
        if (this.isBoolean(this._required) && this._required) {
            this.stateChanges.next();
            return this._required;
        }
        else if (this.ngControl?.control) {
            this.stateChanges.next();
            return this.ngControl?.control?.hasValidator(Validators.required);
        }
        else if (this._startInput &&
            this._endInput &&
            this.isBoolean(this._startInput.attrRequired) &&
            this.isBoolean(this._endInput.attrRequired) &&
            (this._startInput.attrRequired || this._endInput.attrRequired)) {
            this.stateChanges.next();
            return this._startInput.attrRequired || this._endInput.attrRequired;
        }
        else {
            return null;
        }
    }
    set required(value) {
        const isRequired = booleanAttribute(value);
        if (isRequired !== this._required) {
            this._required = isRequired;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    get dateFilter() {
        return this._dateFilter;
    }
    set dateFilter(value) {
        const start = this._startInput;
        const end = this._endInput;
        const wasMatchingStart = start && start._matchesFilter(start.value);
        const wasMatchingEnd = end && end._matchesFilter(start.value);
        this._dateFilter = value;
        if (start && start._matchesFilter(start.value) !== wasMatchingStart) {
            start._validatorOnChange();
        }
        if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {
            end._validatorOnChange();
        }
    }
    get min() {
        return this._min;
    }
    set min(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._min)) {
            this._min = validValue;
            this._revalidate();
        }
    }
    get max() {
        return this._max;
    }
    set max(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._max)) {
            this._max = validValue;
            this._revalidate();
        }
    }
    get disabled() {
        return this._startInput && this._endInput
            ? this._startInput.disabled && this._endInput.disabled
            : this._groupDisabled;
    }
    set disabled(value) {
        const newValue = booleanAttribute(value);
        if (newValue !== this._groupDisabled) {
            this._groupDisabled = newValue;
            this.stateChanges.next();
        }
    }
    get errorState() {
        if (this._startInput && this._endInput) {
            return this._startInput.errorState || this._endInput.errorState;
        }
        return false;
    }
    get empty() {
        const startEmpty = this._startInput ? this._startInput.isEmpty() : false;
        const endEmpty = this._endInput ? this._endInput.isEmpty() : false;
        return startEmpty && endEmpty;
    }
    constructor() {
        super();
        this.cdr = inject(ChangeDetectorRef);
        this.elementRef = inject(ElementRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.formField = inject(RDS_FORM_FIELD, {
            optional: true,
        });
        this._closedSubscription = Subscription.EMPTY;
        this._id = `rds-date-range-input-${nextUniqueId++}`;
        this.idAttr = null;
        this.role = 'group';
        this.controlType = 'date-range';
        this._dateFilter = null;
        this._min = null;
        this._max = null;
        this._rangePicker = null;
        this._groupDisabled = false;
        this._ariaDescribedBy = null;
        this.separator = '–';
        this.comparisonStart = null;
        this.comparisonEnd = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
    }
    setDescribedByIds(ids) {
        this._ariaDescribedBy = ids.length ? ids.join(' ') : null;
    }
    onContainerClick() {
        if (!this.focused && !this.disabled) {
            if (!this._model || !this._model.selection?.start) {
                this._startInput?.focus();
            }
            else {
                this._endInput?.focus();
            }
        }
    }
    ngAfterContentInit() {
        if (!this._startInput) {
            throw Error('rds-date-range-input must contain a rdsStartDate input');
        }
        if (!this._endInput) {
            throw Error('rds-date-range-input must contain a rdsEndDate input');
        }
        if (this._model) {
            this._registerModel(this._model);
        }
        merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {
            this.stateChanges.next(undefined);
        });
    }
    ngOnChanges(changes) {
        if (this.dateAdapter && dateInputsHaveChanged(changes, this.dateAdapter)) {
            this.stateChanges.next(undefined);
        }
    }
    ngOnDestroy() {
        this._closedSubscription.unsubscribe();
        this.stateChanges.complete();
    }
    getStartValue() {
        return this.value ? this.value.start : null;
    }
    getConnectedOverlayOrigin() {
        return this.formField
            ? this.formField.getConnectedOverlayOrigin()
            : this.elementRef;
    }
    _getInputMirrorValue() {
        return this._startInput ? this._startInput.getMirrorValue() : '';
    }
    _shouldHidePlaceholders() {
        if (this.formField?.labelPosition !== 'floating') {
            return false;
        }
        return this._startInput
            ? !this.focused && this._startInput.isEmpty()
            : !this.focused;
    }
    _handleChildValueChange() {
        this.stateChanges.next(undefined);
        this.cdr.markForCheck();
    }
    _openDatepicker() {
        if (this._rangePicker) {
            this._rangePicker.open();
        }
    }
    _shouldHideSeparator() {
        return !this.focused && this.empty;
    }
    _getAriaLabelledby() {
        return this.formField?.labelId;
    }
    _updateFocus(origin) {
        this._focused = origin !== null;
        this.stateChanges.next();
    }
    _revalidate() {
        if (this._startInput) {
            this._startInput._validatorOnChange();
        }
        if (this._endInput) {
            this._endInput._validatorOnChange();
        }
    }
    _registerModel(model) {
        if (this._startInput) {
            this._startInput._registerModel(model);
        }
        if (this._endInput) {
            this._endInput._registerModel(model);
        }
    }
    isBoolean(value) {
        return value === true || value === false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDateRangeInputComponent, selector: "rds-date-range-input", inputs: { rangePicker: "rangePicker", required: "required", dateFilter: "dateFilter", min: "min", max: "max", disabled: "disabled", separator: "separator", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd" }, host: { properties: { "class": "this.classes", "attr.id": "this.idAttr", "attr.role": "this.role", "attr.aria-labelledby": "this._ariaLabelledby", "attr.data-rds-calendar": "this.dataRdsCalendar", "attr.required": "this.attrRequired", "attr.aria-describedby": "this._ariaDescribedBy" } }, providers: [
            {
                provide: RdsAbstractFormFieldControl,
                useExisting: RdsDateRangeInputComponent,
            },
            {
                provide: RDS_DATE_RANGE_INPUT_PARENT,
                useExisting: RdsDateRangeInputComponent,
            },
        ], queries: [{ propertyName: "_startInput", first: true, predicate: RdsStartDateDirective, descendants: true }, { propertyName: "_endInput", first: true, predicate: RdsEndDateDirective, descendants: true }], exportAs: ["rdsDateRangeInput"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div\n  class=\"rds-date-range-input-container\"\n  cdkMonitorSubtreeFocus\n  (cdkFocusChange)=\"_updateFocus($event)\"\n>\n  <div class=\"rds-date-range-input-start-wrapper\">\n    <ng-content select=\"input[rdsStartDate]\" />\n    <span class=\"rds-date-range-input-mirror\" aria-hidden=\"true\">{{\n      _getInputMirrorValue()\n    }}</span>\n  </div>\n\n  <span\n    class=\"rds-date-range-input-separator\"\n    [class.rds-date-range-input-separator-hidden]=\"_shouldHideSeparator()\"\n    >{{ separator }}</span\n  >\n\n  <div class=\"rds-date-range-input-end-wrapper\">\n    <ng-content select=\"input[rdsEndDate]\" />\n  </div>\n</div>\n", styles: [".rds-date-range-input{position:relative;display:flex;margin-top:16px;border:none;background:transparent;outline:none;color:var(--rds-color-high-contrast);width:100%}.rds-form-field--static-label .rds-date-range-input,.rds-form-field--no-label .rds-date-range-input{margin-top:0;display:flex}.rds-date-range-input-container{display:flex;align-items:center}.rds-date-range-input-separator{transition:opacity .4s .1333333333333s cubic-bezier(.25,.8,.25,1);margin:0 4px;color:var(--rds-color-high-contrast)}.rds-date-range-input-disabled .rds-date-range-input-separator{color:var(--rds-color-disabled)}.rds-date-range-input-inner{font:inherit;background:transparent;color:var(--rds-color-high-contrast);border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.rds-date-range-input-inner::-ms-clear,.rds-date-range-input-inner::-ms-reveal{display:none}.rds-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.rds-date-range-input-inner::placeholder{transition:color .4s .1333333333333s cubic-bezier(.25,.8,.25,1)}.rds-form-field-hide-placeholder .rds-date-range-input-inner::placeholder,.rds-date-range-input-hide-placeholders .rds-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.rds-date-range-input-inner[disabled]{color:var(--rds-color-disabled)}.rds-date-range-input-mirror{visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.rds-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px);text-align:left}.rds-date-range-input-start-wrapper .rds-date-range-input-inner{position:absolute;top:0;left:0}.rds-date-range-input-end-wrapper{text-align:left;flex-grow:1;max-width:calc(50% - 4px)}.rds-form-field-type-rds-date-range-input .rds-form-field-infix{width:200px}.rds-form-field--floating-label .rds-date-range-input-separator-hidden{opacity:0;transition:none}\n"], dependencies: [{ kind: "directive", type: i1.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"], exportAs: ["cdkMonitorFocus"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-date-range-input', exportAs: 'rdsDateRangeInput', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        {
                            provide: RdsAbstractFormFieldControl,
                            useExisting: RdsDateRangeInputComponent,
                        },
                        {
                            provide: RDS_DATE_RANGE_INPUT_PARENT,
                            useExisting: RdsDateRangeInputComponent,
                        },
                    ], template: "<div\n  class=\"rds-date-range-input-container\"\n  cdkMonitorSubtreeFocus\n  (cdkFocusChange)=\"_updateFocus($event)\"\n>\n  <div class=\"rds-date-range-input-start-wrapper\">\n    <ng-content select=\"input[rdsStartDate]\" />\n    <span class=\"rds-date-range-input-mirror\" aria-hidden=\"true\">{{\n      _getInputMirrorValue()\n    }}</span>\n  </div>\n\n  <span\n    class=\"rds-date-range-input-separator\"\n    [class.rds-date-range-input-separator-hidden]=\"_shouldHideSeparator()\"\n    >{{ separator }}</span\n  >\n\n  <div class=\"rds-date-range-input-end-wrapper\">\n    <ng-content select=\"input[rdsEndDate]\" />\n  </div>\n</div>\n", styles: [".rds-date-range-input{position:relative;display:flex;margin-top:16px;border:none;background:transparent;outline:none;color:var(--rds-color-high-contrast);width:100%}.rds-form-field--static-label .rds-date-range-input,.rds-form-field--no-label .rds-date-range-input{margin-top:0;display:flex}.rds-date-range-input-container{display:flex;align-items:center}.rds-date-range-input-separator{transition:opacity .4s .1333333333333s cubic-bezier(.25,.8,.25,1);margin:0 4px;color:var(--rds-color-high-contrast)}.rds-date-range-input-disabled .rds-date-range-input-separator{color:var(--rds-color-disabled)}.rds-date-range-input-inner{font:inherit;background:transparent;color:var(--rds-color-high-contrast);border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%}.rds-date-range-input-inner::-ms-clear,.rds-date-range-input-inner::-ms-reveal{display:none}.rds-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.rds-date-range-input-inner::placeholder{transition:color .4s .1333333333333s cubic-bezier(.25,.8,.25,1)}.rds-form-field-hide-placeholder .rds-date-range-input-inner::placeholder,.rds-date-range-input-hide-placeholders .rds-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:transparent!important;-webkit-text-fill-color:transparent;transition:none}.rds-date-range-input-inner[disabled]{color:var(--rds-color-disabled)}.rds-date-range-input-mirror{visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.rds-date-range-input-start-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px);text-align:left}.rds-date-range-input-start-wrapper .rds-date-range-input-inner{position:absolute;top:0;left:0}.rds-date-range-input-end-wrapper{text-align:left;flex-grow:1;max-width:calc(50% - 4px)}.rds-form-field-type-rds-date-range-input .rds-form-field-infix{width:200px}.rds-form-field--floating-label .rds-date-range-input-separator-hidden{opacity:0;transition:none}\n"] }]
        }], ctorParameters: () => [], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], idAttr: [{
                type: HostBinding,
                args: ['attr.id']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], _ariaLabelledby: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], dataRdsCalendar: [{
                type: HostBinding,
                args: ['attr.data-rds-calendar']
            }], rangePicker: [{
                type: Input
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabled: [{
                type: Input
            }], _ariaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], separator: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], _startInput: [{
                type: ContentChild,
                args: [RdsStartDateDirective]
            }], _endInput: [{
                type: ContentChild,
                args: [RdsEndDateDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,