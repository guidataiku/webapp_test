import { inject, Injectable, InjectionToken, Optional, SkipSelf, } from '@angular/core';
import { DateAdapter } from './adapter';
import { DateRange } from './date-selection.model';
import * as i0 from "@angular/core";
export const RDS_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken('RDS_DATE_RANGE_SELECTION_STRATEGY');
export class DefaultRdsCalendarRangeStrategy {
    constructor() {
        this.dateAdapter = inject(DateAdapter);
    }
    selectionFinished(date, currentRange) {
        let { start, end } = currentRange;
        if (start == null) {
            start = date;
        }
        else if (end == null &&
            date &&
            this.dateAdapter.compareDate(date, start) >= 0) {
            end = date;
        }
        else {
            start = date;
            end = null;
        }
        return new DateRange(start, end);
    }
    createPreview(activeDate, currentRange) {
        let start = null;
        let end = null;
        if (currentRange.start && !currentRange.end && activeDate) {
            start = currentRange.start;
            end = activeDate;
        }
        return new DateRange(start, end);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DefaultRdsCalendarRangeStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DefaultRdsCalendarRangeStrategy }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: DefaultRdsCalendarRangeStrategy, decorators: [{
            type: Injectable
        }] });
export function RDS_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent) {
    return parent || new DefaultRdsCalendarRangeStrategy();
}
export const RDS_CALENDAR_RANGE_STRATEGY_PROVIDER = {
    provide: RDS_DATE_RANGE_SELECTION_STRATEGY,
    deps: [
        [new Optional(), new SkipSelf(), RDS_DATE_RANGE_SELECTION_STRATEGY],
        DateAdapter,
    ],
    useFactory: RDS_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1yYW5nZS1zZWxlY3Rpb24uc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FuZ3VsYXItY29tcG9uZW50cy9zcmMvbGliL2RhdGVwaWNrZXIvZGF0ZS1yYW5nZS1zZWxlY3Rpb24uc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLE1BQU0sRUFDTixVQUFVLEVBQ1YsY0FBYyxFQUNkLFFBQVEsRUFDUixRQUFRLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBRW5ELE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLElBQUksY0FBYyxDQUVqRSxtQ0FBbUMsQ0FBQyxDQUFDO0FBaUJ2QyxNQUFNLE9BQU8sK0JBQStCO0lBRDVDO1FBSXFCLGdCQUFXLEdBQUcsTUFBTSxDQUFpQixXQUFXLENBQUMsQ0FBQztLQW1DdEU7SUFqQ0MsaUJBQWlCLENBQUMsSUFBTyxFQUFFLFlBQTBCO1FBQ25ELElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsWUFBWSxDQUFDO1FBRWxDLElBQUksS0FBSyxJQUFJLElBQUksRUFBRSxDQUFDO1lBQ2xCLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDZixDQUFDO2FBQU0sSUFDTCxHQUFHLElBQUksSUFBSTtZQUNYLElBQUk7WUFDSixJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUM5QyxDQUFDO1lBQ0QsR0FBRyxHQUFHLElBQUksQ0FBQztRQUNiLENBQUM7YUFBTSxDQUFDO1lBQ04sS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDYixDQUFDO1FBRUQsT0FBTyxJQUFJLFNBQVMsQ0FBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELGFBQWEsQ0FDWCxVQUFvQixFQUNwQixZQUEwQjtRQUUxQixJQUFJLEtBQUssR0FBYSxJQUFJLENBQUM7UUFDM0IsSUFBSSxHQUFHLEdBQWEsSUFBSSxDQUFDO1FBRXpCLElBQUksWUFBWSxDQUFDLEtBQUssSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksVUFBVSxFQUFFLENBQUM7WUFDMUQsS0FBSyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDM0IsR0FBRyxHQUFHLFVBQVUsQ0FBQztRQUNuQixDQUFDO1FBRUQsT0FBTyxJQUFJLFNBQVMsQ0FBSSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDdEMsQ0FBQzs4R0FyQ1UsK0JBQStCO2tIQUEvQiwrQkFBK0I7OzJGQUEvQiwrQkFBK0I7a0JBRDNDLFVBQVU7O0FBeUNYLE1BQU0sVUFBVSw0Q0FBNEMsQ0FDMUQsTUFBOEM7SUFFOUMsT0FBTyxNQUFNLElBQUksSUFBSSwrQkFBK0IsRUFBRSxDQUFDO0FBQ3pELENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBb0I7SUFDbkUsT0FBTyxFQUFFLGlDQUFpQztJQUMxQyxJQUFJLEVBQUU7UUFDSixDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSxpQ0FBaUMsQ0FBQztRQUNuRSxXQUFXO0tBQ1o7SUFDRCxVQUFVLEVBQUUsNENBQTRDO0NBQ3pELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBGYWN0b3J5UHJvdmlkZXIsXG4gIGluamVjdCxcbiAgSW5qZWN0YWJsZSxcbiAgSW5qZWN0aW9uVG9rZW4sXG4gIE9wdGlvbmFsLFxuICBTa2lwU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRlQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcic7XG5pbXBvcnQgeyBEYXRlUmFuZ2UgfSBmcm9tICcuL2RhdGUtc2VsZWN0aW9uLm1vZGVsJztcblxuZXhwb3J0IGNvbnN0IFJEU19EQVRFX1JBTkdFX1NFTEVDVElPTl9TVFJBVEVHWSA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcbiAgUmRzRGF0ZVJhbmdlU2VsZWN0aW9uU3RyYXRlZ3k8dW5rbm93bj5cbj4oJ1JEU19EQVRFX1JBTkdFX1NFTEVDVElPTl9TVFJBVEVHWScpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJkc0RhdGVSYW5nZVNlbGVjdGlvblN0cmF0ZWd5PEQ+IHtcbiAgc2VsZWN0aW9uRmluaXNoZWQoXG4gICAgZGF0ZTogRCB8IG51bGwsXG4gICAgY3VycmVudFJhbmdlOiBEYXRlUmFuZ2U8RD4sXG4gICAgZXZlbnQ6IEV2ZW50LFxuICApOiBEYXRlUmFuZ2U8RD47XG5cbiAgY3JlYXRlUHJldmlldyhcbiAgICBhY3RpdmVEYXRlOiBEIHwgbnVsbCxcbiAgICBjdXJyZW50UmFuZ2U6IERhdGVSYW5nZTxEPixcbiAgICBldmVudDogRXZlbnQsXG4gICk6IERhdGVSYW5nZTxEPjtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZmF1bHRSZHNDYWxlbmRhclJhbmdlU3RyYXRlZ3k8RD5cbiAgaW1wbGVtZW50cyBSZHNEYXRlUmFuZ2VTZWxlY3Rpb25TdHJhdGVneTxEPlxue1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgZGF0ZUFkYXB0ZXIgPSBpbmplY3Q8RGF0ZUFkYXB0ZXI8RD4+KERhdGVBZGFwdGVyKTtcblxuICBzZWxlY3Rpb25GaW5pc2hlZChkYXRlOiBELCBjdXJyZW50UmFuZ2U6IERhdGVSYW5nZTxEPik6IERhdGVSYW5nZTxEPiB7XG4gICAgbGV0IHsgc3RhcnQsIGVuZCB9ID0gY3VycmVudFJhbmdlO1xuXG4gICAgaWYgKHN0YXJ0ID09IG51bGwpIHtcbiAgICAgIHN0YXJ0ID0gZGF0ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZW5kID09IG51bGwgJiZcbiAgICAgIGRhdGUgJiZcbiAgICAgIHRoaXMuZGF0ZUFkYXB0ZXIuY29tcGFyZURhdGUoZGF0ZSwgc3RhcnQpID49IDBcbiAgICApIHtcbiAgICAgIGVuZCA9IGRhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0YXJ0ID0gZGF0ZTtcbiAgICAgIGVuZCA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBEYXRlUmFuZ2U8RD4oc3RhcnQsIGVuZCk7XG4gIH1cblxuICBjcmVhdGVQcmV2aWV3KFxuICAgIGFjdGl2ZURhdGU6IEQgfCBudWxsLFxuICAgIGN1cnJlbnRSYW5nZTogRGF0ZVJhbmdlPEQ+LFxuICApOiBEYXRlUmFuZ2U8RD4ge1xuICAgIGxldCBzdGFydDogRCB8IG51bGwgPSBudWxsO1xuICAgIGxldCBlbmQ6IEQgfCBudWxsID0gbnVsbDtcblxuICAgIGlmIChjdXJyZW50UmFuZ2Uuc3RhcnQgJiYgIWN1cnJlbnRSYW5nZS5lbmQgJiYgYWN0aXZlRGF0ZSkge1xuICAgICAgc3RhcnQgPSBjdXJyZW50UmFuZ2Uuc3RhcnQ7XG4gICAgICBlbmQgPSBhY3RpdmVEYXRlO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZVJhbmdlPEQ+KHN0YXJ0LCBlbmQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSRFNfQ0FMRU5EQVJfUkFOR0VfU1RSQVRFR1lfUFJPVklERVJfRkFDVE9SWShcbiAgcGFyZW50OiBSZHNEYXRlUmFuZ2VTZWxlY3Rpb25TdHJhdGVneTx1bmtub3duPixcbik6IFJkc0RhdGVSYW5nZVNlbGVjdGlvblN0cmF0ZWd5PHVua25vd24+IHtcbiAgcmV0dXJuIHBhcmVudCB8fCBuZXcgRGVmYXVsdFJkc0NhbGVuZGFyUmFuZ2VTdHJhdGVneSgpO1xufVxuXG5leHBvcnQgY29uc3QgUkRTX0NBTEVOREFSX1JBTkdFX1NUUkFURUdZX1BST1ZJREVSOiBGYWN0b3J5UHJvdmlkZXIgPSB7XG4gIHByb3ZpZGU6IFJEU19EQVRFX1JBTkdFX1NFTEVDVElPTl9TVFJBVEVHWSxcbiAgZGVwczogW1xuICAgIFtuZXcgT3B0aW9uYWwoKSwgbmV3IFNraXBTZWxmKCksIFJEU19EQVRFX1JBTkdFX1NFTEVDVElPTl9TVFJBVEVHWV0sXG4gICAgRGF0ZUFkYXB0ZXIsXG4gIF0sXG4gIHVzZUZhY3Rvcnk6IFJEU19DQUxFTkRBUl9SQU5HRV9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZLFxufTtcbiJdfQ==