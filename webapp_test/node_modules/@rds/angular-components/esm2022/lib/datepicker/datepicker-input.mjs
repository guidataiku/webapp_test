import { DestroyRef, Directive, forwardRef, HostBinding, HostListener, inject, InjectionToken, Input, Renderer2, } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { merge, Subject } from 'rxjs';
import { RdsDatepickerInputBaseDirective, } from './datepicker-input.base';
import { RDS_FORM_FIELD } from '../form-field';
import { takeUntil } from 'rxjs/operators';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export const RDS_DATEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => RdsDatepickerInputDirective),
    multi: true,
};
export const RDS_DATEPICKER_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => RdsDatepickerInputDirective),
    multi: true,
};
export const RDS_INPUT_VALUE_ACCESSOR = new InjectionToken('RDS_INPUT_VALUE_ACCESSOR');
export class RdsDatepickerInputDirective extends RdsDatepickerInputBaseDirective {
    constructor() {
        super(...arguments);
        this.renderer = inject(Renderer2);
        this.destroyRef = inject(DestroyRef);
        this.formField = inject(RDS_FORM_FIELD, { optional: true });
        this._destroyDatepickerSubscriptions$ = new Subject();
        this.class = 'rds-datepicker-input';
        this._min = null;
        this._max = null;
        this._validator = Validators.compose(super._getValidators());
    }
    get ariaHasPopup() {
        return this._datepicker ? 'dialog' : null;
    }
    get ariaOwns() {
        return (this._datepicker?.opened && this._datepicker.id) || null;
    }
    get attrMin() {
        return this.min ? this.dateAdapter.toIso8601(this.min) : null;
    }
    get attrMax() {
        return this.max ? this.dateAdapter.toIso8601(this.max) : null;
    }
    get attrDataRdsCalendar() {
        return this._datepicker ? this._datepicker.id : null;
    }
    get attrDisabled() {
        return this.disabled ? true : null;
    }
    set rdsDatepicker(datepicker) {
        this._destroyDatepickerSubscriptions$.next();
        if (datepicker) {
            this._datepicker = datepicker;
            this._datepicker.closedStream
                .pipe(takeUntil(this._destroyDatepickerSubscriptions$), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this._onTouched());
            this._registerModel(datepicker.registerInput(this));
            merge(this._datepicker.stateChanges, this.dateAdapter.localeChanges)
                .pipe(takeUntil(this._destroyDatepickerSubscriptions$), takeUntilDestroyed(this.destroyRef))
                .subscribe(() => {
                this._setDefaultPlaceholder();
                this._formatValue(this.value);
            });
        }
    }
    get min() {
        return this._min;
    }
    set min(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._min)) {
            this._min = validValue;
            this._validatorOnChange();
        }
    }
    get max() {
        return this._max;
    }
    set max(value) {
        const validValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        if (!this.dateAdapter.sameDate(validValue, this._max)) {
            this._max = validValue;
            this._validatorOnChange();
        }
    }
    get dateFilter() {
        return this._dateFilter;
    }
    set dateFilter(value) {
        const wasMatchingValue = this._matchesFilter(this.value);
        this._dateFilter = value;
        if (this._matchesFilter(this.value) !== wasMatchingValue) {
            this._validatorOnChange();
        }
    }
    onInput($event) {
        this._onInput($event.target.value);
    }
    _onChange() {
        super._onChange();
    }
    _onBlur() {
        super._onBlur();
    }
    _onKeydown($event) {
        super._onKeydown($event);
    }
    getConnectedOverlayOrigin() {
        return this.formField
            ? this.formField.getConnectedOverlayOrigin()
            : this.elementRef;
    }
    getStartValue() {
        return this.value;
    }
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this._setDefaultPlaceholder();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._destroyDatepickerSubscriptions$.complete();
    }
    _formatValue(value) {
        this.elementRef.nativeElement.value = value
            ? this.dateAdapter.format(value, this.dateFormats.display.dateInput, this._datepicker?.availableViews)
            : '';
    }
    _openPopup() {
        if (this._datepicker) {
            this._datepicker.open();
        }
    }
    _getValueFromModel(modelValue) {
        return modelValue;
    }
    _assignValueToModel(value) {
        if (this._model) {
            this._model.updateSelection(value, this);
        }
    }
    _getMinDate() {
        return this._min;
    }
    _getMaxDate() {
        return this._max;
    }
    _getDateFilter() {
        return this._dateFilter;
    }
    _shouldHandleChangeEvent(event) {
        return event.source !== this;
    }
    _setDefaultPlaceholder() {
        if (this.elementRef && this.elementRef.nativeElement) {
            this.renderer.setAttribute(this.elementRef.nativeElement, 'date-placeholder', this._calculateDefaultPlaceholder());
        }
    }
    _calculateDefaultPlaceholder() {
        return this.dateAdapter.placeholderFormat(this.dateFormats.display.dateInput, this._datepicker?.availableViews);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerInputDirective, selector: "input[rdsDatepicker], input[rds-datepicker]", inputs: { rdsDatepicker: "rdsDatepicker", min: "min", max: "max", dateFilter: ["rdsDatepickerFilter", "dateFilter"] }, host: { listeners: { "input": "onInput($event)", "change": "_onChange()", "blur": "_onBlur()", "keydown": "_onKeydown($event)" }, properties: { "class": "this.class", "attr.aria-haspopup": "this.ariaHasPopup", "attr.aria-owns": "this.ariaOwns", "attr.min": "this.attrMin", "attr.max": "this.attrMax", "attr.data-rds-calendar": "this.attrDataRdsCalendar", "disabled": "this.attrDisabled" } }, providers: [
            RDS_DATEPICKER_VALUE_ACCESSOR,
            RDS_DATEPICKER_VALIDATORS,
            {
                provide: RDS_INPUT_VALUE_ACCESSOR,
                useExisting: RdsDatepickerInputDirective,
            },
        ], exportAs: ["rdsDatepickerInput"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsDatepicker], input[rds-datepicker]',
                    providers: [
                        RDS_DATEPICKER_VALUE_ACCESSOR,
                        RDS_DATEPICKER_VALIDATORS,
                        {
                            provide: RDS_INPUT_VALUE_ACCESSOR,
                            useExisting: RdsDatepickerInputDirective,
                        },
                    ],
                    exportAs: 'rdsDatepickerInput',
                }]
        }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], ariaHasPopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], attrMin: [{
                type: HostBinding,
                args: ['attr.min']
            }], attrMax: [{
                type: HostBinding,
                args: ['attr.max']
            }], attrDataRdsCalendar: [{
                type: HostBinding,
                args: ['attr.data-rds-calendar']
            }], attrDisabled: [{
                type: HostBinding,
                args: ['disabled']
            }], rdsDatepicker: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], dateFilter: [{
                type: Input,
                args: ['rdsDatepickerFilter']
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], _onChange: [{
                type: HostListener,
                args: ['change']
            }], _onBlur: [{
                type: HostListener,
                args: ['blur']
            }], _onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,