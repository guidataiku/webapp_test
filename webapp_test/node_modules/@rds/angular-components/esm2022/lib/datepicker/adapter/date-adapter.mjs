import { inject, InjectionToken, LOCALE_ID } from '@angular/core';
import { Subject } from 'rxjs';
export const RDS_DATE_LOCALE = new InjectionToken('RDS_DATE_LOCALE', {
    providedIn: 'root',
    factory: RDS_DATE_LOCALE_FACTORY,
});
export function RDS_DATE_LOCALE_FACTORY() {
    return inject(LOCALE_ID);
}
export class DateAdapter {
    constructor() {
        this._localeChanges = new Subject();
        this.localeChanges = this._localeChanges;
    }
    getValidDateOrNull(obj) {
        return this.isDateInstance(obj) && this.isValid(obj)
            ? obj
            : null;
    }
    deserialize(value) {
        if (value == null || (this.isDateInstance(value) && this.isValid(value))) {
            return value;
        }
        return this.invalid();
    }
    setLocale(locale) {
        this.locale = locale;
        this._localeChanges.next();
    }
    compareDate(first, second, granularity = 'day') {
        if (granularity === 'year') {
            return this.getYear(first) - this.getYear(second);
        }
        else if (granularity === 'month') {
            return (this.compareDate(first, second, 'year') ||
                this.getMonth(first) - this.getMonth(second));
        }
        else {
            return (this.compareDate(first, second, 'month') ||
                this.getDate(first) - this.getDate(second));
        }
    }
    sameDate(first, second, granularity = 'day') {
        if (first && second) {
            const firstValid = this.isValid(first);
            const secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second, granularity);
            }
            return firstValid == secondValid;
        }
        return first == second;
    }
    clampDate(date, min, max) {
        if (min && this.compareDate(date, min) < 0) {
            return min;
        }
        if (max && this.compareDate(date, max) > 0) {
            return max;
        }
        return date;
    }
}
//# sourceMappingURL=data:application/json;base64,