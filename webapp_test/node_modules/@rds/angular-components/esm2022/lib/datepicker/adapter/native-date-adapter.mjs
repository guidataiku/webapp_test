import { Platform } from '@angular/cdk/platform';
import { inject, Injectable } from '@angular/core';
import { DateAdapter, RDS_DATE_LOCALE } from './date-adapter';
import { RDS_CALENDAR_VIEW_ORDERED } from '../calendar.types';
import * as i0 from "@angular/core";
let SUPPORTS_INTL_API;
try {
    SUPPORTS_INTL_API = typeof Intl != 'undefined';
}
catch {
    SUPPORTS_INTL_API = false;
}
const DEFAULT_MONTH_NAMES = {
    long: [
        'January',
        'February',
        'March',
        'April',
        'May',
        'June',
        'July',
        'August',
        'September',
        'October',
        'November',
        'December',
    ],
    short: [
        'Jan',
        'Feb',
        'Mar',
        'Apr',
        'May',
        'Jun',
        'Jul',
        'Aug',
        'Sep',
        'Oct',
        'Nov',
        'Dec',
    ],
    narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
};
const DEFAULT_DATE_NAMES = range(31, (i) => String(i + 1));
const DEFAULT_DAY_OF_WEEK_NAMES = {
    long: [
        'Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
    ],
    short: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
};
const ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
function range(length, valueFunction) {
    const valuesArray = Array(length);
    for (let i = 0; i < length; i++) {
        valuesArray[i] = valueFunction(i);
    }
    return valuesArray;
}
export class NativeDateAdapter extends DateAdapter {
    constructor() {
        super();
        this.rdsDateLocale = inject(RDS_DATE_LOCALE, {
            optional: true,
        });
        this.platform = inject(Platform);
        this.useUtcForDisplay = true;
        super.setLocale(this.rdsDateLocale);
        this.useUtcForDisplay = !this.platform.TRIDENT;
        this._clampDate = this.platform.TRIDENT || this.platform.EDGE;
    }
    getYear(date) {
        return date.getFullYear();
    }
    getMonth(date) {
        return date.getMonth();
    }
    getDate(date) {
        return date.getDate();
    }
    getDayOfWeek(date) {
        return date.getDay();
    }
    getMonthNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                month: style,
                timeZone: 'utc',
            });
            return range(12, (i) => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));
        }
        return DEFAULT_MONTH_NAMES[style];
    }
    getDateNames() {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                day: 'numeric',
                timeZone: 'utc',
            });
            return range(31, (i) => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DATE_NAMES;
    }
    getDayOfWeekNames(style) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                weekday: style,
                timeZone: 'utc',
            });
            return range(7, (i) => this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, 0, i + 1))));
        }
        return DEFAULT_DAY_OF_WEEK_NAMES[style];
    }
    getYearName(date) {
        if (SUPPORTS_INTL_API) {
            const dtf = new Intl.DateTimeFormat(this.locale, {
                year: 'numeric',
                timeZone: 'utc',
            });
            return this._stripDirectionalityCharacters(this._format(dtf, date));
        }
        return String(this.getYear(date));
    }
    getFirstDayOfWeek() {
        return 0;
    }
    getNumDaysInMonth(date) {
        return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
    }
    clone(date) {
        return new Date(date.getTime());
    }
    createDate(year, month, date) {
        if (month < 0 || month > 11) {
            throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
        }
        if (date < 1) {
            throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
        }
        const result = this._createDateWithOverflow(year, month, date);
        if (result.getMonth() != month) {
            throw Error(`Invalid date "${date}" for month with index "${month}".`);
        }
        return result;
    }
    today() {
        return new Date();
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    parse(value) {
        if (typeof value == 'number') {
            return new Date(value);
        }
        return value ? new Date(Date.parse(value)) : null;
    }
    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */
    format(date, displayFormat, availableViews = RDS_CALENDAR_VIEW_ORDERED) {
        if (!this.isValid(date)) {
            throw Error('NativeDateAdapter: Cannot format invalid date.');
        }
        if (SUPPORTS_INTL_API) {
            if (this._clampDate &&
                (date.getFullYear() < 1 || date.getFullYear() > 9999)) {
                date = this.clone(date);
                date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));
            }
            displayFormat = { ...displayFormat, timeZone: 'utc' };
            if (!availableViews.includes('multi-year')) {
                displayFormat.year = undefined;
            }
            if (!availableViews.includes('year')) {
                displayFormat.month = undefined;
            }
            if (!availableViews.includes('month')) {
                displayFormat.day = undefined;
            }
            const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);
            return this._stripDirectionalityCharacters(this._format(dtf, date));
        }
        return this._stripDirectionalityCharacters(date.toDateString());
    }
    placeholderFormat(displayFormat, availableViews = RDS_CALENDAR_VIEW_ORDERED) {
        if (SUPPORTS_INTL_API) {
            const dateFormat = new Intl.DateTimeFormat(this.locale, displayFormat);
            const resolvedOptions = dateFormat.resolvedOptions();
            let year = '';
            if (availableViews.includes('multi-year')) {
                switch (resolvedOptions.year) {
                    case 'numeric': {
                        year = 'YYYY';
                        break;
                    }
                    case '2-digit': {
                        year = 'YY';
                        break;
                    }
                }
            }
            let month = '';
            if (availableViews.includes('year')) {
                switch (resolvedOptions.month) {
                    case '2-digit':
                    // eslint-disable-next-line no-fallthrough
                    case 'numeric': {
                        month = 'MM';
                        break;
                    }
                    case 'short': {
                        month = 'MMM';
                        break;
                    }
                    case 'long': {
                        month = 'MMMM';
                        break;
                    }
                }
            }
            let day = '';
            if (availableViews.includes('month')) {
                switch (resolvedOptions.day) {
                    case '2-digit':
                    // eslint-disable-next-line no-fallthrough
                    case 'numeric': {
                        day = 'DD';
                        break;
                    }
                }
            }
            const parts = dateFormat.formatToParts();
            return parts
                .map((p) => {
                switch (p.type) {
                    case 'day':
                        return day;
                    case 'month':
                        return month;
                    case 'year':
                        return year;
                    default:
                        return p.value;
                }
            })
                .join('')
                .trim();
        }
        else {
            return '';
        }
    }
    addCalendarYears(date, years) {
        return this.addCalendarMonths(date, years * 12);
    }
    addCalendarMonths(date, months) {
        let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
        if (this.getMonth(newDate) !=
            (((this.getMonth(date) + months) % 12) + 12) % 12) {
            newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
        }
        return newDate;
    }
    addCalendarDays(date, days) {
        return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
    }
    toIso8601(date) {
        return [
            date.getUTCFullYear(),
            this._2digit(date.getUTCMonth() + 1),
            this._2digit(date.getUTCDate()),
        ].join('-');
    }
    deserialize(value) {
        if (typeof value === 'string') {
            if (!value) {
                return null;
            }
            if (ISO_8601_REGEX.test(value)) {
                const date = new Date(value);
                if (this.isValid(date)) {
                    return date;
                }
            }
        }
        return super.deserialize(value);
    }
    isDateInstance(obj) {
        return obj instanceof Date;
    }
    isValid(date) {
        return !isNaN(date.getTime());
    }
    invalid() {
        return new Date(NaN);
    }
    _createDateWithOverflow(year, month, date) {
        const d = new Date();
        d.setFullYear(year, month, date);
        d.setHours(0, 0, 0, 0);
        return d;
    }
    _2digit(n) {
        return ('00' + n).slice(-2);
    }
    _stripDirectionalityCharacters(str) {
        return str.replace(/[\u200e\u200f]/g, '');
    }
    _format(dtf, date) {
        const d = new Date();
        d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
        d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
        return dtf.format(d);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateAdapter, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateAdapter }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: NativeDateAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,