import { ComponentPortal } from '@angular/cdk/portal';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, forwardRef, HostBinding, inject, Input, isDevMode, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { DateAdapter, RDS_DATE_FORMATS } from './adapter';
import { Subject } from 'rxjs';
import { createMissingDateImplError } from './datepicker-errors';
import { RdsDatepickerIntl } from './datepicker.intl';
import { RdsMonthViewComponent } from './month-view.component';
import { getActiveOffset, isSameMultiYearView, RdsMultiYearViewComponent, yearsPerPage, } from './multi-year-view.component';
import { RdsYearViewComponent } from './year-view.component';
import { DateRange, RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER, } from './date-selection.model';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/a11y";
import * as i2 from "@angular/cdk/portal";
import * as i3 from "./month-view.component";
import * as i4 from "./year-view.component";
import * as i5 from "./multi-year-view.component";
import * as i6 from "../button/icon-button.component";
import * as i7 from "../icons/icon.component";
import * as i8 from "../toggle-button/toggle-button.component";
import * as i9 from "../toggle-button/toggle.directive";
let uniqueId = 0;
export class RdsCalendarComponent {
    get startAt() {
        return this._startAt;
    }
    set startAt(value) {
        this._startAt = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    set showToggle(value) {
        const newValue = booleanAttribute(value);
        if (this._showToggle !== newValue) {
            this._showToggle = newValue;
            this.stateChanges.next();
            this.cdr.markForCheck();
        }
    }
    get showToggle() {
        return this._showToggle;
    }
    get activeDate() {
        return this._clampedActiveDate;
    }
    set activeDate(value) {
        this._clampedActiveDate = this.dateAdapter.clampDate(value, this.minDate, this.maxDate);
        this.stateChanges.next();
        this.cdr.markForCheck();
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(value) {
        const viewChangedResult = this._currentView !== value ? value : null;
        this._currentView = value;
        this._moveFocusOnNextTick = true;
        this.cdr.markForCheck();
        if (viewChangedResult) {
            this.viewChanged.emit(viewChangedResult);
        }
    }
    get availableViews() {
        return this._availableViews;
    }
    set availableViews(value) {
        this._availableViews = value;
        this._moveFocusOnNextTick = true;
        this.cdr.markForCheck();
    }
    constructor() {
        this.intl = inject(RdsDatepickerIntl);
        this.cdr = inject(ChangeDetectorRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this.class = 'rds-calendar';
        this.headerComponent = null;
        this._calendarHeaderPortal = null;
        this._moveFocusOnNextTick = false;
        this._startAt = null;
        this.startView = 'month';
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this.isMonthDisabled = false;
        this.isMultiYearDisabled = false;
        this.isYearDisabled = false;
        this.selectedChange = new EventEmitter();
        this.yearSelected = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this.viewChanged = new EventEmitter(true);
        this._userSelection = new EventEmitter();
        this.monthView = null;
        this.yearView = null;
        this.multiYearView = null;
        this._clampedActiveDate = null;
        this._currentView = null;
        this._availableViews = ['month', 'year', 'multi-year'];
        this._showToggle = null;
        this.stateChanges = new Subject();
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._intlChanges = this.intl.changes.subscribe(() => {
            this.cdr.markForCheck();
            this.stateChanges.next();
        });
    }
    ngAfterContentInit() {
        this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || RdsCalendarHeaderComponent);
        this.activeDate = this.startAt || this.dateAdapter.today();
        this._currentView = this.startView;
    }
    ngAfterViewChecked() {
        if (this._moveFocusOnNextTick) {
            this._moveFocusOnNextTick = false;
            this.focusActiveCell();
        }
    }
    ngOnDestroy() {
        this._intlChanges.unsubscribe();
        this.stateChanges.complete();
    }
    ngOnChanges(changes) {
        const change = changes['minDate'] || changes['maxDate'] || changes['dateFilter'];
        if (change && !change.firstChange) {
            const view = this._getCurrentViewComponent();
            if (view) {
                this.cdr.detectChanges();
                view._init();
            }
        }
        this.stateChanges.next();
    }
    focusActiveCell() {
        this._getCurrentViewComponent()?._focusActiveCell(false);
    }
    updateTodaysDate() {
        const currentView = this.currentView;
        let view;
        if (currentView === 'month') {
            view = this.monthView;
        }
        else if (currentView === 'year') {
            view = this.yearView;
        }
        else {
            view = this.multiYearView;
        }
        view?._init();
    }
    _dateSelected(event) {
        const date = event.value;
        if (date &&
            !this.dateAdapter.sameDate(this.activeDate, date, 'month') &&
            !(this.selected instanceof DateRange)) {
            this.activeDate = date;
        }
        if (this.selected instanceof DateRange ||
            (date && !this.dateAdapter.sameDate(date, this.selected))) {
            this.selectedChange.emit(date);
        }
        this._userSelection.emit(event);
    }
    _yearSelectedInMultiYearView(event) {
        const normalizedYear = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), 0, 1);
        this.yearSelected.emit(normalizedYear);
        this._goToDateInViewIfAvailable(event, normalizedYear, 'year');
    }
    _monthSelectedInYearView(event) {
        const normalizedMonth = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), this.dateAdapter.getMonth(event.value), 1);
        this.monthSelected.emit(normalizedMonth);
        this._goToDateInViewIfAvailable(event, normalizedMonth, 'month');
    }
    _goToDateInViewIfAvailable(event, normalizedDate, view) {
        this.activeDate = event.value;
        if (view && this.availableViews.includes(view)) {
            this.currentView = view;
        }
        else {
            this._dateSelected({
                value: this.dateAdapter.clone(normalizedDate),
                event: event.event,
            });
        }
    }
    _getCurrentViewComponent() {
        return this.monthView || this.yearView || this.multiYearView;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCalendarComponent, selector: "rds-calendar", inputs: { headerComponent: "headerComponent", startAt: "startAt", startView: "startView", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass", comparisonStart: "comparisonStart", comparisonEnd: "comparisonEnd", isMonthDisabled: ["isMonthDisabled", "isMonthDisabled", booleanAttribute], isMultiYearDisabled: ["isMultiYearDisabled", "isMultiYearDisabled", booleanAttribute], isYearDisabled: ["isYearDisabled", "isYearDisabled", booleanAttribute], showToggle: "showToggle", availableViews: "availableViews" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", monthSelected: "monthSelected", viewChanged: "viewChanged", _userSelection: "_userSelection" }, host: { properties: { "class": "this.class" } }, providers: [RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER], viewQueries: [{ propertyName: "monthView", first: true, predicate: RdsMonthViewComponent, descendants: true }, { propertyName: "yearView", first: true, predicate: RdsYearViewComponent, descendants: true }, { propertyName: "multiYearView", first: true, predicate: RdsMultiYearViewComponent, descendants: true }], exportAs: ["rdsCalendar"], usesOnChanges: true, ngImport: i0, template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\" />\n\n<div class=\"rds-calendar-content\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  @switch (currentView) {\n    @case ('month') {\n      <rds-month-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        [comparisonStart]=\"comparisonStart\"\n        [comparisonEnd]=\"comparisonEnd\"\n        (_userSelection)=\"_dateSelected($event)\"\n      />\n    }\n    @case ('year') {\n      <rds-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n      />\n    }\n    @case ('multi-year') {\n      <rds-multi-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      />\n    }\n  }\n</div>\n", styles: [".rds-calendar{display:block;background:var(--rds-color-bg-base-box)}.rds-calendar-header{padding:16px 16px 0;border-bottom:1px solid var(--rds-color-grey-2);margin-bottom:12px}.rds-calendar-header .rds-calendar-controls-button-wrapper{display:inline-flex}.rds-calendar-content{padding:0 16px;outline:none}.rds-calendar-controls{display:flex;justify-content:flex-start;margin-bottom:16px;align-items:center}.rds-calendar-controls.rds-calendar-view-mode{justify-content:flex-start;margin-top:0}.rds-calendar-controls.rds-calendar-period-arrows{display:flex;justify-content:space-between}.rds-calendar-spacer{flex:1 1 auto}.rds-calendar-period-button{min-width:0}.rds-calendar-period-button-text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.rds-calendar-arrow.rds-calendar-invert{transform:rotate(180deg)}[dir=rtl] .rds-calendar-arrow{margin:0 5px 0 0}.rds-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.rds-calendar-table-header th{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);text-align:center;padding:0;height:40px}.rds-calendar-table-header th.rds-calendar-table-header-divider{position:relative;height:0}.rds-calendar-table-header th.rds-calendar-table-header-divider:after{content:\"\";position:absolute;top:0;left:-16px;right:-16px;height:0}.rds-calendar-previous-button{margin-right:12px}\n"], dependencies: [{ kind: "directive", type: i1.CdkMonitorFocus, selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]", outputs: ["cdkFocusChange"], exportAs: ["cdkMonitorFocus"] }, { kind: "directive", type: i2.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "component", type: i3.RdsMonthViewComponent, selector: "rds-month-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter", "dateClass", "comparisonStart", "comparisonEnd"], outputs: ["selectedChange", "_userSelection", "activeDateChange"], exportAs: ["rdsMonthView"] }, { kind: "component", type: i4.RdsYearViewComponent, selector: "rds-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter", "dateClass"], outputs: ["selectedChange", "monthSelected", "activeDateChange"], exportAs: ["rdsYearView"] }, { kind: "component", type: i5.RdsMultiYearViewComponent, selector: "rds-multi-year-view", inputs: ["activeDate", "selected", "minDate", "maxDate", "dateFilter", "dateClass"], outputs: ["selectedChange", "yearSelected", "activeDateChange"], exportAs: ["rdsMultiYearView"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-calendar', exportAs: 'rdsCalendar', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER], template: "<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\" />\n\n<div class=\"rds-calendar-content\" cdkMonitorSubtreeFocus tabindex=\"-1\">\n  @switch (currentView) {\n    @case ('month') {\n      <rds-month-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        [comparisonStart]=\"comparisonStart\"\n        [comparisonEnd]=\"comparisonEnd\"\n        (_userSelection)=\"_dateSelected($event)\"\n      />\n    }\n    @case ('year') {\n      <rds-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (monthSelected)=\"_monthSelectedInYearView($event)\"\n      />\n    }\n    @case ('multi-year') {\n      <rds-multi-year-view\n        [(activeDate)]=\"activeDate\"\n        [selected]=\"selected\"\n        [dateFilter]=\"dateFilter\"\n        [maxDate]=\"maxDate\"\n        [minDate]=\"minDate\"\n        [dateClass]=\"dateClass\"\n        (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\n      />\n    }\n  }\n</div>\n", styles: [".rds-calendar{display:block;background:var(--rds-color-bg-base-box)}.rds-calendar-header{padding:16px 16px 0;border-bottom:1px solid var(--rds-color-grey-2);margin-bottom:12px}.rds-calendar-header .rds-calendar-controls-button-wrapper{display:inline-flex}.rds-calendar-content{padding:0 16px;outline:none}.rds-calendar-controls{display:flex;justify-content:flex-start;margin-bottom:16px;align-items:center}.rds-calendar-controls.rds-calendar-view-mode{justify-content:flex-start;margin-top:0}.rds-calendar-controls.rds-calendar-period-arrows{display:flex;justify-content:space-between}.rds-calendar-spacer{flex:1 1 auto}.rds-calendar-period-button{min-width:0}.rds-calendar-period-button-text{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.rds-calendar-arrow{display:inline-block;width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top-width:5px;border-top-style:solid;margin:0 0 0 5px;vertical-align:middle}.rds-calendar-arrow.rds-calendar-invert{transform:rotate(180deg)}[dir=rtl] .rds-calendar-arrow{margin:0 5px 0 0}.rds-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.rds-calendar-table-header th{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;color:var(--rds-color-low-contrast);text-align:center;padding:0;height:40px}.rds-calendar-table-header th.rds-calendar-table-header-divider{position:relative;height:0}.rds-calendar-table-header th.rds-calendar-table-header-divider:after{content:\"\";position:absolute;top:0;left:-16px;right:-16px;height:0}.rds-calendar-previous-button{margin-right:12px}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], headerComponent: [{
                type: Input
            }], startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], comparisonStart: [{
                type: Input
            }], comparisonEnd: [{
                type: Input
            }], isMonthDisabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isMultiYearDisabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isYearDisabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showToggle: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], _userSelection: [{
                type: Output
            }], monthView: [{
                type: ViewChild,
                args: [RdsMonthViewComponent]
            }], yearView: [{
                type: ViewChild,
                args: [RdsYearViewComponent]
            }], multiYearView: [{
                type: ViewChild,
                args: [RdsMultiYearViewComponent]
            }], availableViews: [{
                type: Input
            }] } });
export class RdsCalendarHeaderComponent {
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.intl = inject(RdsDatepickerIntl);
        this.calendar = inject(forwardRef(() => RdsCalendarComponent));
        this.dateAdapter = inject(DateAdapter);
        this.dateFormats = inject(RDS_DATE_FORMATS);
        this._buttonDescriptionId = `rds-calendar-button-${uniqueId++}`;
        this.calendar.stateChanges.subscribe(() => this.cdr.markForCheck());
    }
    get periodButtonText() {
        if (this.calendar.currentView === 'month') {
            return this.dateAdapter.format(this.calendar.activeDate, this.dateFormats.display.monthYearLabel);
        }
        if (this.calendar.currentView === 'year') {
            return this.dateAdapter.getYearName(this.calendar.activeDate);
        }
        const activeYear = this.dateAdapter.getYear(this.calendar.activeDate);
        const minYearOfPage = activeYear -
            getActiveOffset(this.dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);
        const maxYearOfPage = minYearOfPage + yearsPerPage - 1;
        const minYearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(minYearOfPage, 0, 1));
        const maxYearName = this.dateAdapter.getYearName(this.dateAdapter.createDate(maxYearOfPage, 0, 1));
        return this.intl.formatYearRange(minYearName, maxYearName);
    }
    get periodButtonLabel() {
        return this.calendar.currentView === 'month'
            ? this.intl.switchToMultiYearViewLabel
            : this.intl.switchToMonthViewLabel;
    }
    get prevButtonLabel() {
        return {
            month: this.intl.prevMonthLabel,
            year: this.intl.prevYearLabel,
            'multi-year': this.intl.prevMultiYearLabel,
        }[this.calendar.currentView];
    }
    get nextButtonLabel() {
        return {
            month: this.intl.nextMonthLabel,
            year: this.intl.nextYearLabel,
            'multi-year': this.intl.nextMultiYearLabel,
        }[this.calendar.currentView];
    }
    currentPeriodClicked() {
        this.calendar.currentView =
            this.calendar.currentView == 'month' ? 'multi-year' : 'month';
    }
    previousClicked() {
        this.calendar.activeDate =
            this.calendar.currentView === 'month'
                ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)
                : this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? -1 : -yearsPerPage);
    }
    nextClicked() {
        this.calendar.activeDate =
            this.calendar.currentView === 'month'
                ? this.dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)
                : this.dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView === 'year' ? 1 : yearsPerPage);
    }
    previousEnabled() {
        if (!this.calendar.minDate) {
            return true;
        }
        return (!this.calendar.minDate ||
            !this._isSameView(this.calendar.activeDate, this.calendar.minDate));
    }
    nextEnabled() {
        return (!this.calendar.maxDate ||
            !this._isSameView(this.calendar.activeDate, this.calendar.maxDate));
    }
    _isSameView(date1, date2) {
        if (this.calendar.currentView === 'month') {
            return (this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2) &&
                this.dateAdapter.getMonth(date1) === this.dateAdapter.getMonth(date2));
        }
        if (this.calendar.currentView === 'year') {
            return (this.dateAdapter.getYear(date1) === this.dateAdapter.getYear(date2));
        }
        return isSameMultiYearView(this.dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsCalendarHeaderComponent, selector: "rds-calendar-header", exportAs: ["rdsCalendarHeader"], ngImport: i0, template: "<div class=\"rds-calendar-header\">\n  @if (calendar.showToggle) {\n    <div class=\"rds-calendar-controls rds-calendar-view-mode\">\n      <rds-toggle\n        [(value)]=\"calendar.currentView\"\n        [attr.aria-label]=\"periodButtonLabel\"\n        [attr.aria-describedby]=\"_buttonDescriptionId\"\n        [attr.id]=\"_buttonDescriptionId\"\n        type=\"outlined\"\n        cdkAriaLive=\"polite\"\n      >\n        @if (calendar.availableViews.includes('month')) {\n          <rds-toggle-button [disabled]=\"calendar.isMonthDisabled\" value=\"month\"\n            >{{ intl.monthLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('year')) {\n          <rds-toggle-button [disabled]=\"calendar.isYearDisabled\" value=\"year\"\n            >{{ intl.yearLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('multi-year')) {\n          <rds-toggle-button\n            [disabled]=\"calendar.isMultiYearDisabled\"\n            value=\"multi-year\"\n            >{{ intl.multiYearLabel }}\n          </rds-toggle-button>\n        }\n      </rds-toggle>\n    </div>\n  }\n  <div class=\"rds-calendar-controls rds-calendar-period-arrows\">\n    <span\n      [attr.id]=\"_buttonDescriptionId\"\n      class=\"rds-calendar-period-button-text\"\n      >{{ periodButtonText }}</span\n    >\n    <div class=\"rds-calendar-controls-button-wrapper\">\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"prevButtonLabel\"\n        [disabled]=\"!previousEnabled()\"\n        (click)=\"previousClicked()\"\n        class=\"rds-calendar-previous-button\"\n      >\n        <rds-icon icon=\"chevron_left\" namespace=\"filled\" />\n      </button>\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"nextButtonLabel\"\n        [disabled]=\"!nextEnabled()\"\n        (click)=\"nextClicked()\"\n        class=\"rds-calendar-next-button\"\n      >\n        <rds-icon icon=\"chevron_right\" namespace=\"filled\" />\n      </button>\n    </div>\n    <ng-content />\n  </div>\n</div>\n", dependencies: [{ kind: "component", type: i6.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: i1.CdkAriaLive, selector: "[cdkAriaLive]", inputs: ["cdkAriaLive", "cdkAriaLiveDuration"], exportAs: ["cdkAriaLive"] }, { kind: "component", type: i7.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: i8.RdsToggleButtonComponent, selector: "rds-toggle-button", inputs: ["aria-label", "aria-labelledby", "value", "checked", "disabled"], outputs: ["changed"] }, { kind: "directive", type: i9.RdsToggleDirective, selector: "rds-toggle", inputs: ["type", "disabled", "value"], outputs: ["valueChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsCalendarHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-calendar-header', exportAs: 'rdsCalendarHeader', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"rds-calendar-header\">\n  @if (calendar.showToggle) {\n    <div class=\"rds-calendar-controls rds-calendar-view-mode\">\n      <rds-toggle\n        [(value)]=\"calendar.currentView\"\n        [attr.aria-label]=\"periodButtonLabel\"\n        [attr.aria-describedby]=\"_buttonDescriptionId\"\n        [attr.id]=\"_buttonDescriptionId\"\n        type=\"outlined\"\n        cdkAriaLive=\"polite\"\n      >\n        @if (calendar.availableViews.includes('month')) {\n          <rds-toggle-button [disabled]=\"calendar.isMonthDisabled\" value=\"month\"\n            >{{ intl.monthLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('year')) {\n          <rds-toggle-button [disabled]=\"calendar.isYearDisabled\" value=\"year\"\n            >{{ intl.yearLabel }}\n          </rds-toggle-button>\n        }\n        @if (calendar.availableViews.includes('multi-year')) {\n          <rds-toggle-button\n            [disabled]=\"calendar.isMultiYearDisabled\"\n            value=\"multi-year\"\n            >{{ intl.multiYearLabel }}\n          </rds-toggle-button>\n        }\n      </rds-toggle>\n    </div>\n  }\n  <div class=\"rds-calendar-controls rds-calendar-period-arrows\">\n    <span\n      [attr.id]=\"_buttonDescriptionId\"\n      class=\"rds-calendar-period-button-text\"\n      >{{ periodButtonText }}</span\n    >\n    <div class=\"rds-calendar-controls-button-wrapper\">\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"prevButtonLabel\"\n        [disabled]=\"!previousEnabled()\"\n        (click)=\"previousClicked()\"\n        class=\"rds-calendar-previous-button\"\n      >\n        <rds-icon icon=\"chevron_left\" namespace=\"filled\" />\n      </button>\n      <button\n        rds-icon-button\n        size=\"m\"\n        type=\"button\"\n        [attr.aria-label]=\"nextButtonLabel\"\n        [disabled]=\"!nextEnabled()\"\n        (click)=\"nextClicked()\"\n        class=\"rds-calendar-next-button\"\n      >\n        <rds-icon icon=\"chevron_right\" namespace=\"filled\" />\n      </button>\n    </div>\n    <ng-content />\n  </div>\n</div>\n" }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,