import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW, } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, inject, Input, isDevMode, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { DateAdapter } from './adapter';
import { Directionality } from '@angular/cdk/bidi';
import { RdsCalendarBodyComponent, RdsCalendarCell, } from './calendar-body.component';
import { createMissingDateImplError } from './datepicker-errors';
import { Subscription } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { DateRange } from './date-selection.model';
import * as i0 from "@angular/core";
import * as i1 from "./calendar-body.component";
export const yearsPerPage = 28;
export const yearsPerRow = 4;
export class RdsMultiYearViewComponent {
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (!isSameMultiYearView(this.dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {
            this._init();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
        this._setSelectedYear(value);
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dir = inject(Directionality, { optional: true });
        this._rerenderSubscription = Subscription.EMPTY;
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.selectedChange = new EventEmitter();
        this.yearSelected = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this._rdsCalendarBody = null;
        this._years = null;
        this._todayYear = null;
        this._selectedYear = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        this._activeDate = this.dateAdapter.today();
    }
    ngAfterContentInit() {
        this._rerenderSubscription = this.dateAdapter.localeChanges
            .pipe(startWith(null))
            .subscribe(() => this._init());
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    _init() {
        this._todayYear = this.dateAdapter.getYear(this.dateAdapter.today());
        const activeYear = this.dateAdapter.getYear(this._activeDate);
        const minYearOfPage = activeYear -
            getActiveOffset(this.dateAdapter, this.activeDate, this.minDate, this.maxDate);
        this._years = [];
        for (let i = 0, row = []; i < yearsPerPage; i++) {
            row.push(minYearOfPage + i);
            if (row.length == yearsPerRow) {
                this._years.push(row.map((year) => this._createCellForYear(year)));
                row = [];
            }
        }
        this.cdr.markForCheck();
    }
    _onYearSelected(event) {
        this._yearSelected({
            value: this.dateAdapter.clone(event.value.rawValue),
            event: event.event,
        });
    }
    _yearSelected(event) {
        const month = this.dateAdapter.getMonth(this.activeDate);
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), month, 1));
        const date = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), month, Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth));
        this.yearSelected.emit({ value: date, event: event.event });
        this.selectedChange.emit(date);
    }
    _handleCalendarBodyKeydown(event) {
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);
                break;
            case DOWN_ARROW:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);
                break;
            case HOME:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this.dateAdapter, this.activeDate, this.minDate, this.maxDate));
                break;
            case END:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, yearsPerPage -
                    getActiveOffset(this.dateAdapter, this.activeDate, this.minDate, this.maxDate) -
                    1);
                break;
            case PAGE_UP:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);
                break;
            case PAGE_DOWN:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);
                break;
            case ENTER:
            case SPACE:
                this._yearSelected({
                    value: this.dateAdapter.createDate(this.dateAdapter.getYear(this._activeDate), 0, 1),
                    event,
                });
                break;
            default:
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        event.preventDefault();
    }
    _getActiveCell() {
        if (this._years) {
            for (let i = 0; i < this._years.length; i++) {
                for (let j = 0; j < this._years[i].length; j++) {
                    const cell = this._years[i][j];
                    if (cell &&
                        this.dateAdapter.sameDate(cell.rawValue, this.activeDate, 'year')) {
                        return cell;
                    }
                }
            }
        }
        return null;
    }
    _focusActiveCell() {
        this._rdsCalendarBody?._focusActiveCell();
    }
    _createCellForYear(year) {
        const date = this.dateAdapter.createDate(year, 0, 1);
        const yearName = this.dateAdapter.getYearName(date);
        const cellClasses = this.dateClass
            ? this.dateClass(date, 'multi-year')
            : undefined;
        return new RdsCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses, date);
    }
    _shouldEnableYear(year) {
        if (year === undefined ||
            year === null ||
            (this.maxDate && year > this.dateAdapter.getYear(this.maxDate)) ||
            (this.minDate && year < this.dateAdapter.getYear(this.minDate))) {
            return false;
        }
        if (!this.dateFilter) {
            return true;
        }
        const firstOfYear = this.dateAdapter.createDate(year, 0, 1);
        for (let date = firstOfYear; this.dateAdapter.getYear(date) == year; date = this.dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    _isRtl() {
        return !!(this.dir && this.dir.value === 'rtl');
    }
    _setSelectedYear(value) {
        this._selectedYear = null;
        if (value instanceof DateRange) {
            const displayValue = value.start || value.end;
            if (displayValue) {
                this._selectedYear = this.dateAdapter.getYear(displayValue);
            }
        }
        else if (value) {
            this._selectedYear = this.dateAdapter.getYear(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiYearViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsMultiYearViewComponent, selector: "rds-multi-year-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass" }, outputs: { selectedChange: "selectedChange", yearSelected: "yearSelected", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_rdsCalendarBody", first: true, predicate: RdsCalendarBodyComponent, descendants: true }], exportAs: ["rdsMultiYearView"], ngImport: i0, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [rows]=\"_years\"\n    [todayValue]=\"_todayYear\"\n    [startValue]=\"_selectedYear\"\n    [endValue]=\"_selectedYear\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onYearSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n", dependencies: [{ kind: "component", type: i1.RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: ["label", "rows", "todayValue", "startValue", "endValue", "labelMinRequiredCells", "numCols", "activeCell", "isRange", "cellAspectRatio", "comparisonStart", "comparisonEnd", "previewStart", "previewEnd"], outputs: ["selectedValueChange", "previewChange"], exportAs: ["rdsCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMultiYearViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-multi-year-view', exportAs: 'rdsMultiYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [rows]=\"_years\"\n    [todayValue]=\"_todayYear\"\n    [startValue]=\"_selectedYear\"\n    [endValue]=\"_selectedYear\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onYearSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n" }]
        }], ctorParameters: () => [], propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], yearSelected: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _rdsCalendarBody: [{
                type: ViewChild,
                args: [RdsCalendarBodyComponent]
            }] } });
export function isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {
    const year1 = dateAdapter.getYear(date1);
    const year2 = dateAdapter.getYear(date2);
    const startingYear = getStartingYear(dateAdapter, minDate, maxDate);
    return (Math.floor((year1 - startingYear) / yearsPerPage) ===
        Math.floor((year2 - startingYear) / yearsPerPage));
}
export function getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {
    const activeYear = dateAdapter.getYear(activeDate);
    return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);
}
function getStartingYear(dateAdapter, minDate, maxDate) {
    let startingYear = 0;
    if (maxDate) {
        const maxYear = dateAdapter.getYear(maxDate);
        startingYear = maxYear - yearsPerPage + 1;
    }
    else if (minDate) {
        startingYear = dateAdapter.getYear(minDate);
    }
    return startingYear;
}
function euclideanModulo(a, b) {
    return ((a % b) + b) % b;
}
//# sourceMappingURL=data:application/json;base64,