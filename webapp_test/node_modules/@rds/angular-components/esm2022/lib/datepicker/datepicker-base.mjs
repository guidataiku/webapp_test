import { coerceBooleanProperty, coerceStringArray, } from '@angular/cdk/coercion';
import { ESCAPE, hasModifierKey, UP_ARROW } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig, } from '@angular/cdk/overlay';
import { ComponentPortal, } from '@angular/cdk/portal';
import { DOCUMENT } from '@angular/common';
import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, inject, InjectionToken, Input, isDevMode, NgZone, Output, ViewChild, ViewContainerRef, ViewEncapsulation, } from '@angular/core';
import { DateAdapter } from './adapter';
import { merge, Subject, Subscription } from 'rxjs';
import { filter, map, startWith, take } from 'rxjs/operators';
import { RdsCalendarComponent } from './calendar.component';
import { RDS_CALENDAR_VIEW_ORDERED } from './calendar.types';
import { createMissingDateImplError } from './datepicker-errors';
import { DateRange, RdsDateSelectionModel, } from './date-selection.model';
import { RDS_DATE_RANGE_SELECTION_STRATEGY, } from './date-range-selection.strategy';
import { RdsDatepickerIntl } from './datepicker.intl';
import { RdsDialogService } from '../dialog';
import { animate, state, style, transition, trigger, } from '@angular/animations';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../button/button.component";
import * as i3 from "@angular/cdk/a11y";
import * as i4 from "@angular/cdk/portal";
import * as i5 from "./calendar.component";
let datepickerUid = 0;
export const RDS_DATEPICKER_SCROLL_STRATEGY = new InjectionToken('RDS_DATEPICKER_SCROLL_STRATEGY');
export function RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
export const RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: RDS_DATEPICKER_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: RDS_DATEPICKER_SCROLL_STRATEGY_FACTORY,
};
class RdsDatepickerContentBase {
    constructor() {
        this._elementRef = inject(ElementRef);
    }
}
export class RdsDatepickerContentComponent extends RdsDatepickerContentBase {
    get isContentTouch() {
        return this.datepicker && this.datepicker.touchUi ? true : null;
    }
    get transformPanel() {
        return this._animationState;
    }
    _onAnimationDone() {
        this._animationDone.next();
    }
    constructor() {
        super();
        this._elementRef = inject(ElementRef);
        this.cdr = inject(ChangeDetectorRef);
        this.globalModel = inject(RdsDateSelectionModel);
        this.dateAdapter = inject(DateAdapter);
        this.rangeSelectionStrategy = inject(RDS_DATE_RANGE_SELECTION_STRATEGY, { optional: true });
        this.intl = inject(RdsDatepickerIntl);
        this._subscriptions = new Subscription();
        this._model = null;
        this.class = 'rds-datepicker-content';
        this._calendar = null;
        this.datepicker = null;
        this.comparisonStart = null;
        this.comparisonEnd = null;
        this._animationState = 'enter';
        this._animationDone = new Subject();
        this._closeButtonText = null;
        this._closeButtonFocused = null;
        this._actionsPortal = null;
        this.intl.changes
            .pipe(startWith(this.intl.closeCalendarLabel), map(() => this.intl.closeCalendarLabel || 'Close calendar'), takeUntilDestroyed())
            .subscribe((value) => {
            this._closeButtonText = value;
            this.cdr.markForCheck();
        });
    }
    ngOnInit() {
        this._model = this._actionsPortal
            ? this.globalModel.clone()
            : this.globalModel;
    }
    ngAfterViewInit() {
        this._subscriptions.add(this.datepicker?.stateChanges.subscribe(() => {
            this.cdr.markForCheck();
        }));
        this._calendar?.focusActiveCell();
    }
    ngOnDestroy() {
        this._subscriptions.unsubscribe();
        this._animationDone.complete();
    }
    _handleUserSelection(event) {
        const selection = this._model?.selection;
        const value = event.value;
        const isRange = selection instanceof DateRange;
        if (isRange && this.rangeSelectionStrategy) {
            const newSelection = this.rangeSelectionStrategy.selectionFinished(value, selection, event.event);
            this._model?.updateSelection(newSelection, this);
        }
        else if (value &&
            (isRange || !this.dateAdapter.sameDate(value, selection))) {
            this._model?.add(value);
        }
        if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {
            this.datepicker?.close();
        }
    }
    _startExitAnimation() {
        this._animationState = 'void';
        this.cdr.markForCheck();
    }
    _getSelected() {
        return this._model?.selection || null;
    }
    _applyPendingSelection() {
        if (this._model !== this.globalModel) {
            this.globalModel.updateSelection(this._model?.selection, this);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerContentComponent, selector: "rds-datepicker-content", host: { listeners: { "@transformPanel.done": "_onAnimationDone()" }, properties: { "class": "this.class", "class.rds-datepicker-content-touch": "this.isContentTouch", "@transformPanel": "this.transformPanel" } }, viewQueries: [{ propertyName: "_calendar", first: true, predicate: i0.forwardRef(() => RdsCalendarComponent), descendants: true }], exportAs: ["rdsDatepickerContent"], usesInheritance: true, ngImport: i0, template: "<div\n  cdkTrapFocus\n  class=\"rds-datepicker-content-container\"\n  [class.rds-datepicker-content-container-with-actions]=\"_actionsPortal\"\n>\n  <rds-calendar\n    [id]=\"datepicker?.id|| ''\"\n    [ngClass]=\"datepicker?.panelClass || ''\"\n    [class.rds-datepicker-with-toggle]=\"datepicker?.showToggle\"\n    [startAt]=\"datepicker?.startAt || null\"\n    [startView]=\"datepicker?._getStartView() || 'month'\"\n    [availableViews]=\"datepicker?.availableViews || ['month', 'year', 'multi-year']\"\n    [minDate]=\"datepicker?._getMinDate() || null\"\n    [maxDate]=\"datepicker?._getMaxDate() || null\"\n    [dateFilter]=\"datepicker?._getDateFilter() || null\"\n    [headerComponent]=\"datepicker?.calendarHeaderComponent || null\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker?.dateClass || null\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [showToggle]=\"datepicker?.showToggle || null\"\n    [@fadeInCalendar]=\"'enter'\"\n    (yearSelected)=\"datepicker?._selectYear($event)\"\n    (monthSelected)=\"datepicker?._selectMonth($event)\"\n    (viewChanged)=\"datepicker?._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n  />\n\n  <ng-template [cdkPortalOutlet]=\"_actionsPortal\" />\n\n  <!--&lt;!&ndash;   Invisible close button for screen reader users. &ndash;&gt;-->\n  <button\n    type=\"button\"\n    rds-primary-button\n    class=\"rds-datepicker-close-button\"\n    [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n    (focus)=\"_closeButtonFocused = true\"\n    (blur)=\"_closeButtonFocused = false\"\n    (click)=\"datepicker?.close()\"\n  >\n    {{ _closeButtonText }}\n  </button>\n</div>\n", styles: [".rds-datepicker-content{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;display:block;border-radius:4px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar{width:312px;height:374px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar.rds-datepicker-with-toggle{height:428px;padding-bottom:16px}.rds-datepicker-content .rds-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .rds-datepicker-content .rds-datepicker-close-button{display:none}.rds-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.rds-datepicker-content-touch{display:block;max-height:80vh;overflow:auto}.rds-datepicker-content-touch .rds-calendar{width:100%;height:100%}@media all and (orientation: landscape){.rds-datepicker-content-touch .rds-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.rds-datepicker-content-touch .rds-datepicker-content-container{width:80vw;height:100vw}.rds-datepicker-content-touch .rds-datepicker-content-container-with-actions{height:115vw}}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: i2.RdsButtonComponent, selector: "\n    button[rds-primary-button],\n    button[rds-warning-button],\n    button[rds-secondary-button],\n    button[rds-secondary-warning-button],\n    button[rdsPrimaryButton],\n    button[rdsWarningButton],\n    button[rdsSecondaryButton],\n    button[rdsSecondaryWarningButton],\n  " }, { kind: "directive", type: i3.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { kind: "directive", type: i4.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }, { kind: "component", type: i5.RdsCalendarComponent, selector: "rds-calendar", inputs: ["headerComponent", "startAt", "startView", "selected", "minDate", "maxDate", "dateFilter", "dateClass", "comparisonStart", "comparisonEnd", "isMonthDisabled", "isMultiYearDisabled", "isYearDisabled", "showToggle", "availableViews"], outputs: ["selectedChange", "yearSelected", "monthSelected", "viewChanged", "_userSelection"], exportAs: ["rdsCalendar"] }], animations: [
            trigger('transformPanel', [
                state('void', style({
                    opacity: 0,
                    transform: 'scale(1, 0.8)',
                })),
                transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({
                    opacity: 1,
                    transform: 'scale(1, 1)',
                }))),
                transition('* => void', animate('100ms linear', style({ opacity: 0 }))),
            ]),
            trigger('fadeInCalendar', [
                state('void', style({ opacity: 0 })),
                state('enter', style({ opacity: 1 })),
                transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),
            ]),
        ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-datepicker-content', animations: [
                        trigger('transformPanel', [
                            state('void', style({
                                opacity: 0,
                                transform: 'scale(1, 0.8)',
                            })),
                            transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({
                                opacity: 1,
                                transform: 'scale(1, 1)',
                            }))),
                            transition('* => void', animate('100ms linear', style({ opacity: 0 }))),
                        ]),
                        trigger('fadeInCalendar', [
                            state('void', style({ opacity: 0 })),
                            state('enter', style({ opacity: 1 })),
                            transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),
                        ]),
                    ], exportAs: 'rdsDatepickerContent', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div\n  cdkTrapFocus\n  class=\"rds-datepicker-content-container\"\n  [class.rds-datepicker-content-container-with-actions]=\"_actionsPortal\"\n>\n  <rds-calendar\n    [id]=\"datepicker?.id|| ''\"\n    [ngClass]=\"datepicker?.panelClass || ''\"\n    [class.rds-datepicker-with-toggle]=\"datepicker?.showToggle\"\n    [startAt]=\"datepicker?.startAt || null\"\n    [startView]=\"datepicker?._getStartView() || 'month'\"\n    [availableViews]=\"datepicker?.availableViews || ['month', 'year', 'multi-year']\"\n    [minDate]=\"datepicker?._getMinDate() || null\"\n    [maxDate]=\"datepicker?._getMaxDate() || null\"\n    [dateFilter]=\"datepicker?._getDateFilter() || null\"\n    [headerComponent]=\"datepicker?.calendarHeaderComponent || null\"\n    [selected]=\"_getSelected()\"\n    [dateClass]=\"datepicker?.dateClass || null\"\n    [comparisonStart]=\"comparisonStart\"\n    [comparisonEnd]=\"comparisonEnd\"\n    [showToggle]=\"datepicker?.showToggle || null\"\n    [@fadeInCalendar]=\"'enter'\"\n    (yearSelected)=\"datepicker?._selectYear($event)\"\n    (monthSelected)=\"datepicker?._selectMonth($event)\"\n    (viewChanged)=\"datepicker?._viewChanged($event)\"\n    (_userSelection)=\"_handleUserSelection($event)\"\n  />\n\n  <ng-template [cdkPortalOutlet]=\"_actionsPortal\" />\n\n  <!--&lt;!&ndash;   Invisible close button for screen reader users. &ndash;&gt;-->\n  <button\n    type=\"button\"\n    rds-primary-button\n    class=\"rds-datepicker-close-button\"\n    [class.cdk-visually-hidden]=\"!_closeButtonFocused\"\n    (focus)=\"_closeButtonFocused = true\"\n    (blur)=\"_closeButtonFocused = false\"\n    (click)=\"datepicker?.close()\"\n  >\n    {{ _closeButtonText }}\n  </button>\n</div>\n", styles: [".rds-datepicker-content{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;display:block;border-radius:4px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar{width:312px;height:374px}.rds-datepicker-content:not(.rds-datepicker-content-touch) .rds-calendar.rds-datepicker-with-toggle{height:428px;padding-bottom:16px}.rds-datepicker-content .rds-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.ng-animating .rds-datepicker-content .rds-datepicker-close-button{display:none}.rds-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.rds-datepicker-content-touch{display:block;max-height:80vh;overflow:auto}.rds-datepicker-content-touch .rds-calendar{width:100%;height:100%}@media all and (orientation: landscape){.rds-datepicker-content-touch .rds-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.rds-datepicker-content-touch .rds-datepicker-content-container{width:80vw;height:100vw}.rds-datepicker-content-touch .rds-datepicker-content-container-with-actions{height:115vw}}\n"] }]
        }], ctorParameters: () => [], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], isContentTouch: [{
                type: HostBinding,
                args: ['class.rds-datepicker-content-touch']
            }], transformPanel: [{
                type: HostBinding,
                args: ['@transformPanel']
            }], _calendar: [{
                type: ViewChild,
                args: [forwardRef(() => RdsCalendarComponent)]
            }], _onAnimationDone: [{
                type: HostListener,
                args: ['@transformPanel.done']
            }] } });
export class RdsDatepickerBaseDirective {
    get startAt() {
        return (this._startAt ||
            (this.datepickerInput ? this.datepickerInput.getStartValue() : null));
    }
    set startAt(value) {
        this._startAt = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    set touchUi(value) {
        const isTouchUi = booleanAttribute(value);
        if (isTouchUi !== this._touchUi) {
            this._touchUi = isTouchUi;
            this.stateChanges.next();
        }
    }
    get touchUi() {
        return this._touchUi;
    }
    set disabled(value) {
        const newValue = booleanAttribute(value);
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this.stateChanges.next();
        }
    }
    get disabled() {
        return this._disabled === null && this.datepickerInput
            ? this.datepickerInput.disabled
            : !!this._disabled;
    }
    set availableViews(newViews) {
        const views = RDS_CALENDAR_VIEW_ORDERED.filter((view) => newViews.includes(view));
        if (views.join('') !== this._availableViews.join('')) {
            this._availableViews = views;
            this._updateShowToggleIfNeeded();
            this.stateChanges.next();
        }
    }
    get availableViews() {
        return this._availableViews;
    }
    set showToggle(value) {
        const newValue = value === null ? value : coerceBooleanProperty(value);
        if (this._originalShowToggle !== newValue) {
            this._originalShowToggle = newValue;
            this._updateShowToggleIfNeeded();
            this.stateChanges.next();
        }
    }
    get showToggle() {
        return this._showToggle;
    }
    set opened(value) {
        booleanAttribute(value) ? this.open() : this.close();
    }
    get opened() {
        return this._opened;
    }
    _getStartView() {
        return this.availableViews.includes(this.startView)
            ? this.startView
            : this.availableViews[0];
    }
    _getMinDate() {
        return this.datepickerInput && this.datepickerInput.min;
    }
    _getMaxDate() {
        return this.datepickerInput && this.datepickerInput.max;
    }
    _getDateFilter() {
        return this.datepickerInput && this.datepickerInput.dateFilter;
    }
    constructor() {
        this.dialog = inject(RdsDialogService);
        this.overlay = inject(Overlay);
        this.ngZone = inject(NgZone);
        this.viewContainerRef = inject(ViewContainerRef);
        this.scrollStrategy = inject(RDS_DATEPICKER_SCROLL_STRATEGY);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.document = inject(DOCUMENT, { optional: true });
        this.model = inject(RdsDateSelectionModel);
        this._originalShowToggle = null;
        this._inputStateChanges = Subscription.EMPTY;
        this.calendarHeaderComponent = null;
        this._startAt = null;
        this.startView = 'month';
        this._touchUi = false;
        this._disabled = null;
        this._availableViews = RDS_CALENDAR_VIEW_ORDERED;
        this._showToggle = true;
        this.xPosition = 'start';
        this.yPosition = 'below';
        this.restoreFocus = true;
        this.yearSelected = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this.viewChanged = new EventEmitter(true);
        this.dateClass = null;
        this.openedStream = new EventEmitter();
        this.closedStream = new EventEmitter();
        this.panelClass = '';
        this._opened = false;
        this.id = `rds-datepicker-${datepickerUid++}`;
        this._popupRef = null;
        this._dialogRef = null;
        this._popupComponentRef = null;
        this._focusedElementBeforeOpen = null;
        this._backdropHarnessClass = `${this.id}-backdrop`;
        this._actionsPortal = null;
        this.stateChanges = new Subject();
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
    }
    ngOnChanges(changes) {
        const positionChange = changes['xPosition'] || changes['yPosition'];
        if (positionChange && !positionChange.firstChange && this._popupRef) {
            this._setConnectedPositions(this._popupRef.getConfig()
                .positionStrategy);
            if (this.opened) {
                this._popupRef.updatePosition();
            }
        }
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this._destroyPopup();
        this.close();
        this._inputStateChanges.unsubscribe();
        this.stateChanges.complete();
    }
    select(date) {
        this.model.add(date);
    }
    _selectYear(normalizedYear) {
        this.yearSelected.emit(normalizedYear);
    }
    _selectMonth(normalizedMonth) {
        this.monthSelected.emit(normalizedMonth);
    }
    _viewChanged(view) {
        this.viewChanged.emit(view);
    }
    registerInput(input) {
        if (this.datepickerInput) {
            throw Error('A RdsDatepicker can only be associated with a single input.');
        }
        this._inputStateChanges.unsubscribe();
        this.datepickerInput = input;
        this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));
        return this.model;
    }
    registerActions(portal) {
        if (this._actionsPortal) {
            throw Error('A RdsDatepicker can only be associated with a single actions row.');
        }
        this._actionsPortal = portal;
    }
    removeActions(portal) {
        if (portal === this._actionsPortal) {
            this._actionsPortal = null;
        }
    }
    open() {
        if (this._opened || this.disabled) {
            return;
        }
        if (!this.datepickerInput) {
            throw Error('Attempted to open an RdsDatepicker with no associated input.');
        }
        if (this.document) {
            this._focusedElementBeforeOpen = this.document
                .activeElement;
        }
        this.touchUi ? this._openAsDialog() : this._openAsPopup();
        this._opened = true;
        this.openedStream.emit();
    }
    close() {
        if (!this._opened) {
            return;
        }
        if (this._popupComponentRef && this._popupRef) {
            const instance = this._popupComponentRef.instance;
            instance._startExitAnimation();
            instance._animationDone
                .pipe(take(1))
                .subscribe(() => this._destroyPopup());
        }
        if (this._dialogRef) {
            this._dialogRef.close();
            this._dialogRef = null;
        }
        const completeClose = () => {
            if (this._opened) {
                this._opened = false;
                this.closedStream.emit();
                this._focusedElementBeforeOpen = null;
            }
        };
        if (this.restoreFocus &&
            this._focusedElementBeforeOpen &&
            typeof this._focusedElementBeforeOpen.focus === 'function') {
            this._focusedElementBeforeOpen.focus();
            setTimeout(completeClose);
        }
        else {
            completeClose();
        }
    }
    _applyPendingSelection() {
        const instance = this._popupComponentRef?.instance || this._dialogRef?.componentInstance;
        instance?._applyPendingSelection();
    }
    _updateShowToggleIfNeeded() {
        const shouldShowToggle = this._originalShowToggle === null
            ? this._availableViews.length > 1
            : coerceBooleanProperty(this._originalShowToggle);
        if (this._showToggle !== shouldShowToggle) {
            this._showToggle = shouldShowToggle;
        }
    }
    _openAsDialog() {
        if (this._dialogRef) {
            this._dialogRef.close();
        }
        this._dialogRef = this.dialog.open(RdsDatepickerContentComponent, {
            viewContainerRef: this.viewContainerRef,
            panelClass: 'rds-datepicker-dialog',
            hasBackdrop: true,
            disableClose: false,
            size: 'xl',
            height: '',
            minHeight: '',
            maxHeight: '',
        });
        this._dialogRef.afterClosed().subscribe(() => this.close());
        if (this._dialogRef.componentInstance) {
            this._forwardContentValues(this._dialogRef.componentInstance);
        }
    }
    _openAsPopup() {
        const portal = new ComponentPortal(RdsDatepickerContentComponent, this.viewContainerRef);
        this._destroyPopup();
        this._createPopup();
        this._popupComponentRef = this._popupRef.attach(portal);
        this._forwardContentValues(this._popupComponentRef?.instance);
        this.ngZone.onStable.pipe(take(1)).subscribe(() => {
            this._popupRef?.updatePosition();
        });
    }
    _forwardContentValues(instance) {
        instance.datepicker = this;
        instance._actionsPortal = this._actionsPortal;
    }
    _createPopup() {
        const positionStrategy = this.overlay
            .position()
            .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())
            .withTransformOriginOn('.rds-datepicker-content')
            .withFlexibleDimensions(false)
            .withViewportMargin(8)
            .withLockedPosition();
        const overlayConfig = new OverlayConfig({
            positionStrategy: this._setConnectedPositions(positionStrategy),
            hasBackdrop: true,
            backdropClass: [
                'rds-overlay-transparent-backdrop',
                this._backdropHarnessClass,
            ],
            scrollStrategy: this.scrollStrategy(),
            panelClass: 'rds-datepicker-popup',
        });
        this._popupRef = this.overlay.create(overlayConfig);
        this._popupRef.overlayElement.setAttribute('role', 'dialog');
        merge(this._popupRef.backdropClick(), this._popupRef.detachments(), this._popupRef.keydownEvents().pipe(filter((event) => {
            return ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||
                (this.datepickerInput &&
                    hasModifierKey(event, 'altKey') &&
                    event.keyCode === UP_ARROW));
        }))).subscribe((event) => {
            if (event) {
                event.preventDefault();
            }
            this.close();
        });
    }
    _destroyPopup() {
        if (this._popupRef) {
            this._popupRef.dispose();
            this._popupRef = this._popupComponentRef = null;
        }
    }
    _setConnectedPositions(strategy) {
        const primaryX = this.xPosition === 'end' ? 'end' : 'start';
        const secondaryX = primaryX === 'start' ? 'end' : 'start';
        const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';
        const secondaryY = primaryY === 'top' ? 'bottom' : 'top';
        return strategy.withPositions([
            {
                originX: primaryX,
                originY: secondaryY,
                overlayX: primaryX,
                overlayY: primaryY,
            },
            {
                originX: primaryX,
                originY: primaryY,
                overlayX: primaryX,
                overlayY: secondaryY,
            },
            {
                originX: secondaryX,
                originY: secondaryY,
                overlayX: secondaryX,
                overlayY: primaryY,
            },
            {
                originX: secondaryX,
                originY: primaryY,
                overlayX: secondaryX,
                overlayY: secondaryY,
            },
        ]);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerBaseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsDatepickerBaseDirective, inputs: { calendarHeaderComponent: "calendarHeaderComponent", startAt: "startAt", startView: "startView", touchUi: "touchUi", disabled: "disabled", availableViews: "availableViews", showToggle: "showToggle", xPosition: "xPosition", yPosition: "yPosition", restoreFocus: ["restoreFocus", "restoreFocus", booleanAttribute], dateClass: "dateClass", panelClass: ["panelClass", "panelClass", coerceStringArray], opened: "opened" }, outputs: { yearSelected: "yearSelected", monthSelected: "monthSelected", viewChanged: "viewChanged", openedStream: "openedStream", closedStream: "closedStream" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { calendarHeaderComponent: [{
                type: Input
            }], startAt: [{
                type: Input
            }], startView: [{
                type: Input
            }], touchUi: [{
                type: Input
            }], disabled: [{
                type: Input
            }], availableViews: [{
                type: Input
            }], showToggle: [{
                type: Input
            }], xPosition: [{
                type: Input
            }], yPosition: [{
                type: Input
            }], restoreFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], yearSelected: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], viewChanged: [{
                type: Output
            }], dateClass: [{
                type: Input
            }], openedStream: [{
                type: Output
            }], closedStream: [{
                type: Output
            }], panelClass: [{
                type: Input,
                args: [{ transform: coerceStringArray }]
            }], opened: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,