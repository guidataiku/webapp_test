import { DOWN_ARROW } from '@angular/cdk/keycodes';
import { booleanAttribute, Directive, ElementRef, EventEmitter, inject, Input, isDevMode, Output, } from '@angular/core';
import { DateAdapter, RDS_DATE_FORMATS } from './adapter';
import { noop, Subject, Subscription } from 'rxjs';
import { createMissingDateImplError } from './datepicker-errors';
import * as i0 from "@angular/core";
export class RdsDatepickerInputEvent {
    constructor(target, targetElement) {
        this.target = target;
        this.targetElement = targetElement;
        this.value = this.target.value;
    }
}
export class RdsDatepickerInputBaseDirective {
    get value() {
        return this._model
            ? this._getValueFromModel(this._model.selection)
            : this._pendingValue;
    }
    set value(value) {
        this._assignValueProgrammatically(value);
    }
    set disabled(value) {
        const newValue = booleanAttribute(value);
        const element = this.elementRef.nativeElement;
        if (this._disabled !== newValue) {
            this._disabled = newValue;
            this.stateChanges.next();
        }
        if (newValue && this._isInitialized && element.blur) {
            element.blur();
        }
    }
    get disabled() {
        return this._disabled || this._parentDisabled();
    }
    _getValidators() {
        return [
            this._parseValidator,
            this._minValidator,
            this._maxValidator,
            this._filterValidator,
        ];
    }
    _registerModel(model) {
        this._model = model;
        this._valueChangesSubscription.unsubscribe();
        if (this._pendingValue) {
            this._assignValue(this._pendingValue);
        }
        this._valueChangesSubscription = this._model.selectionChanged.subscribe((event) => {
            if (this._shouldHandleChangeEvent(event)) {
                const value = this._getValueFromModel(event.selection);
                this._lastValueValid = this._isValidValue(value);
                this._cvaOnChange(value);
                this._onTouched();
                this._formatValue(value);
                this.dateInput.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
                this.dateChange.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
            }
        });
    }
    constructor() {
        this.elementRef = inject(ElementRef);
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this._isInitialized = false;
        this._valueChangesSubscription = Subscription.EMPTY;
        this._localeSubscription = Subscription.EMPTY;
        this.dateChange = new EventEmitter();
        this.dateInput = new EventEmitter();
        this.stateChanges = new Subject();
        this._onTouched = noop;
        this._validatorOnChange = noop;
        this._cvaOnChange = noop;
        this._pendingValue = null;
        this._lastValueValid = false;
        this._parseValidator = () => {
            return this._lastValueValid
                ? null
                : { rdsDatepickerParse: { text: this.elementRef.nativeElement.value } };
        };
        this._filterValidator = (control) => {
            const controlValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            return !controlValue || this._matchesFilter(controlValue)
                ? null
                : { rdsDatepickerFilter: true };
        };
        this._minValidator = (control) => {
            const controlValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const min = this._getMinDate();
            return !min ||
                !controlValue ||
                this.dateAdapter.compareDate(min, controlValue) <= 0
                ? null
                : { rdsDatepickerMin: { min: min, actual: controlValue } };
        };
        this._maxValidator = (control) => {
            const controlValue = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const max = this._getMaxDate();
            return !max ||
                !controlValue ||
                this.dateAdapter.compareDate(max, controlValue) >= 0
                ? null
                : { rdsDatepickerMax: { max: max, actual: controlValue } };
        };
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._localeSubscription = this.dateAdapter.localeChanges.subscribe(() => {
            this._assignValueProgrammatically(this.value);
        });
    }
    ngAfterViewInit() {
        this._isInitialized = true;
    }
    ngOnChanges(changes) {
        if (dateInputsHaveChanged(changes, this.dateAdapter)) {
            this.stateChanges.next(undefined);
        }
    }
    ngOnDestroy() {
        this._valueChangesSubscription.unsubscribe();
        this._localeSubscription.unsubscribe();
        this.stateChanges.complete();
    }
    registerOnValidatorChange(fn) {
        this._validatorOnChange = fn;
    }
    validate(c) {
        return this._validator ? this._validator(c) : null;
    }
    writeValue(value) {
        this._assignValueProgrammatically(value);
    }
    registerOnChange(fn) {
        this._cvaOnChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    _onKeydown(event) {
        const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;
        if (isAltDownArrow && !this.elementRef.nativeElement.readOnly) {
            this._openPopup();
            event.preventDefault();
        }
    }
    _onInput(value) {
        const lastValueWasValid = this._lastValueValid;
        let date = this.dateAdapter.parse(value, this.dateFormats.parse.dateInput);
        this._lastValueValid = this._isValidValue(date);
        date = this.dateAdapter.getValidDateOrNull(date);
        if (!this.dateAdapter.sameDate(date, this.value)) {
            this._assignValue(date);
            this._cvaOnChange(date);
            this.dateInput.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
        }
        else {
            // Call the CVA change handler for invalid values
            // since this is what marks the control as dirty.
            if (value && !this.value) {
                this._cvaOnChange(date);
            }
            if (lastValueWasValid !== this._lastValueValid) {
                this._validatorOnChange();
            }
        }
    }
    _onChange() {
        this.dateChange.emit(new RdsDatepickerInputEvent(this, this.elementRef.nativeElement));
    }
    _onBlur() {
        if (this.value) {
            this._formatValue(this.value);
        }
        this._onTouched();
    }
    _formatValue(value) {
        this.elementRef.nativeElement.value = value
            ? this.dateAdapter.format(value, this.dateFormats.display.dateInput)
            : '';
    }
    _assignValue(value) {
        if (this._model) {
            this._assignValueToModel(value);
            this._pendingValue = null;
        }
        else {
            this._pendingValue = value;
        }
    }
    _isValidValue(value) {
        return !value || this.dateAdapter.isValid(value);
    }
    _parentDisabled() {
        return false;
    }
    _assignValueProgrammatically(value) {
        value = this.dateAdapter.deserialize(value);
        this._lastValueValid = this._isValidValue(value);
        value = this.dateAdapter.getValidDateOrNull(value);
        this._assignValue(value);
        this._formatValue(value);
    }
    _matchesFilter(value) {
        const filter = this._getDateFilter();
        return !filter || filter(value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputBaseDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerInputBaseDirective, inputs: { value: "value", disabled: "disabled" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerInputBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [], propDecorators: { value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }] } });
export function dateInputsHaveChanged(changes, adapter) {
    const keys = Object.keys(changes);
    for (const key of keys) {
        const { previousValue, currentValue } = changes[key];
        if (adapter.isDateInstance(previousValue) &&
            adapter.isDateInstance(currentValue)) {
            if (!adapter.sameDate(previousValue, currentValue)) {
                return true;
            }
        }
        else {
            return true;
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,