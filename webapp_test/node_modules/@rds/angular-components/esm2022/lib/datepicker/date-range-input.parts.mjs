import { booleanAttribute, Directive, EventEmitter, HostBinding, HostListener, inject, InjectionToken, Injector, Input, Output, } from '@angular/core';
import { FormGroupDirective, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, NgForm, Validators, } from '@angular/forms';
import { BACKSPACE } from '@angular/cdk/keycodes';
import { RdsDatepickerInputBaseDirective, } from './datepicker-input.base';
import { DateRange } from './date-selection.model';
import { Subject } from 'rxjs';
import { ErrorStateMatcher } from '../core';
import { updateErrorState } from '../utils';
import * as i0 from "@angular/core";
export const RDS_DATE_RANGE_INPUT_PARENT = new InjectionToken('RDS_DATE_RANGE_INPUT_PARENT');
class RdsDateRangeInputPartBaseDirective extends RdsDatepickerInputBaseDirective {
    constructor() {
        super(...arguments);
        this.rangeInput = inject(RDS_DATE_RANGE_INPUT_PARENT);
        this.defaultErrorStateMatcher = inject(ErrorStateMatcher);
        this.injector = inject(Injector);
        this.parentForm = inject(NgForm, { optional: true });
        this.parentFormGroup = inject(FormGroupDirective, {
            optional: true,
        });
        this.errorStateMatcher = null;
        this.errorState = false;
    }
    ngOnInit() {
        try {
            const ngControl = this.injector.get(NgControl, null, { self: true });
            if (ngControl) {
                this.ngControl = ngControl;
            }
        }
        catch (e) {
            //do nothing
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            const oldState = this.errorState;
            this.errorState = updateErrorState(this.errorState, this.parentFormGroup, this.parentForm, this.ngControl?.control ?? null, this.errorStateMatcher || this.defaultErrorStateMatcher);
            if (this.errorState !== oldState) {
                this.stateChanges.next();
            }
        }
    }
    isEmpty() {
        return this.elementRef.nativeElement.value.length === 0;
    }
    _getPlaceholder() {
        return this.elementRef.nativeElement.placeholder;
    }
    focus() {
        this.elementRef.nativeElement.focus();
    }
    _onInput(value) {
        super._onInput(value);
        this.rangeInput._handleChildValueChange();
    }
    _openPopup() {
        this.rangeInput._openDatepicker();
    }
    _getMinDate() {
        return this.rangeInput.min;
    }
    _getMaxDate() {
        return this.rangeInput.max;
    }
    _getDateFilter() {
        return this.rangeInput.dateFilter;
    }
    _parentDisabled() {
        return this.rangeInput._groupDisabled;
    }
    _shouldHandleChangeEvent({ source, }) {
        return (source !== this.rangeInput._startInput &&
            source !== this.rangeInput._endInput);
    }
    _assignValueProgrammatically(value) {
        super._assignValueProgrammatically(value);
        const opposite = (this === this.rangeInput._startInput
            ? this.rangeInput._endInput
            : this.rangeInput._startInput);
        opposite?._validatorOnChange();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputPartBaseDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDateRangeInputPartBaseDirective, usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateRangeInputPartBaseDirective, decorators: [{
            type: Directive
        }] });
export class RdsStartDateDirective extends RdsDateRangeInputPartBaseDirective {
    get isDisabled() {
        return this.disabled ? true : null;
    }
    get id() {
        return `${this.rangeInput.id}-start`;
    }
    get hasPopup() {
        return this.rangeInput.rangePicker ? 'dialog' : null;
    }
    get ariaOwns() {
        return ((this.rangeInput.rangePicker?.opened && this.rangeInput.rangePicker.id) ||
            null);
    }
    get min() {
        return this._getMinDate()
            ? this.dateAdapter.toIso8601(this._getMinDate())
            : null;
    }
    get max() {
        return this._getMaxDate()
            ? this.dateAdapter.toIso8601(this._getMaxDate())
            : null;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    set required(value) {
        const isRequired = booleanAttribute(value);
        if (isRequired !== this._required) {
            this._required = isRequired;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    onBlur() {
        this._onBlur();
    }
    onChange() {
        this._onChange();
    }
    onKeydown($event) {
        this._onInput($event.target.value);
    }
    onInput($event) {
        this._onKeydown($event);
    }
    constructor() {
        super();
        this._validator = null;
        this.stateChanges = new Subject();
        this.errorStateMatcher = null;
        this.dateChange = new EventEmitter();
        this.dateInput = new EventEmitter();
        this.class = 'rds-start-date rds-date-range-input-inner';
        this.type = 'text';
        this._startValidator = (control) => {
            const start = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const end = this._model ? this._model.selection?.end : null;
            return !start ||
                !end ||
                (this.dateAdapter && this.dateAdapter.compareDate(start, end) <= 0)
                ? null
                : { rdsStartDateInvalid: { end: end, actual: start } };
        };
        this._validator = Validators.compose([
            ...super._getValidators(),
            this._startValidator,
        ]);
    }
    ngOnInit() {
        super.ngOnInit();
    }
    ngDoCheck() {
        super.ngDoCheck();
    }
    _getValueFromModel(modelValue) {
        return modelValue.start;
    }
    _shouldHandleChangeEvent(change) {
        if (!super._shouldHandleChangeEvent(change)) {
            return false;
        }
        else {
            return !change.oldValue?.start
                ? !!change.selection.start
                : !change.selection.start ||
                    !!this.dateAdapter.compareDate(change.oldValue.start, change.selection.start);
        }
    }
    _assignValueToModel(value) {
        if (this._model) {
            const range = new DateRange(value, this._model.selection?.end);
            this._model.updateSelection(range, this);
        }
    }
    _formatValue(value) {
        super._formatValue(value);
        // Any time the input value is reformatted we need to tell the parent.
        this.rangeInput._handleChildValueChange();
    }
    /** Gets the value that should be used when mirroring the input's size. */
    getMirrorValue() {
        const element = this.elementRef.nativeElement;
        const value = element.value;
        return value.length > 0 ? value : element.placeholder;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStartDateDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsStartDateDirective, selector: "input[rdsStartDate], input[rds-start-date]", inputs: { errorStateMatcher: "errorStateMatcher", required: "required" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, host: { listeners: { "blur": "onBlur()", "change": "onChange()", "input": "onKeydown($event)", "keydown": "onInput($event)" }, properties: { "class": "this.class", "attr.type": "this.type", "disabled": "this.isDisabled", "attr.id": "this.id", "attr.aria-haspopup": "this.hasPopup", "attr.aria-owns": "this.ariaOwns", "attr.min": "this.min", "attr.max": "this.max", "attr.required": "this.attrRequired" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: RdsStartDateDirective,
                multi: true,
            },
            { provide: NG_VALIDATORS, useExisting: RdsStartDateDirective, multi: true },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsStartDateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsStartDate], input[rds-start-date]',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RdsStartDateDirective,
                            multi: true,
                        },
                        { provide: NG_VALIDATORS, useExisting: RdsStartDateDirective, multi: true },
                    ],
                }]
        }], ctorParameters: () => [], propDecorators: { errorStateMatcher: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], type: [{
                type: HostBinding,
                args: ['attr.type']
            }], isDisabled: [{
                type: HostBinding,
                args: ['disabled']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], hasPopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], min: [{
                type: HostBinding,
                args: ['attr.min']
            }], max: [{
                type: HostBinding,
                args: ['attr.max']
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onChange: [{
                type: HostListener,
                args: ['change']
            }], onKeydown: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onInput: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
export class RdsEndDateDirective extends RdsDateRangeInputPartBaseDirective {
    constructor() {
        super(...arguments);
        this.stateChanges = new Subject();
        this.errorStateMatcher = null;
        this.dateChange = new EventEmitter();
        this.dateInput = new EventEmitter();
        this.class = 'rds-end-date rds-date-range-input-inner';
        this.type = 'text';
        this._endValidator = (control) => {
            const end = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(control.value));
            const start = this._model ? this._model.selection?.start : null;
            return !end || !start || this.dateAdapter.compareDate(end, start) >= 0
                ? null
                : { rdsEndDateInvalid: { start: start, actual: end } };
        };
        this._validator = Validators.compose([
            ...super._getValidators(),
            this._endValidator,
        ]);
    }
    get isDisabled() {
        return this.disabled ? true : null;
    }
    get id() {
        return `${this.rangeInput.id}-end`;
    }
    get hasPopup() {
        return this.rangeInput.rangePicker ? 'dialog' : null;
    }
    get ariaOwns() {
        return ((this.rangeInput.rangePicker?.opened && this.rangeInput.rangePicker.id) ||
            null);
    }
    get min() {
        return this._getMinDate()
            ? this.dateAdapter.toIso8601(this._getMinDate())
            : null;
    }
    get max() {
        return this._getMaxDate()
            ? this.dateAdapter.toIso8601(this._getMaxDate())
            : null;
    }
    get attrRequired() {
        return (this._required ??
            this.ngControl?.control?.hasValidator(Validators.required) ??
            null);
    }
    set required(value) {
        const isRequired = booleanAttribute(value);
        if (isRequired !== this._required) {
            this._required = isRequired;
            this.stateChanges.next();
        }
    }
    get required() {
        return this.attrRequired ?? false;
    }
    onBlur() {
        this._onBlur();
    }
    onChange() {
        this._onChange();
    }
    onKeydown($event) {
        this._onInput($event.target.value);
    }
    onInput($event) {
        this._onKeydown($event);
    }
    ngOnInit() {
        super.ngOnInit();
    }
    ngDoCheck() {
        super.ngDoCheck();
    }
    _getValueFromModel(modelValue) {
        return modelValue.end;
    }
    _shouldHandleChangeEvent(change) {
        if (!super._shouldHandleChangeEvent(change)) {
            return false;
        }
        else {
            return !change.oldValue?.end
                ? !!change.selection.end
                : !change.selection.end ||
                    !!this.dateAdapter.compareDate(change.oldValue.end, change.selection.end);
        }
    }
    _assignValueToModel(value) {
        if (this._model) {
            const range = new DateRange(this._model.selection?.start, value);
            this._model.updateSelection(range, this);
        }
    }
    _onKeydown(event) {
        // If the user is pressing backspace on an empty end input, move focus back to the start.
        if (event.keyCode === BACKSPACE && !this.elementRef.nativeElement.value) {
            this.rangeInput._startInput.focus();
        }
        super._onKeydown(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEndDateDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsEndDateDirective, selector: "input[rdsEndDate], input[rds-end-date]", inputs: { errorStateMatcher: "errorStateMatcher", required: "required" }, outputs: { dateChange: "dateChange", dateInput: "dateInput" }, host: { listeners: { "blur": "onBlur()", "change": "onChange()", "input": "onKeydown($event)", "keydown": "onInput($event)" }, properties: { "class": "this.class", "attr.type": "this.type", "disabled": "this.isDisabled", "attr.id": "this.id", "attr.aria-haspopup": "this.hasPopup", "attr.aria-owns": "this.ariaOwns", "attr.min": "this.min", "attr.max": "this.max", "attr.required": "this.attrRequired" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: RdsEndDateDirective,
                multi: true,
            },
            { provide: NG_VALIDATORS, useExisting: RdsEndDateDirective, multi: true },
        ], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsEndDateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[rdsEndDate], input[rds-end-date]',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: RdsEndDateDirective,
                            multi: true,
                        },
                        { provide: NG_VALIDATORS, useExisting: RdsEndDateDirective, multi: true },
                    ],
                }]
        }], propDecorators: { errorStateMatcher: [{
                type: Input
            }], dateChange: [{
                type: Output
            }], dateInput: [{
                type: Output
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], type: [{
                type: HostBinding,
                args: ['attr.type']
            }], isDisabled: [{
                type: HostBinding,
                args: ['disabled']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], hasPopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaOwns: [{
                type: HostBinding,
                args: ['attr.aria-owns']
            }], min: [{
                type: HostBinding,
                args: ['attr.min']
            }], max: [{
                type: HostBinding,
                args: ['attr.max']
            }], attrRequired: [{
                type: HostBinding,
                args: ['attr.required']
            }], required: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onChange: [{
                type: HostListener,
                args: ['change']
            }], onKeydown: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onInput: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,