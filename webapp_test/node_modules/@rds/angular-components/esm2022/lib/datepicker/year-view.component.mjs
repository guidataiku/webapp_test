import { DOWN_ARROW, END, ENTER, HOME, LEFT_ARROW, PAGE_DOWN, PAGE_UP, RIGHT_ARROW, SPACE, UP_ARROW, } from '@angular/cdk/keycodes';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, inject, Input, isDevMode, Output, ViewChild, ViewEncapsulation, } from '@angular/core';
import { DateAdapter, RDS_DATE_FORMATS } from './adapter';
import { Directionality } from '@angular/cdk/bidi';
import { RdsCalendarBodyComponent, RdsCalendarCell, } from './calendar-body.component';
import { createMissingDateImplError } from './datepicker-errors';
import { Subscription } from 'rxjs';
import { startWith } from 'rxjs/operators';
import { DateRange } from './date-selection.model';
import * as i0 from "@angular/core";
import * as i1 from "./calendar-body.component";
export class RdsYearViewComponent {
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        const oldActiveDate = this._activeDate;
        const validDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value)) || this.dateAdapter.today();
        this._activeDate = this.dateAdapter.clampDate(validDate, this.minDate, this.maxDate);
        if (this.dateAdapter.getYear(oldActiveDate) !==
            this.dateAdapter.getYear(this._activeDate)) {
            this._init();
        }
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (value instanceof DateRange) {
            this._selected = value;
        }
        else {
            this._selected = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
        }
        this._setSelectedMonth(value);
    }
    get minDate() {
        return this._minDate;
    }
    set minDate(value) {
        this._minDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    get maxDate() {
        return this._maxDate;
    }
    set maxDate(value) {
        this._maxDate = this.dateAdapter.getValidDateOrNull(this.dateAdapter.deserialize(value));
    }
    constructor() {
        this.cdr = inject(ChangeDetectorRef);
        this.dateFormats = inject(RDS_DATE_FORMATS, {
            optional: true,
        });
        this.dateAdapter = inject(DateAdapter, {
            optional: true,
        });
        this.dir = inject(Directionality, { optional: true });
        this._rerenderSubscription = Subscription.EMPTY;
        this._selected = null;
        this._minDate = null;
        this._maxDate = null;
        this.dateFilter = null;
        this.dateClass = null;
        this.selectedChange = new EventEmitter();
        this.monthSelected = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this._rdsCalendarBody = null;
        this._months = null;
        this._yearLabel = null;
        this._todayMonth = null;
        this._selectedMonth = null;
        if (!this.dateAdapter && isDevMode()) {
            throw createMissingDateImplError('DateAdapter');
        }
        if (!this.dateFormats && isDevMode()) {
            throw createMissingDateImplError('RDS_DATE_FORMATS');
        }
        this._activeDate = this.dateAdapter.today();
    }
    ngAfterContentInit() {
        this._rerenderSubscription = this.dateAdapter.localeChanges
            .pipe(startWith(null))
            .subscribe(() => this._init());
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    _onMonthSelected(event) {
        this._monthSelected({
            value: this.dateAdapter.clone(event.value.rawValue),
            event: event.event,
        });
    }
    _monthSelected(event) {
        const daysInMonth = this.dateAdapter.getNumDaysInMonth(event.value);
        const date = this.dateAdapter.createDate(this.dateAdapter.getYear(event.value), this.dateAdapter.getMonth(event.value), Math.min(this.dateAdapter.getDate(this.activeDate), daysInMonth));
        this.monthSelected.emit({ value: date, event: event.event });
        this.selectedChange.emit(date);
    }
    _handleCalendarBodyKeydown(event) {
        const oldActiveDate = this._activeDate;
        const isRtl = this._isRtl();
        switch (event.keyCode) {
            case LEFT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);
                break;
            case RIGHT_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);
                break;
            case UP_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -4);
                break;
            case DOWN_ARROW:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, 4);
                break;
            case HOME:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, -this.dateAdapter.getMonth(this._activeDate));
                break;
            case END:
                this.activeDate = this.dateAdapter.addCalendarMonths(this._activeDate, 11 - this.dateAdapter.getMonth(this._activeDate));
                break;
            case PAGE_UP:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);
                break;
            case PAGE_DOWN:
                this.activeDate = this.dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);
                break;
            case ENTER:
            case SPACE:
                this._monthSelected({
                    value: this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), this.dateAdapter.getMonth(this.activeDate), Math.min(this.dateAdapter.getDate(this.activeDate), this.dateAdapter.getNumDaysInMonth(this.activeDate))),
                    event,
                });
                break;
            default:
                return;
        }
        if (this.dateAdapter.compareDate(oldActiveDate, this.activeDate)) {
            this.activeDateChange.emit(this.activeDate);
        }
        this._focusActiveCell();
        event.preventDefault();
    }
    _init() {
        this._setSelectedMonth(this.selected);
        this._todayMonth = this._getMonthInCurrentYear(this.dateAdapter.today());
        this._yearLabel = this.dateAdapter.getYearName(this.activeDate);
        const monthNames = this.dateAdapter.getMonthNames('short');
        this._months = [
            [0, 1, 2, 3],
            [4, 5, 6, 7],
            [8, 9, 10, 11],
        ].map((row) => row.map((month) => this._createCellForMonth(month, monthNames[month])));
        this.cdr.markForCheck();
    }
    _focusActiveCell() {
        this._rdsCalendarBody?._focusActiveCell();
    }
    _getActiveCell() {
        if (this._months) {
            for (let i = 0; i < this._months.length; i++) {
                for (let j = 0; j < this._months[i].length; j++) {
                    const cell = this._months[i][j];
                    if (cell &&
                        this.dateAdapter.sameDate(cell.rawValue, this.activeDate, 'month')) {
                        return cell;
                    }
                }
            }
        }
        return null;
    }
    _getMonthInCurrentYear(date) {
        return date &&
            this.dateAdapter.getYear(date) ==
                this.dateAdapter.getYear(this.activeDate)
            ? this.dateAdapter.getMonth(date)
            : null;
    }
    _createCellForMonth(month, monthName) {
        const date = this.dateAdapter.createDate(this.dateAdapter.getYear(this.activeDate), month, 1);
        const ariaLabel = this.dateAdapter.format(date, this.dateFormats.display.monthYearA11yLabel);
        const cellClasses = this.dateClass
            ? this.dateClass(date, 'year')
            : undefined;
        return new RdsCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses, date);
    }
    _shouldEnableMonth(month) {
        const activeYear = this.dateAdapter.getYear(this.activeDate);
        if (month === undefined ||
            month === null ||
            this._isYearAndMonthAfterMaxDate(activeYear, month) ||
            this._isYearAndMonthBeforeMinDate(activeYear, month)) {
            return false;
        }
        if (!this.dateFilter) {
            return true;
        }
        const firstOfMonth = this.dateAdapter.createDate(activeYear, month, 1);
        for (let date = firstOfMonth; this.dateAdapter.getMonth(date) == month; date = this.dateAdapter.addCalendarDays(date, 1)) {
            if (this.dateFilter(date)) {
                return true;
            }
        }
        return false;
    }
    _isYearAndMonthAfterMaxDate(year, month) {
        if (this.maxDate) {
            const maxYear = this.dateAdapter.getYear(this.maxDate);
            const maxMonth = this.dateAdapter.getMonth(this.maxDate);
            return year > maxYear || (year === maxYear && month > maxMonth);
        }
        return false;
    }
    _isYearAndMonthBeforeMinDate(year, month) {
        if (this.minDate) {
            const minYear = this.dateAdapter.getYear(this.minDate);
            const minMonth = this.dateAdapter.getMonth(this.minDate);
            return year < minYear || (year === minYear && month < minMonth);
        }
        return false;
    }
    _isRtl() {
        return !!(this.dir && this.dir.value === 'rtl');
    }
    _setSelectedMonth(value) {
        if (value instanceof DateRange) {
            this._selectedMonth =
                this._getMonthInCurrentYear(value.start) ||
                    this._getMonthInCurrentYear(value.end);
        }
        else {
            this._selectedMonth = this._getMonthInCurrentYear(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsYearViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsYearViewComponent, selector: "rds-year-view", inputs: { activeDate: "activeDate", selected: "selected", minDate: "minDate", maxDate: "maxDate", dateFilter: "dateFilter", dateClass: "dateClass" }, outputs: { selectedChange: "selectedChange", monthSelected: "monthSelected", activeDateChange: "activeDateChange" }, viewQueries: [{ propertyName: "_rdsCalendarBody", first: true, predicate: RdsCalendarBodyComponent, descendants: true }], exportAs: ["rdsYearView"], ngImport: i0, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_yearLabel\"\n    [rows]=\"_months\"\n    [todayValue]=\"_todayMonth\"\n    [startValue]=\"_selectedMonth\"\n    [endValue]=\"_selectedMonth\"\n    [labelMinRequiredCells]=\"2\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onMonthSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n", dependencies: [{ kind: "component", type: i1.RdsCalendarBodyComponent, selector: "[rdsCalendarBody], [rds-calendar-body]", inputs: ["label", "rows", "todayValue", "startValue", "endValue", "labelMinRequiredCells", "numCols", "activeCell", "isRange", "cellAspectRatio", "comparisonStart", "comparisonEnd", "previewStart", "previewEnd"], outputs: ["selectedValueChange", "previewChange"], exportAs: ["rdsCalendarBody"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsYearViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-year-view', exportAs: 'rdsYearView', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<table class=\"rds-calendar-table\" role=\"presentation\">\n  <thead class=\"rds-calendar-table-header\">\n    <tr>\n      <th class=\"rds-calendar-table-header-divider\" colspan=\"4\"></th>\n    </tr>\n  </thead>\n  <tbody\n    rds-calendar-body\n    [label]=\"_yearLabel\"\n    [rows]=\"_months\"\n    [todayValue]=\"_todayMonth\"\n    [startValue]=\"_selectedMonth\"\n    [endValue]=\"_selectedMonth\"\n    [labelMinRequiredCells]=\"2\"\n    [numCols]=\"4\"\n    [cellAspectRatio]=\"4 / 7\"\n    [activeCell]=\"_getActiveCell()\"\n    (selectedValueChange)=\"_onMonthSelected($event)\"\n    (keydown)=\"_handleCalendarBodyKeydown($event)\"\n  ></tbody>\n</table>\n" }]
        }], ctorParameters: () => [], propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], dateFilter: [{
                type: Input
            }], dateClass: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], monthSelected: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], _rdsCalendarBody: [{
                type: ViewChild,
                args: [RdsCalendarBodyComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,