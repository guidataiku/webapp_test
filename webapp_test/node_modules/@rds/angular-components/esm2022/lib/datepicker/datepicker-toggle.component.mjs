import { Attribute, booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, DestroyRef, Directive, forwardRef, HostBinding, HostListener, inject, Input, numberAttribute, ViewEncapsulation, } from '@angular/core';
import { merge, of, Subscription } from 'rxjs';
import { RdsDatepickerIntl } from './datepicker.intl';
import { RdsFormFieldComponent } from '../form-field';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_DEFAULT } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../button/icon-button.component";
import * as i3 from "../icons/icon.component";
export class RdsDatepickerToggleIconDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleIconDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerToggleIconDirective, selector: "[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]',
                }]
        }] });
export class RdsDatepickerToggleComponent {
    get classes() {
        const classes = ['rds-datepicker-toggle'];
        if (this.forDatepicker && this.forDatepicker.opened) {
            classes.push('rds-datepicker-toggle-active');
        }
        return classes;
    }
    get dataRdsCalendar() {
        return this.forDatepicker ? this.forDatepicker.id : null;
    }
    set disabled(value) {
        const newValue = value === undefined ? undefined : booleanAttribute(value);
        if (newValue !== this._disabled) {
            this._disabled = newValue;
            this.cdr.markForCheck();
        }
    }
    get disabled() {
        if (this._disabled === undefined && this.forDatepicker) {
            return this.forDatepicker.disabled;
        }
        return this._disabled || false;
    }
    get _buttonSize() {
        if (this.formField) {
            return this.formField?.size !== 'l' ? this.formField?.size : 'm';
        }
        else {
            return 's';
        }
    }
    _onClick($event) {
        this._open($event);
    }
    constructor(tabIndex) {
        this.intl = inject(RdsDatepickerIntl);
        this.destroyRef = inject(DestroyRef);
        this.cdr = inject(ChangeDetectorRef);
        this.formField = inject(forwardRef(() => RdsFormFieldComponent), { optional: true });
        this._stateChanges = Subscription.EMPTY;
        this._tabIndex = null;
        this.ariaLabel = '';
        this._customIcon = null;
        const parsedTabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
        this.tabIndex =
            parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    ngOnChanges(changes) {
        if (changes['datepicker']) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this._watchStateChanges();
        if (this.formField) {
            this.formField.control.stateChanges
                .pipe(takeUntilDestroyed(this.destroyRef))
                .subscribe(() => this.cdr.markForCheck());
        }
    }
    _open(event) {
        if (this.forDatepicker && !this.disabled) {
            this.forDatepicker.open();
            event.stopPropagation();
        }
    }
    _watchStateChanges() {
        const datepickerStateChanged = this.forDatepicker
            ? this.forDatepicker.stateChanges.asObservable()
            : of(null);
        const inputStateChanged = this.forDatepicker && this.forDatepicker.datepickerInput
            ? this.forDatepicker.datepickerInput.stateChanges
            : of(null);
        const datepickerToggled = this.forDatepicker
            ? merge(this.forDatepicker.openedStream, this.forDatepicker.closedStream)
            : of(null);
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(this.intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this.cdr.markForCheck());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsDatepickerToggleComponent, selector: "rds-datepicker-toggle", inputs: { forDatepicker: "forDatepicker", tabIndex: ["tabIndex", "tabIndex", numberAttribute], ariaLabel: ["aria-label", "ariaLabel"], disabled: "disabled" }, host: { listeners: { "click": "_onClick($event)" }, properties: { "class": "this.classes", "attr.data-rds-calendar": "this.dataRdsCalendar", "attr.tabindex": "this._tabIndex" } }, queries: [{ propertyName: "_customIcon", first: true, predicate: RdsDatepickerToggleIconDirective, descendants: true }], exportAs: ["rdsDatepickerToggle"], usesOnChanges: true, ngImport: i0, template: "<button\n  rds-icon-button\n  type=\"button\"\n  [size]=\"_buttonSize\"\n  [ngClass]=\"{ active: forDatepicker?.opened }\"\n  class=\"rds-button--with-only-icon\"\n  [attr.aria-haspopup]=\"forDatepicker ? 'dialog' : null\"\n  [attr.aria-label]=\"ariaLabel || intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n>\n  @if (!_customIcon) {\n    <rds-icon\n      class=\"rds-datepicker-toggle-default-icon\"\n      icon=\"calendar\"\n      namespace=\"outlined\"\n    />\n  }\n  <ng-content\n    select=\"[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]\"\n  />\n</button>\n", styles: [".rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle{display:flex}.rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.rds-form-field .rds-form-field__content-prefix .rds-icon-button .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-icon-button .rds-datepicker-toggle-default-icon{margin:auto}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: i2.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "component", type: i3.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerToggleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-datepicker-toggle', exportAs: 'rdsDatepickerToggle', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<button\n  rds-icon-button\n  type=\"button\"\n  [size]=\"_buttonSize\"\n  [ngClass]=\"{ active: forDatepicker?.opened }\"\n  class=\"rds-button--with-only-icon\"\n  [attr.aria-haspopup]=\"forDatepicker ? 'dialog' : null\"\n  [attr.aria-label]=\"ariaLabel || intl.openCalendarLabel\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n>\n  @if (!_customIcon) {\n    <rds-icon\n      class=\"rds-datepicker-toggle-default-icon\"\n      icon=\"calendar\"\n      namespace=\"outlined\"\n    />\n  }\n  <ng-content\n    select=\"[rdsDatepickerToggleIcon], [rds-datepicker-toggle-icon]\"\n  />\n</button>\n", styles: [".rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle{display:flex}.rds-form-field .rds-form-field__content-prefix .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-datepicker-toggle-default-icon{display:block;width:1.5em;height:1.5em}.rds-form-field .rds-form-field__content-prefix .rds-icon-button .rds-datepicker-toggle-default-icon,.rds-form-field .rds-form-field__content-suffix .rds-icon-button .rds-datepicker-toggle-default-icon{margin:auto}\n"] }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { classes: [{
                type: HostBinding,
                args: ['class']
            }], dataRdsCalendar: [{
                type: HostBinding,
                args: ['attr.data-rds-calendar']
            }], _tabIndex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], forDatepicker: [{
                type: Input
            }], tabIndex: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], disabled: [{
                type: Input
            }], _customIcon: [{
                type: ContentChild,
                args: [RdsDatepickerToggleIconDirective]
            }], _onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci10b2dnbGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9hbmd1bGFyLWNvbXBvbmVudHMvc3JjL2xpYi9kYXRlcGlja2VyL2RhdGVwaWNrZXItdG9nZ2xlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvZGF0ZXBpY2tlci9kYXRlcGlja2VyLXRvZ2dsZS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBRUwsU0FBUyxFQUNULGdCQUFnQixFQUNoQix1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxZQUFZLEVBQ1osVUFBVSxFQUNWLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLGVBQWUsRUFJZixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR3RELE9BQU8sRUFBRSxxQkFBcUIsRUFBb0IsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sVUFBVSxDQUFDOzs7OztBQUs3QyxNQUFNLE9BQU8sZ0NBQWdDOzhHQUFoQyxnQ0FBZ0M7a0dBQWhDLGdDQUFnQzs7MkZBQWhDLGdDQUFnQztrQkFINUMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseURBQXlEO2lCQUNwRTs7QUFXRCxNQUFNLE9BQU8sNEJBQTRCO0lBZ0J2QyxJQUEwQixPQUFPO1FBQy9CLE1BQU0sT0FBTyxH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Q0FBQztRQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQ2pCLHNCQUFzQixFQUN0QixpQkFBaUIsRUFDakIsaUJBQWlCLENBQ2xCLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUM3QyxDQUFDOzhHQTVIVSw0QkFBNEIsa0JBd0VoQixVQUFVO2tHQXhFdEIsNEJBQTRCLGtIQWlDbkIsZUFBZSx3VEF1QnJCLGdDQUFnQyx3R0NuR2hELG9uQkFzQkE7OzJGRHFCYSw0QkFBNEI7a0JBUnhDLFNBQVM7K0JBQ0UsdUJBQXVCLFlBR3ZCLHFCQUFxQixpQkFDaEIsaUJBQWlCLENBQUMsSUFBSSxtQkFDcEIsdUJBQXVCLENBQUMsTUFBTTs7MEJBMEVsQyxTQUFTOzJCQUFDLFVBQVU7eUNBeERQLE9BQU87c0JBQWhDLFdBQVc7dUJBQUMsT0FBTztnQkFVdUIsZUFBZTtzQkFBekQsV0FBVzt1QkFBQyx3QkFBd0I7Z0JBSVAsU0FBUztzQkFBdEMsV0FBVzt1QkFBQyxlQUFlO2dCQUVuQixhQUFhO3NCQUFyQixLQUFLO2dCQUNpQyxRQUFRO3NCQUE5QyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLGVBQWUsRUFBRTtnQkFDaEIsU0FBUztzQkFBN0IsS0FBSzt1QkFBQyxZQUFZO2dCQUdmLFFBQVE7c0JBRFgsS0FBSztnQkFxQk4sV0FBVztzQkFEVixZQUFZO3VCQUFDLGdDQUFnQztnQkFZOUMsUUFBUTtzQkFEUCxZQUFZO3VCQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvb2xlYW5JbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9jb2VyY2lvbic7XG5pbXBvcnQge1xuICBBZnRlckNvbnRlbnRJbml0LFxuICBBdHRyaWJ1dGUsXG4gIGJvb2xlYW5BdHRyaWJ1dGUsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGQsXG4gIERlc3Ryb3lSZWYsXG4gIERpcmVjdGl2ZSxcbiAgZm9yd2FyZFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBJbnB1dCxcbiAgbnVtYmVyQXR0cmlidXRlLFxuICBPbkNoYW5nZXMsXG4gIE9uRGVzdHJveSxcbiAgU2ltcGxlQ2hhbmdlcyxcbiAgVmlld0VuY2Fwc3VsYXRpb24sXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWVyZ2UsIG9mLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFJkc0RhdGVwaWNrZXJJbnRsIH0gZnJvbSAnLi9kYXRlcGlja2VyLmludGwnO1xuaW1wb3J0IHsgUmRzRGF0ZXBpY2tlckNvbnRyb2wsIFJkc0RhdGVwaWNrZXJQYW5lbCB9IGZyb20gJy4vZGF0ZXBpY2tlci1iYXNlJztcbmltcG9ydCB7IEV4dHJhY3REYXRlVHlwZUZyb21TZWxlY3Rpb24gfSBmcm9tICcuL2RhdGUtc2VsZWN0aW9uLm1vZGVsJztcbmltcG9ydCB7IFJkc0Zvcm1GaWVsZENvbXBvbmVudCwgUmRzRm9ybUZpZWxkU2l6ZSB9IGZyb20gJy4uL2Zvcm0tZmllbGQnO1xuaW1wb3J0IHsgdGFrZVVudGlsRGVzdHJveWVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS9yeGpzLWludGVyb3AnO1xuaW1wb3J0IHsgVEFCX0lOREVYX0RFRkFVTFQgfSBmcm9tICcuLi91dGlscyc7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tyZHNEYXRlcGlja2VyVG9nZ2xlSWNvbl0sIFtyZHMtZGF0ZXBpY2tlci10b2dnbGUtaWNvbl0nLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNEYXRlcGlja2VyVG9nZ2xlSWNvbkRpcmVjdGl2ZSB7fVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyZHMtZGF0ZXBpY2tlci10b2dnbGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vZGF0ZXBpY2tlci10b2dnbGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9kYXRlcGlja2VyLXRvZ2dsZS5jb21wb25lbnQuc2NzcyddLFxuICBleHBvcnRBczogJ3Jkc0RhdGVwaWNrZXJUb2dnbGUnLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUmRzRGF0ZXBpY2tlclRvZ2dsZUNvbXBvbmVudDxcbiAgICBTLFxuICAgIEQgPSBFeHRyYWN0RGF0ZVR5cGVGcm9tU2VsZWN0aW9uPFM+LFxuICA+XG4gIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3lcbntcbiAgcHVibGljIHJlYWRvbmx5IGludGwgPSBpbmplY3QoUmRzRGF0ZXBpY2tlckludGwpO1xuICBwcml2YXRlIHJlYWRvbmx5IGRlc3Ryb3lSZWYgPSBpbmplY3QoRGVzdHJveVJlZik7XG4gIHByaXZhdGUgcmVhZG9ubHkgY2RyID0gaW5qZWN0KENoYW5nZURldGVjdG9yUmVmKTtcbiAgcHJpdmF0ZSByZWFkb25seSBmb3JtRmllbGQgPSBpbmplY3Q8UmRzRm9ybUZpZWxkQ29tcG9uZW50PEQ+PihcbiAgICBmb3J3YXJkUmVmKCgpID0+IFJkc0Zvcm1GaWVsZENvbXBvbmVudCksXG4gICAgeyBvcHRpb25hbDogdHJ1ZSB9LFxuICApO1xuXG4gIHByaXZhdGUgX3N0YXRlQ2hhbmdlcyA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgZ2V0IGNsYXNzZXMoKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbJ3Jkcy1kYXRlcGlja2VyLXRvZ2dsZSddO1xuXG4gICAgaWYgKHRoaXMuZm9yRGF0ZXBpY2tlciAmJiB0aGlzLmZvckRhdGVwaWNrZXIub3BlbmVkKSB7XG4gICAgICBjbGFzc2VzLnB1c2goJ3Jkcy1kYXRlcGlja2VyLXRvZ2dsZS1hY3RpdmUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXJkcy1jYWxlbmRhcicpIGdldCBkYXRhUmRzQ2FsZW5kYXIoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZm9yRGF0ZXBpY2tlciA/IHRoaXMuZm9yRGF0ZXBpY2tlci5pZCA6IG51bGw7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2F0dHIudGFiaW5kZXgnKSBfdGFiSW5kZXggPSBudWxsO1xuXG4gIEBJbnB1dCgpIGZvckRhdGVwaWNrZXI/OiBSZHNEYXRlcGlja2VyUGFuZWw8UmRzRGF0ZXBpY2tlckNvbnRyb2w8RD4sIFMsIEQ+O1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IG51bWJlckF0dHJpYnV0ZSB9KSB0YWJJbmRleDogbnVtYmVyIHwgbnVsbDtcbiAgQElucHV0KCdhcmlhLWxhYmVsJykgYXJpYUxhYmVsID0gJyc7XG5cbiAgQElucHV0KClcbiAgc2V0IGRpc2FibGVkKHZhbHVlOiBCb29sZWFuSW5wdXQpIHtcbiAgICBjb25zdCBuZXdWYWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBib29sZWFuQXR0cmlidXRlKHZhbHVlKTtcblxuICAgIGlmIChuZXdWYWx1ZSAhPT0gdGhpcy5fZGlzYWJsZWQpIHtcbiAgICAgIHRoaXMuX2Rpc2FibGVkID0gbmV3VmFsdWU7XG4gICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuX2Rpc2FibGVkID09PSB1bmRlZmluZWQgJiYgdGhpcy5mb3JEYXRlcGlja2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JEYXRlcGlja2VyLmRpc2FibGVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9kaXNhYmxlZCB8fCBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgX2Rpc2FibGVkOiBib29sZWFuIHwgdW5kZWZpbmVkO1xuXG4gIEBDb250ZW50Q2hpbGQoUmRzRGF0ZXBpY2tlclRvZ2dsZUljb25EaXJlY3RpdmUpXG4gIF9jdXN0b21JY29uOiBSZHNEYXRlcGlja2VyVG9nZ2xlSWNvbkRpcmVjdGl2ZSB8IG51bGwgPSBudWxsO1xuXG4gIGdldCBfYnV0dG9uU2l6ZSgpOiBSZHNGb3JtRmllbGRTaXplIHtcbiAgICBpZiAodGhpcy5mb3JtRmllbGQpIHtcbiAgICAgIHJldHVybiB0aGlzLmZvcm1GaWVsZD8uc2l6ZSAhPT0gJ2wnID8gdGhpcy5mb3JtRmllbGQ/LnNpemUgOiAnbSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAncyc7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxuICBfb25DbGljaygkZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgdGhpcy5fb3BlbigkZXZlbnQpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoQEF0dHJpYnV0ZSgndGFiaW5kZXgnKSB0YWJJbmRleD86IHN0cmluZykge1xuICAgIGNvbnN0IHBhcnNlZFRhYkluZGV4ID0gbnVtYmVyQXR0cmlidXRlKHRhYkluZGV4LCBUQUJfSU5ERVhfREVGQVVMVCk7XG4gICAgdGhpcy50YWJJbmRleCA9XG4gICAgICBwYXJzZWRUYWJJbmRleCB8fCBwYXJzZWRUYWJJbmRleCA9PT0gMCA/IHBhcnNlZFRhYkluZGV4IDogbnVsbDtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcbiAgICBpZiAoY2hhbmdlc1snZGF0ZXBpY2tlciddKSB7XG4gICAgICB0aGlzLl93YXRjaFN0YXRlQ2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuX3dhdGNoU3RhdGVDaGFuZ2VzKCk7XG5cbiAgICBpZiAodGhpcy5mb3JtRmllbGQpIHtcbiAgICAgIHRoaXMuZm9ybUZpZWxkLmNvbnRyb2wuc3RhdGVDaGFuZ2VzXG4gICAgICAgIC5waXBlKHRha2VVbnRpbERlc3Ryb3llZCh0aGlzLmRlc3Ryb3lSZWYpKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpKTtcbiAgICB9XG4gIH1cblxuICBfb3BlbihldmVudDogRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5mb3JEYXRlcGlja2VyICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICB0aGlzLmZvckRhdGVwaWNrZXIub3BlbigpO1xuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfd2F0Y2hTdGF0ZUNoYW5nZXMoKTogdm9pZCB7XG4gICAgY29uc3QgZGF0ZXBpY2tlclN0YXRlQ2hhbmdlZCA9IHRoaXMuZm9yRGF0ZXBpY2tlclxuICAgICAgPyB0aGlzLmZvckRhdGVwaWNrZXIuc3RhdGVDaGFuZ2VzLmFzT2JzZXJ2YWJsZSgpXG4gICAgICA6IG9mKG51bGwpO1xuICAgIGNvbnN0IGlucHV0U3RhdGVDaGFuZ2VkID1cbiAgICAgIHRoaXMuZm9yRGF0ZXBpY2tlciAmJiB0aGlzLmZvckRhdGVwaWNrZXIuZGF0ZXBpY2tlcklucHV0XG4gICAgICAgID8gdGhpcy5mb3JEYXRlcGlja2VyLmRhdGVwaWNrZXJJbnB1dC5zdGF0ZUNoYW5nZXNcbiAgICAgICAgOiBvZihudWxsKTtcbiAgICBjb25zdCBkYXRlcGlja2VyVG9nZ2xlZCA9IHRoaXMuZm9yRGF0ZXBpY2tlclxuICAgICAgPyBtZXJnZSh0aGlzLmZvckRhdGVwaWNrZXIub3BlbmVkU3RyZWFtLCB0aGlzLmZvckRhdGVwaWNrZXIuY2xvc2VkU3RyZWFtKVxuICAgICAgOiBvZihudWxsKTtcblxuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcy51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMuX3N0YXRlQ2hhbmdlcyA9IG1lcmdlKFxuICAgICAgdGhpcy5pbnRsLmNoYW5nZXMsXG4gICAgICBkYXRlcGlja2VyU3RhdGVDaGFuZ2VkLFxuICAgICAgaW5wdXRTdGF0ZUNoYW5nZWQsXG4gICAgICBkYXRlcGlja2VyVG9nZ2xlZCxcbiAgICApLnN1YnNjcmliZSgoKSA9PiB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKSk7XG4gIH1cbn1cbiIsIjxidXR0b25cbiAgcmRzLWljb24tYnV0dG9uXG4gIHR5cGU9XCJidXR0b25cIlxuICBbc2l6ZV09XCJfYnV0dG9uU2l6ZVwiXG4gIFtuZ0NsYXNzXT1cInsgYWN0aXZlOiBmb3JEYXRlcGlja2VyPy5vcGVuZWQgfVwiXG4gIGNsYXNzPVwicmRzLWJ1dHRvbi0td2l0aC1vbmx5LWljb25cIlxuICBbYXR0ci5hcmlhLWhhc3BvcHVwXT1cImZvckRhdGVwaWNrZXIgPyAnZGlhbG9nJyA6IG51bGxcIlxuICBbYXR0ci5hcmlhLWxhYmVsXT1cImFyaWFMYWJlbCB8fCBpbnRsLm9wZW5DYWxlbmRhckxhYmVsXCJcbiAgW2F0dHIudGFiaW5kZXhdPVwiZGlzYWJsZWQgPyAtMSA6IHRhYkluZGV4XCJcbiAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbj5cbiAgQGlmICghX2N1c3RvbUljb24pIHtcbiAgICA8cmRzLWljb25cbiAgICAgIGNsYXNzPVwicmRzLWRhdGVwaWNrZXItdG9nZ2xlLWRlZmF1bHQtaWNvblwiXG4gICAgICBpY29uPVwiY2FsZW5kYXJcIlxuICAgICAgbmFtZXNwYWNlPVwib3V0bGluZWRcIlxuICAgIC8+XG4gIH1cbiAgPG5nLWNvbnRlbnRcbiAgICBzZWxlY3Q9XCJbcmRzRGF0ZXBpY2tlclRvZ2dsZUljb25dLCBbcmRzLWRhdGVwaWNrZXItdG9nZ2xlLWljb25dXCJcbiAgLz5cbjwvYnV0dG9uPlxuIl19