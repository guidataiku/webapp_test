import { Injectable, Optional, SkipSelf, } from '@angular/core';
import { DateAdapter } from './adapter';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./adapter";
export class DateRange {
    constructor(start, end) {
        this.start = start;
        this.end = end;
    }
}
export class RdsDateSelectionModel {
    constructor(_dateAdapter) {
        this._dateAdapter = _dateAdapter;
        this._selectionChanged = new Subject();
        this.selection = null;
        this.selectionChanged = this._selectionChanged;
    }
    updateSelection(value, source) {
        const oldValue = this.selection;
        this.selection = value;
        this._selectionChanged.next({
            selection: value,
            source,
            oldValue: oldValue,
        });
    }
    ngOnDestroy() {
        this._selectionChanged.complete();
    }
    _isValidDateInstance(date) {
        return (this._dateAdapter.isDateInstance(date) && this._dateAdapter.isValid(date));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateSelectionModel, deps: [{ token: i1.DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateSelectionModel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDateSelectionModel, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.DateAdapter }] });
export class RdsSingleDateSelectionModel extends RdsDateSelectionModel {
    constructor(adapter) {
        super(adapter);
        this.selection = null;
    }
    add(date) {
        super.updateSelection(date, this);
    }
    isValid() {
        return this.selection != null && this._isValidDateInstance(this.selection);
    }
    isComplete() {
        return this.selection != null;
    }
    clone() {
        const clone = new RdsSingleDateSelectionModel(this._dateAdapter);
        clone.updateSelection(this.selection, this);
        return clone;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleDateSelectionModel, deps: [{ token: i1.DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleDateSelectionModel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsSingleDateSelectionModel, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.DateAdapter }] });
export class RdsRangeDateSelectionModel extends RdsDateSelectionModel {
    constructor(dateAdapter) {
        super(dateAdapter);
        this.selection = new DateRange(null, null);
    }
    add(date) {
        let { start, end } = this.selection;
        if (start == null) {
            start = date;
        }
        else if (end == null) {
            end = date;
        }
        else {
            start = date;
            end = null;
        }
        super.updateSelection(new DateRange(start, end), this);
    }
    isValid() {
        const { start, end } = this.selection;
        // Empty ranges are valid.
        if (start == null && end == null) {
            return true;
        }
        // Complete ranges are only valid if both dates are valid and the start is before the end.
        if (start != null && end != null) {
            return (this._isValidDateInstance(start) &&
                this._isValidDateInstance(end) &&
                this._dateAdapter.compareDate(start, end) <= 0);
        }
        // Partial ranges are valid if the start/end is valid.
        return ((start == null || this._isValidDateInstance(start)) &&
            (end == null || this._isValidDateInstance(end)));
    }
    isComplete() {
        return this.selection.start != null && this.selection.end != null;
    }
    clone() {
        const clone = new RdsRangeDateSelectionModel(this._dateAdapter);
        clone.updateSelection(this.selection, this);
        return clone;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRangeDateSelectionModel, deps: [{ token: i1.DateAdapter }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRangeDateSelectionModel }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsRangeDateSelectionModel, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.DateAdapter }] });
export function RDS_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, dateAdapter) {
    return parent || new RdsSingleDateSelectionModel(dateAdapter);
}
export const RDS_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {
    provide: RdsDateSelectionModel,
    deps: [[new Optional(), new SkipSelf(), RdsDateSelectionModel], DateAdapter],
    useFactory: RDS_SINGLE_DATE_SELECTION_MODEL_FACTORY,
};
export function RDS_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, dateAdapter) {
    return parent || new RdsRangeDateSelectionModel(dateAdapter);
}
export const RDS_RANGE_DATE_SELECTION_MODEL_PROVIDER = {
    provide: RdsDateSelectionModel,
    deps: [[new Optional(), new SkipSelf(), RdsDateSelectionModel], DateAdapter],
    useFactory: RDS_RANGE_DATE_SELECTION_MODEL_FACTORY,
};
//# sourceMappingURL=data:application/json;base64,