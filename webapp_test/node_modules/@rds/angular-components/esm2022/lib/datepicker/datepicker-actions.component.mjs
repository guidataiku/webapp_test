import { ChangeDetectionStrategy, Component, Directive, HostListener, inject, TemplateRef, ViewChild, ViewContainerRef, ViewEncapsulation, } from '@angular/core';
import { TemplatePortal } from '@angular/cdk/portal';
import { RdsDatepickerBaseDirective, } from './datepicker-base';
import * as i0 from "@angular/core";
export class RdsDatepickerApplyDirective {
    constructor() {
        this.datepicker = inject(RdsDatepickerBaseDirective);
    }
    _applySelection() {
        this.datepicker._applyPendingSelection();
        this.datepicker.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerApplyDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerApplyDirective, selector: "[rdsDatepickerApply], [rdsDateRangePickerApply], [rds-datepicker-apply], [rds-date-range-picker-apply]", host: { listeners: { "click": "_applySelection()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerApplyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDatepickerApply], [rdsDateRangePickerApply], [rds-datepicker-apply], [rds-date-range-picker-apply]',
                }]
        }], propDecorators: { _applySelection: [{
                type: HostListener,
                args: ['click']
            }] } });
export class RdsDatepickerCancelDirective {
    constructor() {
        this.datepicker = inject(RdsDatepickerBaseDirective);
    }
    _applySelection() {
        this.datepicker.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerCancelDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerCancelDirective, selector: "[rdsDatepickerCancel], [rdsDateRangePickerCancel], [rds-datepicker-cancel], [rds-date-range-picker-cancel]", host: { listeners: { "click": "_applySelection()" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerCancelDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsDatepickerCancel], [rdsDateRangePickerCancel], [rds-datepicker-cancel], [rds-date-range-picker-cancel]',
                }]
        }], propDecorators: { _applySelection: [{
                type: HostListener,
                args: ['click']
            }] } });
export class RdsDatepickerActionsComponent {
    constructor() {
        this.datepicker = inject(RdsDatepickerBaseDirective);
        this.viewContainerRef = inject(ViewContainerRef);
        this._template = null;
        this._portal = null;
    }
    ngAfterViewInit() {
        this._portal = new TemplatePortal(this._template, this.viewContainerRef);
        this.datepicker.registerActions(this._portal);
    }
    ngOnDestroy() {
        this.datepicker.removeActions(this._portal);
        if (this._portal && this._portal.isAttached) {
            this._portal?.detach();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsDatepickerActionsComponent, selector: "rds-datepicker-actions, rds-date-range-picker-actions", viewQueries: [{ propertyName: "_template", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0, template: `
    <ng-template>
      <div class="rds-datepicker-actions">
        <ng-content />
      </div>
    </ng-template>
  `, isInline: true, styles: [".rds-datepicker-actions{background:var(--rds-color-bg-base-box);display:flex;justify-content:flex-end;align-items:center;padding:16px;border-top:1px solid var(--rds-color-grey-2)}.rds-datepicker-actions .rds-button+.rds-button{margin-left:16px}[dir=rtl] .rds-datepicker-actions .rds-button+.rds-button{margin-left:0;margin-right:16px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsDatepickerActionsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-datepicker-actions, rds-date-range-picker-actions', template: `
    <ng-template>
      <div class="rds-datepicker-actions">
        <ng-content />
      </div>
    </ng-template>
  `, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, styles: [".rds-datepicker-actions{background:var(--rds-color-bg-base-box);display:flex;justify-content:flex-end;align-items:center;padding:16px;border-top:1px solid var(--rds-color-grey-2)}.rds-datepicker-actions .rds-button+.rds-button{margin-left:16px}[dir=rtl] .rds-datepicker-actions .rds-button+.rds-button{margin-left:0;margin-right:16px}\n"] }]
        }], propDecorators: { _template: [{
                type: ViewChild,
                args: [TemplateRef]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZXBpY2tlci1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvZGF0ZXBpY2tlci9kYXRlcGlja2VyLWFjdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFNBQVMsRUFDVCxZQUFZLEVBQ1osTUFBTSxFQUVOLFdBQVcsRUFDWCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLGlCQUFpQixHQUNsQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUNMLDBCQUEwQixHQUUzQixNQUFNLG1CQUFtQixDQUFDOztBQU0zQixNQUFNLE9BQU8sMkJBQTJCO0lBSnhDO1FBS21CLGVBQVUsR0FBRyxNQUFNLENBS2xDLDBCQUEwQixDQUFDLENBQUM7S0FPL0I7SUFKQyxlQUFlO1FBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0FaVSwyQkFBMkI7a0dBQTNCLDJCQUEyQjs7MkZBQTNCLDJCQUEyQjtrQkFKdkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQ04sd0dBQXdHO2lCQUMzRzs4QkFVQyxlQUFlO3NCQURkLFlBQVk7dUJBQUMsT0FBTzs7QUFXdkIsTUFBTSxPQUFPLDRCQUE0QjtJQUp6QztRQUttQixlQUFVLEdBQUcsTUFBTSxDQUtsQywwQkFBMEIsQ0FBQyxDQUFDO0tBTS9CO0lBSEMsZUFBZTtRQUNiLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs4R0FYVSw0QkFBNEI7a0dBQTVCLDRCQUE0Qjs7MkZBQTVCLDRCQUE0QjtrQkFKeEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQ04sNEdBQTRHO2lCQUMvRzs4QkFVQyxlQUFlO3NCQURkLFlBQVk7dUJBQUMsT0FBTzs7QUFtQnZCLE1BQU0sT0FBTyw2QkFBNkI7SUFiMUM7UUFjbUIsZUFBVSxHQUFHLE1BQU0sQ0FLbEMsMEJBQTBCLENBQUMsQ0FBQztRQUNiLHFCQUFnQixHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBRXJDLGNBQVMsR0FBZ0MsSUFBSSxDQUFDO1FBQzlELFlBQU8sR0FBMEIsSUFBSSxDQUFDO0tBaUIvQztJQWZDLGVBQWU7UUFDYixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksY0FBYyxDQUMvQixJQUFJLENBQUMsU0FBaUMsRUFDdEMsSUFBSSxDQUFDLGdCQUFnQixDQUN0QixDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQXlCLENBQUMsQ0FBQztRQUU5RCxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUM1QyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxDQUFDO1FBQ3pCLENBQUM7SUFDSCxDQUFDOzhHQTFCVSw2QkFBNkI7a0dBQTdCLDZCQUE2Qix3SUFTN0IsV0FBVyxnREFuQlo7Ozs7OztHQU1UOzsyRkFJVSw2QkFBNkI7a0JBYnpDLFNBQVM7K0JBQ0UsdURBQXVELFlBRXZEOzs7Ozs7R0FNVCxtQkFDZ0IsdUJBQXVCLENBQUMsTUFBTSxpQkFDaEMsaUJBQWlCLENBQUMsSUFBSTs4QkFXYixTQUFTO3NCQUFoQyxTQUFTO3VCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBEaXJlY3RpdmUsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBPbkRlc3Ryb3ksXG4gIFRlbXBsYXRlUmVmLFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRlbXBsYXRlUG9ydGFsIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BvcnRhbCc7XG5pbXBvcnQge1xuICBSZHNEYXRlcGlja2VyQmFzZURpcmVjdGl2ZSxcbiAgUmRzRGF0ZXBpY2tlckNvbnRyb2wsXG59IGZyb20gJy4vZGF0ZXBpY2tlci1iYXNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOlxuICAgICdbcmRzRGF0ZXBpY2tlckFwcGx5XSwgW3Jkc0RhdGVSYW5nZVBpY2tlckFwcGx5XSwgW3Jkcy1kYXRlcGlja2VyLWFwcGx5XSwgW3Jkcy1kYXRlLXJhbmdlLXBpY2tlci1hcHBseV0nLFxufSlcbmV4cG9ydCBjbGFzcyBSZHNEYXRlcGlja2VyQXBwbHlEaXJlY3RpdmUge1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVwaWNrZXIgPSBpbmplY3Q8XG4gICAgUmRzRGF0ZXBpY2tlckJhc2VEaXJlY3RpdmU8XG4gICAgICBSZHNEYXRlcGlja2VyQ29udHJvbDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4sXG4gICAgICB1bmtub3duXG4gICAgPlxuICA+KFJkc0RhdGVwaWNrZXJCYXNlRGlyZWN0aXZlKTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIF9hcHBseVNlbGVjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLmRhdGVwaWNrZXIuX2FwcGx5UGVuZGluZ1NlbGVjdGlvbigpO1xuICAgIHRoaXMuZGF0ZXBpY2tlci5jbG9zZSgpO1xuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjpcbiAgICAnW3Jkc0RhdGVwaWNrZXJDYW5jZWxdLCBbcmRzRGF0ZVJhbmdlUGlja2VyQ2FuY2VsXSwgW3Jkcy1kYXRlcGlja2VyLWNhbmNlbF0sIFtyZHMtZGF0ZS1yYW5nZS1waWNrZXItY2FuY2VsXScsXG59KVxuZXhwb3J0IGNsYXNzIFJkc0RhdGVwaWNrZXJDYW5jZWxEaXJlY3RpdmUge1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVwaWNrZXIgPSBpbmplY3Q8XG4gICAgUmRzRGF0ZXBpY2tlckJhc2VEaXJlY3RpdmU8XG4gICAgICBSZHNEYXRlcGlja2VyQ29udHJvbDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4sXG4gICAgICB1bmtub3duXG4gICAgPlxuICA+KFJkc0RhdGVwaWNrZXJCYXNlRGlyZWN0aXZlKTtcblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIF9hcHBseVNlbGVjdGlvbigpOiB2b2lkIHtcbiAgICB0aGlzLmRhdGVwaWNrZXIuY2xvc2UoKTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyZHMtZGF0ZXBpY2tlci1hY3Rpb25zLCByZHMtZGF0ZS1yYW5nZS1waWNrZXItYWN0aW9ucycsXG4gIHN0eWxlVXJsczogWycuL2RhdGVwaWNrZXItYWN0aW9ucy5jb21wb25lbnQuc2NzcyddLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxuZy10ZW1wbGF0ZT5cbiAgICAgIDxkaXYgY2xhc3M9XCJyZHMtZGF0ZXBpY2tlci1hY3Rpb25zXCI+XG4gICAgICAgIDxuZy1jb250ZW50IC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLXRlbXBsYXRlPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzRGF0ZXBpY2tlckFjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBwcml2YXRlIHJlYWRvbmx5IGRhdGVwaWNrZXIgPSBpbmplY3Q8XG4gICAgUmRzRGF0ZXBpY2tlckJhc2VEaXJlY3RpdmU8XG4gICAgICBSZHNEYXRlcGlja2VyQ29udHJvbDxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4sXG4gICAgICB1bmtub3duXG4gICAgPlxuICA+KFJkc0RhdGVwaWNrZXJCYXNlRGlyZWN0aXZlKTtcbiAgcHJpdmF0ZSByZWFkb25seSB2aWV3Q29udGFpbmVyUmVmID0gaW5qZWN0KFZpZXdDb250YWluZXJSZWYpO1xuXG4gIEBWaWV3Q2hpbGQoVGVtcGxhdGVSZWYpIF90ZW1wbGF0ZTogVGVtcGxhdGVSZWY8dW5rbm93bj4gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBfcG9ydGFsOiBUZW1wbGF0ZVBvcnRhbCB8IG51bGwgPSBudWxsO1xuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLl9wb3J0YWwgPSBuZXcgVGVtcGxhdGVQb3J0YWwoXG4gICAgICB0aGlzLl90ZW1wbGF0ZSBhcyBUZW1wbGF0ZVJlZjx1bmtub3duPixcbiAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZixcbiAgICApO1xuICAgIHRoaXMuZGF0ZXBpY2tlci5yZWdpc3RlckFjdGlvbnModGhpcy5fcG9ydGFsKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuZGF0ZXBpY2tlci5yZW1vdmVBY3Rpb25zKHRoaXMuX3BvcnRhbCBhcyBUZW1wbGF0ZVBvcnRhbCk7XG5cbiAgICBpZiAodGhpcy5fcG9ydGFsICYmIHRoaXMuX3BvcnRhbC5pc0F0dGFjaGVkKSB7XG4gICAgICB0aGlzLl9wb3J0YWw/LmRldGFjaCgpO1xuICAgIH1cbiAgfVxufVxuIl19