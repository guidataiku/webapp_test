import { FocusMonitor } from '@angular/cdk/a11y';
import { Attribute, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, HostBinding, HostListener, inject, Input, numberAttribute, Output, } from '@angular/core';
import { TAB_INDEX_DEFAULT } from '../utils';
import * as i0 from "@angular/core";
export class RdsBreadcrumbItemComponent {
    constructor(tabIndex) {
        this.focusMonitor = inject(FocusMonitor);
        this.elementRef = inject(ElementRef);
        this.class = 'rds-breadcrumb-item rds-focus-indicator';
        this.tabIndex = TAB_INDEX_DEFAULT;
        this.itemClick = new EventEmitter();
        this.tabIndex = numberAttribute(tabIndex, TAB_INDEX_DEFAULT);
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, false);
    }
    ngOnDestroy() {
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    onClickItem() {
        this.itemClick.emit(this.item);
    }
    focus(origin = 'program', options) {
        this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbItemComponent, deps: [{ token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsBreadcrumbItemComponent, isStandalone: true, selector: "rds-breadcrumb-item", inputs: { tabIndex: ["tabIndex", "tabIndex", (v) => numberAttribute(v, TAB_INDEX_DEFAULT)], item: "item" }, outputs: { itemClick: "itemClick" }, host: { listeners: { "click": "onClickItem()", "keydown.enter": "onClickItem()", "keydown.space": "onClickItem()" }, properties: { "class": "this.class", "tabIndex": "this.tabIndex" } }, ngImport: i0, template: `<span [title]="item.title ?? ''">{{ item.text }}</span>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsBreadcrumbItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-breadcrumb-item',
                    template: `<span [title]="item.title ?? ''">{{ item.text }}</span>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    standalone: true,
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }], propDecorators: { class: [{
                type: HostBinding,
                args: ['class']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }, {
                type: Input,
                args: [{ transform: (v) => numberAttribute(v, TAB_INDEX_DEFAULT) }]
            }], item: [{
                type: Input
            }], itemClick: [{
                type: Output
            }], onClickItem: [{
                type: HostListener,
                args: ['click']
            }, {
                type: HostListener,
                args: ['keydown.enter']
            }, {
                type: HostListener,
                args: ['keydown.space']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvYnJlYWRjcnVtYnMvYnJlYWRjcnVtYi1pdGVtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW1CLFlBQVksRUFBZSxNQUFNLG1CQUFtQixDQUFDO0FBQy9FLE9BQU8sRUFFTCxTQUFTLEVBQ1QsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxlQUFlLEVBRWYsTUFBTSxHQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFhN0MsTUFBTSxPQUFPLDBCQUEwQjtJQWdCckMsWUFBbUMsUUFBaUI7UUFibkMsaUJBQVksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDcEMsZUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUUzQixVQUFLLEdBQUcseUNBQXlDLENBQUM7UUFJeEUsYUFBUSxHQUFHLGlCQUFpQixDQUFDO1FBSW5CLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBSyxDQUFDO1FBRzFDLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBS0QsV0FBVztRQUNULElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFNBQXNCLFNBQVMsRUFBRSxPQUFzQjtRQUMzRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0UsQ0FBQzs4R0FyQ1UsMEJBQTBCLGtCQWdCZCxVQUFVO2tHQWhCdEIsMEJBQTBCLG9HQVNqQixDQUFDLENBQVUsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRSxpQkFBaUIsQ0FBQywyUUFiL0QseURBQXlEOzsyRkFJeEQsMEJBQTBCO2tCQU50QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSx5REFBeUQ7b0JBQ25FLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxVQUFVLEVBQUUsSUFBSTtpQkFDakI7OzBCQWlCYyxTQUFTOzJCQUFDLFVBQVU7eUNBVlgsS0FBSztzQkFBMUIsV0FBVzt1QkFBQyxPQUFPO2dCQUlwQixRQUFRO3NCQUZQLFdBQVc7dUJBQUMsVUFBVTs7c0JBQ3RCLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFVLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCLENBQUMsRUFBRTtnQkFHbEUsSUFBSTtzQkFBWixLQUFLO2dCQUVJLFNBQVM7c0JBQWxCLE1BQU07Z0JBaUJQLFdBQVc7c0JBSFYsWUFBWTt1QkFBQyxPQUFPOztzQkFDcEIsWUFBWTt1QkFBQyxlQUFlOztzQkFDNUIsWUFBWTt1QkFBQyxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9jdXNhYmxlT3B0aW9uLCBGb2N1c01vbml0b3IsIEZvY3VzT3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQXR0cmlidXRlLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBIb3N0TGlzdGVuZXIsXG4gIGluamVjdCxcbiAgSW5wdXQsXG4gIG51bWJlckF0dHJpYnV0ZSxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVEFCX0lOREVYX0RFRkFVTFQgfSBmcm9tICcuLi91dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmRzQnJlYWRjcnVtYkl0ZW0ge1xuICB0ZXh0OiBzdHJpbmc7XG4gIHRpdGxlPzogc3RyaW5nO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdyZHMtYnJlYWRjcnVtYi1pdGVtJyxcbiAgdGVtcGxhdGU6IGA8c3BhbiBbdGl0bGVdPVwiaXRlbS50aXRsZSA/PyAnJ1wiPnt7IGl0ZW0udGV4dCB9fTwvc3Bhbj5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3RhbmRhbG9uZTogdHJ1ZSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzQnJlYWRjcnVtYkl0ZW1Db21wb25lbnQ8VCBleHRlbmRzIFJkc0JyZWFkY3J1bWJJdGVtPlxuICBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRm9jdXNhYmxlT3B0aW9uXG57XG4gIHByaXZhdGUgcmVhZG9ubHkgZm9jdXNNb25pdG9yID0gaW5qZWN0KEZvY3VzTW9uaXRvcik7XG4gIHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudFJlZiA9IGluamVjdChFbGVtZW50UmVmKTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xhc3MgPSAncmRzLWJyZWFkY3J1bWItaXRlbSByZHMtZm9jdXMtaW5kaWNhdG9yJztcblxuICBASG9zdEJpbmRpbmcoJ3RhYkluZGV4JylcbiAgQElucHV0KHsgdHJhbnNmb3JtOiAodjogdW5rbm93bikgPT4gbnVtYmVyQXR0cmlidXRlKHYsIFRBQl9JTkRFWF9ERUZBVUxUKSB9KVxuICB0YWJJbmRleCA9IFRBQl9JTkRFWF9ERUZBVUxUO1xuXG4gIEBJbnB1dCgpIGl0ZW06IFQ7XG5cbiAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8VD4oKTtcblxuICBjb25zdHJ1Y3RvcihAQXR0cmlidXRlKCd0YWJpbmRleCcpIHRhYkluZGV4Pzogc3RyaW5nKSB7XG4gICAgdGhpcy50YWJJbmRleCA9IG51bWJlckF0dHJpYnV0ZSh0YWJJbmRleCwgVEFCX0lOREVYX0RFRkFVTFQpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIHRoaXMuZm9jdXNNb25pdG9yLm1vbml0b3IodGhpcy5lbGVtZW50UmVmLCBmYWxzZSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvci5zdG9wTW9uaXRvcmluZyh0aGlzLmVsZW1lbnRSZWYpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBASG9zdExpc3RlbmVyKCdrZXlkb3duLmVudGVyJylcbiAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5zcGFjZScpXG4gIG9uQ2xpY2tJdGVtKCk6IHZvaWQge1xuICAgIHRoaXMuaXRlbUNsaWNrLmVtaXQodGhpcy5pdGVtKTtcbiAgfVxuXG4gIGZvY3VzKG9yaWdpbjogRm9jdXNPcmlnaW4gPSAncHJvZ3JhbScsIG9wdGlvbnM/OiBGb2N1c09wdGlvbnMpOiB2b2lkIHtcbiAgICB0aGlzLmZvY3VzTW9uaXRvci5mb2N1c1ZpYSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgb3JpZ2luLCBvcHRpb25zKTtcbiAgfVxufVxuIl19