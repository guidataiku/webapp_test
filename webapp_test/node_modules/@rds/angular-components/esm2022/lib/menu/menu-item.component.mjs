import { FocusMonitor } from '@angular/cdk/a11y';
import { ChangeDetectionStrategy, Component, HostBinding, HostListener, inject, ViewEncapsulation, } from '@angular/core';
import { Subject } from 'rxjs';
import { RdsNestableListItemComponent, } from '../list-item';
import { RDS_NESTABLE_LIST_ITEM_TEMPLATE } from '../list-item';
import { RDS_MENU_PANEL } from './menu-panel';
import * as i0 from "@angular/core";
import * as i1 from "../icons/icon.component";
export class RdsMenuItemComponent extends RdsNestableListItemComponent {
    constructor() {
        super(...arguments);
        this._parentMenu = inject(RDS_MENU_PANEL, { optional: true });
        this.focusMonitor = inject(FocusMonitor);
        this.rdsMenuItemClass = true;
        this._hovered = new Subject();
    }
    ngAfterViewInit() {
        this.focusMonitor.monitor(this.elementRef, false);
    }
    ngOnDestroy() {
        this._hovered.complete();
        this._focused.complete();
        this.focusMonitor.stopMonitoring(this.elementRef);
    }
    _getHostElement() {
        return this.elementRef.nativeElement;
    }
    handleMouseEnter() {
        this._hovered.next(this);
    }
    focus(origin, options) {
        if (this.focusMonitor && origin) {
            this.focusMonitor.focusVia(this.elementRef.nativeElement, origin, options);
        }
        else {
            super.focus();
        }
        this._focused.next(this);
    }
    blur() {
        this.markAsInactive();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuItemComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsMenuItemComponent, selector: "[rds-menu-item], [rdsMenuItem]", host: { listeners: { "mouseenter": "handleMouseEnter()", "blur": "blur()" }, properties: { "class.rds-menu-item": "this.rdsMenuItemClass" } }, exportAs: ["rdsMenuItem"], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"rds-icon\"></ng-content>\n<span class=\"rds-list-item-text\">\n  <ng-content />\n</span>\n\n@if (hasChildItems) {\n  <rds-icon\n    namespace=\"outlined\"\n    icon=\"chevron_right\"\n    class=\"rds-list-item__has-child-items\"\n  />\n}", isInline: true, dependencies: [{ kind: "component", type: i1.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[rds-menu-item], [rdsMenuItem]',
                    exportAs: 'rdsMenuItem',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    template: RDS_NESTABLE_LIST_ITEM_TEMPLATE,
                }]
        }], propDecorators: { rdsMenuItemClass: [{
                type: HostBinding,
                args: ['class.rds-menu-item']
            }], handleMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVudS1pdGVtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYW5ndWxhci1jb21wb25lbnRzL3NyYy9saWIvbWVudS9tZW51LWl0ZW0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUM5RCxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFFTixpQkFBaUIsR0FDbEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBRUwsNEJBQTRCLEdBQzdCLE1BQU0sY0FBYyxDQUFDO0FBQ3RCLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsY0FBYyxFQUFnQixNQUFNLGNBQWMsQ0FBQzs7O0FBUzVELE1BQU0sT0FBTyxvQkFDWCxTQUFRLDRCQUE0QjtJQVJ0Qzs7UUFXa0IsZ0JBQVcsR0FBRyxNQUFNLENBQ2xDLGNBQWMsRUFDZCxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FDbkIsQ0FBQztRQUNpQixpQkFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVuQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDbkQsYUFBUSxHQUFHLElBQUksT0FBTyxFQUF3QixDQUFDO0tBdUN6RDtJQXJDQyxlQUFlO1FBQ2IsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELGVBQWU7UUFDYixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFHUyxnQkFBZ0I7UUFDeEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVRLEtBQUssQ0FBQyxNQUFvQixFQUFFLE9BQXNCO1FBQ3pELElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxNQUFNLEVBQUUsQ0FBQztZQUNoQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FDeEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLEVBQzdCLE1BQU0sRUFDTixPQUFPLENBQ1IsQ0FBQztRQUNKLENBQUM7YUFBTSxDQUFDO1lBQ04sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2hCLENBQUM7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBR1EsSUFBSTtRQUNYLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN4QixDQUFDOzhHQWpEVSxvQkFBb0I7a0dBQXBCLG9CQUFvQjs7MkZBQXBCLG9CQUFvQjtrQkFQaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07b0JBQy9DLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO29CQUNyQyxRQUFRLEVBQUUsK0JBQStCO2lCQUMxQzs4QkFXcUMsZ0JBQWdCO3NCQUFuRCxXQUFXO3VCQUFDLHFCQUFxQjtnQkFrQnhCLGdCQUFnQjtzQkFEekIsWUFBWTt1QkFBQyxZQUFZO2dCQW9CakIsSUFBSTtzQkFEWixZQUFZO3VCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb2N1c01vbml0b3IsIEZvY3VzT3JpZ2luIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2ExMXknO1xuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgSG9zdEJpbmRpbmcsXG4gIEhvc3RMaXN0ZW5lcixcbiAgaW5qZWN0LFxuICBPbkRlc3Ryb3ksXG4gIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIFJkc0xpc3RJdGVtQ29tcG9uZW50LFxuICBSZHNOZXN0YWJsZUxpc3RJdGVtQ29tcG9uZW50LFxufSBmcm9tICcuLi9saXN0LWl0ZW0nO1xuaW1wb3J0IHsgUkRTX05FU1RBQkxFX0xJU1RfSVRFTV9URU1QTEFURSB9IGZyb20gJy4uL2xpc3QtaXRlbSc7XG5pbXBvcnQgeyBSRFNfTUVOVV9QQU5FTCwgUmRzTWVudVBhbmVsIH0gZnJvbSAnLi9tZW51LXBhbmVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3Jkcy1tZW51LWl0ZW1dLCBbcmRzTWVudUl0ZW1dJyxcbiAgZXhwb3J0QXM6ICdyZHNNZW51SXRlbScsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lLFxuICB0ZW1wbGF0ZTogUkRTX05FU1RBQkxFX0xJU1RfSVRFTV9URU1QTEFURSxcbn0pXG5leHBvcnQgY2xhc3MgUmRzTWVudUl0ZW1Db21wb25lbnRcbiAgZXh0ZW5kcyBSZHNOZXN0YWJsZUxpc3RJdGVtQ29tcG9uZW50XG4gIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95XG57XG4gIHB1YmxpYyByZWFkb25seSBfcGFyZW50TWVudSA9IGluamVjdDxSZHNNZW51UGFuZWw8UmRzTWVudUl0ZW1Db21wb25lbnQ+PihcbiAgICBSRFNfTUVOVV9QQU5FTCxcbiAgICB7IG9wdGlvbmFsOiB0cnVlIH0sXG4gICk7XG4gIHByb3RlY3RlZCByZWFkb25seSBmb2N1c01vbml0b3IgPSBpbmplY3QoRm9jdXNNb25pdG9yKTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJkcy1tZW51LWl0ZW0nKSByZHNNZW51SXRlbUNsYXNzID0gdHJ1ZTtcbiAgcmVhZG9ubHkgX2hvdmVyZWQgPSBuZXcgU3ViamVjdDxSZHNMaXN0SXRlbUNvbXBvbmVudD4oKTtcblxuICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgdGhpcy5mb2N1c01vbml0b3IubW9uaXRvcih0aGlzLmVsZW1lbnRSZWYsIGZhbHNlKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuX2hvdmVyZWQuY29tcGxldGUoKTtcbiAgICB0aGlzLl9mb2N1c2VkLmNvbXBsZXRlKCk7XG4gICAgdGhpcy5mb2N1c01vbml0b3Iuc3RvcE1vbml0b3JpbmcodGhpcy5lbGVtZW50UmVmKTtcbiAgfVxuXG4gIF9nZXRIb3N0RWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignbW91c2VlbnRlcicpXG4gIHByb3RlY3RlZCBoYW5kbGVNb3VzZUVudGVyKCk6IHZvaWQge1xuICAgIHRoaXMuX2hvdmVyZWQubmV4dCh0aGlzKTtcbiAgfVxuXG4gIG92ZXJyaWRlIGZvY3VzKG9yaWdpbj86IEZvY3VzT3JpZ2luLCBvcHRpb25zPzogRm9jdXNPcHRpb25zKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZm9jdXNNb25pdG9yICYmIG9yaWdpbikge1xuICAgICAgdGhpcy5mb2N1c01vbml0b3IuZm9jdXNWaWEoXG4gICAgICAgIHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICBvcmlnaW4sXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdXBlci5mb2N1cygpO1xuICAgIH1cblxuICAgIHRoaXMuX2ZvY3VzZWQubmV4dCh0aGlzKTtcbiAgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2JsdXInKVxuICBvdmVycmlkZSBibHVyKCk6IHZvaWQge1xuICAgIHRoaXMubWFya0FzSW5hY3RpdmUoKTtcbiAgfVxufVxuIl19