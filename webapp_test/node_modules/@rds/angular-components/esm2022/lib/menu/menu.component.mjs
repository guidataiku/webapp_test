import { FocusKeyManager } from '@angular/cdk/a11y';
import { DOWN_ARROW, ESCAPE, hasModifierKey, LEFT_ARROW, RIGHT_ARROW, UP_ARROW, } from '@angular/cdk/keycodes';
import { booleanAttribute, ChangeDetectionStrategy, Component, ContentChild, ContentChildren, DestroyRef, ElementRef, EventEmitter, HostBinding, HostListener, inject, InjectionToken, Input, NgZone, Output, QueryList, TemplateRef, ViewChild, ViewEncapsulation, } from '@angular/core';
import { merge, Subject, Subscription } from 'rxjs';
import { startWith, switchMap, take, tap } from 'rxjs/operators';
import { rdsMenuAnimations } from './menu-animations';
import { RDS_MENU_CONTENT, RdsMenuContentDirective, } from './menu-content.directive';
import { throwRdsMenuInvalidPositionX, throwRdsMenuInvalidPositionY, } from './menu-error';
import { RdsMenuItemComponent } from './menu-item.component';
import { RDS_MENU_PANEL } from './menu-panel';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export const RDS_MENU_DEFAULT_OPTIONS = new InjectionToken('RDS_MENU_DEFAULT_OPTIONS', {
    providedIn: 'root',
    factory: RDS_MENU_DEFAULT_OPTIONS_FACTORY,
});
export function RDS_MENU_DEFAULT_OPTIONS_FACTORY() {
    return {
        overlapTrigger: false,
        xPosition: 'after',
        yPosition: 'below',
        backdrop: 'transparent',
    };
}
let menuPanelUid = 0;
export class RdsMenuComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.ngZone = inject(NgZone);
        this.defaultOptions = inject(RDS_MENU_DEFAULT_OPTIONS);
        this._xPosition = this.defaultOptions.xPosition;
        this._yPosition = this.defaultOptions.yPosition;
        this._size = 'm';
        this._elevationPrefix = 'rds-elevation-z';
        this._baseElevation = 4;
        this.attrAriaLabel = null;
        this.attrAriaLabelledBy = null;
        this.attrAriaDescribedBy = null;
        this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
        this._directDescendantItems = new QueryList();
        this._tabSubscription = Subscription.EMPTY;
        this._classList = {};
        this._panelAnimationState = 'void';
        this._animationDone = new Subject();
        this.overlayPanelClass = this.defaultOptions.overlayPanelClass || '';
        this.backdrop = this.defaultOptions.backdrop;
        this.ariaLabel = null;
        this.ariaLabelledby = null;
        this.ariaDescribedby = null;
        this.overlapTrigger = this.defaultOptions.overlapTrigger;
        this.closed = new EventEmitter();
        this.panelId = `rds-menu-panel-${menuPanelUid++}`;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
        this._allItems?.forEach((item) => (item.size = size));
    }
    get xPosition() {
        return this._xPosition;
    }
    set xPosition(value) {
        if (value !== 'before' && value !== 'after') {
            throwRdsMenuInvalidPositionX();
        }
        this._xPosition = value;
        this.setPositionClasses();
    }
    get yPosition() {
        return this._yPosition;
    }
    set yPosition(value) {
        if (value !== 'above' && value !== 'below') {
            throwRdsMenuInvalidPositionY();
        }
        this._yPosition = value;
        this.setPositionClasses();
    }
    /**
     * This method takes classes set on the host rds-menu-component element and applies them on the
     * menu template that displays in the overlay container.  Otherwise, it's difficult
     * to style the containing menu from outside the component.
     * @param classes list of class names
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set panelClass(classes) {
        const previousPanelClass = this._previousPanelClass;
        if (previousPanelClass && previousPanelClass.length) {
            previousPanelClass.split(' ').forEach((className) => {
                this._classList[className] = false;
            });
        }
        this._previousPanelClass = classes;
        if (classes && classes.length) {
            classes.split(' ').forEach((className) => {
                this._classList[className] = true;
            });
            this.elementRef.nativeElement.className = '';
        }
    }
    ngOnInit() {
        this.setPositionClasses();
    }
    ngAfterContentInit() {
        this._updateDirectDescendants();
        this._keyManager = new FocusKeyManager(this._directDescendantItems)
            .skipPredicate((i) => i.disabled)
            .withWrap()
            .withTypeAhead()
            .withHomeAndEnd();
        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));
        this._directDescendantItems.changes
            .pipe(startWith(this._directDescendantItems), tap(() => {
            this.tabIndex = this._directDescendantItems.filter((i) => !i.disabled)
                ? TAB_INDEX_DEFAULT
                : TAB_INDEX_NOT_FOCUSABLE;
        }), switchMap((items) => merge(...items.map((item) => item._focused))), takeUntilDestroyed(this.destroyRef))
            .subscribe((focusedItem) => {
            this._keyManager.updateActiveItem(focusedItem);
        });
    }
    ngOnDestroy() {
        this._directDescendantItems.destroy();
        this._tabSubscription.unsubscribe();
        this.closed.complete();
    }
    _hovered() {
        const itemChanges = this._directDescendantItems.changes;
        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap((items) => merge(...items.map((item) => item._hovered))));
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        const manager = this._keyManager;
        switch (keyCode) {
            case ESCAPE:
                if (!hasModifierKey(event)) {
                    event.preventDefault();
                    this.closed.emit('keydown');
                }
                break;
            case LEFT_ARROW:
                if (this.parentMenu && this.direction === 'ltr') {
                    this.closed.emit('keydown');
                }
                break;
            case RIGHT_ARROW:
                if (this.parentMenu && this.direction === 'rtl') {
                    this.closed.emit('keydown');
                }
                break;
            default:
                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {
                    manager.setFocusOrigin('keyboard');
                }
                manager.onKeydown(event);
        }
    }
    focus() {
        if (!this._keyManager.activeItem) {
            this._keyManager.setFirstItemActive();
        }
        if (this._keyManager.activeItem) {
            const firstActivated = this._directDescendantItems
                .toArray()
                .findIndex((i) => i.activated);
            if (firstActivated) {
                this._directDescendantItems.get(firstActivated)?.focus('keyboard');
            }
            this._keyManager.activeItem.focus('keyboard');
            // this.ariaActiveDescendant = this._keyManager.activeItem.getLabel();
        }
    }
    focusFirstItem(origin = 'program') {
        if (this.lazyContent) {
            this.ngZone.onStable
                .pipe(take(1))
                .subscribe(() => this._focusFirstItem(origin));
        }
        else {
            this._focusFirstItem(origin);
        }
    }
    _focusFirstItem(origin) {
        const manager = this._keyManager;
        manager.setFocusOrigin(origin).setFirstItemActive();
        if (!manager.activeItem && this._directDescendantItems.length) {
            let element = this._directDescendantItems.first._getHostElement().parentElement;
            while (element) {
                if (element.getAttribute('role') === 'menu') {
                    element.focus();
                    break;
                }
                else {
                    element = element.parentElement;
                }
            }
        }
    }
    resetActiveItem() {
        this._keyManager.activeItem?.blur();
        this._keyManager.setActiveItem(-1);
    }
    setElevation(depth) {
        const elevation = Math.min(this._baseElevation + depth, 24);
        const newElevation = `${this._elevationPrefix}${elevation}`;
        const customElevation = Object.keys(this._classList).find((className) => {
            return className.startsWith(this._elevationPrefix);
        });
        if (!customElevation || customElevation === this._previousElevation) {
            if (this._previousElevation) {
                this._classList[this._previousElevation] = false;
            }
            this._classList[newElevation] = true;
            this._previousElevation = newElevation;
        }
    }
    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {
        const classes = this._classList;
        classes['rds-menu-before'] = posX === 'before';
        classes['rds-menu-after'] = posX === 'after';
        classes['rds-menu-above'] = posY === 'above';
        classes['rds-menu-below'] = posY === 'below';
    }
    _startAnimation() {
        this._panelAnimationState = 'enter';
    }
    _resetAnimation() {
        this._panelAnimationState = 'void';
    }
    _onAnimationDone(event) {
        this._animationDone.next(event);
        this._isAnimating = false;
    }
    _onAnimationStart(event) {
        this._isAnimating = true;
        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {
            event.element.scrollTop = 0;
        }
    }
    _updateDirectDescendants() {
        this._allItems.changes
            .pipe(startWith(this._allItems), takeUntilDestroyed(this.destroyRef))
            .subscribe((items) => {
            this._directDescendantItems.reset(items.filter((item) => item._parentMenu === this));
            this._directDescendantItems.notifyOnChanges();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.3.1", type: RdsMenuComponent, selector: "rds-menu", inputs: { backdrop: "backdrop", ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], size: "size", xPosition: "xPosition", yPosition: "yPosition", overlapTrigger: ["overlapTrigger", "overlapTrigger", booleanAttribute], panelClass: ["class", "panelClass"] }, outputs: { closed: "closed" }, host: { listeners: { "focus": "focus()" }, properties: { "attr.aria-label": "this.attrAriaLabel", "attr.aria-labelledby": "this.attrAriaLabelledBy", "attr.aria-describedby": "this.attrAriaDescribedBy", "tabIndex": "this.tabIndex" } }, providers: [{ provide: RDS_MENU_PANEL, useExisting: RdsMenuComponent }], queries: [{ propertyName: "lazyContent", first: true, predicate: RDS_MENU_CONTENT, descendants: true }, { propertyName: "_allItems", predicate: RdsMenuItemComponent, descendants: true }], viewQueries: [{ propertyName: "templateRef", first: true, predicate: TemplateRef, descendants: true }], exportAs: ["rdsMenu"], ngImport: i0, template: ` <ng-template>
    <div
      class="rds-menu-panel rds-menu-panel--{{ size }}"
      [id]="panelId"
      [ngClass]="_classList"
      (keydown)="_handleKeydown($event)"
      (click)="closed.emit('click')"
      [@transformMenu]="_panelAnimationState"
      (@transformMenu.start)="_onAnimationStart($event)"
      (@transformMenu.done)="_onAnimationDone($event)"
      tabindex="-1"
      role="menu"
      [attr.aria-label]="ariaLabel || null"
      [attr.aria-labelledby]="ariaLabelledby || null"
      [attr.aria-describedby]="ariaDescribedby || null"
    >
      <div class="rds-menu-content">
        <ng-content />
      </div>
    </div>
  </ng-template>`, isInline: true, styles: ["rds-menu{display:none}.rds-menu-panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;min-width:104px;max-width:260px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 40px);border-radius:2px;outline:0;min-height:64px}.rds-menu-panel.ng-animating{pointer-events:none}.rds-menu-panel.rds-menu-panel--l .rds-menu-header,.rds-menu-panel.rds-menu-panel--m .rds-menu-header{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 16px}.rds-menu-panel.rds-menu-panel--s .rds-menu-header{font-size:12px;font-weight:400;line-height:16px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 12px}.rds-menu-content:not(:empty){padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-box)}.rds-menu-separator{height:1px;background:var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}.rds-menu-header{color:var(--rds-color-low-contrast);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}.rds-menu-item-submenu-trigger{padding-right:34px}[dir=rtl] .rds-menu-item-submenu-trigger{padding-right:10px;padding-left:34px}.rds-menu-submenu-icon{position:absolute;top:50%;right:10px;transform:translateY(-50%)}[dir=rtl] .rds-menu-submenu-icon{right:auto;left:10px;transform:translateY(-50%) scaleX(-1)}button.rds-menu-item{width:100%}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [rdsMenuAnimations.transformMenu, rdsMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-menu', template: ` <ng-template>
    <div
      class="rds-menu-panel rds-menu-panel--{{ size }}"
      [id]="panelId"
      [ngClass]="_classList"
      (keydown)="_handleKeydown($event)"
      (click)="closed.emit('click')"
      [@transformMenu]="_panelAnimationState"
      (@transformMenu.start)="_onAnimationStart($event)"
      (@transformMenu.done)="_onAnimationDone($event)"
      tabindex="-1"
      role="menu"
      [attr.aria-label]="ariaLabel || null"
      [attr.aria-labelledby]="ariaLabelledby || null"
      [attr.aria-describedby]="ariaDescribedby || null"
    >
      <div class="rds-menu-content">
        <ng-content />
      </div>
    </div>
  </ng-template>`, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'rdsMenu', animations: [rdsMenuAnimations.transformMenu, rdsMenuAnimations.fadeInItems], providers: [{ provide: RDS_MENU_PANEL, useExisting: RdsMenuComponent }], styles: ["rds-menu{display:none}.rds-menu-panel{box-shadow:0 0 1px #0000003d,0 8px 20px #00000026;min-width:104px;max-width:260px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 40px);border-radius:2px;outline:0;min-height:64px}.rds-menu-panel.ng-animating{pointer-events:none}.rds-menu-panel.rds-menu-panel--l .rds-menu-header,.rds-menu-panel.rds-menu-panel--m .rds-menu-header{font-size:14px;font-weight:400;line-height:20px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 16px}.rds-menu-panel.rds-menu-panel--s .rds-menu-header{font-size:12px;font-weight:400;line-height:16px;text-transform:uppercase;letter-spacing:1px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;padding:8px 12px}.rds-menu-content:not(:empty){padding-top:12px;padding-bottom:12px;background:var(--rds-color-bg-base-box)}.rds-menu-separator{height:1px;background:var(--rds-color-grey-2);margin-top:4px;margin-bottom:4px}.rds-menu-header{color:var(--rds-color-low-contrast);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block}.rds-menu-item-submenu-trigger{padding-right:34px}[dir=rtl] .rds-menu-item-submenu-trigger{padding-right:10px;padding-left:34px}.rds-menu-submenu-icon{position:absolute;top:50%;right:10px;transform:translateY(-50%)}[dir=rtl] .rds-menu-submenu-icon{right:auto;left:10px;transform:translateY(-50%) scaleX(-1)}button.rds-menu-item{width:100%}\n"] }]
        }], propDecorators: { _allItems: [{
                type: ContentChildren,
                args: [RdsMenuItemComponent, { descendants: true }]
            }], attrAriaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], attrAriaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], attrAriaDescribedBy: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], backdrop: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], size: [{
                type: Input
            }], xPosition: [{
                type: Input
            }], yPosition: [{
                type: Input
            }], templateRef: [{
                type: ViewChild,
                args: [TemplateRef]
            }], lazyContent: [{
                type: ContentChild,
                args: [RDS_MENU_CONTENT]
            }], overlapTrigger: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], panelClass: [{
                type: Input,
                args: ['class']
            }], closed: [{
                type: Output
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }] } });
//# sourceMappingURL=data:application/json;base64,