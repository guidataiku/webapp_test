import { FocusMonitor, isFakeMousedownFromScreenReader, isFakeTouchstartFromScreenReader, } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { ENTER, LEFT_ARROW, RIGHT_ARROW, SPACE } from '@angular/cdk/keycodes';
import { Overlay, OverlayConfig, } from '@angular/cdk/overlay';
import { normalizePassiveListenerOptions } from '@angular/cdk/platform';
import { TemplatePortal } from '@angular/cdk/portal';
import { booleanAttribute, Directive, ElementRef, EventEmitter, HostBinding, HostListener, inject, InjectionToken, Input, Output, ViewContainerRef, } from '@angular/core';
import { EMPTY, Subscription, asapScheduler, merge, of, } from 'rxjs';
import { delay, filter, take, takeUntil } from 'rxjs/operators';
import { throwRdsMenuMissingError, throwRdsMenuRecursiveError, } from './menu-error';
import { RdsMenuItemComponent } from './menu-item.component';
import { RDS_MENU_PANEL } from './menu-panel';
import { RdsMenuComponent } from './menu.component';
import * as i0 from "@angular/core";
export const RDS_MENU_SCROLL_STRATEGY = new InjectionToken('RDS_MENU_SCROLL_STRATEGY');
export function RDS_MENU_SCROLL_STRATEGY_FACTORY(overlay) {
    return () => overlay.scrollStrategies.reposition();
}
export const RDS_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {
    provide: RDS_MENU_SCROLL_STRATEGY,
    deps: [Overlay],
    useFactory: RDS_MENU_SCROLL_STRATEGY_FACTORY,
};
export const MENU_PANEL_TOP_PADDING = 8;
const passiveEventListenerOptions = normalizePassiveListenerOptions({
    passive: true,
});
export class RdsMenuTriggerDirective {
    get _ariaExpanded() {
        return this.menuOpen || null;
    }
    get _ariaControl() {
        return this.menuOpen ? this.menu.panelId : null;
    }
    get menu() {
        return this._menu;
    }
    set menu(menu) {
        if (menu === this._menu) {
            return;
        }
        this._menu = menu;
        this._menuCloseSubscription.unsubscribe();
        if (menu) {
            if (menu === this._parentMenu) {
                throwRdsMenuRecursiveError();
            }
            this._menuCloseSubscription = menu.closed.subscribe((reason) => {
                this._destroyMenu(reason);
                if ((reason === 'click' || reason === 'tab') && this._parentMenu) {
                    this._parentMenu.closed.emit(reason);
                }
            });
        }
    }
    constructor() {
        this.overlay = inject(Overlay);
        this.element = inject(ElementRef);
        this.viewContainerRef = inject(ViewContainerRef);
        this.scrollStrategy = inject(RDS_MENU_SCROLL_STRATEGY);
        this.parentMenu = inject(RDS_MENU_PANEL, { optional: true });
        this.menuItemInstance = inject(RdsMenuItemComponent, {
            optional: true,
            self: true,
        });
        this._dir = inject(Directionality, {
            optional: true,
        });
        this.focusMonitor = inject(FocusMonitor, { optional: true });
        this.rdsMenuTriggerRestoreFocus = true;
        this.menuOpened = new EventEmitter();
        this.menuClosed = new EventEmitter();
        this._ariaHaspopup = true;
        this.class = 'rds-menu-trigger';
        this._openedBy = undefined;
        this._overlayRef = null;
        this._menuOpen = false;
        this._closingActionsSubscription = Subscription.EMPTY;
        this._hoverSubscription = Subscription.EMPTY;
        this._menuCloseSubscription = Subscription.EMPTY;
        this._parentMenu = this.parentMenu instanceof RdsMenuComponent ? this.parentMenu : undefined;
        this._handleTouchStart = (event) => {
            if (!isFakeTouchstartFromScreenReader(event)) {
                this._openedBy = 'touch';
            }
        };
        this.element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);
        if (this.menuItemInstance) {
            this.menuItemInstance.hasChildItems = this.triggersSubmenu();
        }
    }
    ngAfterContentInit() {
        this._checkMenu();
        this._handleHover();
    }
    ngOnDestroy() {
        if (this._overlayRef) {
            this._overlayRef.dispose();
            this._overlayRef = null;
        }
        this.element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);
        this._menuCloseSubscription.unsubscribe();
        this._closingActionsSubscription.unsubscribe();
        this._hoverSubscription.unsubscribe();
    }
    get menuOpen() {
        return this._menuOpen;
    }
    get dir() {
        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';
    }
    triggersSubmenu() {
        return !!(this.menuItemInstance && this._parentMenu);
    }
    toggleMenu() {
        return this._menuOpen ? this.closeMenu() : this.openMenu();
    }
    openMenu() {
        if (this._menuOpen) {
            return;
        }
        this._checkMenu();
        const overlayRef = this._createOverlay();
        const overlayConfig = overlayRef.getConfig();
        this._setPosition(overlayConfig.positionStrategy);
        overlayConfig.hasBackdrop = !this.triggersSubmenu();
        overlayRef.attach(this._getPortal());
        if (this.menu.lazyContent) {
            this.menu.lazyContent.attach(this.rdsMenuTriggerData);
        }
        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());
        this._initMenu();
        if (this.menu instanceof RdsMenuComponent) {
            this.menu._startAnimation();
        }
    }
    closeMenu() {
        this.menu.closed.emit();
    }
    focus(origin, options) {
        if (this.focusMonitor && origin) {
            this.focusMonitor.focusVia(this.element, origin, options);
        }
        else {
            this.element.nativeElement.focus(options);
        }
    }
    updatePosition() {
        this._overlayRef?.updatePosition();
    }
    _destroyMenu(reason) {
        if (!this._overlayRef || !this.menuOpen) {
            return;
        }
        const menu = this.menu;
        this._closingActionsSubscription.unsubscribe();
        this._overlayRef.detach();
        if (this.rdsMenuTriggerRestoreFocus &&
            (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {
            this.focus(this._openedBy);
        }
        this._openedBy = undefined;
        if (menu instanceof RdsMenuComponent) {
            menu._resetAnimation();
            if (menu.lazyContent) {
                menu._animationDone
                    .pipe(filter((event) => event.toState === 'void'), take(1), takeUntil(menu.lazyContent._attached))
                    .subscribe({
                    next: () => menu.lazyContent.detach(),
                    complete: () => this._setIsMenuOpen(false),
                });
            }
            else {
                this._setIsMenuOpen(false);
            }
        }
        else {
            this._setIsMenuOpen(false);
            if (menu.lazyContent) {
                menu.lazyContent.detach();
            }
        }
    }
    _initMenu() {
        this.menu.parentMenu = this.triggersSubmenu()
            ? this._parentMenu
            : undefined;
        this.menu.direction = this.dir;
        this._setMenuElevation();
        this.menu.focusFirstItem(this._openedBy || 'program');
        this._setIsMenuOpen(true);
    }
    _setMenuElevation() {
        if (this.menu.setElevation) {
            let depth = 0;
            let parentMenu = this.menu.parentMenu;
            while (parentMenu) {
                depth++;
                parentMenu = parentMenu.parentMenu;
            }
            this.menu.setElevation(depth);
        }
    }
    _setIsMenuOpen(isOpen) {
        this._menuOpen = isOpen;
        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();
        if (this.triggersSubmenu() && this.menuItemInstance) {
            this.menuItemInstance.activated = isOpen;
        }
    }
    _checkMenu() {
        if (!this.menu) {
            throwRdsMenuMissingError();
        }
    }
    _createOverlay() {
        const config = this._getOverlayConfig();
        if (!this._overlayRef ||
            this._overlayRef.getConfig().backdropClass !== config.backdropClass ||
            this._overlayRef.getConfig().panelClass !== config.panelClass ||
            this._overlayRef.getConfig().direction !== config.direction) {
            if (this._overlayRef) {
                this._overlayRef.dispose();
            }
            this._subscribeToPositions(config.positionStrategy);
            this._overlayRef = this.overlay.create(config);
            this._overlayRef.keydownEvents().subscribe();
        }
        return this._overlayRef;
    }
    _getOverlayConfig() {
        return new OverlayConfig({
            positionStrategy: this.overlay
                .position()
                .flexibleConnectedTo(this.element)
                .withLockedPosition()
                .withGrowAfterOpen()
                .withTransformOriginOn('.rds-menu-panel, .rds-mdc-menu-panel'),
            backdropClass: this.menu.backdrop === 'transparent'
                ? 'cdk-overlay-transparent-backdrop'
                : undefined,
            panelClass: this.menu.overlayPanelClass,
            scrollStrategy: this.scrollStrategy(),
            direction: this._dir,
        });
    }
    _subscribeToPositions(position) {
        if (this.menu.setPositionClasses) {
            position.positionChanges.subscribe((change) => {
                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';
                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';
                if (this.menu.setPositionClasses) {
                    this.menu.setPositionClasses(posX, posY);
                }
            });
        }
    }
    _setPosition(positionStrategy) {
        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];
        const [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];
        let [originY, originFallbackY] = [overlayY, overlayFallbackY];
        let [overlayX, overlayFallbackX] = [originX, originFallbackX];
        let offsetY = 0;
        if (this.triggersSubmenu()) {
            overlayFallbackX = originX =
                this.menu.xPosition === 'before' ? 'start' : 'end';
            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';
            offsetY =
                overlayY === 'bottom'
                    ? MENU_PANEL_TOP_PADDING
                    : -MENU_PANEL_TOP_PADDING;
        }
        else if (!this.menu.overlapTrigger) {
            originY = overlayY === 'top' ? 'bottom' : 'top';
            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';
        }
        positionStrategy.withPositions([
            { originX, originY, overlayX, overlayY, offsetY },
            {
                originX: originFallbackX,
                originY,
                overlayX: overlayFallbackX,
                overlayY,
                offsetY,
            },
            {
                originX,
                originY: originFallbackY,
                overlayX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY,
            },
            {
                originX: originFallbackX,
                originY: originFallbackY,
                overlayX: overlayFallbackX,
                overlayY: overlayFallbackY,
                offsetY: -offsetY,
            },
        ]);
    }
    _menuClosingActions() {
        const backdrop = this._overlayRef
            ? this._overlayRef.backdropClick()
            : EMPTY;
        const detachments = this._overlayRef
            ? this._overlayRef.detachments()
            : EMPTY;
        const parentClose = this._parentMenu ? this._parentMenu.closed : of();
        const hover = this._parentMenu
            ? this._parentMenu._hovered().pipe(filter((active) => active !== this.menuItemInstance), filter(() => this._menuOpen))
            : of();
        return merge(backdrop, parentClose, hover, detachments);
    }
    _handleMousedown(event) {
        if (!isFakeMousedownFromScreenReader(event)) {
            this._openedBy = event.button === 0 ? 'mouse' : undefined;
            if (this.triggersSubmenu()) {
                event.preventDefault();
            }
        }
    }
    _handleKeydown(event) {
        const keyCode = event.keyCode;
        if (keyCode === ENTER || keyCode === SPACE) {
            this._openedBy = 'keyboard';
            if (!['BUTTON', 'A'].includes(this.element.nativeElement.tagName.toUpperCase())) {
                this.openMenu();
            }
        }
        if (this.triggersSubmenu() &&
            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||
                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {
            this._openedBy = 'keyboard';
            this.openMenu();
        }
    }
    _handleClick(event) {
        if (this.triggersSubmenu()) {
            event.stopPropagation();
            this.openMenu();
        }
        else {
            this.toggleMenu();
        }
    }
    _handleHover() {
        if (!this.triggersSubmenu() || !this._parentMenu) {
            return;
        }
        this._hoverSubscription = this._parentMenu
            ._hovered()
            .pipe(filter((active) => active === this.menuItemInstance && !active.disabled), delay(0, asapScheduler))
            .subscribe(() => {
            this._openedBy = 'mouse';
            if (this.menu instanceof RdsMenuComponent && this.menu._isAnimating) {
                const untilHovered = this._parentMenu
                    ? this._parentMenu._hovered()
                    : EMPTY;
                this.menu._animationDone
                    .pipe(take(1), delay(0, asapScheduler), takeUntil(untilHovered))
                    .subscribe(() => this.openMenu());
            }
            else {
                this.openMenu();
            }
        });
    }
    _getPortal() {
        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {
            this._portal = new TemplatePortal(this.menu.templateRef, this.viewContainerRef);
        }
        return this._portal;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuTriggerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "17.3.1", type: RdsMenuTriggerDirective, selector: "[rds-menu-trigger-for], [rdsMenuTriggerFor]", inputs: { rdsMenuTriggerData: "rdsMenuTriggerData", rdsMenuTriggerRestoreFocus: ["rdsMenuTriggerRestoreFocus", "rdsMenuTriggerRestoreFocus", booleanAttribute], menu: ["rdsMenuTriggerFor", "menu"] }, outputs: { menuOpened: "menuOpened", menuClosed: "menuClosed" }, host: { listeners: { "mousedown": "_handleMousedown($event)", "keydown": "_handleKeydown($event)", "click": "_handleClick($event)" }, properties: { "attr.aria-haspopup": "this._ariaHaspopup", "class": "this.class", "attr.aria-expanded": "this._ariaExpanded", "attr.aria-controls": "this._ariaControl" } }, exportAs: ["rdsMenuTrigger"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsMenuTriggerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[rds-menu-trigger-for], [rdsMenuTriggerFor]`,
                    exportAs: 'rdsMenuTrigger',
                }]
        }], ctorParameters: () => [], propDecorators: { rdsMenuTriggerData: [{
                type: Input
            }], rdsMenuTriggerRestoreFocus: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], menuOpened: [{
                type: Output
            }], menuClosed: [{
                type: Output
            }], _ariaHaspopup: [{
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], class: [{
                type: HostBinding,
                args: ['class']
            }], _ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], _ariaControl: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], menu: [{
                type: Input,
                args: ['rdsMenuTriggerFor']
            }], _handleMousedown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], _handleClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,