// this basically is rdsTooltip directive, it's needed only to provide rdsPopover* input names
// and make sure that hide and show delays are = 0
import { Directive, HostBinding, Input } from '@angular/core';
import { RdsTooltipDirective } from '../tooltip';
import { fromEvent } from 'rxjs';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import * as i0 from "@angular/core";
export class RdsPopoverDirective extends RdsTooltipDirective {
    constructor() {
        super(...arguments);
        this._hasBackdrop = true;
        this.isPopover = true;
        this.showDelay = 0;
        this.hideDelay = 0;
        this.rdsPopoverRole = 'dialog';
        this.ariaDescription = '';
        this.touchGestures = 'auto';
        this.ariaExpanded = false;
        this._hideArrow = false;
    }
    get hideArrow() {
        return super.hideArrow;
    }
    set hideArrow(shouldHideArrow) {
        super.hideArrow = shouldHideArrow;
    }
    get position() {
        return super.position;
    }
    set position(value) {
        super.position = value;
    }
    set disabled(value) {
        super.disabled = value;
    }
    get disabled() {
        return super.disabled;
    }
    get content() {
        return super.content;
    }
    set content(value) {
        super.content = value;
    }
    get tooltipClass() {
        return super.tooltipClass;
    }
    set tooltipClass(value) {
        super.tooltipClass = value;
    }
    set hasBackdrop(v) {
        super.hasBackdrop = v;
    }
    get hasBackdrop() {
        return this._hasBackdrop;
    }
    set showCloseButton(v) {
        super.showCloseButton = v;
    }
    get showCloseButton() {
        return super.showCloseButton;
    }
    handleFocus() {
        setTimeout(() => {
            if (!this._tooltipInstance) {
                return;
            }
            const firstInteractive = this._tooltipInstance.getFirstFocusableElement();
            const lastInteractive = this._tooltipInstance.getLastFocusableElement();
            if (!firstInteractive) {
                return;
            }
            this.focusMonitor.focusVia(firstInteractive, this.origin);
            this.createTabHandler(firstInteractive, true);
            if (lastInteractive) {
                this.createTabHandler(lastInteractive, false);
            }
        });
    }
    createTabHandler(el, withShiftKey) {
        fromEvent(el, 'keydown')
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            const { code, shiftKey } = event;
            if (code === 'Tab' && shiftKey === withShiftKey) {
                event.preventDefault();
                this.hide();
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.1", type: RdsPopoverDirective, selector: "[rdsPopover], [rds-popover]", inputs: { rdsPopoverRole: "rdsPopoverRole", ariaDescription: ["rdsPopoverAriaDescription", "ariaDescription"], touchGestures: ["rdsPopoverTouchGestures", "touchGestures"], position: ["rdsPopoverPosition", "position"], disabled: ["rdsPopoverDisabled", "disabled"], content: ["rdsPopover", "content"], tooltipClass: ["rdsPopoverClass", "tooltipClass"], hasBackdrop: ["rdsPopoverHasBackdrop", "hasBackdrop"], showCloseButton: ["rdsPopoverShowCloseButton", "showCloseButton"] }, host: { properties: { "attr.aria-haspopup": "this.rdsPopoverRole", "attr.aria-expanded": "this.ariaExpanded" } }, exportAs: ["rdsPopover"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsPopoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[rdsPopover], [rds-popover]',
                    exportAs: 'rdsPopover',
                }]
        }], propDecorators: { rdsPopoverRole: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-haspopup']
            }], ariaDescription: [{
                type: Input,
                args: ['rdsPopoverAriaDescription']
            }], touchGestures: [{
                type: Input,
                args: ['rdsPopoverTouchGestures']
            }], position: [{
                type: Input,
                args: ['rdsPopoverPosition']
            }], disabled: [{
                type: Input,
                args: ['rdsPopoverDisabled']
            }], content: [{
                type: Input,
                args: ['rdsPopover']
            }], tooltipClass: [{
                type: Input,
                args: ['rdsPopoverClass']
            }], hasBackdrop: [{
                type: Input,
                args: ['rdsPopoverHasBackdrop']
            }], showCloseButton: [{
                type: Input,
                args: ['rdsPopoverShowCloseButton']
            }], ariaExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }] } });
//# sourceMappingURL=data:application/json;base64,