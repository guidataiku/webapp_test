import { booleanAttribute, ChangeDetectionStrategy, Component, EventEmitter, HostBinding, inject, Input, isDevMode, Output, ViewEncapsulation, } from '@angular/core';
import { RDS_CHIP_LIST } from '../chip.tokens';
import { RdsChipComponent } from '../chip/chip.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../icons/icon.component";
import * as i3 from "../../button/icon-button.component";
import * as i4 from "../chip-action";
export class RdsChipSelectableComponent extends RdsChipComponent {
    constructor() {
        super();
        this.parentList = inject(RDS_CHIP_LIST, {
            optional: true,
        });
        this._selected = false;
        this._selectable = true;
        this.chipListSelectable = true;
        this.chipListMulti = false;
        this.selectedChange = new EventEmitter();
        if (isDevMode() && !this.parentList) {
            throw new Error('RdsChipSelectableComponent can only be used as a child of RdsChipListComponent');
        }
        this.role = 'option';
    }
    get hostClasses() {
        return {
            ...super.hostClasses,
            'rds-chips__chip--selected': this.selected,
        };
    }
    get isChecked() {
        return this.chipListMulti ? this.selected : null;
    }
    get isSelected() {
        return this.chipListMulti ? null : this.selected;
    }
    set selectable(value) {
        this._selectable = booleanAttribute(value);
    }
    get selectable() {
        return this._selectable && this.chipListSelectable;
    }
    set selected(value) {
        this.setSelectedState(booleanAttribute(value), false, true);
    }
    get selected() {
        return this._selected;
    }
    handlePrimaryActionInteraction() {
        if (this.selectable && !this.disabled) {
            this.toggleSelected(true);
        }
    }
    toggleSelected(isUserInput = false) {
        this.setSelectedState(!this.selected, isUserInput, true);
    }
    setSelectedState(isSelected, isUserInput, emitEvent) {
        if (!this.disabled && isSelected !== this.selected) {
            this._selected = isSelected;
            if (emitEvent) {
                this.selectedChange.emit({
                    source: this,
                    isUserInput,
                    selected: this.selected,
                });
            }
            this.cdr.markForCheck();
        }
    }
    selectViaInteraction() {
        this.setSelectedState(true, true, true);
    }
    select() {
        this.setSelectedState(true, false, true);
    }
    deselect() {
        this.setSelectedState(false, false, true);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSelectableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "17.3.1", type: RdsChipSelectableComponent, selector: "rds-chip-selectable", inputs: { selectable: "selectable", selected: "selected" }, outputs: { selectedChange: "selectedChange" }, host: { properties: { "class": "this.hostClasses", "attr.aria-checked": "this.isChecked", "attr.aria-selected": "this.isSelected" } }, providers: [
            { provide: RdsChipComponent, useExisting: RdsChipSelectableComponent },
        ], usesInheritance: true, ngImport: i0, template: "<div [ngClass]=\"['rds-chips-wrapper', 'rds-chips--size-' + size]\">\n  <span #primary rds-chip-action [disabled]=\"disabled\">\n    <ng-content\n      select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n    />\n    <ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n    <ng-content />\n  </span>\n  @if (closable) {\n    <button\n      #closeButton\n      class=\"rds-chip-close-button\"\n      rds-icon-button\n      rds-chip-action\n      [attr.aria-label]=\"ariaLabelCloseButton\"\n      [disabled]=\"disabled\"\n      (click)=\"onClose($event)\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n    </button>\n  } @else {\n    <ng-content\n      select=\"rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]\"\n    />\n  }\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "component", type: i2.RdsIconComponent, selector: "rds-icon", inputs: ["namespace", "icon"] }, { kind: "component", type: i3.RdsIconButtonComponent, selector: "\n    button[rds-icon-button],\n    button[rdsIconButton],\n    button[rds-icon-warning-button],\n    button[rdsIconWarningButton],\n  ", inputs: ["size"] }, { kind: "directive", type: i4.RdsChipActionDirective, selector: "[rds-chip-action], [rdsChipAction]", inputs: ["tabIndex", "disabled"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSelectableComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-chip-selectable', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: RdsChipComponent, useExisting: RdsChipSelectableComponent },
                    ], template: "<div [ngClass]=\"['rds-chips-wrapper', 'rds-chips--size-' + size]\">\n  <span #primary rds-chip-action [disabled]=\"disabled\">\n    <ng-content\n      select=\"rds-icon[rdsChipLeadingIcon], rds-icon[rds-chip-leading-icon]\"\n    />\n    <ng-content select=\"img[rdsChipAvatar], img[rds-chip-avatar]\" />\n    <ng-content />\n  </span>\n  @if (closable) {\n    <button\n      #closeButton\n      class=\"rds-chip-close-button\"\n      rds-icon-button\n      rds-chip-action\n      [attr.aria-label]=\"ariaLabelCloseButton\"\n      [disabled]=\"disabled\"\n      (click)=\"onClose($event)\"\n    >\n      <rds-icon namespace=\"outlined\" icon=\"close\" class=\"rds-chip-close-icon\" />\n    </button>\n  } @else {\n    <ng-content\n      select=\"rds-icon[rdsChipTrailingIcon], rds-icon[rds-chip-trailing-icon]\"\n    />\n  }\n</div>\n" }]
        }], ctorParameters: () => [], propDecorators: { hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], isChecked: [{
                type: HostBinding,
                args: ['attr.aria-checked']
            }], isSelected: [{
                type: HostBinding,
                args: ['attr.aria-selected']
            }], selectable: [{
                type: Input
            }], selected: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,