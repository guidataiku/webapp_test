import { FocusKeyManager } from '@angular/cdk/a11y';
import { Directionality } from '@angular/cdk/bidi';
import { booleanAttribute, ChangeDetectionStrategy, Component, ContentChildren, DestroyRef, ElementRef, HostBinding, HostListener, inject, Input, numberAttribute, QueryList, ViewEncapsulation, } from '@angular/core';
import { merge, noop } from 'rxjs';
import { startWith, switchMap } from 'rxjs/operators';
import { RdsChipComponent } from './chip/chip.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_DEFAULT, TAB_INDEX_NOT_FOCUSABLE } from '../utils';
import * as i0 from "@angular/core";
export class RdsChipSetComponent {
    constructor() {
        this.destroyRef = inject(DestroyRef);
        this.elementRef = inject(ElementRef);
        this.dir = inject(Directionality, { optional: true });
        this._lastDestroyedFocusedChipIndex = null;
        this._tabIndex = TAB_INDEX_DEFAULT;
        this._defaultRole = 'presentation';
        this._disabled = false;
        this._size = 's';
        this.type = 'blue';
        this._explicitRole = null;
        this.chipActions = new QueryList();
    }
    get chipFocusChanges() {
        return this.getChipStream((chip) => chip.focus$);
    }
    get chipDestroyedChanges() {
        return this.getChipStream((chip) => chip.destroyed);
    }
    set tabIndex(value) {
        this._tabIndex = numberAttribute(value, TAB_INDEX_DEFAULT);
    }
    get tabIndex() {
        return this.disabled ? TAB_INDEX_NOT_FOCUSABLE : this._tabIndex;
    }
    set disabled(value) {
        this._disabled = booleanAttribute(value);
        this.syncChipsState();
    }
    get disabled() {
        return this._disabled;
    }
    get empty() {
        return this.chips.length === 0;
    }
    get role() {
        if (this._explicitRole) {
            return this._explicitRole;
        }
        return this.empty ? null : this._defaultRole;
    }
    set role(value) {
        this._explicitRole = value;
    }
    get focused() {
        return this.hasFocusedChip();
    }
    ngAfterContentInit() {
        this.chips.changes
            .pipe(startWith(this.chips), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.checkAndSetChipSizes());
    }
    ngAfterViewInit() {
        this.setUpFocusManagement();
        this.trackChipSetChanges();
        this.trackDestroyedFocusedChip();
    }
    ngOnDestroy() {
        this.keyManager?.destroy();
        this.chipActions.destroy();
    }
    ngOnChanges(changes) {
        if ((changes['size'] && !changes['size'].isFirstChange()) ||
            (changes['type'] && !changes['type'].isFirstChange())) {
            this.checkAndSetChipSizes();
        }
    }
    hasFocusedChip() {
        return this.chips && this.chips.some((chip) => chip.hasFocus());
    }
    syncChipsState() {
        if (this.chips) {
            this.chips.forEach((chip) => {
                chip.disabled = this._disabled;
                chip.cdr.markForCheck();
            });
        }
    }
    /** Dummy method for subclasses to override. Base chip set cannot be focused. */
    focus() {
        noop();
    }
    handleKeydown(event) {
        if (this.originatesFromChip(event)) {
            this.keyManager.onKeydown(event);
        }
    }
    isValidIndex(index) {
        return index >= 0 && index < this.chips.length;
    }
    allowFocusEscape() {
        if (this.tabIndex !== TAB_INDEX_NOT_FOCUSABLE) {
            const previousTabIndex = this.tabIndex;
            this.tabIndex = TAB_INDEX_NOT_FOCUSABLE;
            setTimeout(() => (this.tabIndex = previousTabIndex));
        }
    }
    /**
     * Gets a stream of events from all the chips within the set.
     * The stream will automatically incorporate any newly-added chips.
     */
    getChipStream(mappingFunction) {
        return this.chips.changes.pipe(startWith(null), switchMap(() => merge(...this.chips.map(mappingFunction))));
    }
    /** Checks whether an event comes from inside a chip element. */
    originatesFromChip(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this.elementRef.nativeElement) {
            if (currentElement.classList.contains('rds-chips__chip')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    setUpFocusManagement() {
        // Create a flat `QueryList` containing the actions of all the chips.
        // This allows us to navigate both within the chip and move to the next/previous
        // one using the existing `ListKeyManager`.
        this.chips.changes
            .pipe(startWith(this.chips))
            .subscribe((chips) => {
            const actions = [];
            chips.forEach((chip) => chip.getActions().forEach((action) => actions.push(action)));
            this.chipActions.reset(actions);
            this.chipActions.notifyOnChanges();
        });
        this.keyManager = new FocusKeyManager(this.chipActions)
            .withVerticalOrientation()
            .withHorizontalOrientation(this.dir ? this.dir.value : 'ltr')
            .withHomeAndEnd()
            .skipPredicate((action) => action.disabled);
        // Keep the manager active index in sync so that navigation picks
        // up from the current chip if the user clicks into the list directly.
        this.chipFocusChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(({ source: chip }) => {
            const action = chip.getSourceAction(document.activeElement);
            if (action) {
                this.keyManager.updateActiveItem(action);
            }
        });
        this.dir?.change
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((direction) => this.keyManager.withHorizontalOrientation(direction));
    }
    /** Listens to changes in the chip set and syncs up the state of the individual chips. */
    trackChipSetChanges() {
        this.chips.changes
            .pipe(startWith(null), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => this.syncChipsState());
            }
            this._redirectDestroyedChipFocus();
        });
    }
    trackDestroyedFocusedChip() {
        this.chipDestroyedChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            const chipArray = this.chips.toArray();
            const chipIndex = chipArray.indexOf(event.source);
            // If the focused chip is destroyed, save its index so that we can move focus to the next
            // chip. We only save the index here, rather than move the focus immediately, because we want
            // to wait until the chip is removed from the chip list before focusing the next one. This
            // allows us to keep focus on the same index if the chip gets swapped out.
            if (this.isValidIndex(chipIndex) && event.source.hasFocus()) {
                this._lastDestroyedFocusedChipIndex = chipIndex;
            }
        });
    }
    _redirectDestroyedChipFocus() {
        if (this._lastDestroyedFocusedChipIndex == null) {
            return;
        }
        if (this.chips.length) {
            const newIndex = Math.min(this._lastDestroyedFocusedChipIndex, this.chips.length - 1);
            const chipToFocus = this.chips.toArray()[newIndex];
            if (chipToFocus.disabled) {
                // If we're down to one disabled chip, move focus back to the set.
                if (this.chips.length === 1) {
                    this.focus();
                }
                else {
                    this.keyManager.setPreviousItemActive();
                }
            }
            else {
                chipToFocus.focus();
            }
        }
        else {
            this.focus();
        }
        this._lastDestroyedFocusedChipIndex = null;
    }
    checkAndSetChipSizes() {
        this.chips.forEach((a) => {
            if (a.size !== this._size) {
                a.size = this._size;
            }
            if (a.type !== this.type) {
                a.type = this.type;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipSetComponent, selector: "rds-chip-set", inputs: { tabIndex: "tabIndex", type: "type", disabled: "disabled", role: "role" }, host: { listeners: { "keydown": "handleKeydown($event)" }, properties: { "attr.role": "this.role" } }, queries: [{ propertyName: "chips", predicate: RdsChipComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: '', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipSetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'rds-chip-set',
                    template: '',
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { tabIndex: [{
                type: Input
            }], type: [{
                type: Input
            }], disabled: [{
                type: Input
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], chips: [{
                type: ContentChildren,
                args: [RdsChipComponent, { descendants: true }]
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,