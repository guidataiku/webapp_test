import { booleanAttribute, ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, EventEmitter, HostBinding, HostListener, inject, Input, numberAttribute, Output, QueryList, ViewEncapsulation, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { merge, noop } from 'rxjs';
import { startWith, switchMap } from 'rxjs/operators';
import { RdsAvatarComponent } from '../../avatar';
import { RDS_CHIP_LIST } from '../chip.tokens';
import { RdsChipSetComponent } from '../chip-set';
import { TAB } from '@angular/cdk/keycodes';
import { RdsChipSelectableComponent } from '../chip-selectable/chip-selectable.component';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';
import { TAB_INDEX_NOT_FOCUSABLE } from '../../utils';
import * as i0 from "@angular/core";
export class RdsChipListComponent extends RdsChipSetComponent {
    set tabIndex(value) {
        super.tabIndex = numberAttribute(value);
    }
    get tabIndex() {
        return super.tabIndex;
    }
    get tabindex() {
        return this.empty ? TAB_INDEX_NOT_FOCUSABLE : this.tabIndex;
    }
    get empty() {
        return this.selectableChips.length === 0;
    }
    get hostClasses() {
        const classes = [
            'rds-chips',
            `rds-chips--size-${this.size}`,
            `rds-chips--type-${this.type}`,
        ];
        if (this.disabled) {
            classes.push('rds-chips--disabled');
        }
        return classes;
    }
    set multiple(value) {
        const oldValue = this._multiple;
        this._multiple = booleanAttribute(value);
        this.syncListProperties(oldValue !== this._multiple);
    }
    get multiple() {
        return this._multiple;
    }
    set selectable(value) {
        this._selectable = booleanAttribute(value);
        this.syncListProperties();
    }
    get selectable() {
        return this._selectable;
    }
    get size() {
        return this._size;
    }
    set size(size) {
        this._size = size;
    }
    set value(value) {
        this.writeValue(value);
        this._value = value;
    }
    get value() {
        return this._value;
    }
    set disabled(v) {
        super.disabled = v;
    }
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    get selected() {
        const selectedChips = this.selectableChips
            .toArray()
            .filter((chip) => chip.selected);
        return this.multiple ? selectedChips : selectedChips[0];
    }
    get chipSelectionChanges() {
        return this.getChipSelectableStream((chip) => chip.selectedChange);
    }
    get chipBlurChanges() {
        return this.getChipSelectableStream((chip) => chip.blur$);
    }
    get focused() {
        return this.hasFocusedChip();
    }
    constructor() {
        super();
        this.ngControl = inject(NgControl, {
            self: true,
            optional: true,
        });
        this.cdr = inject(ChangeDetectorRef);
        this._multiple = false;
        this._selectable = true;
        this.valueChange = new EventEmitter();
        this.onChange = noop;
        this.onTouched = noop;
        this.orientation = 'horizontal';
        this._size = 'm';
        this.compareFn = (valueOne, valueTwo) => valueOne === valueTwo;
        if (this.ngControl) {
            // Note: we provide the value accessor through here, instead of
            // the `providers` to avoid running into a circular import.
            this.ngControl.valueAccessor = this;
        }
        this.role = 'listbox';
    }
    ngAfterContentInit() {
        super.ngAfterContentInit();
        if (this._pendingInitialValue !== undefined) {
            Promise.resolve().then(() => {
                this.setSelectionByValue(this._pendingInitialValue, false);
                this._pendingInitialValue = undefined;
            });
        }
        this.selectableChips.changes
            .pipe(startWith(this.selectableChips), takeUntilDestroyed(this.destroyRef))
            .subscribe(() => {
            const newRole = this.selectableChips.length > 0 ? 'listbox' : 'presentation';
            if (newRole !== this.role) {
                this.role = newRole;
            }
            // Update listbox selectable/multiple properties on chips
            this.syncListProperties();
        });
        this.chipBlurChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.blur());
        this.chipSelectionChanges
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe((event) => {
            if (!this.multiple) {
                this.selectableChips.forEach((chip) => {
                    if (chip !== event.source) {
                        chip.setSelectedState(false, false, false);
                    }
                });
            }
            if (event.isUserInput) {
                this.propagateChanges();
            }
        });
        this.checkAndSetAvatarSizes();
        this.avatars.changes
            .pipe(takeUntilDestroyed(this.destroyRef))
            .subscribe(() => this.checkAndSetAvatarSizes());
    }
    /**
     * Focuses the first selected chip in this chip listbox, or the first non-disabled chip when there
     * are no selected chips.
     */
    focus() {
        if (this.disabled) {
            return;
        }
        const firstSelectedChip = this.getFirstSelectedChip();
        if (firstSelectedChip && !firstSelectedChip.disabled) {
            firstSelectedChip.focus();
        }
        else if (this.selectableChips.length > 0) {
            this.keyManager.setFirstItemActive();
        }
        else {
            this.elementRef.nativeElement.focus();
        }
    }
    blur() {
        if (!this.disabled) {
            // Wait to see if focus moves to an individual chip.
            setTimeout(() => {
                if (!this.focused) {
                    this.markAsTouched();
                }
            });
        }
    }
    // ControlValueAccessor Start
    writeValue(value) {
        if (this.selectableChips) {
            this.setSelectionByValue(value, false);
        }
        else if (value != null) {
            this._pendingInitialValue = value;
        }
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    // ControlValueAccessor End
    getChipSelectableStream(mappingFunction) {
        return this.selectableChips.changes.pipe(startWith(null), switchMap(() => merge(...this.selectableChips.map(mappingFunction))));
    }
    hasFocusedChip() {
        return (this.selectableChips &&
            this.selectableChips.some((chip) => chip.hasFocus()));
    }
    onKeydown(e) {
        if (e.keyCode === TAB) {
            super.allowFocusEscape();
        }
    }
    getFirstSelectedChip() {
        if (Array.isArray(this.selected)) {
            return this.selected.length ? this.selected[0] : undefined;
        }
        else {
            return this.selected;
        }
    }
    markAsTouched() {
        this.onTouched();
        this.cdr.markForCheck();
    }
    syncListProperties(clearSelection = false) {
        if (this.selectableChips) {
            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(() => {
                this.selectableChips.forEach((chip) => {
                    chip.chipListSelectable = this.selectable;
                    chip.chipListMulti = this.multiple;
                    if (clearSelection) {
                        chip.deselect();
                    }
                    chip.cdr.markForCheck();
                });
            });
        }
    }
    clearSelection(skip) {
        this.selectableChips.forEach((chip) => {
            if (chip !== skip) {
                chip.deselect();
            }
        });
    }
    propagateChanges(fallbackValue) {
        let valueToEmit;
        if (this.multiple) {
            valueToEmit = this.selected.map((chip) => chip.value);
        }
        else {
            valueToEmit = this.selected
                ? this.selected.value
                : fallbackValue || null;
        }
        this.value = valueToEmit;
        this.onChange(valueToEmit);
        this.valueChange.emit(valueToEmit);
    }
    setSelectionByValue(value, isUserInput = true) {
        this.clearSelection();
        if (this.multiple && value) {
            if (!Array.isArray(value)) {
                throw new Error('A multiselect chip-list requires the given value to be an array');
            }
            value.forEach((currentValue) => this.selectValue(currentValue, isUserInput));
        }
        else {
            this.selectValue(value, isUserInput);
        }
    }
    selectValue(value, isUserInput) {
        const correspondingChip = this.selectableChips.find((chip) => {
            try {
                return chip.value != null && this.compareFn(chip.value, value);
            }
            catch (error) {
                return false;
            }
        });
        if (correspondingChip) {
            isUserInput
                ? correspondingChip.selectViaInteraction()
                : correspondingChip.select();
        }
        return correspondingChip;
    }
    checkAndSetAvatarSizes() {
        this.avatars
            .filter((a) => a.size !== this.size)
            .forEach((a) => (a.size = this.size));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.3.1", type: RdsChipListComponent, selector: "rds-chip-list", inputs: { tabIndex: "tabIndex", multiple: "multiple", selectable: "selectable", size: "size", compareFn: "compareFn", value: "value", disabled: "disabled" }, outputs: { valueChange: "valueChange" }, host: { listeners: { "focus": "focus()", "blur": "blur()", "keydown": "onKeydown($event)" }, properties: { "tabIndex": "this.tabindex", "attr.aria-orientation": "this.orientation", "class": "this.hostClasses", "attr.aria-multiselectable": "this.multiple" } }, providers: [
            {
                provide: RDS_CHIP_LIST,
                useExisting: RdsChipListComponent,
            },
        ], queries: [{ propertyName: "selectableChips", predicate: RdsChipSelectableComponent, descendants: true }, { propertyName: "avatars", predicate: RdsAvatarComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-content
      select="rds-chip-selectable, rds-chip, button[rds-chip], button[rdsChip]"
    />
  `, isInline: true, styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.1", ngImport: i0, type: RdsChipListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rds-chip-list', template: `
    <ng-content
      select="rds-chip-selectable, rds-chip, button[rds-chip], button[rdsChip]"
    />
  `, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        {
                            provide: RDS_CHIP_LIST,
                            useExisting: RdsChipListComponent,
                        },
                    ], styles: [".rds-chips__chip{display:flex;align-items:center;justify-content:center;border-width:1px;border-style:solid;border-color:var(--rds-color-chips-1-stroke-enabled);border-radius:30px;width:fit-content;background-color:var(--rds-color-chips-bg-enabled);color:var(--rds-color-informative);-webkit-user-select:none;user-select:none}.rds-chips__chip:hover{cursor:default}.rds-chips__chip:active:not([disabled]){box-shadow:none}.rds-chips__chip.cdk-focused.cdk-keyboard-focused:not([aria-disabled=true],[disabled]):not(:has(.rds-chip-close-button:focus-visible)){outline:var(--rds-color-stroke-active-focus) solid 2px;outline-offset:-1px}.rds-chips__chip .rds-chip__avatar{border-radius:100vmax}.rds-chips__chip .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]){box-shadow:0 0 1px #00000052,0 2px 4px #0000001c;cursor:pointer;border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background-color:var(--rds-color-chips-bg-enabled)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip .rds-chip-close-button>.rds-icon.rds-chip-close-icon{width:16px;height:16px}.rds-chips__chip .rds-avatar:hover .rds-avatar-overlay{display:none}.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip .rds-chip-action{display:inline-flex;align-items:center;outline:none}.rds-chips__chip.rds-chips--type-blue{border-color:var(--rds-color-chips-1-stroke-enabled);color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-stroke-hover);color:var(--rds-color-informative);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-informative)}.rds-chips__chip.rds-chips--type-blue.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-blue:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-1-bg-pressed);color:var(--rds-color-chips-1-text-pressed);background:var(--rds-color-chips-1-bg-pressed)}.rds-chips__chip.rds-chips--type-neutral{border-color:var(--rds-color-chips-2-stroke-enabled);color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-stroke-hover);color:var(--rds-color-neutral);background:var(--rds-color-chips-bg-enabled)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip__leading-icon{color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral:hover:not([aria-disabled=true],[disabled]) .rds-chip-close-button:not([disabled]){color:var(--rds-color-neutral)}.rds-chips__chip.rds-chips--type-neutral.rds-chips__chip--selected:not([aria-disabled=true],[disabled]),.rds-chips__chip.rds-chips--type-neutral:active:not([aria-disabled=true],[disabled]){border-color:var(--rds-color-chips-2-bg-pressed);color:var(--rds-color-chips-2-text-pressed);background:var(--rds-color-chips-2-bg-pressed)}.rds-chips__chip .rds-chips--size-s{font-size:14px;font-weight:400;line-height:20px;text-transform:none;letter-spacing:.3px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:28px;padding:0 11px}.rds-chips__chip .rds-chips--size-s .rds-chip__leading-icon{margin:0 4px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar{margin:0 4px 0 -10px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-s .rds-avatar .rds-avatar__container .rds-avatar-image{width:24px;height:24px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button{margin-inline:4px -4px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-s .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-m{font-size:16px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:36px;padding:0 15px}.rds-chips__chip .rds-chips--size-m .rds-chip__leading-icon{margin:0 8px 0 -4px;width:18px;height:18px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar{margin:0 8px 0 -12px;width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-m .rds-avatar .rds-avatar__container .rds-avatar-image{width:28px;height:28px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button{margin-inline:8px -4px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-m .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip .rds-chips--size-l{font-size:18px;font-weight:400;line-height:24px;text-transform:none;letter-spacing:.2px;font-family:roche-sans;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;min-height:48px;padding:0 23px}.rds-chips__chip .rds-chips--size-l .rds-chip__leading-icon{margin:0 8px 0 -8px;width:24px;height:24px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar{margin:0 8px 0 -20px;width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip__avatar .rds-avatar__container,.rds-chips__chip .rds-chips--size-l .rds-avatar .rds-avatar__container .rds-avatar-image{width:40px;height:40px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button{margin-inline:8px -8px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:after,.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{border-radius:100vmax;width:20px;height:20px;inset:-1px 0 0 -1px}.rds-chips__chip .rds-chips--size-l .rds-chip-close-button:before{width:20px;height:20px}.rds-chips__chip[disabled],.rds-chips__chip[aria-disabled=true]{border-color:var(--rds-color-stroke-enabled);background-color:var(--rds-color-bg-disabled);color:var(--rds-color-disabled)}.rds-chips__chip[disabled] .rds-chip__avatar,.rds-chips__chip[aria-disabled=true] .rds-chip__avatar{opacity:.3}.rds-chips__chip[disabled] .rds-chip__leading-icon,.rds-chips__chip[aria-disabled=true] .rds-chip__leading-icon{color:var(--rds-color-disabled)}.rds-chips{display:flex;flex-wrap:wrap}.rds-chips.rds-chips--size-s{gap:8px}.rds-chips.rds-chips--size-m,.rds-chips.rds-chips--size-l{gap:12px}.rds-chips-wrapper{display:flex;align-items:center;justify-content:center}\n"] }]
        }], ctorParameters: () => [], propDecorators: { selectableChips: [{
                type: ContentChildren,
                args: [RdsChipSelectableComponent, { descendants: true }]
            }], tabIndex: [{
                type: Input
            }], tabindex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], valueChange: [{
                type: Output
            }], avatars: [{
                type: ContentChildren,
                args: [RdsAvatarComponent, { descendants: true }]
            }], orientation: [{
                type: HostBinding,
                args: ['attr.aria-orientation']
            }], hostClasses: [{
                type: HostBinding,
                args: ['class']
            }], multiple: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.aria-multiselectable']
            }], selectable: [{
                type: Input
            }], size: [{
                type: Input
            }], compareFn: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }], focus: [{
                type: HostListener,
                args: ['focus']
            }], blur: [{
                type: HostListener,
                args: ['blur']
            }], onKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,