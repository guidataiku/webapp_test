@use 'sass:map';
@use '../variables/colors';

@function rds-color-is-primitive-token($token) {
  $is-primitive-name: false;

  @each $color-group, $color-map in colors.$rds-color-primitives-palette {
    @if $is-primitive-name == false and map.has-key($color-map, #{$token}) {
      $is-primitive-name: true;
    }
  }

  @return $is-primitive-name;
}

@function rds-color-is-theme-token($token) {
  $is-theme-name: false;

  @each $color-group,
    $color-map
      in map.get(colors.$rds-color-palettes, colors.$rds-color-palette-default)
  {
    @if $is-theme-name == false and map.has-key($color-map, #{$token}) {
      $is-primitive-name: true;
    }
  }

  @return $is-theme-name;
}

@function rds-color($name, $hex-color: false, $show-warning: true) {
  $result: null;

  @if $hex-color == true and rds-color-is-primitive-token($name) == false {
    @error 'Hex color value is available only for color primitives. Provided "#{$name}" is not a primitive color token';
  }

  @each $color-group,
    $color-map
      in map.merge(
        colors.$rds-color-primitives-palette,
        map.get(colors.$rds-color-palettes, colors.$rds-color-palette-default)
      )
  {
    @each $color-name, $color-value in $color-map {
      @if #{$color-name} == #{$name} {
        @if $hex-color {
          @return $color-value;
        } @else {
          @return var(#{colors.$rds-color-prefix}#{$color-name});
        }
      }
    }
  }

  @if $result == null {
    @error '"#{$name}" color name is not valid.';
  }
}
