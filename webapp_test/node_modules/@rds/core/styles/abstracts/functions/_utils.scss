@use 'sass:list';
@use 'sass:map';
@use 'sass:math';

@function divide($dividend, $divisor, $precision: 10) {
  $sign: if(
    $dividend > 0 and $divisor > 0 or $dividend < 0 and $divisor < 0,
    1,
    -1
  );
  $dividend: math.abs($dividend);
  $divisor: math.abs($divisor);
  @if $dividend == 0 {
    @return 0;
  }
  @if $divisor == 0 {
    @error "Cannot divide by 0";
  }
  $remainder: $dividend;
  $result: 0;
  $factor: 10;
  @while ($remainder > 0 and $precision >= 0) {
    $quotient: 0;
    @while ($remainder >= $divisor) {
      $remainder: $remainder - $divisor;
      $quotient: $quotient + 1;
    }
    $result: $result * 10 + $quotient;
    $factor: $factor * 0.1;
    $remainder: $remainder * 10;
    $precision: $precision - 1;
    @if ($precision < 0 and $remainder >= $divisor * 5) {
      $result: $result + 1;
    }
  }
  $result: $result * $factor * $sign;
  $dividend-unit: math.unit($dividend);
  $divisor-unit: math.unit($divisor);
  $unit-map: (
    'px': 1px,
    'rem': 1rem,
    'em': 1em,
    '%': 1%,
  );
  @if (
    $dividend-unit != $divisor-unit and map.has-key($unit-map, $dividend-unit)
  ) {
    $result: $result * map.get($unit-map, $dividend-unit);
  }
  @return $result;
}

@function list-remove($list, $value) {
  $newList: ();
  $separator: list.separator($list);
  @for $i from 1 through list.length($list) {
    @if $i != list.index($list, $value) {
      $newList: list.append($newList, list.nth($list, $i), $separator);
    }
  }
  @return $newList;
}

@function get-minimal-index($breakpoints, $breakpointList) {
  $minimalIndex: 999;

  @for $i from 1 through list.length($breakpointList) {
    $mapIndex: 0;
    $newIndex: 999;
    @each $brName, $brValue in $breakpoints {
      $mapIndex: $mapIndex + 1;
      @if $brName == list.nth($breakpointList, $i) {
        $newIndex: $mapIndex;
      }
    }

    @if $newIndex < $minimalIndex {
      $minimalIndex: $newIndex;
    }
  }

  @return $minimalIndex;
}

@function negativify-map($map) {
  $result: ();
  @each $key, $value in $map {
    @if $key != 0 {
      $result: map.merge($result, ('n' + $key: (-$value)));
    }
  }
  @return $result;
}

@function infix($breakpoint-name) {
  @return if($breakpoint-name != null, '-' + $breakpoint-name, '');
}

@function get-next-map-value($map, $value) {
  @if ($map == null) {
    @error "Provided map cannot be null";
  } @else if (list.length($map) == 0) {
    @error "Provided map cannot be empty";
  } @else if ($value == null) {
    @error "Provided value cannot be null";
  }

  $valueIndex: list.index(map.keys($map), $value);

  @if ($valueIndex == null) {
    @error "Provided value is not an element of map";
  } @else if ($valueIndex + 1 > list.length($map)) {
    @return null;
  } @else {
    @return map.get($map, list.nth(map.keys($map), $valueIndex + 1));
  }
}
